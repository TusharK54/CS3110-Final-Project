(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_ba_get_1=runtime.caml_ba_get_1,
     caml_ba_set_1=runtime.caml_ba_set_1,
     caml_bytes_unsafe_set=runtime.caml_bytes_unsafe_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_int_compare=runtime.caml_int_compare,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_log10_float=runtime.caml_log10_float,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_new_string=runtime.caml_new_string,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_unsafe_get=runtime.caml_string_unsafe_get,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_update_dummy=runtime.caml_update_dummy,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    function caml_call17
     (f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)
     {return f.length == 17
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)
              :runtime.caml_call_gen
                (f,
                 [a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_sexp_opaque$0=caml_new_string("sexp_opaque"),
     cst_core_kernel=caml_new_string("core_kernel"),
     cst_src_import_ml=caml_new_string("src/import.ml"),
     cst=caml_new_string(""),
     cst_core_kernel$0=caml_new_string("core_kernel"),
     cst_a=caml_new_string("a"),
     cst_src_import_ml_75_24=caml_new_string("src/import.ml:75:24"),
     cst_a$0=caml_new_string("a"),
     cst_sexp_opaque=caml_new_string("sexp_opaque"),
     cst_src_import_ml_75_2=caml_new_string("src/import.ml:75:2"),
     name=caml_new_string("src/import.ml.sexp_opaque"),
     cst_TESTING_FRAMEWORK=caml_new_string("TESTING_FRAMEWORK"),
     cst_core_kernel$1=caml_new_string("core_kernel"),
     cst_Sexpable_Of_stringable_t_of_sexp_expected_an_atom_but_got_a_list=
      caml_new_string
       ("Sexpable.Of_stringable.t_of_sexp expected an atom, but got a list"),
     cst_core_kernel$2=caml_new_string("core_kernel"),
     cst_src_sexpable_ml=caml_new_string("src/sexpable.ml"),
     cst$0=caml_new_string(""),
     cst_core_kernel$3=caml_new_string("core_kernel"),
     cst_core_kernel$4=caml_new_string("core_kernel"),
     cst_t$4=caml_new_string("t"),
     cst_src_binable0_ml_149_2=caml_new_string("src/binable0.ml:149:2"),
     cst_t$5=caml_new_string("t"),
     cst_t$2=caml_new_string("t"),
     cst_src_binable0_ml_81_10=caml_new_string("src/binable0.ml:81:10"),
     cst_t$3=caml_new_string("t"),
     cst_Of_binable=caml_new_string("Of_binable"),
     cst_src_binable0_ml_Stable_Of_sexpable_V1_t=
      caml_new_string("src/binable0.ml.Stable.Of_sexpable.V1.t"),
     cst_t=caml_new_string("t"),
     cst_List=caml_new_string("List"),
     cst_Atom=caml_new_string("Atom"),
     cst_t$0=caml_new_string("t"),
     cst_src_binable0_ml_65_10=caml_new_string("src/binable0.ml:65:10"),
     cst_t$1=caml_new_string("t"),
     cst_core_kernel$5=caml_new_string("core_kernel"),
     cst_src_binable0_ml=caml_new_string("src/binable0.ml"),
     cst$1=caml_new_string(""),
     cst_core_kernel$6=caml_new_string("core_kernel"),
     cst_core_kernel$7=caml_new_string("core_kernel"),
     cst_core_kernel$8=caml_new_string("core_kernel"),
     cst_src_printf_ml=caml_new_string("src/printf.ml"),
     cst$2=caml_new_string(""),
     cst_core_kernel$9=caml_new_string("core_kernel"),
     cst_core_kernel$10=caml_new_string("core_kernel"),
     cst_perms$0=caml_new_string("perms"),
     cst_t$27=caml_new_string("t"),
     cst_t$24=caml_new_string("t"),
     cst_src_perms_ml_108_2=caml_new_string("src/perms.ml:108:2"),
     cst_t$25=caml_new_string("t"),
     cst_t$23=caml_new_string("t"),
     cst_a$3=caml_new_string("a"),
     cst_src_perms_ml_84_20=caml_new_string("src/perms.ml:84:20"),
     cst_a$4=caml_new_string("a"),
     cst_t$22=caml_new_string("t"),
     cst_src_perms_ml_84_8=caml_new_string("src/perms.ml:84:8"),
     tp_loc$9=caml_new_string("src/perms.ml.Types.Upper_bound.t"),
     cst_Who_can_write$6=caml_new_string("Who_can_write"),
     cst_Who_can_write$7=caml_new_string("Who_can_write"),
     err$3=[2,caml_new_string("src/perms.ml.Types.Upper_bound.t")],
     cst_t$21=caml_new_string("t"),
     err$2=[2,caml_new_string("src/perms.ml.Types.Read_write.t")],
     cst_Who_can_write$3=caml_new_string("Who_can_write"),
     cst_Who_can_write$4=caml_new_string("Who_can_write"),
     err$1=[2,caml_new_string("src/perms.ml.Types.Immutable.t")],
     cst_Who_can_write$0=caml_new_string("Who_can_write"),
     cst_Who_can_write$1=caml_new_string("Who_can_write"),
     err$0=[2,caml_new_string("src/perms.ml.Types.Write.t")],
     cst_Read$0=caml_new_string("Read"),
     cst_Read$1=caml_new_string("Read"),
     err=[2,caml_new_string("src/perms.ml.Types.Read.t")],
     cst_hash_called_on_the_type_t_which_is_abstract_in_an_implementation$0=
      caml_new_string
       ("hash called on the type t, which is abstract in an implementation."),
     cst_t$11=caml_new_string("t"),
     cst_src_perms_ml_Types_Me_t$1=caml_new_string("src/perms.ml.Types.Me.t"),
     cst_src_perms_ml_Types_Me_t$0=caml_new_string("src/perms.ml.Types.Me.t"),
     cst_src_perms_ml_Types_Me_t=caml_new_string("src/perms.ml.Types.Me.t"),
     cst_hash_called_on_the_type_t_which_is_abstract_in_an_implementation=
      caml_new_string
       ("hash called on the type t, which is abstract in an implementation."),
     cst_t$8=caml_new_string("t"),
     cst_src_perms_ml_Types_Nobody_t$1=
      caml_new_string("src/perms.ml.Types.Nobody.t"),
     cst_src_perms_ml_Types_Nobody_t$0=
      caml_new_string("src/perms.ml.Types.Nobody.t"),
     cst_src_perms_ml_Types_Nobody_t=
      caml_new_string("src/perms.ml.Types.Nobody.t"),
     cst_core_kernel$11=caml_new_string("core_kernel"),
     cst_src_perms_ml=caml_new_string("src/perms.ml"),
     cst$3=caml_new_string(""),
     cst_core_kernel$12=caml_new_string("core_kernel"),
     cst_t$6=caml_new_string("t"),
     cst_src_perms_ml_9_4=caml_new_string("src/perms.ml:9:4"),
     cst_t$7=caml_new_string("t"),
     tp_loc=caml_new_string("src/perms.ml.Types.Nobody.t"),
     name$0=caml_new_string("Nobody"),
     cst_t$9=caml_new_string("t"),
     cst_src_perms_ml_15_4=caml_new_string("src/perms.ml:15:4"),
     cst_t$10=caml_new_string("t"),
     tp_loc$0=caml_new_string("src/perms.ml.Types.Me.t"),
     name$1=caml_new_string("Me"),
     cst_Read=caml_new_string("Read"),
     cst_src_perms_ml_21_13=caml_new_string("src/perms.ml:21:13"),
     cst_t$12=caml_new_string("t"),
     cst_src_perms_ml_21_4=caml_new_string("src/perms.ml:21:4"),
     cst_t$13=caml_new_string("t"),
     tp_loc$1=caml_new_string("src/perms.ml.Types.Read.t"),
     tp_loc$2=caml_new_string("src/perms.ml.Types.Read.t"),
     name$2=caml_new_string("Read"),
     cst_Who_can_write=caml_new_string("Who_can_write"),
     cst_src_perms_ml_27_13=caml_new_string("src/perms.ml:27:13"),
     cst_t$14=caml_new_string("t"),
     cst_src_perms_ml_27_4=caml_new_string("src/perms.ml:27:4"),
     cst_t$15=caml_new_string("t"),
     tp_loc$3=caml_new_string("src/perms.ml.Types.Write.t"),
     tp_loc$4=caml_new_string("src/perms.ml.Types.Write.t"),
     name$3=caml_new_string("Write"),
     cst_Who_can_write$2=caml_new_string("Who_can_write"),
     cst_src_perms_ml_34_8=caml_new_string("src/perms.ml:34:8"),
     cst_src_perms_ml_34_6=caml_new_string("src/perms.ml:34:6"),
     cst_t$16=caml_new_string("t"),
     cst_src_perms_ml_33_4=caml_new_string("src/perms.ml:33:4"),
     cst_t$17=caml_new_string("t"),
     tp_loc$5=caml_new_string("src/perms.ml.Types.Immutable.t"),
     tp_loc$6=caml_new_string("src/perms.ml.Types.Immutable.t"),
     name$4=caml_new_string("Immutable"),
     cst_src_perms_ml_45_8=caml_new_string("src/perms.ml:45:8"),
     cst_src_perms_ml_44_8=caml_new_string("src/perms.ml:44:8"),
     cst_src_perms_ml_44_6=caml_new_string("src/perms.ml:44:6"),
     cst_t$18=caml_new_string("t"),
     cst_src_perms_ml_43_4=caml_new_string("src/perms.ml:43:4"),
     cst_t$19=caml_new_string("t"),
     tp_loc$7=caml_new_string("src/perms.ml.Types.Read_write.t"),
     name$5=caml_new_string("Read_write"),
     cst_a$1=caml_new_string("a"),
     cst_src_perms_ml_55_26=caml_new_string("src/perms.ml:55:26"),
     cst_Who_can_write$5=caml_new_string("Who_can_write"),
     cst_src_perms_ml_54_8=caml_new_string("src/perms.ml:54:8"),
     cst_src_perms_ml_54_6=caml_new_string("src/perms.ml:54:6"),
     cst_a$2=caml_new_string("a"),
     cst_t$20=caml_new_string("t"),
     cst_src_perms_ml_53_4=caml_new_string("src/perms.ml:53:4"),
     tp_loc$8=caml_new_string("src/perms.ml.Types.Upper_bound.t"),
     name$6=caml_new_string("Upper_bound"),
     cst_nobody=caml_new_string("nobody"),
     cst_src_perms_ml_122_4=caml_new_string("src/perms.ml:122:4"),
     cst_nobody$0=caml_new_string("nobody"),
     cst_me=caml_new_string("me"),
     cst_src_perms_ml_123_4=caml_new_string("src/perms.ml:123:4"),
     cst_me$0=caml_new_string("me"),
     cst_a$5=caml_new_string("a"),
     cst_src_perms_ml_128_18=caml_new_string("src/perms.ml:128:18"),
     cst_a$6=caml_new_string("a"),
     cst_t$26=caml_new_string("t"),
     cst_src_perms_ml_128_6=caml_new_string("src/perms.ml:128:6"),
     cst_read=caml_new_string("read"),
     cst_src_perms_ml_135_4=caml_new_string("src/perms.ml:135:4"),
     cst_read$0=caml_new_string("read"),
     cst_immutable=caml_new_string("immutable"),
     cst_src_perms_ml_137_4=caml_new_string("src/perms.ml:137:4"),
     cst_immutable$0=caml_new_string("immutable"),
     cst_read_write=caml_new_string("read_write"),
     cst_src_perms_ml_138_4=caml_new_string("src/perms.ml:138:4"),
     cst_read_write$0=caml_new_string("read_write"),
     cst_a$7=caml_new_string("a"),
     cst_src_perms_ml_139_20=caml_new_string("src/perms.ml:139:20"),
     cst_a$8=caml_new_string("a"),
     cst_perms=caml_new_string("perms"),
     cst_src_perms_ml_139_4=caml_new_string("src/perms.ml:139:4"),
     cst_core_kernel$13=caml_new_string("core_kernel"),
     cst_core_kernel$14=caml_new_string("core_kernel"),
     cst_src_binary_searchable_intf_ml=
      caml_new_string("src/binary_searchable_intf.ml"),
     cst$4=caml_new_string(""),
     cst_core_kernel$15=caml_new_string("core_kernel"),
     cst_core_kernel$16=caml_new_string("core_kernel"),
     cst_core_kernel$17=caml_new_string("core_kernel"),
     cst_src_binary_searchable_ml=caml_new_string("src/binary_searchable.ml"),
     cst$5=caml_new_string(""),
     cst_core_kernel$18=caml_new_string("core_kernel"),
     cst_core_kernel$19=caml_new_string("core_kernel"),
     cst_core_kernel$20=caml_new_string("core_kernel"),
     cst_src_blit_intf_ml=caml_new_string("src/blit_intf.ml"),
     cst$6=caml_new_string(""),
     cst_core_kernel$21=caml_new_string("core_kernel"),
     cst_core_kernel$22=caml_new_string("core_kernel"),
     cst_core_kernel$23=caml_new_string("core_kernel"),
     cst_src_blit_ml=caml_new_string("src/blit.ml"),
     cst$7=caml_new_string(""),
     cst_core_kernel$24=caml_new_string("core_kernel"),
     cst_core_kernel$25=caml_new_string("core_kernel"),
     cst_core_kernel$26=caml_new_string("core_kernel"),
     cst_src_comparator_ml=caml_new_string("src/comparator.ml"),
     cst$8=caml_new_string(""),
     cst_core_kernel$27=caml_new_string("core_kernel"),
     cst_core_kernel$28=caml_new_string("core_kernel"),
     cst_Error$0=caml_new_string("Error"),
     cst_Ok$0=caml_new_string("Ok"),
     cst_error=caml_new_string("error"),
     cst_ok=caml_new_string("ok"),
     cst_Error$1=caml_new_string("Error"),
     cst_Ok$1=caml_new_string("Ok"),
     cst_error$0=caml_new_string("error"),
     cst_ok$0=caml_new_string("ok"),
     cst_src_result_ml_Stable_V1_t=
      caml_new_string("src/result.ml.Stable.V1.t"),
     cst_t$29=caml_new_string("t"),
     cst_core_kernel$29=caml_new_string("core_kernel"),
     cst_src_result_ml=caml_new_string("src/result.ml"),
     cst$9=caml_new_string(""),
     cst_core_kernel$30=caml_new_string("core_kernel"),
     cst_b=caml_new_string("b"),
     cst_src_result_ml_8_17=caml_new_string("src/result.ml:8:17"),
     cst_Error=caml_new_string("Error"),
     cst_a$9=caml_new_string("a"),
     cst_src_result_ml_7_14=caml_new_string("src/result.ml:7:14"),
     cst_Ok=caml_new_string("Ok"),
     cst_b$0=caml_new_string("b"),
     cst_a$10=caml_new_string("a"),
     cst_t$28=caml_new_string("t"),
     cst_src_result_ml_6_4=caml_new_string("src/result.ml:6:4"),
     tp_loc$10=caml_new_string("src/result.ml.Stable.V1.t"),
     cst_t$30=caml_new_string("t"),
     cst_src_result_ml_19_4=caml_new_string("src/result.ml:19:4"),
     cst_t$31=caml_new_string("t"),
     tests=
      [0,
       [0,
        [0,caml_new_string("foo")],
        caml_new_string("(Ok foo)"),
        caml_new_string("\0\x03foo")],
       [0,
        [0,[1,7],caml_new_string("(Error 7)"),caml_new_string("\x01\x07")],
        0]],
     cst_core_kernel$31=caml_new_string("core_kernel"),
     cst_core_kernel$32=caml_new_string("core_kernel"),
     cst_src_stable_module_types_ml=
      caml_new_string("src/stable_module_types.ml"),
     cst$10=caml_new_string(""),
     cst_core_kernel$33=caml_new_string("core_kernel"),
     cst_core_kernel$34=caml_new_string("core_kernel"),
     cst_core_kernel$35=caml_new_string("core_kernel"),
     cst_src_stable_unit_test_intf_ml=
      caml_new_string("src/stable_unit_test_intf.ml"),
     cst$11=caml_new_string(""),
     cst_core_kernel$36=caml_new_string("core_kernel"),
     cst_core_kernel$37=caml_new_string("core_kernel"),
     cst_core_kernel$38=caml_new_string("core_kernel"),
     cst_src_container_intf_ml=caml_new_string("src/container_intf.ml"),
     cst$12=caml_new_string(""),
     cst_core_kernel$39=caml_new_string("core_kernel"),
     cst_core_kernel$40=caml_new_string("core_kernel"),
     cst_core_kernel$41=caml_new_string("core_kernel"),
     cst_src_container_ml=caml_new_string("src/container.ml"),
     cst$13=caml_new_string(""),
     cst_core_kernel$42=caml_new_string("core_kernel"),
     cst_core_kernel$43=caml_new_string("core_kernel"),
     cst_core_kernel$44=caml_new_string("core_kernel"),
     cst_src_deprecate_pipe_bang_ml=
      caml_new_string("src/deprecate_pipe_bang.ml"),
     cst$14=caml_new_string(""),
     cst_core_kernel$45=caml_new_string("core_kernel"),
     cst_core_kernel$46=caml_new_string("core_kernel"),
     cst_core_kernel$47=caml_new_string("core_kernel"),
     cst_src_fn_ml=caml_new_string("src/fn.ml"),
     cst$15=caml_new_string(""),
     cst_core_kernel$48=caml_new_string("core_kernel"),
     cst_core_kernel$49=caml_new_string("core_kernel"),
     cst_core_kernel$50=caml_new_string("core_kernel"),
     cst_src_ordered_collection_common_ml=
      caml_new_string("src/ordered_collection_common.ml"),
     cst$16=caml_new_string(""),
     cst_core_kernel$51=caml_new_string("core_kernel"),
     cst_core_kernel$52=caml_new_string("core_kernel"),
     cst_src_sequence_ml_Merge_with_duplicates_element_t=
      caml_new_string("src/sequence.ml.Merge_with_duplicates_element.t"),
     cst_t$37=caml_new_string("t"),
     cst_src_sequence_ml_Step_t=caml_new_string("src/sequence.ml.Step.t"),
     cst_t$35=caml_new_string("t"),
     cst_t$33=caml_new_string("t"),
     cst_core_kernel$53=caml_new_string("core_kernel"),
     cst_src_sequence_ml=caml_new_string("src/sequence.ml"),
     cst$17=caml_new_string(""),
     cst_core_kernel$54=caml_new_string("core_kernel"),
     cst_a$11=caml_new_string("a"),
     cst_src_sequence_ml_6_18=caml_new_string("src/sequence.ml:6:18"),
     cst_a$12=caml_new_string("a"),
     cst_t$32=caml_new_string("t"),
     cst_src_sequence_ml_6_6=caml_new_string("src/sequence.ml:6:6"),
     cst_s=caml_new_string("s"),
     cst_src_sequence_ml_21_20=caml_new_string("src/sequence.ml:21:20"),
     cst_a$13=caml_new_string("a"),
     cst_src_sequence_ml_21_15=caml_new_string("src/sequence.ml:21:15"),
     cst_Yield=caml_new_string("Yield"),
     cst_s$0=caml_new_string("s"),
     cst_src_sequence_ml_20_14=caml_new_string("src/sequence.ml:20:14"),
     cst_Skip=caml_new_string("Skip"),
     cst_s$1=caml_new_string("s"),
     cst_a$14=caml_new_string("a"),
     cst_t$34=caml_new_string("t"),
     cst_src_sequence_ml_18_2=caml_new_string("src/sequence.ml:18:2"),
     cst_b$1=caml_new_string("b"),
     cst_src_sequence_ml_31_19=caml_new_string("src/sequence.ml:31:19"),
     cst_a$15=caml_new_string("a"),
     cst_src_sequence_ml_31_14=caml_new_string("src/sequence.ml:31:14"),
     cst_Both=caml_new_string("Both"),
     cst_b$2=caml_new_string("b"),
     cst_src_sequence_ml_30_15=caml_new_string("src/sequence.ml:30:15"),
     cst_Right=caml_new_string("Right"),
     cst_a$16=caml_new_string("a"),
     cst_src_sequence_ml_29_14=caml_new_string("src/sequence.ml:29:14"),
     cst_Left=caml_new_string("Left"),
     cst_b$3=caml_new_string("b"),
     cst_a$17=caml_new_string("a"),
     cst_t$36=caml_new_string("t"),
     cst_src_sequence_ml_28_2=caml_new_string("src/sequence.ml:28:2"),
     cst_core_kernel$55=caml_new_string("core_kernel"),
     cst_t$49=caml_new_string("t"),
     cst_t$47=caml_new_string("t"),
     cst_t$45=caml_new_string("t"),
     cst_t$39=caml_new_string("t"),
     cst_core_kernel$56=caml_new_string("core_kernel"),
     cst_src_array_ml=caml_new_string("src/array.ml"),
     cst$18=caml_new_string(""),
     cst_core_kernel$57=caml_new_string("core_kernel"),
     cst_a$18=caml_new_string("a"),
     cst_src_array_ml_12_12=caml_new_string("src/array.ml:12:12"),
     cst_a$19=caml_new_string("a"),
     cst_t$38=caml_new_string("t"),
     cst_src_array_ml_12_0=caml_new_string("src/array.ml:12:0"),
     name$7=caml_new_string("src/array.ml.t"),
     cst_t$40=caml_new_string("t_"),
     cst_src_array_ml_40_4=caml_new_string("src/array.ml:40:4"),
     cst_t$41=caml_new_string("t_"),
     cst_t$42=caml_new_string("t_"),
     cst_src_array_ml_75_4=caml_new_string("src/array.ml:75:4"),
     cst_t$43=caml_new_string("t_"),
     cst_a$20=caml_new_string("a"),
     cst_src_array_ml_333_25=caml_new_string("src/array.ml:333:25"),
     cst_perms$1=caml_new_string("perms"),
     cst_a$21=caml_new_string("a"),
     cst_t$44=caml_new_string("t"),
     cst_src_array_ml_333_2=caml_new_string("src/array.ml:333:2"),
     name$8=caml_new_string("src/array.ml.Permissioned.t"),
     cst_perms$2=caml_new_string("perms"),
     cst_t$46=caml_new_string("t"),
     cst_src_array_ml_338_4=caml_new_string("src/array.ml:338:4"),
     cst_perms$3=caml_new_string("perms"),
     cst_t$48=caml_new_string("t"),
     cst_src_array_ml_344_4=caml_new_string("src/array.ml:344:4"),
     cst_t$50=caml_new_string("t"),
     cst_src_array_ml_453_2=caml_new_string("src/array.ml:453:2"),
     cst_t$51=caml_new_string("t"),
     cst_t$52=caml_new_string("t"),
     cst_src_array_ml_459_2=caml_new_string("src/array.ml:459:2"),
     cst_t$53=caml_new_string("t"),
     cst_core_kernel$58=caml_new_string("core_kernel"),
     cst_First$2=caml_new_string("First"),
     cst_Second$2=caml_new_string("Second"),
     cst_First$0=caml_new_string("First"),
     cst_Second$0=caml_new_string("Second"),
     cst_first=caml_new_string("first"),
     cst_second=caml_new_string("second"),
     cst_First$1=caml_new_string("First"),
     cst_Second$1=caml_new_string("Second"),
     cst_first$0=caml_new_string("first"),
     cst_second$0=caml_new_string("second"),
     cst_src_either_ml_Stable_V1_t=
      caml_new_string("src/either.ml.Stable.V1.t"),
     cst_t$55=caml_new_string("t"),
     cst_core_kernel$59=caml_new_string("core_kernel"),
     cst_src_either_ml=caml_new_string("src/either.ml"),
     cst$19=caml_new_string(""),
     cst_core_kernel$60=caml_new_string("core_kernel"),
     cst_s$2=caml_new_string("s"),
     cst_src_either_ml_5_18=caml_new_string("src/either.ml:5:18"),
     cst_Second=caml_new_string("Second"),
     cst_f=caml_new_string("f"),
     cst_src_either_ml_4_17=caml_new_string("src/either.ml:4:17"),
     cst_First=caml_new_string("First"),
     cst_s$3=caml_new_string("s"),
     cst_f$0=caml_new_string("f"),
     cst_t$54=caml_new_string("t"),
     cst_src_either_ml_3_4=caml_new_string("src/either.ml:3:4"),
     tp_loc$11=caml_new_string("src/either.ml.Stable.V1.t"),
     name$9=caml_new_string("src/either.ml.Stable.V1.t"),
     cst_core_kernel$61=caml_new_string("core_kernel"),
     cst_core_kernel$62=caml_new_string("core_kernel"),
     cst_src_info_intf_ml=caml_new_string("src/info_intf.ml"),
     cst$20=caml_new_string(""),
     cst_core_kernel$63=caml_new_string("core_kernel"),
     cst_core_kernel$64=caml_new_string("core_kernel"),
     cst_pos_bol$0=caml_new_string("pos_bol"),
     cst_pos_cnum$0=caml_new_string("pos_cnum"),
     cst_pos_fname$0=caml_new_string("pos_fname"),
     cst_pos_lnum$0=caml_new_string("pos_lnum"),
     cst_pos_cnum$1=caml_new_string("pos_cnum"),
     cst_pos_bol$1=caml_new_string("pos_bol"),
     cst_pos_lnum$1=caml_new_string("pos_lnum"),
     cst_pos_fname$1=caml_new_string("pos_fname"),
     cst_src_source_code_position0_ml_Stable_V1_t=
      caml_new_string("src/source_code_position0.ml.Stable.V1.t"),
     cst_core_kernel$65=caml_new_string("core_kernel"),
     cst_src_source_code_position0_ml=
      caml_new_string("src/source_code_position0.ml"),
     cst$21=caml_new_string(""),
     cst_core_kernel$66=caml_new_string("core_kernel"),
     cst_pos_cnum=caml_new_string("pos_cnum"),
     cst_pos_bol=caml_new_string("pos_bol"),
     cst_pos_lnum=caml_new_string("pos_lnum"),
     cst_pos_fname=caml_new_string("pos_fname"),
     cst_t$56=caml_new_string("t"),
     cst_src_source_code_position0_ml_7_4=
      caml_new_string("src/source_code_position0.ml:7:4"),
     cst_t$57=caml_new_string("t"),
     tp_loc$12=caml_new_string("src/source_code_position0.ml.Stable.V1.t"),
     cst_core_kernel$67=caml_new_string("core_kernel"),
     cst_src_info_ml_Extend_Internal_repr_Stable_V2_t=
      caml_new_string("src/info.ml.Extend.Internal_repr.Stable.V2.t"),
     cst_t$61=caml_new_string("t"),
     cst_src_info_ml_59_10=caml_new_string("src/info.ml:59:10"),
     cst_t$62=caml_new_string("t"),
     cst_t$63=caml_new_string("t"),
     cst_With_backtrace=caml_new_string("With_backtrace"),
     cst_t$64=caml_new_string("t"),
     cst_Of_list=caml_new_string("Of_list"),
     cst_t$65=caml_new_string("t"),
     cst_Tag_arg=caml_new_string("Tag_arg"),
     cst_t$66=caml_new_string("t"),
     cst_Tag_t=caml_new_string("Tag_t"),
     cst_Tag_sexp=caml_new_string("Tag_sexp"),
     cst_Sexp=caml_new_string("Sexp"),
     cst_Exn=caml_new_string("Exn"),
     cst_String=caml_new_string("String"),
     cst_Could_not_construct=caml_new_string("Could_not_construct"),
     cst_t$67=caml_new_string("t"),
     cst_src_info_ml_69_8=caml_new_string("src/info.ml:69:8"),
     cst_t$68=caml_new_string("t"),
     cst_t$69=caml_new_string("t"),
     cst_src_info_ml_138_2=caml_new_string("src/info.ml:138:2"),
     cst_t$70=caml_new_string("t"),
     cst_src_info_ml_Sexp_t=caml_new_string("src/info.ml.Sexp.t"),
     cst_core_kernel$68=caml_new_string("core_kernel"),
     cst_src_info_ml=caml_new_string("src/info.ml"),
     cst$22=caml_new_string(""),
     cst_core_kernel$69=caml_new_string("core_kernel"),
     cst_t$58=caml_new_string("t"),
     cst_List$0=caml_new_string("List"),
     cst_Atom$0=caml_new_string("Atom"),
     cst_t$59=caml_new_string("t"),
     cst_src_info_ml_18_4=caml_new_string("src/info.ml:18:4"),
     cst_t$60=caml_new_string("t"),
     cst_core_kernel$70=caml_new_string("core_kernel"),
     cst_core_kernel$71=caml_new_string("core_kernel"),
     cst_src_error_ml=caml_new_string("src/error.ml"),
     cst$23=caml_new_string(""),
     cst_core_kernel$72=caml_new_string("core_kernel"),
     cst_core_kernel$73=caml_new_string("core_kernel"),
     cst_core_kernel$74=caml_new_string("core_kernel"),
     cst_src_t_ml=caml_new_string("src/t.ml"),
     cst$24=caml_new_string(""),
     cst_core_kernel$75=caml_new_string("core_kernel"),
     cst_core_kernel$76=caml_new_string("core_kernel"),
     cst_core_kernel$77=caml_new_string("core_kernel"),
     cst_src_hashtbl_intf_ml=caml_new_string("src/hashtbl_intf.ml"),
     cst$25=caml_new_string(""),
     cst_core_kernel$78=caml_new_string("core_kernel"),
     cst_core_kernel$79=caml_new_string("core_kernel"),
     cst_core_kernel$80=caml_new_string("core_kernel"),
     cst_src_hash_set_intf_ml=caml_new_string("src/hash_set_intf.ml"),
     cst$26=caml_new_string(""),
     cst_core_kernel$81=caml_new_string("core_kernel"),
     cst_core_kernel$82=caml_new_string("core_kernel"),
     cst_t$74=caml_new_string("t"),
     cst_t$72=caml_new_string("t"),
     cst_core_kernel$83=caml_new_string("core_kernel"),
     cst_src_list0_ml=caml_new_string("src/list0.ml"),
     cst$27=caml_new_string(""),
     cst_core_kernel$84=caml_new_string("core_kernel"),
     cst_a$22=caml_new_string("a"),
     cst_src_list0_ml_6_12=caml_new_string("src/list0.ml:6:12"),
     cst_a$23=caml_new_string("a"),
     cst_t$71=caml_new_string("t"),
     cst_src_list0_ml_6_0=caml_new_string("src/list0.ml:6:0"),
     name$10=caml_new_string("src/list0.ml.t"),
     cst_b$4=caml_new_string("b"),
     cst_src_list0_ml_11_26=caml_new_string("src/list0.ml:11:26"),
     cst_a$24=caml_new_string("a"),
     cst_src_list0_ml_11_21=caml_new_string("src/list0.ml:11:21"),
     cst_b$5=caml_new_string("b"),
     cst_a$25=caml_new_string("a"),
     cst_t$73=caml_new_string("t"),
     cst_src_list0_ml_11_2=caml_new_string("src/list0.ml:11:2"),
     cst_core_kernel$85=caml_new_string("core_kernel"),
     cst_Hashtbl_bin_read_t_duplicate_key=
      caml_new_string("Hashtbl.bin_read_t: duplicate key"),
     cst_el$2=caml_new_string("el"),
     cst_a$28=caml_new_string("a"),
     cst_src_hashtbl_ml_179_27=caml_new_string("src/hashtbl.ml:179:27"),
     cst_a$29=caml_new_string("a"),
     cst_el$1=caml_new_string("el"),
     cst_src_hashtbl_ml_179_6=caml_new_string("src/hashtbl.ml:179:6"),
     cst_8fabab0a_4992_11e6_8cca_9ba2c4686d9e=
      caml_new_string("8fabab0a-4992-11e6-8cca-9ba2c4686d9e"),
     module_name$0=[0,caml_new_string("Core_kernel.Hashtbl")],
     cst_Core_hashtbl_bin_read_t_duplicate_key=
      caml_new_string("Core_hashtbl.bin_read_t_: duplicate key"),
     cst_el$0=caml_new_string("el"),
     cst_core_kernel$86=caml_new_string("core_kernel"),
     cst_src_hashtbl_ml=caml_new_string("src/hashtbl.ml"),
     cst$28=caml_new_string(""),
     cst_core_kernel$87=caml_new_string("core_kernel"),
     cst_b$6=caml_new_string("b"),
     cst_src_hashtbl_ml_101_30=caml_new_string("src/hashtbl.ml:101:30"),
     cst_a$26=caml_new_string("a"),
     cst_src_hashtbl_ml_101_25=caml_new_string("src/hashtbl.ml:101:25"),
     cst_b$7=caml_new_string("b"),
     cst_a$27=caml_new_string("a"),
     cst_el=caml_new_string("el"),
     cst_src_hashtbl_ml_101_6=caml_new_string("src/hashtbl.ml:101:6"),
     cst_8f3e445c_4992_11e6_a279_3703be311e7b=
      caml_new_string("8f3e445c-4992-11e6-a279-3703be311e7b"),
     module_name=[0,caml_new_string("Core_kernel.Hashtbl")],
     cst_core_kernel$88=caml_new_string("core_kernel"),
     cst_el$3=caml_new_string("el"),
     cst_src_hash_set_ml_46_6=caml_new_string("src/hash_set.ml:46:6"),
     cst_el$4=caml_new_string("el"),
     cst_ad381672_4992_11e6_9e36_b76dc8cd466f=
      caml_new_string("ad381672-4992-11e6-9e36-b76dc8cd466f"),
     module_name$1=[0,caml_new_string("Core_kernel.Hash_set")],
     cst_core_kernel$89=caml_new_string("core_kernel"),
     cst_src_hash_set_ml=caml_new_string("src/hash_set.ml"),
     cst$29=caml_new_string(""),
     cst_core_kernel$90=caml_new_string("core_kernel"),
     cst_core_kernel$91=caml_new_string("core_kernel"),
     cst_t$80=caml_new_string("t"),
     cst_t$78=caml_new_string("t"),
     cst_t$76=caml_new_string("t"),
     cst_core_kernel$92=caml_new_string("core_kernel"),
     cst_src_or_error_ml=caml_new_string("src/or_error.ml"),
     cst$30=caml_new_string(""),
     cst_core_kernel$93=caml_new_string("core_kernel"),
     cst_a$30=caml_new_string("a"),
     cst_src_or_error_ml_4_13=caml_new_string("src/or_error.ml:4:13"),
     cst_a$31=caml_new_string("a"),
     cst_t$75=caml_new_string("t"),
     cst_src_or_error_ml_4_0=caml_new_string("src/or_error.ml:4:0"),
     cst_a$32=caml_new_string("a"),
     cst_src_or_error_ml_24_17=caml_new_string("src/or_error.ml:24:17"),
     cst_a$33=caml_new_string("a"),
     cst_t$77=caml_new_string("t"),
     cst_src_or_error_ml_24_4=caml_new_string("src/or_error.ml:24:4"),
     cst_a$34=caml_new_string("a"),
     cst_src_or_error_ml_31_17=caml_new_string("src/or_error.ml:31:17"),
     cst_a$35=caml_new_string("a"),
     cst_t$79=caml_new_string("t"),
     cst_src_or_error_ml_31_4=caml_new_string("src/or_error.ml:31:4"),
     cst_core_kernel$94=caml_new_string("core_kernel"),
     cst_core_kernel$95=caml_new_string("core_kernel"),
     cst_src_quickcheck_intf_ml=caml_new_string("src/quickcheck_intf.ml"),
     cst$31=caml_new_string(""),
     cst_core_kernel$96=caml_new_string("core_kernel"),
     cst_core_kernel$97=caml_new_string("core_kernel"),
     cst_cannot_generate=caml_new_string("cannot generate"),
     cst_cannot_generate$0=caml_new_string("cannot generate"),
     cst_insufficient_distinct_values=
      caml_new_string("insufficient distinct values"),
     cst_Generator_of_sequence_ran_out_of_values=
      caml_new_string("Generator.of_sequence: ran out of values"),
     cst_Quickcheck_Observer_of_list_value_not_found=
      caml_new_string("Quickcheck.Observer.of_list: value not found"),
     cst_core_kernel$98=caml_new_string("core_kernel"),
     cst_src_quickcheck_ml=caml_new_string("src/quickcheck.ml"),
     cst$32=caml_new_string(""),
     cst_core_kernel$99=caml_new_string("core_kernel"),
     default_seed=
      [0,-825553486,caml_new_string("an arbitrary but deterministic string")],
     default_shrink_attempts=[0,137269019,1000],
     cst_core_kernel$100=caml_new_string("core_kernel"),
     cst_core_kernel$101=caml_new_string("core_kernel"),
     cst_src_map_intf_ml=caml_new_string("src/map_intf.ml"),
     cst$33=caml_new_string(""),
     cst_core_kernel$102=caml_new_string("core_kernel"),
     cst_core_kernel$103=caml_new_string("core_kernel"),
     cst_el$8=caml_new_string("el"),
     cst_v$4=caml_new_string("v"),
     cst_src_map_ml_449_25=caml_new_string("src/map.ml:449:25"),
     cst_v$5=caml_new_string("v"),
     cst_el$7=caml_new_string("el"),
     cst_src_map_ml_449_4=caml_new_string("src/map.ml:449:4"),
     cst_dfb300f8_4992_11e6_9c15_73a2ac6b815c=
      caml_new_string("dfb300f8-4992-11e6-9c15-73a2ac6b815c"),
     module_name$3=[0,caml_new_string("Core_kernel.Map")],
     cst_el$6=caml_new_string("el"),
     cst_Map_bin_read_t_duplicate_element_in_map=
      caml_new_string("Map.bin_read_t: duplicate element in map"),
     cst_key_not_found=caml_new_string("key not found"),
     cst_Map_of_hashtbl_exn_duplicate_key=
      caml_new_string("Map.of_hashtbl_exn: duplicate key"),
     cst_src_map_ml$0=caml_new_string("src/map.ml"),
     cst_Left$1=caml_new_string("Left"),
     cst_Right$1=caml_new_string("Right"),
     cst_Unequal$0=caml_new_string("Unequal"),
     cst_Left$2=caml_new_string("Left"),
     cst_Right$2=caml_new_string("Right"),
     cst_Unequal$1=caml_new_string("Unequal"),
     cst_src_map_ml_Symmetric_diff_element_Stable_V1_t$0=
      caml_new_string("src/map.ml.Symmetric_diff_element.Stable.V1.t"),
     cst_src_map_ml_Symmetric_diff_element_Stable_V1_t=
      caml_new_string("src/map.ml.Symmetric_diff_element.Stable.V1.t"),
     cst_t$82=caml_new_string("t"),
     cst_core_kernel$104=caml_new_string("core_kernel"),
     cst_src_map_ml=caml_new_string("src/map.ml"),
     cst$34=caml_new_string(""),
     cst_core_kernel$105=caml_new_string("core_kernel"),
     cst_v=caml_new_string("v"),
     cst_src_map_ml_8_77=caml_new_string("src/map.ml:8:77"),
     cst_v$0=caml_new_string("v"),
     cst_src_map_ml_8_72=caml_new_string("src/map.ml:8:72"),
     cst_Unequal=caml_new_string("Unequal"),
     cst_v$1=caml_new_string("v"),
     cst_src_map_ml_8_55=caml_new_string("src/map.ml:8:55"),
     cst_Right$0=caml_new_string("Right"),
     cst_v$2=caml_new_string("v"),
     cst_src_map_ml_8_40=caml_new_string("src/map.ml:8:40"),
     cst_Left$0=caml_new_string("Left"),
     cst_src_map_ml_8_29=caml_new_string("src/map.ml:8:29"),
     cst_k=caml_new_string("k"),
     cst_src_map_ml_8_24=caml_new_string("src/map.ml:8:24"),
     cst_v$3=caml_new_string("v"),
     cst_k$0=caml_new_string("k"),
     cst_t$81=caml_new_string("t"),
     cst_src_map_ml_8_6=caml_new_string("src/map.ml:8:6"),
     tp_loc$13=
      caml_new_string("src/map.ml.Symmetric_diff_element.Stable.V1.t"),
     cst_src_map_ml$1=caml_new_string("src/map.ml"),
     cst_src_map_ml$2=caml_new_string("src/map.ml"),
     cst_src_map_ml$3=caml_new_string("src/map.ml"),
     cst_src_map_ml$4=caml_new_string("src/map.ml"),
     cst_1a342280db928f54d4b7753fac950431=
      caml_new_string("1a342280db928f54d4b7753fac950431"),
     cst_b$8=caml_new_string("b"),
     cst_src_map_ml_406_30=caml_new_string("src/map.ml:406:30"),
     cst_a$36=caml_new_string("a"),
     cst_src_map_ml_406_25=caml_new_string("src/map.ml:406:25"),
     cst_b$9=caml_new_string("b"),
     cst_a$37=caml_new_string("a"),
     cst_el$5=caml_new_string("el"),
     cst_src_map_ml_406_6=caml_new_string("src/map.ml:406:6"),
     cst_b7d7b1a0_4992_11e6_8a32_bbb221fa025c=
      caml_new_string("b7d7b1a0-4992-11e6-8a32-bbb221fa025c"),
     module_name$2=[0,caml_new_string("Core_kernel.Map")],
     cst_core_kernel$106=caml_new_string("core_kernel"),
     cst_Excl$0=caml_new_string("Excl"),
     cst_Incl$0=caml_new_string("Incl"),
     cst_Unbounded=caml_new_string("Unbounded"),
     cst_excl=caml_new_string("excl"),
     cst_incl=caml_new_string("incl"),
     cst_unbounded=caml_new_string("unbounded"),
     cst_Excl$1=caml_new_string("Excl"),
     cst_Incl$1=caml_new_string("Incl"),
     cst_Unbounded$0=caml_new_string("Unbounded"),
     cst_excl$0=caml_new_string("excl"),
     cst_incl$0=caml_new_string("incl"),
     cst_unbounded$0=caml_new_string("unbounded"),
     cst_src_maybe_bound_ml_Stable_V1_t=
      caml_new_string("src/maybe_bound.ml.Stable.V1.t"),
     cst_t$84=caml_new_string("t"),
     cst_core_kernel$107=caml_new_string("core_kernel"),
     cst_src_maybe_bound_ml=caml_new_string("src/maybe_bound.ml"),
     cst$35=caml_new_string(""),
     cst_core_kernel$108=caml_new_string("core_kernel"),
     cst_a$38=caml_new_string("a"),
     cst_src_maybe_bound_ml_7_16=caml_new_string("src/maybe_bound.ml:7:16"),
     cst_Excl=caml_new_string("Excl"),
     cst_a$39=caml_new_string("a"),
     cst_src_maybe_bound_ml_6_16=caml_new_string("src/maybe_bound.ml:6:16"),
     cst_Incl=caml_new_string("Incl"),
     cst_a$40=caml_new_string("a"),
     cst_t$83=caml_new_string("t"),
     cst_src_maybe_bound_ml_5_4=caml_new_string("src/maybe_bound.ml:5:4"),
     tp_loc$14=caml_new_string("src/maybe_bound.ml.Stable.V1.t"),
     cst_core_kernel$109=caml_new_string("core_kernel"),
     cst_core_kernel$110=caml_new_string("core_kernel"),
     cst_src_quickcheckable_ml=caml_new_string("src/quickcheckable.ml"),
     cst$36=caml_new_string(""),
     cst_core_kernel$111=caml_new_string("core_kernel"),
     cst_core_kernel$112=caml_new_string("core_kernel"),
     cst_core_kernel$113=caml_new_string("core_kernel"),
     cst_src_set_intf_ml=caml_new_string("src/set_intf.ml"),
     cst$37=caml_new_string(""),
     cst_core_kernel$114=caml_new_string("core_kernel"),
     cst_core_kernel$115=caml_new_string("core_kernel"),
     cst_el$11=caml_new_string("el"),
     cst_src_set_ml_365_4=caml_new_string("src/set.ml:365:4"),
     cst_el$12=caml_new_string("el"),
     cst_8989278e_4992_11e6_8f4a_6b89776b1e53=
      caml_new_string("8989278e-4992-11e6-8f4a-6b89776b1e53"),
     module_name$5=[0,caml_new_string("Core_kernel.Set")],
     cst_el$10=caml_new_string("el"),
     cst_Set_bin_read_t_duplicate_element_in_map=
      caml_new_string("Set.bin_read_t: duplicate element in map"),
     cst_core_kernel$116=caml_new_string("core_kernel"),
     cst_src_set_ml=caml_new_string("src/set.ml"),
     cst$38=caml_new_string(""),
     cst_core_kernel$117=caml_new_string("core_kernel"),
     cst_a$41=caml_new_string("a"),
     cst_src_set_ml_326_19=caml_new_string("src/set.ml:326:19"),
     cst_a$42=caml_new_string("a"),
     cst_el$9=caml_new_string("el"),
     cst_src_set_ml_326_6=caml_new_string("src/set.ml:326:6"),
     cst_88bcc478_4992_11e6_a95d_ff4831acf410=
      caml_new_string("88bcc478-4992-11e6-a95d-ff4831acf410"),
     module_name$4=[0,caml_new_string("Core_kernel.Set")],
     cst_core_kernel$118=caml_new_string("core_kernel"),
     cst_core_kernel$119=caml_new_string("core_kernel"),
     cst_src_comparable_intf_ml=caml_new_string("src/comparable_intf.ml"),
     cst$39=caml_new_string(""),
     cst_core_kernel$120=caml_new_string("core_kernel"),
     cst_core_kernel$121=caml_new_string("core_kernel"),
     cst_core_kernel$122=caml_new_string("core_kernel"),
     cst_src_comparable_ml=caml_new_string("src/comparable.ml"),
     cst$40=caml_new_string(""),
     cst_core_kernel$123=caml_new_string("core_kernel"),
     cst_core_kernel$124=caml_new_string("core_kernel"),
     cst_core_kernel$125=caml_new_string("core_kernel"),
     cst_src_doubly_linked_intf_ml=
      caml_new_string("src/doubly_linked_intf.ml"),
     cst$41=caml_new_string(""),
     cst_core_kernel$126=caml_new_string("core_kernel"),
     cst_core_kernel$127=caml_new_string("core_kernel"),
     cst_t$86=caml_new_string("t"),
     cst_exn_if_dup=caml_new_string("exn_if_dup"),
     cst_core_kernel$128=caml_new_string("core_kernel"),
     cst_src_list_ml=caml_new_string("src/list.ml"),
     cst$42=caml_new_string(""),
     cst_core_kernel$129=caml_new_string("core_kernel"),
     cst_Core_kernel_List_Duplicate_found=
      caml_new_string("Core_kernel__List.Duplicate_found"),
     cst_a$43=caml_new_string("a"),
     cst_src_list_ml_56_23=caml_new_string("src/list.ml:56:23"),
     cst_a$44=caml_new_string("a"),
     cst_t$85=caml_new_string("t"),
     cst_src_list_ml_56_4=caml_new_string("src/list.ml:56:4"),
     cst_core_kernel$130=caml_new_string("core_kernel"),
     cst_t$90=caml_new_string("t"),
     cst_t$88=caml_new_string("t"),
     cst_core_kernel$131=caml_new_string("core_kernel"),
     cst_src_option_ml=caml_new_string("src/option.ml"),
     cst$43=caml_new_string(""),
     cst_core_kernel$132=caml_new_string("core_kernel"),
     cst_a$45=caml_new_string("a"),
     cst_src_option_ml_4_12=caml_new_string("src/option.ml:4:12"),
     cst_a$46=caml_new_string("a"),
     cst_t$87=caml_new_string("t"),
     cst_src_option_ml_4_0=caml_new_string("src/option.ml:4:0"),
     name$11=caml_new_string("src/option.ml.t"),
     cst_a$47=caml_new_string("a"),
     cst_src_option_ml_16_23=caml_new_string("src/option.ml:16:23"),
     cst_a$48=caml_new_string("a"),
     cst_t$89=caml_new_string("t"),
     cst_src_option_ml_16_4=caml_new_string("src/option.ml:16:4"),
     cst_core_kernel$133=caml_new_string("core_kernel"),
     cst_core_kernel$134=caml_new_string("core_kernel"),
     cst_src_union_find_ml=caml_new_string("src/union_find.ml"),
     cst$44=caml_new_string(""),
     cst_core_kernel$135=caml_new_string("core_kernel"),
     cst_core_kernel$136=caml_new_string("core_kernel"),
     cst_core_kernel$137=caml_new_string("core_kernel"),
     cst_src_doubly_linked_ml=caml_new_string("src/doubly_linked.ml"),
     cst$45=caml_new_string(""),
     cst_core_kernel$138=caml_new_string("core_kernel"),
     cst_Core_kernel_Doubly_linked_Attempt_to_mutate_list_during_iteration=
      caml_new_string
       ("Core_kernel__Doubly_linked.Attempt_to_mutate_list_during_iteration"),
     cst_Core_kernel_Doubly_linked_Transfer_src_and_dst_are_same_list=
      caml_new_string
       ("Core_kernel__Doubly_linked.Transfer_src_and_dst_are_same_list"),
     cst_Core_kernel_Doubly_linked_Elt_does_not_belong_to_list=
      caml_new_string
       ("Core_kernel__Doubly_linked.Elt_does_not_belong_to_list"),
     cst_Core_kernel_Doubly_linked_Invalid_move_elt_equals_anchor=
      caml_new_string
       ("Core_kernel__Doubly_linked.Invalid_move__elt_equals_anchor"),
     cst_core_kernel$139=caml_new_string("core_kernel"),
     cst_core_kernel$140=caml_new_string("core_kernel"),
     cst_src_hash_queue_intf_ml=caml_new_string("src/hash_queue_intf.ml"),
     cst$46=caml_new_string(""),
     cst_core_kernel$141=caml_new_string("core_kernel"),
     cst_core_kernel$142=caml_new_string("core_kernel"),
     cst_no_raise$0=caml_new_string("no_raise"),
     cst_With_text_t_should_be_stored_as_an_atom_but_instead_a_list_was_found=
      caml_new_string
       ("With_text.t should be stored as an atom, but instead a list was found."),
     cst$48=caml_new_string(""),
     cst_src_sexp_ml_With_text_t=caml_new_string("src/sexp.ml.With_text.t"),
     cst_t$97=caml_new_string("t"),
     cst_sexp_parse_error=caml_new_string("sexp_parse_error"),
     cst_t$95=caml_new_string("t"),
     cst_src_sexp_ml_Stable_V1_t=caml_new_string("src/sexp.ml.Stable.V1.t"),
     cst_core_kernel$143=caml_new_string("core_kernel"),
     cst_src_sexp_ml=caml_new_string("src/sexp.ml"),
     cst$47=caml_new_string(""),
     cst_core_kernel$144=caml_new_string("core_kernel"),
     cst_t$91=caml_new_string("t"),
     cst_List$1=caml_new_string("List"),
     cst_Atom$1=caml_new_string("Atom"),
     cst_t$92=caml_new_string("t"),
     cst_src_sexp_ml_5_4=caml_new_string("src/sexp.ml:5:4"),
     cst_t$93=caml_new_string("t"),
     cst_a$49=caml_new_string("a"),
     cst_src_sexp_ml_38_22=caml_new_string("src/sexp.ml:38:22"),
     cst_a$50=caml_new_string("a"),
     cst_t$94=caml_new_string("t"),
     cst_src_sexp_ml_38_2=caml_new_string("src/sexp.ml:38:2"),
     cst_text=caml_new_string("text"),
     cst_a$51=caml_new_string("a"),
     cst_src_sexp_ml_59_14=caml_new_string("src/sexp.ml:59:14"),
     cst_value=caml_new_string("value"),
     cst_a$52=caml_new_string("a"),
     cst_t$96=caml_new_string("t"),
     cst_src_sexp_ml_58_2=caml_new_string("src/sexp.ml:58:2"),
     cst_a$53=caml_new_string("a"),
     cst_src_sexp_ml_92_19=caml_new_string("src/sexp.ml:92:19"),
     cst_a$54=caml_new_string("a"),
     cst_no_raise=caml_new_string("no_raise"),
     cst_src_sexp_ml_92_0=caml_new_string("src/sexp.ml:92:0"),
     cst_core_kernel$145=caml_new_string("core_kernel"),
     cst_Hash_queue_replace_exn_unknown_key=
      caml_new_string("Hash_queue.replace_exn: unknown key"),
     cst_Hash_queue_remove_exn_unknown_key=
      caml_new_string("Hash_queue.remove_exn: unknown key"),
     cst_Hash_queue_dequeue_exn_empty_queue=
      caml_new_string("Hash_queue.dequeue_exn: empty queue"),
     cst_Hash_queue_dequeue_with_key_empty_queue=
      caml_new_string("Hash_queue.dequeue_with_key: empty queue"),
     cst_Hash_queue_enqueue_exn_duplicate_key=
      caml_new_string("Hash_queue.enqueue_exn: duplicate key"),
     cst_It_is_an_error_to_modify_a_Hash_queue_t_while_iterating_over_it=
      caml_new_string
       ("It is an error to modify a Hash_queue.t while iterating over it."),
     cst_core_kernel$146=caml_new_string("core_kernel"),
     cst_src_hash_queue_ml=caml_new_string("src/hash_queue.ml"),
     cst$49=caml_new_string(""),
     cst_core_kernel$147=caml_new_string("core_kernel"),
     cst_core_kernel$148=caml_new_string("core_kernel"),
     cst_core_kernel$149=caml_new_string("core_kernel"),
     cst_src_hashable_ml=caml_new_string("src/hashable.ml"),
     cst$50=caml_new_string(""),
     cst_core_kernel$150=caml_new_string("core_kernel"),
     cst_core_kernel$151=caml_new_string("core_kernel"),
     cst_core_kernel$152=caml_new_string("core_kernel"),
     cst_src_identifiable_ml=caml_new_string("src/identifiable.ml"),
     cst$51=caml_new_string(""),
     cst_core_kernel$153=caml_new_string("core_kernel"),
     cst_core_kernel$154=caml_new_string("core_kernel"),
     cst_core_kernel$155=caml_new_string("core_kernel"),
     cst_src_bool_ml=caml_new_string("src/bool.ml"),
     cst$52=caml_new_string(""),
     cst_core_kernel$156=caml_new_string("core_kernel"),
     cst_t$98=caml_new_string("t"),
     cst_src_bool_ml_3_0=caml_new_string("src/bool.ml:3:0"),
     cst_t$99=caml_new_string("t"),
     name$12=caml_new_string("src/bool.ml.t"),
     cst_t$100=caml_new_string("t"),
     cst_src_bool_ml_8_6=caml_new_string("src/bool.ml:8:6"),
     cst_t$101=caml_new_string("t"),
     cst_t$102=caml_new_string("t"),
     cst_src_bool_ml_26_4=caml_new_string("src/bool.ml:26:4"),
     cst_t$103=caml_new_string("t"),
     cst_core_kernel$157=caml_new_string("core_kernel"),
     cst_core_kernel$158=caml_new_string("core_kernel"),
     cst_src_hexdump_intf_ml=caml_new_string("src/hexdump_intf.ml"),
     cst$53=caml_new_string(""),
     cst_core_kernel$159=caml_new_string("core_kernel"),
     cst_core_kernel$160=caml_new_string("core_kernel"),
     cst$56=caml_new_string("..."),
     partial=
      [12,32,[2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,0]]]]]]]]]],
     partial$0=
      [2,
       0,
       [12,
        32,
        [2,
         0,
         [12,
          32,
          [2,
           0,
           [11,
            caml_new_string("  "),
            [2,0,[12,32,[2,0,[12,32,[2,0,partial]]]]]]]]]]],
     cst$55=caml_new_string("  "),
     cst_core_kernel$161=caml_new_string("core_kernel"),
     cst_src_hexdump_ml=caml_new_string("src/hexdump.ml"),
     cst$54=caml_new_string(""),
     cst_core_kernel$162=caml_new_string("core_kernel"),
     cst_core_kernel$163=caml_new_string("core_kernel"),
     cst_core_kernel$164=caml_new_string("core_kernel"),
     cst_src_stable_comparable_ml=caml_new_string("src/stable_comparable.ml"),
     cst$57=caml_new_string(""),
     cst_core_kernel$165=caml_new_string("core_kernel"),
     cst_core_kernel$166=caml_new_string("core_kernel"),
     cst_core_kernel$167=caml_new_string("core_kernel"),
     cst_src_string_ml=caml_new_string("src/string.ml"),
     cst$58=caml_new_string(""),
     cst_core_kernel$168=caml_new_string("core_kernel"),
     cst_t$104=caml_new_string("t"),
     cst_src_string_ml_14_6=caml_new_string("src/string.ml:14:6"),
     cst_t$105=caml_new_string("t"),
     cst_t$106=caml_new_string("t"),
     cst_src_string_ml_27_4=caml_new_string("src/string.ml:27:4"),
     cst_t$107=caml_new_string("t"),
     name$13=caml_new_string("src/string.ml.t"),
     cst_t$108=caml_new_string("t"),
     cst_src_string_ml_40_6=caml_new_string("src/string.ml:40:6"),
     cst_t$109=caml_new_string("t"),
     cst_core_kernel$169=caml_new_string("core_kernel"),
     cst_core_kernel$170=caml_new_string("core_kernel"),
     cst_src_bytes_ml=caml_new_string("src/bytes.ml"),
     cst$59=caml_new_string(""),
     cst_core_kernel$171=caml_new_string("core_kernel"),
     cst_t$110=caml_new_string("t"),
     cst_src_bytes_ml_7_4=caml_new_string("src/bytes.ml:7:4"),
     cst_t$111=caml_new_string("t"),
     name$14=caml_new_string("src/bytes.ml.Stable.V1.t"),
     cst_core_kernel$172=caml_new_string("core_kernel"),
     cst_core_kernel$173=caml_new_string("core_kernel"),
     cst_src_char_ml=caml_new_string("src/char.ml"),
     cst$60=caml_new_string(""),
     cst_core_kernel$174=caml_new_string("core_kernel"),
     name$15=caml_new_string("src/char.ml.t"),
     cst_t$112=caml_new_string("t"),
     cst_src_char_ml_8_6=caml_new_string("src/char.ml:8:6"),
     cst_t$113=caml_new_string("t"),
     cst_core_kernel$175=caml_new_string("core_kernel"),
     cst_core_kernel$176=caml_new_string("core_kernel"),
     cst_src_core_pervasives_ml=caml_new_string("src/core_pervasives.ml"),
     cst$61=caml_new_string(""),
     cst_core_kernel$177=caml_new_string("core_kernel"),
     cst_core_kernel$178=caml_new_string("core_kernel"),
     cst_core_kernel$179=caml_new_string("core_kernel"),
     cst_src_robustly_comparable_ml=
      caml_new_string("src/robustly_comparable.ml"),
     cst$62=caml_new_string(""),
     cst_core_kernel$180=caml_new_string("core_kernel"),
     cst_core_kernel$181=caml_new_string("core_kernel"),
     cst_Neg$1=caml_new_string("Neg"),
     cst_Zero$1=caml_new_string("Zero"),
     cst_Pos$1=caml_new_string("Pos"),
     cst_src_sign_ml_Stable_V1_t=caml_new_string("src/sign.ml.Stable.V1.t"),
     cst_Neg=caml_new_string("Neg"),
     cst_Pos=caml_new_string("Pos"),
     cst_Zero=caml_new_string("Zero"),
     cst_neg=caml_new_string("neg"),
     cst_pos=caml_new_string("pos"),
     cst_zero=caml_new_string("zero"),
     cst_Neg$0=caml_new_string("Neg"),
     cst_Pos$0=caml_new_string("Pos"),
     cst_Zero$0=caml_new_string("Zero"),
     cst_neg$0=caml_new_string("neg"),
     cst_pos$0=caml_new_string("pos"),
     cst_zero$0=caml_new_string("zero"),
     cst_core_kernel$182=caml_new_string("core_kernel"),
     cst_src_sign_ml=caml_new_string("src/sign.ml"),
     cst$63=caml_new_string(""),
     cst_core_kernel$183=caml_new_string("core_kernel"),
     tp_loc$15=caml_new_string("src/sign.ml.Stable.V1.t"),
     cst_t$114=caml_new_string("t"),
     cst_src_sign_ml_6_4=caml_new_string("src/sign.ml:6:4"),
     cst_t$115=caml_new_string("t"),
     name$16=caml_new_string("src/sign.ml.Stable.V1.t"),
     cst_core_kernel$184=caml_new_string("core_kernel"),
     cst_12g=caml_new_string("%.12g"),
     cst$65=caml_new_string("."),
     cst_core_kernel$185=caml_new_string("core_kernel"),
     cst_src_float_ml=caml_new_string("src/float.ml"),
     cst$64=caml_new_string(""),
     cst_core_kernel$186=caml_new_string("core_kernel"),
     cst_t$116=caml_new_string("t"),
     cst_src_float_ml_26_2=caml_new_string("src/float.ml:26:2"),
     cst_t$117=caml_new_string("t"),
     name$17=caml_new_string("src/float.ml.T.t"),
     cst_t$118=caml_new_string("t"),
     cst_src_float_ml_84_2=caml_new_string("src/float.ml:84:2"),
     cst_t$119=caml_new_string("t"),
     cst_core_kernel$187=caml_new_string("core_kernel"),
     cst_core_kernel$188=caml_new_string("core_kernel"),
     cst_src_int_ml=caml_new_string("src/int.ml"),
     cst$66=caml_new_string(""),
     cst_core_kernel$189=caml_new_string("core_kernel"),
     cst_t$120=caml_new_string("t"),
     cst_src_int_ml_8_6=caml_new_string("src/int.ml:8:6"),
     cst_t$121=caml_new_string("t"),
     cst_t$122=caml_new_string("t"),
     cst_src_int_ml_19_6=caml_new_string("src/int.ml:19:6"),
     cst_t$123=caml_new_string("t"),
     name$18=caml_new_string("src/int.ml.t"),
     name$19=caml_new_string("src/int.ml.Hex.t"),
     cst_t$124=caml_new_string("t"),
     cst_src_int_ml_30_2=caml_new_string("src/int.ml:30:2"),
     cst_t$125=caml_new_string("t"),
     cst_core_kernel$190=caml_new_string("core_kernel"),
     cst_core_kernel$191=caml_new_string("core_kernel"),
     cst_src_int32_ml=caml_new_string("src/int32.ml"),
     cst$67=caml_new_string(""),
     cst_core_kernel$192=caml_new_string("core_kernel"),
     cst_t$126=caml_new_string("t"),
     cst_src_int32_ml_6_6=caml_new_string("src/int32.ml:6:6"),
     cst_t$127=caml_new_string("t"),
     name$20=caml_new_string("src/int32.ml.t"),
     name$21=caml_new_string("src/int32.ml.Hex.t"),
     cst_t$128=caml_new_string("t"),
     cst_src_int32_ml_16_2=caml_new_string("src/int32.ml:16:2"),
     cst_t$129=caml_new_string("t"),
     cst_core_kernel$193=caml_new_string("core_kernel"),
     cst_core_kernel$194=caml_new_string("core_kernel"),
     cst_src_int64_ml=caml_new_string("src/int64.ml"),
     cst$68=caml_new_string(""),
     cst_core_kernel$195=caml_new_string("core_kernel"),
     cst_t$130=caml_new_string("t"),
     cst_src_int64_ml_6_6=caml_new_string("src/int64.ml:6:6"),
     cst_t$131=caml_new_string("t"),
     name$22=caml_new_string("src/int64.ml.t"),
     name$23=caml_new_string("src/int64.ml.Hex.t"),
     cst_t$132=caml_new_string("t"),
     cst_src_int64_ml_16_2=caml_new_string("src/int64.ml:16:2"),
     cst_t$133=caml_new_string("t"),
     cst_core_kernel$196=caml_new_string("core_kernel"),
     cst_core_kernel$197=caml_new_string("core_kernel"),
     cst_src_int_intf_ml=caml_new_string("src/int_intf.ml"),
     cst$69=caml_new_string(""),
     cst_core_kernel$198=caml_new_string("core_kernel"),
     cst_core_kernel$199=caml_new_string("core_kernel"),
     cst_core_kernel$200=caml_new_string("core_kernel"),
     cst_src_int63_ml=caml_new_string("src/int63.ml"),
     cst$70=caml_new_string(""),
     cst_core_kernel$201=caml_new_string("core_kernel"),
     name$24=caml_new_string("src/int63.ml.Hex.t"),
     cst_t$134=caml_new_string("t"),
     cst_src_int63_ml_76_2=caml_new_string("src/int63.ml:76:2"),
     cst_t$135=caml_new_string("t"),
     cst_core_kernel$202=caml_new_string("core_kernel"),
     cst_core_kernel$203=caml_new_string("core_kernel"),
     cst_src_stable_int63able_ml=caml_new_string("src/stable_int63able.ml"),
     cst$71=caml_new_string(""),
     cst_core_kernel$204=caml_new_string("core_kernel"),
     cst_core_kernel$205=caml_new_string("core_kernel"),
     cst_src_unit_ml$0=caml_new_string("src/unit.ml"),
     cst_core_kernel$206=caml_new_string("core_kernel"),
     cst_src_unit_ml=caml_new_string("src/unit.ml"),
     cst$72=caml_new_string(""),
     cst_core_kernel$207=caml_new_string("core_kernel"),
     cst_t$136=caml_new_string("t"),
     cst_src_unit_ml_7_6=caml_new_string("src/unit.ml:7:6"),
     cst_t$137=caml_new_string("t"),
     cst_src_unit_ml$1=caml_new_string("src/unit.ml"),
     cst_src_unit_ml$2=caml_new_string("src/unit.ml"),
     cst_src_unit_ml$3=caml_new_string("src/unit.ml"),
     cst_src_unit_ml$4=caml_new_string("src/unit.ml"),
     cst_a7cce5982e04b068cd882d40ef8853b5=
      caml_new_string("a7cce5982e04b068cd882d40ef8853b5"),
     cst_t$138=caml_new_string("t"),
     cst_src_unit_ml_25_6=caml_new_string("src/unit.ml:25:6"),
     cst_t$139=caml_new_string("t"),
     name$25=caml_new_string("src/unit.ml.t"),
     cst_core_kernel$208=caml_new_string("core_kernel"),
     cst_core_kernel$209=caml_new_string("core_kernel"),
     cst_src_interfaces_ml=caml_new_string("src/interfaces.ml"),
     cst$73=caml_new_string(""),
     cst_core_kernel$210=caml_new_string("core_kernel"),
     cst_core_kernel$211=caml_new_string("core_kernel"),
     cst_t$141=caml_new_string("t"),
     cst_core_kernel$212=caml_new_string("core_kernel"),
     cst_src_lazy_ml=caml_new_string("src/lazy.ml"),
     cst$74=caml_new_string(""),
     cst_core_kernel$213=caml_new_string("core_kernel"),
     cst_a$55=caml_new_string("a"),
     cst_src_lazy_ml_7_16=caml_new_string("src/lazy.ml:7:16"),
     cst_a$56=caml_new_string("a"),
     cst_t$140=caml_new_string("t"),
     cst_src_lazy_ml_7_4=caml_new_string("src/lazy.ml:7:4"),
     name$26=caml_new_string("src/lazy.ml.Stable.V1.t"),
     cst_core_kernel$214=caml_new_string("core_kernel"),
     cst_core_kernel$215=caml_new_string("core_kernel"),
     cst_src_nativeint_ml=caml_new_string("src/nativeint.ml"),
     cst$75=caml_new_string(""),
     cst_core_kernel$216=caml_new_string("core_kernel"),
     cst_t$142=caml_new_string("t"),
     cst_src_nativeint_ml_6_6=caml_new_string("src/nativeint.ml:6:6"),
     cst_t$143=caml_new_string("t"),
     name$27=caml_new_string("src/nativeint.ml.t"),
     name$28=caml_new_string("src/nativeint.ml.Hex.t"),
     cst_t$144=caml_new_string("t"),
     cst_src_nativeint_ml_16_2=caml_new_string("src/nativeint.ml:16:2"),
     cst_t$145=caml_new_string("t"),
     cst_core_kernel$217=caml_new_string("core_kernel"),
     cst_Nothing_of_string_not_supported=
      caml_new_string("Nothing.of_string: not supported"),
     cst_core_kernel$218=caml_new_string("core_kernel"),
     cst_src_nothing_ml=caml_new_string("src/nothing.ml"),
     cst$76=caml_new_string(""),
     cst_core_kernel$219=caml_new_string("core_kernel"),
     cst_t$146=caml_new_string("t"),
     cst_src_nothing_ml_8_6=caml_new_string("src/nothing.ml:8:6"),
     cst_t$147=caml_new_string("t"),
     cst_Stable_V1_t=caml_new_string(".Stable.V1.t"),
     module_name$6=caml_new_string("Core_kernel.Nothing"),
     cst_core_kernel$220=caml_new_string("core_kernel"),
     cst_core_kernel$221=caml_new_string("core_kernel"),
     cst_src_never_returns_ml=caml_new_string("src/never_returns.ml"),
     cst$77=caml_new_string(""),
     cst_core_kernel$222=caml_new_string("core_kernel"),
     cst_core_kernel$223=caml_new_string("core_kernel"),
     cst_src_ordering_ml_t=caml_new_string("src/ordering.ml.t"),
     cst_core_kernel$224=caml_new_string("core_kernel"),
     cst_src_ordering_ml=caml_new_string("src/ordering.ml"),
     cst$78=caml_new_string(""),
     cst_core_kernel$225=caml_new_string("core_kernel"),
     cst_t$148=caml_new_string("t"),
     cst_src_ordering_ml_3_0=caml_new_string("src/ordering.ml:3:0"),
     cst_t$149=caml_new_string("t"),
     cst_core_kernel$226=caml_new_string("core_kernel"),
     cst_t$153=caml_new_string("t"),
     cst_t$151=caml_new_string("t"),
     cst_core_kernel$227=caml_new_string("core_kernel"),
     cst_src_ref_ml=caml_new_string("src/ref.ml"),
     cst$79=caml_new_string(""),
     cst_core_kernel$228=caml_new_string("core_kernel"),
     cst_a$57=caml_new_string("a"),
     cst_src_ref_ml_8_16=caml_new_string("src/ref.ml:8:16"),
     cst_a$58=caml_new_string("a"),
     cst_t$150=caml_new_string("t"),
     cst_src_ref_ml_8_4=caml_new_string("src/ref.ml:8:4"),
     name$29=caml_new_string("src/ref.ml.T.t"),
     cst_a$59=caml_new_string("a"),
     cst_src_ref_ml_21_25=caml_new_string("src/ref.ml:21:25"),
     cst_perms$4=caml_new_string("perms"),
     cst_a$60=caml_new_string("a"),
     cst_t$152=caml_new_string("t"),
     cst_src_ref_ml_21_2=caml_new_string("src/ref.ml:21:2"),
     cst_core_kernel$229=caml_new_string("core_kernel"),
     cst_sexp_opaque$2=caml_new_string("sexp_opaque"),
     cst_sexp_option$0=caml_new_string("sexp_option"),
     cst_sexp_list$0=caml_new_string("sexp_list"),
     cst_sexp_array$0=caml_new_string("sexp_array"),
     cst_ref$0=caml_new_string("ref"),
     cst_option$0=caml_new_string("option"),
     cst_list$0=caml_new_string("list"),
     cst_lazy_t$0=caml_new_string("lazy_t"),
     cst_array$0=caml_new_string("array"),
     cst_core_kernel$230=caml_new_string("core_kernel"),
     cst_src_std_internal_ml=caml_new_string("src/std_internal.ml"),
     cst$80=caml_new_string(""),
     cst_core_kernel$231=caml_new_string("core_kernel"),
     cst_Core_kernel_Std_internal_Bug=
      caml_new_string("Core_kernel__Std_internal.Bug"),
     cst_Core_kernel_Std_internal_C_malloc_exn=
      caml_new_string("Core_kernel__Std_internal.C_malloc_exn"),
     cst_C_malloc_exn=caml_new_string("C_malloc_exn"),
     cst_a$61=caml_new_string("a"),
     cst_src_std_internal_ml_99_18=
      caml_new_string("src/std_internal.ml:99:18"),
     cst_a$62=caml_new_string("a"),
     cst_array=caml_new_string("array"),
     cst_src_std_internal_ml_99_2=caml_new_string("src/std_internal.ml:99:2"),
     name$30=caml_new_string("src/std_internal.ml.array"),
     cst_bool=caml_new_string("bool"),
     cst_src_std_internal_ml_100_2=
      caml_new_string("src/std_internal.ml:100:2"),
     cst_bool$0=caml_new_string("bool"),
     name$31=caml_new_string("src/std_internal.ml.bool"),
     cst_char=caml_new_string("char"),
     cst_src_std_internal_ml_101_2=
      caml_new_string("src/std_internal.ml:101:2"),
     cst_char$0=caml_new_string("char"),
     name$32=caml_new_string("src/std_internal.ml.char"),
     cst_float=caml_new_string("float"),
     cst_src_std_internal_ml_102_2=
      caml_new_string("src/std_internal.ml:102:2"),
     cst_float$0=caml_new_string("float"),
     name$33=caml_new_string("src/std_internal.ml.float"),
     cst_int=caml_new_string("int"),
     cst_src_std_internal_ml_103_2=
      caml_new_string("src/std_internal.ml:103:2"),
     cst_int$0=caml_new_string("int"),
     name$34=caml_new_string("src/std_internal.ml.int"),
     cst_int32=caml_new_string("int32"),
     cst_src_std_internal_ml_104_2=
      caml_new_string("src/std_internal.ml:104:2"),
     cst_int32$0=caml_new_string("int32"),
     name$35=caml_new_string("src/std_internal.ml.int32"),
     cst_int64=caml_new_string("int64"),
     cst_src_std_internal_ml_105_2=
      caml_new_string("src/std_internal.ml:105:2"),
     cst_int64$0=caml_new_string("int64"),
     name$36=caml_new_string("src/std_internal.ml.int64"),
     cst_a$63=caml_new_string("a"),
     cst_src_std_internal_ml_106_19=
      caml_new_string("src/std_internal.ml:106:19"),
     cst_a$64=caml_new_string("a"),
     cst_lazy_t=caml_new_string("lazy_t"),
     cst_src_std_internal_ml_106_2=
      caml_new_string("src/std_internal.ml:106:2"),
     name$37=caml_new_string("src/std_internal.ml.lazy_t"),
     cst_a$65=caml_new_string("a"),
     cst_src_std_internal_ml_107_17=
      caml_new_string("src/std_internal.ml:107:17"),
     cst_a$66=caml_new_string("a"),
     cst_list=caml_new_string("list"),
     cst_src_std_internal_ml_107_2=
      caml_new_string("src/std_internal.ml:107:2"),
     name$38=caml_new_string("src/std_internal.ml.list"),
     cst_nativeint=caml_new_string("nativeint"),
     cst_src_std_internal_ml_108_2=
      caml_new_string("src/std_internal.ml:108:2"),
     cst_nativeint$0=caml_new_string("nativeint"),
     name$39=caml_new_string("src/std_internal.ml.nativeint"),
     cst_a$67=caml_new_string("a"),
     cst_src_std_internal_ml_109_19=
      caml_new_string("src/std_internal.ml:109:19"),
     cst_a$68=caml_new_string("a"),
     cst_option=caml_new_string("option"),
     cst_src_std_internal_ml_109_2=
      caml_new_string("src/std_internal.ml:109:2"),
     name$40=caml_new_string("src/std_internal.ml.option"),
     cst_string=caml_new_string("string"),
     cst_src_std_internal_ml_110_2=
      caml_new_string("src/std_internal.ml:110:2"),
     cst_string$0=caml_new_string("string"),
     name$41=caml_new_string("src/std_internal.ml.string"),
     cst_bytes=caml_new_string("bytes"),
     cst_src_std_internal_ml_111_2=
      caml_new_string("src/std_internal.ml:111:2"),
     cst_bytes$0=caml_new_string("bytes"),
     name$42=caml_new_string("src/std_internal.ml.bytes"),
     cst_a$69=caml_new_string("a"),
     cst_src_std_internal_ml_112_16=
      caml_new_string("src/std_internal.ml:112:16"),
     cst_a$70=caml_new_string("a"),
     cst_ref=caml_new_string("ref"),
     cst_src_std_internal_ml_112_2=
      caml_new_string("src/std_internal.ml:112:2"),
     name$43=caml_new_string("src/std_internal.ml.ref"),
     cst_unit=caml_new_string("unit"),
     cst_src_std_internal_ml_113_2=
      caml_new_string("src/std_internal.ml:113:2"),
     cst_unit$0=caml_new_string("unit"),
     name$44=caml_new_string("src/std_internal.ml.unit"),
     cst_float_array=caml_new_string("float_array"),
     cst_src_std_internal_ml_116_2=
      caml_new_string("src/std_internal.ml:116:2"),
     cst_float_array$0=caml_new_string("float_array"),
     name$45=caml_new_string("src/std_internal.ml.float_array"),
     cst_a$71=caml_new_string("a"),
     cst_src_std_internal_ml_171_23=
      caml_new_string("src/std_internal.ml:171:23"),
     cst_a$72=caml_new_string("a"),
     cst_sexp_array=caml_new_string("sexp_array"),
     cst_src_std_internal_ml_171_2=
      caml_new_string("src/std_internal.ml:171:2"),
     name$46=caml_new_string("src/std_internal.ml.sexp_array"),
     cst_sexp_bool=caml_new_string("sexp_bool"),
     cst_src_std_internal_ml_175_2=
      caml_new_string("src/std_internal.ml:175:2"),
     cst_sexp_bool$0=caml_new_string("sexp_bool"),
     name$47=caml_new_string("src/std_internal.ml.sexp_bool"),
     cst_a$73=caml_new_string("a"),
     cst_src_std_internal_ml_179_22=
      caml_new_string("src/std_internal.ml:179:22"),
     cst_a$74=caml_new_string("a"),
     cst_sexp_list=caml_new_string("sexp_list"),
     cst_src_std_internal_ml_179_2=
      caml_new_string("src/std_internal.ml:179:2"),
     name$48=caml_new_string("src/std_internal.ml.sexp_list"),
     cst_a$75=caml_new_string("a"),
     cst_src_std_internal_ml_183_24=
      caml_new_string("src/std_internal.ml:183:24"),
     cst_a$76=caml_new_string("a"),
     cst_sexp_option=caml_new_string("sexp_option"),
     cst_src_std_internal_ml_183_2=
      caml_new_string("src/std_internal.ml:183:2"),
     name$49=caml_new_string("src/std_internal.ml.sexp_option"),
     cst_a$77=caml_new_string("a"),
     cst_src_std_internal_ml_187_24=
      caml_new_string("src/std_internal.ml:187:24"),
     cst_a$78=caml_new_string("a"),
     cst_sexp_opaque$1=caml_new_string("sexp_opaque"),
     cst_src_std_internal_ml_187_2=
      caml_new_string("src/std_internal.ml:187:2"),
     name$50=caml_new_string("src/std_internal.ml.sexp_opaque"),
     cst_core_kernel$232=caml_new_string("core_kernel"),
     cst_short=caml_new_string("%{#short}"),
     cst_src_byte_units_ml$29=caml_new_string("src/byte_units.ml"),
     cst_short$0=caml_new_string("%{#short}"),
     cst_src_byte_units_ml$30=caml_new_string("src/byte_units.ml"),
     cst_short$1=caml_new_string("%{#short}"),
     cst_src_byte_units_ml$31=caml_new_string("src/byte_units.ml"),
     cst_short$2=caml_new_string("%{#short}"),
     cst_src_byte_units_ml$32=caml_new_string("src/byte_units.ml"),
     cst_short$3=caml_new_string("%{#short}"),
     cst_src_byte_units_ml$33=caml_new_string("src/byte_units.ml"),
     cst_short$4=caml_new_string("%{#short}"),
     cst_src_byte_units_ml$34=caml_new_string("src/byte_units.ml"),
     cst_short$5=caml_new_string("%{#short}"),
     cst_src_byte_units_ml$35=caml_new_string("src/byte_units.ml"),
     cst_short$6=caml_new_string("%{#short}"),
     cst_src_byte_units_ml$36=caml_new_string("src/byte_units.ml"),
     cst_short$7=caml_new_string("%{#short}"),
     cst_src_byte_units_ml$37=caml_new_string("src/byte_units.ml"),
     cst_short$8=caml_new_string("%{#short}"),
     cst_src_byte_units_ml$38=caml_new_string("src/byte_units.ml"),
     cst_short$9=caml_new_string("%{#short}"),
     cst_src_byte_units_ml$39=caml_new_string("src/byte_units.ml"),
     cst_short$10=caml_new_string("%{#short}"),
     cst_src_byte_units_ml$40=caml_new_string("src/byte_units.ml"),
     cst_short$11=caml_new_string("%{#short}"),
     cst_src_byte_units_ml$41=caml_new_string("src/byte_units.ml"),
     cst$82=caml_new_string("%{}"),
     cst_src_byte_units_ml$0=caml_new_string("src/byte_units.ml"),
     cst$83=caml_new_string("%{}"),
     cst_src_byte_units_ml$1=caml_new_string("src/byte_units.ml"),
     cst$84=caml_new_string("%{}"),
     cst_src_byte_units_ml$2=caml_new_string("src/byte_units.ml"),
     cst$85=caml_new_string("%{}"),
     cst_src_byte_units_ml$3=caml_new_string("src/byte_units.ml"),
     cst$86=caml_new_string("%{}"),
     cst_src_byte_units_ml$4=caml_new_string("src/byte_units.ml"),
     cst$87=caml_new_string("%{}"),
     cst_src_byte_units_ml$5=caml_new_string("src/byte_units.ml"),
     cst$88=caml_new_string("%{}"),
     cst_src_byte_units_ml$6=caml_new_string("src/byte_units.ml"),
     cst$89=caml_new_string("%{}"),
     cst_src_byte_units_ml$7=caml_new_string("src/byte_units.ml"),
     cst$90=caml_new_string("%{}"),
     cst_src_byte_units_ml$8=caml_new_string("src/byte_units.ml"),
     cst_Bytes=caml_new_string("Bytes"),
     cst_Exabytes=caml_new_string("Exabytes"),
     cst_Gigabytes=caml_new_string("Gigabytes"),
     cst_Kilobytes=caml_new_string("Kilobytes"),
     cst_Megabytes=caml_new_string("Megabytes"),
     cst_Petabytes=caml_new_string("Petabytes"),
     cst_Terabytes=caml_new_string("Terabytes"),
     cst_Words=caml_new_string("Words"),
     cst_Not_a_recognized_Byte_units_t_representation=
      caml_new_string("Not a recognized [Byte_units.t] representation"),
     cst_core_kernel$233=caml_new_string("core_kernel"),
     cst_src_byte_units_ml=caml_new_string("src/byte_units.ml"),
     cst$81=caml_new_string(""),
     cst_core_kernel$234=caml_new_string("core_kernel"),
     cst_src_byte_units_ml$9=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$10=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$11=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$12=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$13=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$14=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$15=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$16=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$17=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$18=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$19=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$20=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$21=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$22=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$23=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$24=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$25=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$26=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$27=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$28=caml_new_string("src/byte_units.ml"),
     cst_8871416feb9323353e45ec7757d2a358=
      caml_new_string("8871416feb9323353e45ec7757d2a358"),
     cst_src_byte_units_ml$42=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$43=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$44=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$45=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$46=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$47=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$48=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$49=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$50=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$51=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$52=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$53=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$54=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$55=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$56=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$57=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$58=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$59=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$60=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$61=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$62=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$63=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$64=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$65=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$66=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$67=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$68=caml_new_string("src/byte_units.ml"),
     cst_src_byte_units_ml$69=caml_new_string("src/byte_units.ml"),
     cst_8871416feb9323353e45ec7757d2a358$0=
      caml_new_string("8871416feb9323353e45ec7757d2a358"),
     cst_core_kernel$235=caml_new_string("core_kernel"),
     cst_Bigstring_write_bin_prot_negative_pos=
      caml_new_string("Bigstring.write_bin_prot: negative pos"),
     cst_Bigstring_write_bin_prot_not_enough_room=
      caml_new_string("Bigstring.write_bin_prot: not enough room"),
     cst_Bigstring_write_bin_prot_bug=
      caml_new_string("Bigstring.write_bin_prot bug!"),
     cst_not_enough_data=caml_new_string("not enough data"),
     cst_Invalid_data=caml_new_string("Invalid data"),
     cst_pos_ref_expected_pos=caml_new_string("pos_ref <> expected_pos"),
     cst_read_bin_prot_verbose_errors=
      caml_new_string("read_bin_prot_verbose_errors"),
     cst_negative_element_length_d=
      caml_new_string("negative element length %d"),
     cst_core_kernel$236=caml_new_string("core_kernel"),
     cst_src_bigstring_ml=caml_new_string("src/bigstring.ml"),
     cst$91=caml_new_string(""),
     cst_core_kernel$237=caml_new_string("core_kernel"),
     cst_t$154=caml_new_string("t"),
     cst_src_bigstring_ml_13_6=caml_new_string("src/bigstring.ml:13:6"),
     cst_t$155=caml_new_string("t"),
     cst_t_frozen=caml_new_string("t_frozen"),
     cst_src_bigstring_ml_18_4=caml_new_string("src/bigstring.ml:18:4"),
     cst_t_frozen$0=caml_new_string("t_frozen"),
     cst_core_kernel$238=caml_new_string("core_kernel"),
     cst_core_kernel$239=caml_new_string("core_kernel"),
     cst_src_core_bin_prot_ml=caml_new_string("src/core_bin_prot.ml"),
     cst$92=caml_new_string(""),
     cst_core_kernel$240=caml_new_string("core_kernel"),
     cst_core_kernel$241=caml_new_string("core_kernel"),
     cst_core_kernel$242=caml_new_string("core_kernel"),
     cst_src_md5_ml=caml_new_string("src/md5.ml"),
     cst$93=caml_new_string(""),
     cst_core_kernel$243=caml_new_string("core_kernel"),
     cst_core_kernel$244=caml_new_string("core_kernel"),
     cst_core_kernel$245=caml_new_string("core_kernel"),
     cst_src_zone_intf_ml=caml_new_string("src/zone_intf.ml"),
     cst$94=caml_new_string(""),
     cst_core_kernel$246=caml_new_string("core_kernel"),
     cst_core_kernel$247=caml_new_string("core_kernel"),
     cst_core_kernel$248=caml_new_string("core_kernel"),
     cst_src_binable_ml=caml_new_string("src/binable.ml"),
     cst$95=caml_new_string(""),
     cst_core_kernel$249=caml_new_string("core_kernel"),
     cst_core_kernel$250=caml_new_string("core_kernel"),
     cst_UTC=caml_new_string("UTC"),
     cst$97=caml_new_string("-"),
     cst$98=caml_new_string("+"),
     cst_TZif=caml_new_string("TZif"),
     cst_magic_characters_TZif_not_present=
      caml_new_string("magic characters TZif not present"),
     cst_expected_version_found_nothing=
      caml_new_string("expected version, found nothing"),
     cst_missing_terminating_character_in_input_abbreviations=
      caml_new_string
       ("missing \0 terminating character in input_abbreviations"),
     cst_default_local_time_type$0=caml_new_string("default_local_time_type"),
     cst_digest$0=caml_new_string("digest"),
     cst_last_regime_index$0=caml_new_string("last_regime_index"),
     cst_leap_seconds$0=caml_new_string("leap_seconds"),
     cst_name$0=caml_new_string("name"),
     cst_original_filename$0=caml_new_string("original_filename"),
     cst_transitions$0=caml_new_string("transitions"),
     cst_leap_seconds$1=caml_new_string("leap_seconds"),
     cst_default_local_time_type$1=caml_new_string("default_local_time_type"),
     cst_last_regime_index$1=caml_new_string("last_regime_index"),
     cst_transitions$1=caml_new_string("transitions"),
     cst_digest$1=caml_new_string("digest"),
     cst_original_filename$1=caml_new_string("original_filename"),
     cst_name$1=caml_new_string("name"),
     cst_src_zone_ml_Stable_Full_data_V1_t=
      caml_new_string("src/zone.ml.Stable.Full_data.V1.t"),
     cst_new_regime$0=caml_new_string("new_regime"),
     cst_start_time_in_seconds_since_epoch$0=
      caml_new_string("start_time_in_seconds_since_epoch"),
     cst_new_regime$1=caml_new_string("new_regime"),
     cst_start_time_in_seconds_since_epoch$1=
      caml_new_string("start_time_in_seconds_since_epoch"),
     cst_seconds$0=caml_new_string("seconds"),
     cst_time_in_seconds_since_epoch$0=
      caml_new_string("time_in_seconds_since_epoch"),
     cst_seconds$1=caml_new_string("seconds"),
     cst_time_in_seconds_since_epoch$1=
      caml_new_string("time_in_seconds_since_epoch"),
     cst_abbrv$0=caml_new_string("abbrv"),
     cst_is_dst$0=caml_new_string("is_dst"),
     cst_utc_offset_in_seconds$0=caml_new_string("utc_offset_in_seconds"),
     cst_abbrv$1=caml_new_string("abbrv"),
     cst_is_dst$1=caml_new_string("is_dst"),
     cst_utc_offset_in_seconds$1=caml_new_string("utc_offset_in_seconds"),
     cst_core_kernel$251=caml_new_string("core_kernel"),
     cst_src_zone_ml=caml_new_string("src/zone.ml"),
     cst$96=caml_new_string(""),
     cst_core_kernel$252=caml_new_string("core_kernel"),
     cst_Core_kernel_Zone_Invalid_file_format=
      caml_new_string("Core_kernel__Zone.Invalid_file_format"),
     cst_abbrv=caml_new_string("abbrv"),
     cst_is_dst=caml_new_string("is_dst"),
     cst_utc_offset_in_seconds=caml_new_string("utc_offset_in_seconds"),
     cst_t$156=caml_new_string("t"),
     cst_src_zone_ml_62_8=caml_new_string("src/zone.ml:62:8"),
     cst_t$157=caml_new_string("t"),
     tp_loc$17=caml_new_string("src/zone.ml.Stable.Full_data.V1.Regime.t"),
     cst_seconds=caml_new_string("seconds"),
     cst_time_in_seconds_since_epoch=
      caml_new_string("time_in_seconds_since_epoch"),
     cst_t$158=caml_new_string("t"),
     cst_src_zone_ml_74_8=caml_new_string("src/zone.ml:74:8"),
     cst_t$159=caml_new_string("t"),
     tp_loc$18=
      caml_new_string("src/zone.ml.Stable.Full_data.V1.Leap_second.t"),
     cst_new_regime=caml_new_string("new_regime"),
     cst_start_time_in_seconds_since_epoch=
      caml_new_string("start_time_in_seconds_since_epoch"),
     cst_t$160=caml_new_string("t"),
     cst_src_zone_ml_82_8=caml_new_string("src/zone.ml:82:8"),
     cst_t$161=caml_new_string("t"),
     tp_loc$19=caml_new_string("src/zone.ml.Stable.Full_data.V1.Transition.t"),
     cst_leap_seconds=caml_new_string("leap_seconds"),
     cst_default_local_time_type=caml_new_string("default_local_time_type"),
     cst_last_regime_index=caml_new_string("last_regime_index"),
     cst_transitions=caml_new_string("transitions"),
     cst_digest=caml_new_string("digest"),
     cst_original_filename=caml_new_string("original_filename"),
     cst_name=caml_new_string("name"),
     cst_t$162=caml_new_string("t"),
     cst_src_zone_ml_89_6=caml_new_string("src/zone.ml:89:6"),
     cst_t$163=caml_new_string("t"),
     tp_loc$20=caml_new_string("src/zone.ml.Stable.Full_data.V1.t"),
     cst_core_kernel$253=caml_new_string("core_kernel"),
     cst_core_kernel$254=caml_new_string("core_kernel"),
     cst_src_source_code_position_ml=
      caml_new_string("src/source_code_position.ml"),
     cst$99=caml_new_string(""),
     cst_core_kernel$255=caml_new_string("core_kernel"),
     cst_core_kernel$256=caml_new_string("core_kernel"),
     cst_core_kernel$257=caml_new_string("core_kernel"),
     cst_src_validated_intf_ml=caml_new_string("src/validated_intf.ml"),
     cst$100=caml_new_string(""),
     cst_core_kernel$258=caml_new_string("core_kernel"),
     cst_core_kernel$259=caml_new_string("core_kernel"),
     name$52=caml_new_string("src/validated.ml.Add_typerep.t"),
     cst_validation_failed=caml_new_string("validation failed"),
     cst_core_kernel$260=caml_new_string("core_kernel"),
     cst_src_validated_ml=caml_new_string("src/validated.ml"),
     cst$101=caml_new_string(""),
     cst_core_kernel$261=caml_new_string("core_kernel"),
     cst_core_kernel$262=caml_new_string("core_kernel"),
     cst_core_kernel$263=caml_new_string("core_kernel"),
     cst_src_type_equal_ml=caml_new_string("src/type_equal.ml"),
     cst$102=caml_new_string(""),
     cst_core_kernel$264=caml_new_string("core_kernel"),
     cst_core_kernel$265=caml_new_string("core_kernel"),
     cst_core_kernel$266=caml_new_string("core_kernel"),
     cst_src_type_equal_intf_ml=caml_new_string("src/type_equal_intf.ml"),
     cst$103=caml_new_string(""),
     cst_core_kernel$267=caml_new_string("core_kernel"),
     cst_core_kernel$268=caml_new_string("core_kernel"),
     cst_core_kernel$269=caml_new_string("core_kernel"),
     cst_src_univ_map_intf_ml=caml_new_string("src/univ_map_intf.ml"),
     cst$104=caml_new_string(""),
     cst_core_kernel$270=caml_new_string("core_kernel"),
     cst_core_kernel$271=caml_new_string("core_kernel"),
     cst_core_kernel$272=caml_new_string("core_kernel"),
     cst_src_univ_map_ml=caml_new_string("src/univ_map.ml"),
     cst$105=caml_new_string(""),
     cst_core_kernel$273=caml_new_string("core_kernel"),
     cst_core_kernel$274=caml_new_string("core_kernel"),
     cst_day=caml_new_string("day"),
     cst_Day=caml_new_string("Day"),
     cst_Hour=caml_new_string("Hour"),
     cst_Microsecond=caml_new_string("Microsecond"),
     cst_Millisecond=caml_new_string("Millisecond"),
     cst_Minute=caml_new_string("Minute"),
     cst_Nanosecond=caml_new_string("Nanosecond"),
     cst_Second$3=caml_new_string("Second"),
     cst_hour=caml_new_string("hour"),
     cst_microsecond=caml_new_string("microsecond"),
     cst_millisecond=caml_new_string("millisecond"),
     cst_minute=caml_new_string("minute"),
     cst_nanosecond=caml_new_string("nanosecond"),
     cst_second$1=caml_new_string("second"),
     cst_day$0=caml_new_string("day"),
     cst_Day$0=caml_new_string("Day"),
     cst_Hour$0=caml_new_string("Hour"),
     cst_Microsecond$0=caml_new_string("Microsecond"),
     cst_Millisecond$0=caml_new_string("Millisecond"),
     cst_Minute$0=caml_new_string("Minute"),
     cst_Nanosecond$0=caml_new_string("Nanosecond"),
     cst_Second$4=caml_new_string("Second"),
     cst_hour$0=caml_new_string("hour"),
     cst_microsecond$0=caml_new_string("microsecond"),
     cst_millisecond$0=caml_new_string("millisecond"),
     cst_minute$0=caml_new_string("minute"),
     cst_nanosecond$0=caml_new_string("nanosecond"),
     cst_second$2=caml_new_string("second"),
     cst_core_kernel$275=caml_new_string("core_kernel"),
     cst_src_unit_of_time_ml=caml_new_string("src/unit_of_time.ml"),
     cst$106=caml_new_string(""),
     cst_core_kernel$276=caml_new_string("core_kernel"),
     tp_loc$21=caml_new_string("src/unit_of_time.ml.t"),
     unit_of_time_list=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,0]]]]]]],
     cst_core_kernel$277=caml_new_string("core_kernel"),
     cst_core_kernel$278=caml_new_string("core_kernel"),
     cst_src_unique_id_intf_ml=caml_new_string("src/unique_id_intf.ml"),
     cst$107=caml_new_string(""),
     cst_core_kernel$279=caml_new_string("core_kernel"),
     cst_core_kernel$280=caml_new_string("core_kernel"),
     cst_core_kernel$281=caml_new_string("core_kernel"),
     cst_src_unique_id_ml=caml_new_string("src/unique_id.ml"),
     cst$108=caml_new_string(""),
     cst_core_kernel$282=caml_new_string("core_kernel"),
     cst_core_kernel$283=caml_new_string("core_kernel"),
     cst_core_kernel$284=caml_new_string("core_kernel"),
     cst_src_uniform_array_ml=caml_new_string("src/uniform_array.ml"),
     cst$109=caml_new_string(""),
     cst_core_kernel$285=caml_new_string("core_kernel"),
     cst_core_kernel$286=caml_new_string("core_kernel"),
     cst_lazy_t$1=caml_new_string("lazy_t"),
     cst_Always=caml_new_string("Always"),
     cst_Sometimes=caml_new_string("Sometimes"),
     cst_Never=caml_new_string("Never"),
     cst_core_kernel$287=caml_new_string("core_kernel"),
     cst_src_type_immediacy_ml=caml_new_string("src/type_immediacy.ml"),
     cst$110=caml_new_string(""),
     cst_core_kernel$288=caml_new_string("core_kernel"),
     cst_option$1=caml_new_string("option"),
     cst_list$1=caml_new_string("list"),
     cst_array$1=caml_new_string("array"),
     cst_ref$1=caml_new_string("ref"),
     cst_tuple2=caml_new_string("tuple2"),
     cst_tuple3=caml_new_string("tuple3"),
     cst_tuple4=caml_new_string("tuple4"),
     cst_tuple5=caml_new_string("tuple5"),
     cst_function=caml_new_string("function"),
     name$54=caml_new_string("is_immediate"),
     cst_core_kernel$289=caml_new_string("core_kernel"),
     tp_loc$25=caml_new_string("src/tuple.ml.Hasher.T.t"),
     cst_src_tuple_ml_Binable_t=caml_new_string("src/tuple.ml.Binable.t"),
     cst_t$164=caml_new_string("t"),
     cst_src_tuple_ml_112_2=caml_new_string("src/tuple.ml:112:2"),
     cst_t$165=caml_new_string("t"),
     tp_loc$24=caml_new_string("src/tuple.ml.Sexpable.t"),
     cst_core_kernel$290=caml_new_string("core_kernel"),
     cst_src_tuple_ml=caml_new_string("src/tuple.ml"),
     cst$111=caml_new_string(""),
     cst_core_kernel$291=caml_new_string("core_kernel"),
     tp_loc$22=caml_new_string("src/tuple.ml.T2.t"),
     name$55=caml_new_string("src/tuple.ml.T2.t"),
     tp_loc$23=caml_new_string("src/tuple.ml.T3.t"),
     name$56=caml_new_string("src/tuple.ml.T3.t"),
     cst_core_kernel$292=caml_new_string("core_kernel"),
     cst_SUNDAY=caml_new_string("SUNDAY"),
     cst_FRI$0=caml_new_string("FRI"),
     cst_FRIDAY=caml_new_string("FRIDAY"),
     cst_MON$0=caml_new_string("MON"),
     cst_MONDAY=caml_new_string("MONDAY"),
     cst_SAT$0=caml_new_string("SAT"),
     cst_SATURDAY=caml_new_string("SATURDAY"),
     cst_SUN$0=caml_new_string("SUN"),
     cst_THU$0=caml_new_string("THU"),
     cst_THURSDAY=caml_new_string("THURSDAY"),
     cst_TUE$0=caml_new_string("TUE"),
     cst_TUESDAY=caml_new_string("TUESDAY"),
     cst_WED$0=caml_new_string("WED"),
     cst_WEDNESDAY=caml_new_string("WEDNESDAY"),
     cst_Sunday=caml_new_string("Sunday"),
     cst_Monday=caml_new_string("Monday"),
     cst_Tuesday=caml_new_string("Tuesday"),
     cst_Wednesday=caml_new_string("Wednesday"),
     cst_Thursday=caml_new_string("Thursday"),
     cst_Friday=caml_new_string("Friday"),
     cst_Saturday=caml_new_string("Saturday"),
     cst_SUN=caml_new_string("SUN"),
     cst_MON=caml_new_string("MON"),
     cst_TUE=caml_new_string("TUE"),
     cst_WED=caml_new_string("WED"),
     cst_THU=caml_new_string("THU"),
     cst_FRI=caml_new_string("FRI"),
     cst_SAT=caml_new_string("SAT"),
     cst_src_day_of_week_ml_Stable_V1_T_t=
      caml_new_string("src/day_of_week.ml.Stable.V1.T.t"),
     cst_core_kernel$293=caml_new_string("core_kernel"),
     cst_src_day_of_week_ml=caml_new_string("src/day_of_week.ml"),
     cst$112=caml_new_string(""),
     cst_core_kernel$294=caml_new_string("core_kernel"),
     cst_t$166=caml_new_string("t"),
     cst_src_day_of_week_ml_8_6=caml_new_string("src/day_of_week.ml:8:6"),
     cst_t$167=caml_new_string("t"),
     weekdays=[0,1,[0,2,[0,3,[0,4,[0,5,0]]]]],
     weekends=[0,6,[0,0,0]],
     all$3=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,0]]]]]]],
     cst_core_kernel$295=caml_new_string("core_kernel"),
     cst_core_kernel$296=caml_new_string("core_kernel"),
     cst_src_day_of_week_intf_ml=caml_new_string("src/day_of_week_intf.ml"),
     cst$113=caml_new_string(""),
     cst_core_kernel$297=caml_new_string("core_kernel"),
     cst_core_kernel$298=caml_new_string("core_kernel"),
     name$60=caml_new_string("read_int63_decimal"),
     name$59=caml_new_string("read_int63"),
     cst_read_9_digit_int=caml_new_string("read_9_digit_int"),
     cst_read_8_digit_int=caml_new_string("read_8_digit_int"),
     cst_read_7_digit_int=caml_new_string("read_7_digit_int"),
     cst_read_6_digit_int=caml_new_string("read_6_digit_int"),
     cst_read_5_digit_int=caml_new_string("read_5_digit_int"),
     cst_read_4_digit_int=caml_new_string("read_4_digit_int"),
     cst_read_3_digit_int=caml_new_string("read_3_digit_int"),
     cst_read_2_digit_int=caml_new_string("read_2_digit_int"),
     cst_read_1_digit_int=caml_new_string("read_1_digit_int"),
     name$58=caml_new_string("write_int63"),
     cst_write_9_digit_int=caml_new_string("write_9_digit_int"),
     cst_write_8_digit_int=caml_new_string("write_8_digit_int"),
     cst_write_7_digit_int=caml_new_string("write_7_digit_int"),
     cst_write_6_digit_int=caml_new_string("write_6_digit_int"),
     cst_write_5_digit_int=caml_new_string("write_5_digit_int"),
     cst_write_4_digit_int=caml_new_string("write_4_digit_int"),
     cst_write_3_digit_int=caml_new_string("write_3_digit_int"),
     cst_write_2_digit_int=caml_new_string("write_2_digit_int"),
     cst_write_1_digit_int=caml_new_string("write_1_digit_int"),
     cst_s_s_Int63_out_of_range_0_Int63=
      caml_new_string("%s.%s: %{Int63} out of range [0, %{Int63}]"),
     cst_out_of_range_0=caml_new_string(" out of range [0, "),
     cst$115=caml_new_string(": "),
     cst_read_int63=caml_new_string("read_int63"),
     cst_read_int63$0=caml_new_string("read_int63"),
     name$57=caml_new_string("read_int63_decimal"),
     cst_core_kernel$299=caml_new_string("core_kernel"),
     cst_src_digit_string_helpers_ml=
      caml_new_string("src/digit_string_helpers.ml"),
     cst$114=caml_new_string(""),
     cst_core_kernel$300=caml_new_string("core_kernel"),
     module_name$7=caml_new_string("Digit_string_helpers"),
     cst_core_kernel$301=caml_new_string("core_kernel"),
     cst_Jan$2=caml_new_string("Jan"),
     cst_Feb$2=caml_new_string("Feb"),
     cst_Mar$2=caml_new_string("Mar"),
     cst_Apr$2=caml_new_string("Apr"),
     cst_May$2=caml_new_string("May"),
     cst_Jun$2=caml_new_string("Jun"),
     cst_Jul$2=caml_new_string("Jul"),
     cst_Aug$2=caml_new_string("Aug"),
     cst_Sep$2=caml_new_string("Sep"),
     cst_Oct$2=caml_new_string("Oct"),
     cst_Nov$2=caml_new_string("Nov"),
     cst_Dec$2=caml_new_string("Dec"),
     cst_apr=caml_new_string("apr"),
     cst_Jun=caml_new_string("Jun"),
     cst_Apr=caml_new_string("Apr"),
     cst_Aug=caml_new_string("Aug"),
     cst_Dec=caml_new_string("Dec"),
     cst_Feb=caml_new_string("Feb"),
     cst_Jan=caml_new_string("Jan"),
     cst_Jul=caml_new_string("Jul"),
     cst_Mar=caml_new_string("Mar"),
     cst_May=caml_new_string("May"),
     cst_Nov=caml_new_string("Nov"),
     cst_Oct=caml_new_string("Oct"),
     cst_Sep=caml_new_string("Sep"),
     cst_jun=caml_new_string("jun"),
     cst_aug=caml_new_string("aug"),
     cst_dec=caml_new_string("dec"),
     cst_feb=caml_new_string("feb"),
     cst_jan=caml_new_string("jan"),
     cst_jul=caml_new_string("jul"),
     cst_mar=caml_new_string("mar"),
     cst_may=caml_new_string("may"),
     cst_nov=caml_new_string("nov"),
     cst_oct=caml_new_string("oct"),
     cst_sep=caml_new_string("sep"),
     cst_apr$0=caml_new_string("apr"),
     cst_Jun$0=caml_new_string("Jun"),
     cst_Apr$0=caml_new_string("Apr"),
     cst_Aug$0=caml_new_string("Aug"),
     cst_Dec$0=caml_new_string("Dec"),
     cst_Feb$0=caml_new_string("Feb"),
     cst_Jan$0=caml_new_string("Jan"),
     cst_Jul$0=caml_new_string("Jul"),
     cst_Mar$0=caml_new_string("Mar"),
     cst_May$0=caml_new_string("May"),
     cst_Nov$0=caml_new_string("Nov"),
     cst_Oct$0=caml_new_string("Oct"),
     cst_Sep$0=caml_new_string("Sep"),
     cst_jun$0=caml_new_string("jun"),
     cst_aug$0=caml_new_string("aug"),
     cst_dec$0=caml_new_string("dec"),
     cst_feb$0=caml_new_string("feb"),
     cst_jan$0=caml_new_string("jan"),
     cst_jul$0=caml_new_string("jul"),
     cst_mar$0=caml_new_string("mar"),
     cst_may$0=caml_new_string("may"),
     cst_nov$0=caml_new_string("nov"),
     cst_oct$0=caml_new_string("oct"),
     cst_sep$0=caml_new_string("sep"),
     cst_core_kernel$302=caml_new_string("core_kernel"),
     cst_src_month_ml=caml_new_string("src/month.ml"),
     cst$116=caml_new_string(""),
     cst_core_kernel$303=caml_new_string("core_kernel"),
     tp_loc$26=caml_new_string("src/month.ml.Stable.V1.t"),
     cst_Jan$1=caml_new_string("Jan"),
     cst_Feb$1=caml_new_string("Feb"),
     cst_Mar$1=caml_new_string("Mar"),
     cst_Apr$1=caml_new_string("Apr"),
     cst_May$1=caml_new_string("May"),
     cst_Jun$1=caml_new_string("Jun"),
     cst_Jul$1=caml_new_string("Jul"),
     cst_Aug$1=caml_new_string("Aug"),
     cst_Sep$1=caml_new_string("Sep"),
     cst_Oct$1=caml_new_string("Oct"),
     cst_Nov$1=caml_new_string("Nov"),
     cst_Dec$1=caml_new_string("Dec"),
     descriptions=
      caml_list_of_js_array
       ([[0,caml_new_string("Jan"),0],
         [0,caml_new_string("Feb"),0],
         [0,caml_new_string("Mar"),0],
         [0,caml_new_string("Apr"),0],
         [0,caml_new_string("May"),0],
         [0,caml_new_string("Jun"),0],
         [0,caml_new_string("Jul"),0],
         [0,caml_new_string("Aug"),0],
         [0,caml_new_string("Sep"),0],
         [0,caml_new_string("Oct"),0],
         [0,caml_new_string("Nov"),0],
         [0,caml_new_string("Dec"),0]]),
     all$4=caml_list_of_js_array([0,1,2,3,4,5,6,7,8,9,10,11]),
     cst_core_kernel$304=caml_new_string("core_kernel"),
     cst_core_kernel$305=caml_new_string("core_kernel"),
     cst_src_month_intf_ml=caml_new_string("src/month_intf.ml"),
     cst$117=caml_new_string(""),
     cst_core_kernel$306=caml_new_string("core_kernel"),
     cst_core_kernel$307=caml_new_string("core_kernel"),
     cst_Date_gen_uniform_incl_bounds_are_crossed=
      caml_new_string("Date.gen_uniform_incl: bounds are crossed"),
     cst_d=caml_new_string("d"),
     cst_m$0=caml_new_string("m"),
     cst_y=caml_new_string("y"),
     cst_d$0=caml_new_string("d"),
     cst_m$1=caml_new_string("m"),
     cst_y$0=caml_new_string("y"),
     cst_invalid_date=caml_new_string("invalid date: "),
     cst_Date_of_string_iso8601_basic_pos_8_string_length=
      caml_new_string("Date.of_string_iso8601_basic: pos + 8 > string length"),
     cst_Date_t=caml_new_string("Date.t"),
     cst_Date_create_exn_y_d_m_Month_d_d_error_s=
      caml_new_string("Date.create_exn ~y:%d ~m:%{Month} ~d:%d error: %s"),
     cst_m=caml_new_string(" ~m:"),
     cst_Date_create_exn_y=caml_new_string("Date.create_exn ~y:"),
     cst_year_outside_of_0_9999=caml_new_string("year outside of [0..9999]"),
     cst_day_0=caml_new_string("day <= 0"),
     cst_core_kernel$308=caml_new_string("core_kernel"),
     cst_src_date0_ml=caml_new_string("src/date0.ml"),
     cst$118=caml_new_string(""),
     cst_core_kernel$309=caml_new_string("core_kernel"),
     name$61=caml_new_string("src/date0.ml.Stable.V1.Without_comparable.T.t"),
     cst_899ee3e0_490a_11e6_a10a_a3734f733566=
      caml_new_string("899ee3e0-490a-11e6-a10a-a3734f733566"),
     tp_loc$27=
      caml_new_string
       ("src/date0.ml.Stable.V1.Without_comparable.Sexpable.Old_date.t"),
     module_name$8=caml_new_string("Core_kernel.Date"),
     cst_2100_01_01=caml_new_string("2100-01-01"),
     cst_1900_01_01=caml_new_string("1900-01-01"),
     cst_core_kernel$310=caml_new_string("core_kernel"),
     cst_core_kernel$311=caml_new_string("core_kernel"),
     cst_src_date0_intf_ml=caml_new_string("src/date0_intf.ml"),
     cst$119=caml_new_string(""),
     cst_core_kernel$312=caml_new_string("core_kernel"),
     cst_core_kernel$313=caml_new_string("core_kernel"),
     cst$121=caml_new_string(""),
     cst_len_2=caml_new_string("len < 2"),
     cst_hour_24=caml_new_string("hour > 24"),
     cst_2_len_5=caml_new_string("2 < len < 5"),
     cst_first_colon_missing=caml_new_string("first colon missing"),
     cst_minute_60=caml_new_string("minute > 60"),
     cst_24_hours_and_non_zero_minute=
      caml_new_string("24 hours and non-zero minute"),
     cst_5_len_8=caml_new_string("5 < len < 8"),
     cst_second_colon_missing=caml_new_string("second colon missing"),
     cst_24_hours_and_non_zero_seconds=
      caml_new_string("24 hours and non-zero seconds"),
     cst_length_9=caml_new_string("length = 9"),
     cst_missing_subsecond_separator=
      caml_new_string("missing subsecond separator"),
     cst_24_hours_and_non_zero_subseconds=
      caml_new_string("24 hours and non-zero subseconds"),
     cst$122=caml_new_string(""),
     cst$125=caml_new_string(""),
     cst$123=caml_new_string(""),
     cst$124=caml_new_string(""),
     cst_expected_end_of_string_after_minutes=
      caml_new_string("expected end of string after minutes"),
     cst_expected_colon_or_am_pm_suffix_with_optional_space_after_minutes=
      caml_new_string
       ("expected colon or am/pm suffix with optional space after minutes"),
     cst_expected_two_digits_of_seconds=
      caml_new_string("expected two digits of seconds"),
     cst_expected_decimal_point_or_am_pm_suffix_after_seconds=
      caml_new_string("expected decimal point or am/pm suffix after seconds"),
     cst_BUG_did_not_expect_seconds_but_found_them=
      caml_new_string("BUG: did not expect seconds, but found them"),
     cst_hours_out_of_bounds$0=caml_new_string("hours out of bounds"),
     cst_hours_out_of_bounds$1=caml_new_string("hours out of bounds"),
     cst_time_is_past_24_00_00=caml_new_string("time is past 24:00:00"),
     cst_hours_without_minutes_or_AM_PM=
      caml_new_string("hours without minutes or AM/PM"),
     cst_hours_out_of_bounds=caml_new_string("hours out of bounds"),
     cst_minutes_out_of_bounds=caml_new_string("minutes out of bounds"),
     cst_seconds_out_of_bounds=caml_new_string("seconds out of bounds"),
     cst_expected_digits_after_decimal_point=
      caml_new_string("expected digits after decimal point"),
     cst_expected_digits_and_or_underscores_after_decimal_point=
      caml_new_string
       ("expected digits and/or underscores after decimal point"),
     cst_Time_Ofday_invalid_string=
      caml_new_string("Time.Ofday: invalid string"),
     cst_core_kernel$314=caml_new_string("core_kernel"),
     cst_src_ofday_helpers_ml=caml_new_string("src/ofday_helpers.ml"),
     cst$120=caml_new_string(""),
     cst_core_kernel$315=caml_new_string("core_kernel"),
     cst_core_kernel$316=caml_new_string("core_kernel"),
     cst_sexp_list$2=caml_new_string("sexp_list"),
     cst_sexp_option$2=caml_new_string("sexp_option"),
     cst_core_kernel$317=caml_new_string("core_kernel"),
     cst_src_stable_internal_ml=caml_new_string("src/stable_internal.ml"),
     cst$126=caml_new_string(""),
     cst_core_kernel$318=caml_new_string("core_kernel"),
     cst_a$79=caml_new_string("a"),
     cst_src_stable_internal_ml_42_25=
      caml_new_string("src/stable_internal.ml:42:25"),
     cst_a$80=caml_new_string("a"),
     cst_sexp_option$1=caml_new_string("sexp_option"),
     cst_src_stable_internal_ml_42_2=
      caml_new_string("src/stable_internal.ml:42:2"),
     cst_a$81=caml_new_string("a"),
     cst_src_stable_internal_ml_45_23=
      caml_new_string("src/stable_internal.ml:45:23"),
     cst_a$82=caml_new_string("a"),
     cst_sexp_list$1=caml_new_string("sexp_list"),
     cst_src_stable_internal_ml_45_2=
      caml_new_string("src/stable_internal.ml:45:2"),
     cst_core_kernel$319=caml_new_string("core_kernel"),
     cst_Decimal_t_of_sexp_Expected_Atom_found_List=
      caml_new_string("Decimal.t_of_sexp: Expected Atom, found List"),
     cst_core_kernel$320=caml_new_string("core_kernel"),
     cst_src_float_with_finite_only_serialization_ml=
      caml_new_string("src/float_with_finite_only_serialization.ml"),
     cst$127=caml_new_string(""),
     cst_core_kernel$321=caml_new_string("core_kernel"),
     cst_Core_kernel_Float_with_finite_only_serialization_Stable_V1_Nan_or_inf=
      caml_new_string
       ("Core_kernel__Float_with_finite_only_serialization.Stable.V1.Nan_or_inf"),
     cst_core_kernel$322=caml_new_string("core_kernel"),
     cst_x$1=caml_new_string("x"),
     cst$131=caml_new_string("%"),
     cst_bp$1=caml_new_string("bp"),
     cst_0x$0=caml_new_string("0x"),
     cst_x$0=caml_new_string("x"),
     cst$130=caml_new_string("%"),
     cst_bp$0=caml_new_string("bp"),
     cst_0x=caml_new_string("0x"),
     cst_x=caml_new_string("x"),
     cst$129=caml_new_string("%"),
     cst_bp=caml_new_string("bp"),
     cst_core_kernel$323=caml_new_string("core_kernel"),
     cst_src_percent_ml=caml_new_string("src/percent.ml"),
     cst$128=caml_new_string(""),
     cst_core_kernel$324=caml_new_string("core_kernel"),
     cst_t$168=caml_new_string("t"),
     cst_src_percent_ml_133_8=caml_new_string("src/percent.ml:133:8"),
     cst_t$169=caml_new_string("t"),
     cst_core_kernel$325=caml_new_string("core_kernel"),
     cst_d$1=caml_new_string("d"),
     cst_h=caml_new_string("h"),
     cst_m$2=caml_new_string("m"),
     cst_s$4=caml_new_string("s"),
     cst_ms=caml_new_string("ms"),
     cst_us=caml_new_string("us"),
     cst$133=caml_new_string("-"),
     cst_Span_randomize_percent_is_out_of_range_0x_1x=
      caml_new_string("Span.randomize: percent is out of range [0x, 1x]"),
     cst_core_kernel$326=caml_new_string("core_kernel"),
     cst_src_span_helpers_ml=caml_new_string("src/span_helpers.ml"),
     cst$132=caml_new_string(""),
     cst_core_kernel$327=caml_new_string("core_kernel"),
     cst_core_kernel$328=caml_new_string("core_kernel"),
     cst_ns$3=caml_new_string("ns"),
     cst_us$4=caml_new_string("us"),
     cst_ms$4=caml_new_string("ms"),
     cst_s$7=caml_new_string("s"),
     cst_m$5=caml_new_string("m"),
     cst_h$2=caml_new_string("h"),
     cst_d$4=caml_new_string("d"),
     cst$142=caml_new_string(" "),
     cst_Time_Span_Stable_V3_t_of_sexp_sexp_must_be_an_Atom=
      caml_new_string("Time.Span.Stable.V3.t_of_sexp: sexp must be an Atom"),
     cst_NANs$0=caml_new_string("NANs"),
     cst_INFs$1=caml_new_string("-INFs"),
     cst_INFs$2=caml_new_string("INFs"),
     cst_0s$0=caml_new_string("0s"),
     cst$140=caml_new_string("-"),
     cst$141=caml_new_string(""),
     cst$138=caml_new_string(""),
     cst$139=caml_new_string(""),
     cst$137=caml_new_string(""),
     suffix=caml_new_string("."),
     cst_invalid_span_part_suffix=caml_new_string("invalid span part suffix"),
     cst_INFs=caml_new_string("-INFs"),
     cst_INFs$0=caml_new_string("INFs"),
     cst_NANs=caml_new_string("NANs"),
     cst_empty_input=caml_new_string("empty input"),
     cst_empty_input$0=caml_new_string("empty input"),
     cst_invalid_span_part_magnitude=
      caml_new_string("invalid span part magnitude"),
     cst_Time_Span_of_string=caml_new_string("Time.Span.of_string: "),
     cst_ns$2=caml_new_string("ns"),
     cst_us$3=caml_new_string("us"),
     cst_ms$3=caml_new_string("ms"),
     cst_s$6=caml_new_string("s"),
     cst_m$4=caml_new_string("m"),
     cst_h$1=caml_new_string("h"),
     cst_d$3=caml_new_string("d"),
     cst_inf=caml_new_string("inf"),
     cst_inf$0=caml_new_string("-inf"),
     cst_nan=caml_new_string("nan"),
     cst_ns$1=caml_new_string("ns"),
     cst_us$2=caml_new_string("us"),
     cst_ms$2=caml_new_string("ms"),
     cst_s$5=caml_new_string("s"),
     cst_m$3=caml_new_string("m"),
     cst_h$0=caml_new_string("h"),
     cst_d$2=caml_new_string("d"),
     cst_0s=caml_new_string("0s"),
     cst$136=caml_new_string(""),
     cst_no_number_given=caml_new_string("no number given"),
     cst$135=caml_new_string(""),
     cst_empty_string=caml_new_string("empty string"),
     cst_Time_spans_must_end_in_ns_us_ms_s_m_h_or_d=
      caml_new_string("Time spans must end in ns, us, ms, s, m, h, or d."),
     cst_Time_spans_must_end_in_ms_s_m_h_or_d=
      caml_new_string("Time spans must end in ms, s, m, h, or d."),
     cst_hr=caml_new_string("hr"),
     cst_min=caml_new_string("min"),
     cst_ms$0=caml_new_string("ms"),
     cst_ns=caml_new_string("ns"),
     cst_sec=caml_new_string("sec"),
     cst_sign=caml_new_string("sign"),
     cst_us$0=caml_new_string("us"),
     cst_ns$0=caml_new_string("ns"),
     cst_us$1=caml_new_string("us"),
     cst_ms$1=caml_new_string("ms"),
     cst_sec$0=caml_new_string("sec"),
     cst_min$0=caml_new_string("min"),
     cst_hr$0=caml_new_string("hr"),
     cst_sign$0=caml_new_string("sign"),
     cst_core_kernel$329=caml_new_string("core_kernel"),
     cst_src_span_float_ml=caml_new_string("src/span_float.ml"),
     cst$134=caml_new_string(""),
     cst_core_kernel$330=caml_new_string("core_kernel"),
     tp_loc$28=caml_new_string("src/span_float.ml.Stable.V1.Parts.t"),
     cst_Core_kernel_Span_float_Stable_V1_T_of_sexp=
      caml_new_string("Core_kernel__Span_float.Stable.V1.T_of_sexp"),
     cst_Core_kernel_Span_float_Stable_V1_T_of_sexp_expected_atom_but_got=
      caml_new_string
       ("Core_kernel__Span_float.Stable.V1.T_of_sexp_expected_atom_but_got"),
     module_name$9=caml_new_string("Core_kernel.Time.Span"),
     cst_t$170=caml_new_string("t"),
     cst_src_span_float_ml_748_4=caml_new_string("src/span_float.ml:748:4"),
     cst_t$171=caml_new_string("t"),
     cst_t$172=caml_new_string("t"),
     cst_src_span_float_ml_761_2=caml_new_string("src/span_float.ml:761:2"),
     cst_t$173=caml_new_string("t"),
     cst_core_kernel$331=caml_new_string("core_kernel"),
     cst_core_kernel$332=caml_new_string("core_kernel"),
     cst_src_span_intf_ml=caml_new_string("src/span_intf.ml"),
     cst$143=caml_new_string(""),
     cst_core_kernel$333=caml_new_string("core_kernel"),
     cst_core_kernel$334=caml_new_string("core_kernel"),
     cst_Ofday_t_of_sexp=caml_new_string("Ofday.t_of_sexp: "),
     cst_Ofday_t_of_sexp$0=caml_new_string("Ofday.t_of_sexp"),
     cst_Ofday_out_of_range_Span=
      caml_new_string("Ofday out of range: %{Span}"),
     cst_Ofday_out_of_range=caml_new_string("Ofday out of range: "),
     cst_Ofday_of_span_since_start_of_day_exn_infinite_value=
      caml_new_string("Ofday.of_span_since_start_of_day_exn: infinite value"),
     cst_Ofday_of_span_since_start_of_day_exn_NaN_value=
      caml_new_string("Ofday.of_span_since_start_of_day_exn: NaN value"),
     cst_core_kernel$335=caml_new_string("core_kernel"),
     cst_src_ofday_float_ml=caml_new_string("src/ofday_float.ml"),
     cst$144=caml_new_string(""),
     cst_core_kernel$336=caml_new_string("core_kernel"),
     module_name$10=caml_new_string("Core_kernel.Time.Ofday"),
     cst_t$174=caml_new_string("t"),
     cst_src_ofday_float_ml_278_4=caml_new_string("src/ofday_float.ml:278:4"),
     cst_t$175=caml_new_string("t"),
     cst_t$176=caml_new_string("t"),
     cst_src_ofday_float_ml_291_2=caml_new_string("src/ofday_float.ml:291:2"),
     cst_t$177=caml_new_string("t"),
     cst_core_kernel$337=caml_new_string("core_kernel"),
     cst_core_kernel$338=caml_new_string("core_kernel"),
     cst_src_ofday_intf_ml=caml_new_string("src/ofday_intf.ml"),
     cst$145=caml_new_string(""),
     cst_core_kernel$339=caml_new_string("core_kernel"),
     cst_core_kernel$340=caml_new_string("core_kernel"),
     cst_core_kernel$341=caml_new_string("core_kernel"),
     cst_src_time0_intf_ml=caml_new_string("src/time0_intf.ml"),
     cst$146=caml_new_string(""),
     cst_core_kernel$342=caml_new_string("core_kernel"),
     cst_core_kernel$343=caml_new_string("core_kernel"),
     cst_core_kernel$344=caml_new_string("core_kernel"),
     cst_src_time_intf_ml=caml_new_string("src/time_intf.ml"),
     cst$147=caml_new_string(""),
     cst_core_kernel$345=caml_new_string("core_kernel"),
     cst_core_kernel$346=caml_new_string("core_kernel"),
     cst_time_has_no_time_zone_or_UTC_offset=
      caml_new_string("time has no time zone or UTC offset"),
     cst$155=caml_new_string(" "),
     cst$156=caml_new_string(" "),
     cst_no_spaces_or_T_found=caml_new_string("no spaces or T found"),
     cst_too_many_spaces=caml_new_string("too many spaces"),
     utc_offset=[0,0.],
     cst_00=caml_new_string(":00"),
     cst$154=caml_new_string(":"),
     cst_Time_of_localized_string=caml_new_string("Time.of_localized_string"),
     cst_no_space_in_filename_string=
      caml_new_string("no space in filename string"),
     cst$153=caml_new_string("_"),
     cst$152=caml_new_string(" "),
     cst$151=caml_new_string(" "),
     cst_Z=caml_new_string("Z"),
     cst$149=caml_new_string("-"),
     cst$150=caml_new_string("+"),
     cst_Time_to_date_ofday_precise=
      caml_new_string("Time.to_date_ofday_precise"),
     cst_Core_kernel_Time_Make_Time0_Time_of_string=
      caml_new_string("Core_kernel__Time.Make(Time0).Time_of_string"),
     cst_core_kernel$347=caml_new_string("core_kernel"),
     cst_src_time_ml=caml_new_string("src/time.ml"),
     cst$148=caml_new_string(""),
     cst_core_kernel$348=caml_new_string("core_kernel"),
     cst_core_kernel$349=caml_new_string("core_kernel"),
     cst_Time_next_multiple_got_nonpositive_interval=
      caml_new_string("Time.next_multiple got nonpositive interval"),
     cst_core_kernel$350=caml_new_string("core_kernel"),
     cst_src_time_float0_ml=caml_new_string("src/time_float0.ml"),
     cst$157=caml_new_string(""),
     cst_core_kernel$351=caml_new_string("core_kernel"),
     cst_core_kernel$352=caml_new_string("core_kernel"),
     cst_Time_Stable_With_utc_V2_t_of_sexp_unknown_time_zone=
      caml_new_string("Time.Stable.With_utc.V2.t_of_sexp: unknown time zone"),
     cst$159=caml_new_string(" "),
     cst_Time_Stable_With_utc_V2_t_of_sexp=
      caml_new_string("Time.Stable.With_utc.V2.t_of_sexp"),
     cst_core_kernel$353=caml_new_string("core_kernel"),
     cst_src_time_float_ml=caml_new_string("src/time_float.ml"),
     cst$158=caml_new_string(""),
     cst_core_kernel$354=caml_new_string("core_kernel"),
     cst_t$178=caml_new_string("t"),
     cst_src_time_float_ml_18_6=caml_new_string("src/time_float.ml:18:6"),
     cst_t$179=caml_new_string("t"),
     cst_core_kernel$355=caml_new_string("core_kernel"),
     cst_core_kernel$356=caml_new_string("core_kernel"),
     cst_src_time_ns_intf_ml=caml_new_string("src/time_ns_intf.ml"),
     cst$160=caml_new_string(""),
     cst_core_kernel$357=caml_new_string("core_kernel"),
     cst_core_kernel$358=caml_new_string("core_kernel"),
     cst_core_kernel$359=caml_new_string("core_kernel"),
     cst_src_date_ml=caml_new_string("src/date.ml"),
     cst$161=caml_new_string(""),
     cst_core_kernel$360=caml_new_string("core_kernel"),
     cst_core_kernel$361=caml_new_string("core_kernel"),
     cst_core_kernel$362=caml_new_string("core_kernel"),
     cst_src_date_intf_ml=caml_new_string("src/date_intf.ml"),
     cst$162=caml_new_string(""),
     cst_core_kernel$363=caml_new_string("core_kernel"),
     cst_core_kernel$364=caml_new_string("core_kernel"),
     cst_Time_ns_Span_does_not_support_this_span=
      caml_new_string("Time_ns.Span does not support this span"),
     cst_Span_t_exceeds_limits=caml_new_string("Span.t exceeds limits"),
     cst_ns$6=caml_new_string("ns"),
     cst_us$7=caml_new_string("us"),
     cst_ms$7=caml_new_string("ms"),
     cst_s$8=caml_new_string("s"),
     cst_m$6=caml_new_string("m"),
     cst_h$3=caml_new_string("h"),
     cst_d$5=caml_new_string("d"),
     cst$164=caml_new_string(" "),
     cst_Time_ns_Span_Stable_V2_t_of_sexp_sexp_must_be_an_Atom=
      caml_new_string
       ("Time_ns.Span.Stable.V2.t_of_sexp: sexp must be an Atom"),
     cst_empty_string$0=caml_new_string("empty string"),
     cst_no_digits_before_unit_suffix=
      caml_new_string("no digits before unit suffix"),
     cst_unparseable_unit_suffix=caml_new_string("unparseable unit suffix"),
     cst_unparseable_unit_suffix$0=caml_new_string("unparseable unit suffix"),
     cst_no_unit_suffix_after_digits=
      caml_new_string("no unit suffix after digits"),
     cst_span_would_be_outside_of_int63_range$2=
      caml_new_string("span would be outside of int63 range"),
     cst_span_would_be_outside_of_int63_range$1=
      caml_new_string("span would be outside of int63 range"),
     cst_span_would_be_outside_of_int63_range$0=
      caml_new_string("span would be outside of int63 range"),
     cst_span_would_be_outside_of_int63_range=
      caml_new_string("span would be outside of int63 range"),
     cst_Time_ns_Span_of_string_invalid_string=
      caml_new_string("Time_ns.Span.of_string: invalid string"),
     cst_0s$1=caml_new_string("0s"),
     cst_Time_ns_Span_to_int_ns_unsupported_on_32bit_machines=
      caml_new_string("Time_ns.Span.to_int_ns: unsupported on 32bit machines"),
     cst_hr$1=caml_new_string("hr"),
     cst_min$1=caml_new_string("min"),
     cst_ms$5=caml_new_string("ms"),
     cst_ns$4=caml_new_string("ns"),
     cst_sec$1=caml_new_string("sec"),
     cst_sign$1=caml_new_string("sign"),
     cst_us$5=caml_new_string("us"),
     cst_ns$5=caml_new_string("ns"),
     cst_us$6=caml_new_string("us"),
     cst_ms$6=caml_new_string("ms"),
     cst_sec$2=caml_new_string("sec"),
     cst_min$2=caml_new_string("min"),
     cst_hr$2=caml_new_string("hr"),
     cst_sign$2=caml_new_string("sign"),
     cst_core_kernel$365=caml_new_string("core_kernel"),
     cst_src_span_ns_ml=caml_new_string("src/span_ns.ml"),
     cst$163=caml_new_string(""),
     cst_core_kernel$366=caml_new_string("core_kernel"),
     module_name$11=caml_new_string("Core_kernel.Time_ns.Span"),
     cst_t$180=caml_new_string("t"),
     cst_src_span_ns_ml_15_2=caml_new_string("src/span_ns.ml:15:2"),
     cst_t$181=caml_new_string("t"),
     name$62=caml_new_string("src/span_ns.ml.T.t"),
     tp_loc$29=caml_new_string("src/span_ns.ml.Parts.t"),
     cst_t$182=caml_new_string("t"),
     cst_src_span_ns_ml_184_8=caml_new_string("src/span_ns.ml:184:8"),
     cst_t$183=caml_new_string("t"),
     cst_t$184=caml_new_string("t"),
     cst_src_span_ns_ml_732_4=caml_new_string("src/span_ns.ml:732:4"),
     cst_t$185=caml_new_string("t"),
     cst_t$186=caml_new_string("t"),
     cst_src_span_ns_ml_738_4=caml_new_string("src/span_ns.ml:738:4"),
     cst_t$187=caml_new_string("t"),
     cst_core_kernel$367=caml_new_string("core_kernel"),
     cst_src_ofday_ns_ml$0=caml_new_string("src/ofday_ns.ml"),
     cst_Time_ns_Ofday_of_string_iso8601_extended_cannot_parse_string=
      caml_new_string
       ("Time_ns.Ofday.of_string_iso8601_extended: cannot parse string"),
     cst_expected_an_atom=caml_new_string("expected an atom"),
     cst_Incorrect_day=caml_new_string("Incorrect day"),
     cst_Time_ns_Ofday_of_span_since_start_of_day_exn_input_out_of_bounds=
      caml_new_string
       ("Time_ns.Ofday.of_span_since_start_of_day_exn: input out of bounds"),
     cst_core_kernel$368=caml_new_string("core_kernel"),
     cst_src_ofday_ns_ml=caml_new_string("src/ofday_ns.ml"),
     cst$165=caml_new_string(""),
     cst_core_kernel$369=caml_new_string("core_kernel"),
     cst_t$188=caml_new_string("t"),
     cst_src_ofday_ns_ml_6_0=caml_new_string("src/ofday_ns.ml:6:0"),
     cst_t$189=caml_new_string("t"),
     name$63=caml_new_string("src/ofday_ns.ml.t"),
     cst_t$190=caml_new_string("t"),
     cst_src_ofday_ns_ml_65_6=caml_new_string("src/ofday_ns.ml:65:6"),
     cst_t$191=caml_new_string("t"),
     cst_src_ofday_ns_ml$1=caml_new_string("src/ofday_ns.ml"),
     cst_src_ofday_ns_ml$2=caml_new_string("src/ofday_ns.ml"),
     cst_src_ofday_ns_ml$3=caml_new_string("src/ofday_ns.ml"),
     cst_src_ofday_ns_ml$4=caml_new_string("src/ofday_ns.ml"),
     cst_2f6d4fcba08a8aa5150cfb9d20cf2b24=
      caml_new_string("2f6d4fcba08a8aa5150cfb9d20cf2b24"),
     cst_t$192=caml_new_string("t"),
     cst_src_ofday_ns_ml_266_4=caml_new_string("src/ofday_ns.ml:266:4"),
     cst_t$193=caml_new_string("t"),
     module_name$12=caml_new_string("Core.Time_ns.Ofday"),
     cst_core_kernel$370=caml_new_string("core_kernel"),
     cst_time_has_no_time_zone_or_UTC_offset$0=
      caml_new_string("time has no time zone or UTC offset"),
     cst$176=caml_new_string(" "),
     cst$177=caml_new_string(" "),
     cst_no_spaces_or_T_found$0=caml_new_string("no spaces or T found"),
     cst_too_many_spaces$0=caml_new_string("too many spaces"),
     utc_offset$1=[0,0.],
     cst_00$0=caml_new_string(":00"),
     cst$175=caml_new_string(":"),
     cst_Time_of_localized_string$0=
      caml_new_string("Time.of_localized_string"),
     cst_no_space_in_filename_string$0=
      caml_new_string("no space in filename string"),
     cst$174=caml_new_string("_"),
     cst$173=caml_new_string(" "),
     cst$172=caml_new_string(" "),
     cst_Z$2=caml_new_string("Z"),
     cst$170=caml_new_string("-"),
     cst$171=caml_new_string("+"),
     cst_Time_to_date_ofday_precise$0=
      caml_new_string("Time.to_date_ofday_precise"),
     cst_Z$1=caml_new_string("Z"),
     cst_Z$0=caml_new_string("Z"),
     cst$169=caml_new_string(" "),
     cst$168=caml_new_string("."),
     cst$167=caml_new_string(""),
     cst_Time_ns_next_multiple_got_nonpositive_interval=
      caml_new_string("Time_ns.next_multiple got nonpositive interval"),
     cst_Time_ns_does_not_support_this_time=
      caml_new_string("Time_ns does not support this time"),
     cst_Time_ns_to_int_ns_since_epoch_unsupported_on_32bit_machines=
      caml_new_string
       ("Time_ns.to_int_ns_since_epoch: unsupported on 32bit machines"),
     cst_Time_ns_overflow=caml_new_string("Time_ns: overflow"),
     cst_core_kernel$371=caml_new_string("core_kernel"),
     cst_src_time_ns_ml=caml_new_string("src/time_ns.ml"),
     cst$166=caml_new_string(""),
     cst_core_kernel$372=caml_new_string("core_kernel"),
     cst_t$194=caml_new_string("t"),
     cst_src_time_ns_ml_9_0=caml_new_string("src/time_ns.ml:9:0"),
     cst_t$195=caml_new_string("t"),
     name$64=caml_new_string("src/time_ns.ml.t"),
     cst_t$196=caml_new_string("t"),
     cst_src_time_ns_ml_318_6=caml_new_string("src/time_ns.ml:318:6"),
     cst_t$197=caml_new_string("t"),
     cst_Core_kernel_Time_ns_To_and_of_string_Time_ns_of_string=
      caml_new_string
       ("Core_kernel__Time_ns.To_and_of_string.Time_ns_of_string"),
     cst_core_kernel$373=caml_new_string("core_kernel"),
     cst_core_kernel$374=caml_new_string("core_kernel"),
     cst_src_time_ns_alternate_sexp_ml=
      caml_new_string("src/time_ns_alternate_sexp.ml"),
     cst$178=caml_new_string(""),
     cst_core_kernel$375=caml_new_string("core_kernel"),
     cst_core_kernel$376=caml_new_string("core_kernel"),
     cst_core_kernel$377=caml_new_string("core_kernel"),
     cst_src_substring_intf_ml=caml_new_string("src/substring_intf.ml"),
     cst$179=caml_new_string(""),
     cst_core_kernel$378=caml_new_string("core_kernel"),
     cst_core_kernel$379=caml_new_string("core_kernel"),
     cst_Substring_suffix=caml_new_string("Substring.suffix"),
     cst_Substring_prefix=caml_new_string("Substring.prefix"),
     cst_Substring_drop_suffix=caml_new_string("Substring.drop_suffix"),
     cst_Substring_drop_prefix=caml_new_string("Substring.drop_prefix"),
     cst_index_out_of_bounds=caml_new_string("index out of bounds"),
     cst_string$1=caml_new_string("string"),
     cst_bigstring=caml_new_string("bigstring"),
     cst_core_kernel$380=caml_new_string("core_kernel"),
     cst_src_make_substring_ml=caml_new_string("src/make_substring.ml"),
     cst$180=caml_new_string(""),
     cst_core_kernel$381=caml_new_string("core_kernel"),
     cst_core_kernel$382=caml_new_string("core_kernel"),
     cst_core_kernel$383=caml_new_string("core_kernel"),
     cst_src_substring_ml=caml_new_string("src/substring.ml"),
     cst$181=caml_new_string(""),
     cst_core_kernel$384=caml_new_string("core_kernel"),
     cst_core_kernel$385=caml_new_string("core_kernel"),
     cst_core_kernel$386=caml_new_string("core_kernel"),
     cst_src_string_id_intf_ml=caml_new_string("src/string_id_intf.ml"),
     cst$182=caml_new_string(""),
     cst_core_kernel$387=caml_new_string("core_kernel"),
     cst_core_kernel$388=caml_new_string("core_kernel"),
     cst_it_is_empty=caml_new_string("it is empty"),
     cst_it_has_whitespace_on_the_edge=
      caml_new_string("it has whitespace on the edge"),
     cst_core_kernel$389=caml_new_string("core_kernel"),
     cst_src_string_id_ml=caml_new_string("src/string_id.ml"),
     cst$183=caml_new_string(""),
     cst_core_kernel$390=caml_new_string("core_kernel"),
     module_name$13=caml_new_string("Core_kernel.String_id"),
     cst_core_kernel$391=caml_new_string("core_kernel"),
     cst_core_kernel$392=caml_new_string("core_kernel"),
     cst_src_arg_ml=caml_new_string("src/arg.ml"),
     cst$184=caml_new_string(""),
     cst_core_kernel$393=caml_new_string("core_kernel"),
     cst_core_kernel$394=caml_new_string("core_kernel"),
     cst_core_kernel$395=caml_new_string("core_kernel"),
     cst_src_bag_intf_ml=caml_new_string("src/bag_intf.ml"),
     cst$185=caml_new_string(""),
     cst_core_kernel$396=caml_new_string("core_kernel"),
     cst_core_kernel$397=caml_new_string("core_kernel"),
     cst_core_kernel$398=caml_new_string("core_kernel"),
     cst_src_bag_ml=caml_new_string("src/bag.ml"),
     cst$186=caml_new_string(""),
     cst_core_kernel$399=caml_new_string("core_kernel"),
     cst_core_kernel$400=caml_new_string("core_kernel"),
     cst_core_kernel$401=caml_new_string("core_kernel"),
     cst_src_bigbuffer_internal_ml=
      caml_new_string("src/bigbuffer_internal.ml"),
     cst$187=caml_new_string(""),
     cst_core_kernel$402=caml_new_string("core_kernel"),
     cst_core_kernel$403=caml_new_string("core_kernel"),
     cst_Bigbuffer_add_substitute_cannot_find_closing_delimiter=
      caml_new_string
       ("Bigbuffer.add_substitute: cannot find closing delimiter"),
     cst_Bigbuffer_add_subbytes=caml_new_string("Bigbuffer.add_subbytes"),
     cst_Bigbuffer_add_substring=caml_new_string("Bigbuffer.add_substring"),
     cst_Bigbuffer_nth=caml_new_string("Bigbuffer.nth"),
     cst_core_kernel$404=caml_new_string("core_kernel"),
     cst_src_bigbuffer_ml=caml_new_string("src/bigbuffer.ml"),
     cst$188=caml_new_string(""),
     cst_core_kernel$405=caml_new_string("core_kernel"),
     cst_core_kernel$406=caml_new_string("core_kernel"),
     cst_core_kernel$407=caml_new_string("core_kernel"),
     cst_src_bigsubstring_ml=caml_new_string("src/bigsubstring.ml"),
     cst$189=caml_new_string(""),
     cst_core_kernel$408=caml_new_string("core_kernel"),
     cst_core_kernel$409=caml_new_string("core_kernel"),
     cst_false=caml_new_string("false"),
     cst_true=caml_new_string("true"),
     cst_and=caml_new_string("and"),
     cst_if=caml_new_string("if"),
     cst_not=caml_new_string("not"),
     cst_or=caml_new_string("or"),
     name$65=caml_new_string("not"),
     name$66=caml_new_string("if"),
     cst_src_blang_ml_T_t=caml_new_string("src/blang.ml.T.t"),
     cst_t$207=caml_new_string("t"),
     cst_core_kernel$410=caml_new_string("core_kernel"),
     cst_src_blang_ml=caml_new_string("src/blang.ml"),
     cst$190=caml_new_string(""),
     cst_core_kernel$411=caml_new_string("core_kernel"),
     cst_a$83=caml_new_string("a"),
     cst_src_blang_ml_42_14=caml_new_string("src/blang.ml:42:14"),
     cst_Base=caml_new_string("Base"),
     cst_a$84=caml_new_string("a"),
     cst_src_blang_ml_41_26=caml_new_string("src/blang.ml:41:26"),
     cst_t$198=caml_new_string("t"),
     cst_a$85=caml_new_string("a"),
     cst_src_blang_ml_41_19=caml_new_string("src/blang.ml:41:19"),
     cst_t$199=caml_new_string("t"),
     cst_a$86=caml_new_string("a"),
     cst_src_blang_ml_41_12=caml_new_string("src/blang.ml:41:12"),
     cst_t$200=caml_new_string("t"),
     cst_If=caml_new_string("If"),
     cst_a$87=caml_new_string("a"),
     cst_src_blang_ml_40_13=caml_new_string("src/blang.ml:40:13"),
     cst_t$201=caml_new_string("t"),
     cst_Not=caml_new_string("Not"),
     cst_a$88=caml_new_string("a"),
     cst_src_blang_ml_39_19=caml_new_string("src/blang.ml:39:19"),
     cst_t$202=caml_new_string("t"),
     cst_a$89=caml_new_string("a"),
     cst_src_blang_ml_39_12=caml_new_string("src/blang.ml:39:12"),
     cst_t$203=caml_new_string("t"),
     cst_Or=caml_new_string("Or"),
     cst_a$90=caml_new_string("a"),
     cst_src_blang_ml_38_20=caml_new_string("src/blang.ml:38:20"),
     cst_t$204=caml_new_string("t"),
     cst_a$91=caml_new_string("a"),
     cst_src_blang_ml_38_13=caml_new_string("src/blang.ml:38:13"),
     cst_t$205=caml_new_string("t"),
     cst_And=caml_new_string("And"),
     cst_a$92=caml_new_string("a"),
     cst_t$206=caml_new_string("t"),
     cst_src_blang_ml_35_2=caml_new_string("src/blang.ml:35:2"),
     cst_core_kernel$412=caml_new_string("core_kernel"),
     cst_core_kernel$413=caml_new_string("core_kernel"),
     cst_src_bounded_index_intf_ml=
      caml_new_string("src/bounded_index_intf.ml"),
     cst$191=caml_new_string(""),
     cst_core_kernel$414=caml_new_string("core_kernel"),
     cst_core_kernel$415=caml_new_string("core_kernel"),
     cst_t$212=caml_new_string("t"),
     cst_src_bounded_index_ml_76_2=
      caml_new_string("src/bounded_index.ml:76:2"),
     cst_t$213=caml_new_string("t"),
     cst_t$214=caml_new_string("t"),
     cst_src_bounded_index_ml_98_6=
      caml_new_string("src/bounded_index.ml:98:6"),
     cst_t$215=caml_new_string("t"),
     cst_of$0=caml_new_string("of"),
     cst_to$0=caml_new_string("to"),
     cst_invalid_sexp_for_index=caml_new_string("invalid sexp for index"),
     cst_to=caml_new_string("to"),
     cst_of=caml_new_string("of"),
     cst_index_out_of_bounds$0=caml_new_string("index out of bounds"),
     cst_src_bounded_index_ml_Stable_V1_Make_t=
      caml_new_string("src/bounded_index.ml.Stable.V1.Make.t"),
     cst_max_index=caml_new_string("max_index"),
     cst_min_index=caml_new_string("min_index"),
     cst_index=caml_new_string("index"),
     cst_t$208=caml_new_string("t"),
     cst_src_bounded_index_ml_10_6=
      caml_new_string("src/bounded_index.ml:10:6"),
     cst_t$209=caml_new_string("t"),
     tp_loc$30=
      caml_new_string("src/bounded_index.ml.Stable.V1.Make.For_sexpable.t"),
     cst_t$210=caml_new_string("t"),
     cst_src_bounded_index_ml_52_10=
      caml_new_string("src/bounded_index.ml:52:10"),
     cst_t$211=caml_new_string("t"),
     cst_core_kernel$416=caml_new_string("core_kernel"),
     cst_src_bounded_index_ml=caml_new_string("src/bounded_index.ml"),
     cst$192=caml_new_string(""),
     cst_core_kernel$417=caml_new_string("core_kernel"),
     cst_core_kernel$418=caml_new_string("core_kernel"),
     cst_Heap_block_create_exn_called_with_non_heap_block=
      caml_new_string("Heap_block.create_exn called with non heap block"),
     cst_core_kernel$419=caml_new_string("core_kernel"),
     cst_src_heap_block_ml=caml_new_string("src/heap_block.ml"),
     cst$193=caml_new_string(""),
     cst_core_kernel$420=caml_new_string("core_kernel"),
     cst_core_kernel$421=caml_new_string("core_kernel"),
     cst_gc_alarm=caml_new_string("<gc alarm>"),
     cst_max_overhead$0=caml_new_string("max_overhead"),
     cst_allocation_policy$0=caml_new_string("allocation_policy"),
     cst_custom_major_ratio$0=caml_new_string("custom_major_ratio"),
     cst_custom_minor_max_size$0=caml_new_string("custom_minor_max_size"),
     cst_custom_minor_ratio$0=caml_new_string("custom_minor_ratio"),
     cst_major_heap_increment$0=caml_new_string("major_heap_increment"),
     cst_minor_heap_size$0=caml_new_string("minor_heap_size"),
     cst_space_overhead$0=caml_new_string("space_overhead"),
     cst_stack_limit$0=caml_new_string("stack_limit"),
     cst_verbose$0=caml_new_string("verbose"),
     cst_window_size$0=caml_new_string("window_size"),
     cst_custom_minor_max_size$1=caml_new_string("custom_minor_max_size"),
     cst_custom_minor_ratio$1=caml_new_string("custom_minor_ratio"),
     cst_custom_major_ratio$1=caml_new_string("custom_major_ratio"),
     cst_window_size$1=caml_new_string("window_size"),
     cst_allocation_policy$1=caml_new_string("allocation_policy"),
     cst_stack_limit$1=caml_new_string("stack_limit"),
     cst_max_overhead$1=caml_new_string("max_overhead"),
     cst_verbose$1=caml_new_string("verbose"),
     cst_space_overhead$1=caml_new_string("space_overhead"),
     cst_major_heap_increment$1=caml_new_string("major_heap_increment"),
     cst_minor_heap_size$1=caml_new_string("minor_heap_size"),
     cst_src_gc_ml_Control_T_t=caml_new_string("src/gc.ml.Control.T.t"),
     cst_live_words$0=caml_new_string("live_words"),
     cst_compactions$0=caml_new_string("compactions"),
     cst_fragments$0=caml_new_string("fragments"),
     cst_free_blocks$0=caml_new_string("free_blocks"),
     cst_free_words$0=caml_new_string("free_words"),
     cst_heap_chunks$0=caml_new_string("heap_chunks"),
     cst_heap_words$0=caml_new_string("heap_words"),
     cst_largest_free$0=caml_new_string("largest_free"),
     cst_live_blocks$0=caml_new_string("live_blocks"),
     cst_major_collections$0=caml_new_string("major_collections"),
     cst_major_words$0=caml_new_string("major_words"),
     cst_minor_collections$0=caml_new_string("minor_collections"),
     cst_minor_words$0=caml_new_string("minor_words"),
     cst_promoted_words$0=caml_new_string("promoted_words"),
     cst_stack_size$0=caml_new_string("stack_size"),
     cst_top_heap_words$0=caml_new_string("top_heap_words"),
     cst_stack_size$1=caml_new_string("stack_size"),
     cst_top_heap_words$1=caml_new_string("top_heap_words"),
     cst_compactions$1=caml_new_string("compactions"),
     cst_fragments$1=caml_new_string("fragments"),
     cst_largest_free$1=caml_new_string("largest_free"),
     cst_free_blocks$1=caml_new_string("free_blocks"),
     cst_free_words$1=caml_new_string("free_words"),
     cst_live_blocks$1=caml_new_string("live_blocks"),
     cst_live_words$1=caml_new_string("live_words"),
     cst_heap_chunks$1=caml_new_string("heap_chunks"),
     cst_heap_words$1=caml_new_string("heap_words"),
     cst_major_collections$1=caml_new_string("major_collections"),
     cst_minor_collections$1=caml_new_string("minor_collections"),
     cst_major_words$1=caml_new_string("major_words"),
     cst_promoted_words$1=caml_new_string("promoted_words"),
     cst_minor_words$1=caml_new_string("minor_words"),
     cst_src_gc_ml_Stat_T_t=caml_new_string("src/gc.ml.Stat.T.t"),
     cst_Best_fit=caml_new_string("Best_fit"),
     cst_First_fit=caml_new_string("First_fit"),
     cst_Next_fit=caml_new_string("Next_fit"),
     cst_best_fit=caml_new_string("best_fit"),
     cst_first_fit=caml_new_string("first_fit"),
     cst_next_fit=caml_new_string("next_fit"),
     cst_Best_fit$0=caml_new_string("Best_fit"),
     cst_First_fit$0=caml_new_string("First_fit"),
     cst_Next_fit$0=caml_new_string("Next_fit"),
     cst_best_fit$0=caml_new_string("best_fit"),
     cst_first_fit$0=caml_new_string("first_fit"),
     cst_next_fit$0=caml_new_string("next_fit"),
     cst_src_gc_ml_Stable_Allocation_policy_V1_t=
      caml_new_string("src/gc.ml.Stable.Allocation_policy.V1.t"),
     cst_core_kernel$422=caml_new_string("core_kernel"),
     cst_src_gc_ml=caml_new_string("src/gc.ml"),
     cst$194=caml_new_string(""),
     cst_core_kernel$423=caml_new_string("core_kernel"),
     cst_t$216=caml_new_string("t"),
     cst_src_gc_ml_6_6=caml_new_string("src/gc.ml:6:6"),
     cst_t$217=caml_new_string("t"),
     tp_loc$31=caml_new_string("src/gc.ml.Stable.Allocation_policy.V1.t"),
     cst_stack_size=caml_new_string("stack_size"),
     cst_top_heap_words=caml_new_string("top_heap_words"),
     cst_compactions=caml_new_string("compactions"),
     cst_fragments=caml_new_string("fragments"),
     cst_largest_free=caml_new_string("largest_free"),
     cst_free_blocks=caml_new_string("free_blocks"),
     cst_free_words=caml_new_string("free_words"),
     cst_live_blocks=caml_new_string("live_blocks"),
     cst_live_words=caml_new_string("live_words"),
     cst_heap_chunks=caml_new_string("heap_chunks"),
     cst_heap_words=caml_new_string("heap_words"),
     cst_major_collections=caml_new_string("major_collections"),
     cst_minor_collections=caml_new_string("minor_collections"),
     cst_major_words=caml_new_string("major_words"),
     cst_promoted_words=caml_new_string("promoted_words"),
     cst_minor_words=caml_new_string("minor_words"),
     cst_t$218=caml_new_string("t"),
     cst_src_gc_ml_19_4=caml_new_string("src/gc.ml:19:4"),
     cst_t$219=caml_new_string("t"),
     tp_loc$32=caml_new_string("src/gc.ml.Stat.T.t"),
     names=
      caml_list_of_js_array
       ([caml_new_string("minor_words"),
         caml_new_string("promoted_words"),
         caml_new_string("major_words"),
         caml_new_string("minor_collections"),
         caml_new_string("major_collections"),
         caml_new_string("heap_words"),
         caml_new_string("heap_chunks"),
         caml_new_string("live_words"),
         caml_new_string("live_blocks"),
         caml_new_string("free_words"),
         caml_new_string("free_blocks"),
         caml_new_string("largest_free"),
         caml_new_string("fragments"),
         caml_new_string("compactions"),
         caml_new_string("top_heap_words"),
         caml_new_string("stack_size")]),
     cst_stack_size$2=caml_new_string("stack_size"),
     cst_top_heap_words$2=caml_new_string("top_heap_words"),
     cst_compactions$2=caml_new_string("compactions"),
     cst_fragments$2=caml_new_string("fragments"),
     cst_largest_free$2=caml_new_string("largest_free"),
     cst_free_blocks$2=caml_new_string("free_blocks"),
     cst_free_words$2=caml_new_string("free_words"),
     cst_live_blocks$2=caml_new_string("live_blocks"),
     cst_live_words$2=caml_new_string("live_words"),
     cst_heap_chunks$2=caml_new_string("heap_chunks"),
     cst_heap_words$2=caml_new_string("heap_words"),
     cst_major_collections$2=caml_new_string("major_collections"),
     cst_minor_collections$2=caml_new_string("minor_collections"),
     cst_major_words$2=caml_new_string("major_words"),
     cst_promoted_words$2=caml_new_string("promoted_words"),
     cst_minor_words$2=caml_new_string("minor_words"),
     cst_custom_minor_max_size=caml_new_string("custom_minor_max_size"),
     cst_custom_minor_ratio=caml_new_string("custom_minor_ratio"),
     cst_custom_major_ratio=caml_new_string("custom_major_ratio"),
     cst_window_size=caml_new_string("window_size"),
     cst_allocation_policy=caml_new_string("allocation_policy"),
     cst_stack_limit=caml_new_string("stack_limit"),
     cst_max_overhead=caml_new_string("max_overhead"),
     cst_verbose=caml_new_string("verbose"),
     cst_space_overhead=caml_new_string("space_overhead"),
     cst_major_heap_increment=caml_new_string("major_heap_increment"),
     cst_minor_heap_size=caml_new_string("minor_heap_size"),
     cst_t$220=caml_new_string("t"),
     cst_src_gc_ml_65_4=caml_new_string("src/gc.ml:65:4"),
     cst_t$221=caml_new_string("t"),
     tp_loc$33=caml_new_string("src/gc.ml.Control.T.t"),
     names$0=
      caml_list_of_js_array
       ([caml_new_string("minor_heap_size"),
         caml_new_string("major_heap_increment"),
         caml_new_string("space_overhead"),
         caml_new_string("verbose"),
         caml_new_string("max_overhead"),
         caml_new_string("stack_limit"),
         caml_new_string("allocation_policy"),
         caml_new_string("window_size"),
         caml_new_string("custom_major_ratio"),
         caml_new_string("custom_minor_ratio"),
         caml_new_string("custom_minor_max_size")]),
     cst_custom_minor_max_size$2=caml_new_string("custom_minor_max_size"),
     cst_custom_minor_ratio$2=caml_new_string("custom_minor_ratio"),
     cst_custom_major_ratio$2=caml_new_string("custom_major_ratio"),
     cst_window_size$2=caml_new_string("window_size"),
     cst_allocation_policy$2=caml_new_string("allocation_policy"),
     cst_stack_limit$2=caml_new_string("stack_limit"),
     cst_max_overhead$2=caml_new_string("max_overhead"),
     cst_verbose$2=caml_new_string("verbose"),
     cst_space_overhead$2=caml_new_string("space_overhead"),
     cst_major_heap_increment$2=caml_new_string("major_heap_increment"),
     cst_minor_heap_size$2=caml_new_string("minor_heap_size"),
     cst_0=caml_new_string("0"),
     cst_core_kernel$424=caml_new_string("core_kernel"),
     cst_t$223=caml_new_string("t"),
     cst_core_kernel$425=caml_new_string("core_kernel"),
     cst_src_option_array_ml=caml_new_string("src/option_array.ml"),
     cst$195=caml_new_string(""),
     cst_core_kernel$426=caml_new_string("core_kernel"),
     cst_a$93=caml_new_string("a"),
     cst_src_option_array_ml_9_18=caml_new_string("src/option_array.ml:9:18"),
     cst_a$94=caml_new_string("a"),
     cst_t$222=caml_new_string("t"),
     cst_src_option_array_ml_9_6=caml_new_string("src/option_array.ml:9:6"),
     cst_core_kernel$427=caml_new_string("core_kernel"),
     pos$0=caml_new_string("src/bus.ml:732:21"),
     pos=caml_new_string("src/bus.ml:731:21"),
     cst_src_bus_ml$0=caml_new_string("src/bus.ml"),
     cst_write_doesn_t_allocate_when_inlined=
      caml_new_string(": write doesn't allocate when inlined"),
     cst_Bus_fold_exn_called_after_first_write=
      caml_new_string("Bus.fold_exn called after first write"),
     cst_Bus_iter_exn_called_after_first_write=
      caml_new_string("Bus.iter_exn called after first write"),
     cst_Bus_subscribe_exn_called_after_first_write=
      caml_new_string("Bus.subscribe_exn called after first write"),
     cst_Bus_subscriber_raised=caml_new_string("Bus subscriber raised"),
     cst_Bus_subscriber_s_on_callback_raise_raised=
      caml_new_string("Bus subscriber's [on_callback_raise] raised"),
     cst_Bus_write_called_on_closed_bus=
      caml_new_string("[Bus.write] called on closed bus"),
     cst_Bus_write_called_from_callback_on_the_same_bus=
      caml_new_string("[Bus.write] called from callback on the same bus"),
     cst_core_kernel$428=caml_new_string("core_kernel"),
     cst_src_bus_ml=caml_new_string("src/bus.ml"),
     cst$196=caml_new_string(""),
     cst_core_kernel$429=caml_new_string("core_kernel"),
     cst_callback=caml_new_string("callback"),
     cst_callbacks=caml_new_string("callbacks"),
     cst_subscribers=caml_new_string("subscribers"),
     cst_num_subscribers=caml_new_string("num_subscribers"),
     cst_src_bus_ml$1=caml_new_string("src/bus.ml"),
     cst$197=caml_new_string(""),
     cst_core_kernel$430=caml_new_string("core_kernel"),
     cst$199=caml_new_string("."),
     cst_invariant_pre_condition_failed=
      caml_new_string("invariant pre-condition failed"),
     cst_invariant_post_condition_failed=
      caml_new_string("invariant post-condition failed"),
     cst$200=caml_new_string("."),
     cst_core_kernel$431=caml_new_string("core_kernel"),
     cst_src_debug_ml=caml_new_string("src/debug.ml"),
     cst$198=caml_new_string(""),
     cst_core_kernel$432=caml_new_string("core_kernel"),
     cst_core_kernel$433=caml_new_string("core_kernel"),
     cst_Deque_front_index_exn=caml_new_string("Deque.front_index_exn"),
     cst_Deque_back_index_exn=caml_new_string("Deque.back_index_exn"),
     cst_el$14=caml_new_string("el"),
     cst_Deque_true_index_exn=caml_new_string("Deque.true_index_exn"),
     cst_Deque_dequeue_back_exn_passed_an_empty_queue=
      caml_new_string("Deque.dequeue_back_exn passed an empty queue"),
     cst_Deque_dequeue_front_exn_passed_an_empty_queue=
      caml_new_string("Deque.dequeue_front_exn passed an empty queue"),
     cst_Deque_peek_back_exn_passed_an_empty_queue=
      caml_new_string("Deque.peek_back_exn passed an empty queue"),
     cst_Deque_peek_front_exn_passed_an_empty_queue=
      caml_new_string("Deque.peek_front_exn passed an empty queue"),
     cst_core_kernel$434=caml_new_string("core_kernel"),
     cst_src_deque_ml=caml_new_string("src/deque.ml"),
     cst$201=caml_new_string(""),
     cst_core_kernel$435=caml_new_string("core_kernel"),
     cst_a$95=caml_new_string("a"),
     cst_src_deque_ml_451_17=caml_new_string("src/deque.ml:451:17"),
     cst_a$96=caml_new_string("a"),
     cst_el$13=caml_new_string("el"),
     cst_src_deque_ml_451_4=caml_new_string("src/deque.ml:451:4"),
     cst_34c1e9ca_4992_11e6_a686_8b4bd4f87796=
      caml_new_string("34c1e9ca-4992-11e6-a686-8b4bd4f87796"),
     module_name$14=[0,caml_new_string("Core_kernel.Deque")],
     cst_core_kernel$436=caml_new_string("core_kernel"),
     cst_core_kernel$437=caml_new_string("core_kernel"),
     cst_src_deriving_hash_intf_ml=
      caml_new_string("src/deriving_hash_intf.ml"),
     cst$202=caml_new_string(""),
     cst_core_kernel$438=caml_new_string("core_kernel"),
     cst_core_kernel$439=caml_new_string("core_kernel"),
     cst_core_kernel$440=caml_new_string("core_kernel"),
     cst_src_deriving_hash_ml=caml_new_string("src/deriving_hash.ml"),
     cst$203=caml_new_string(""),
     cst_core_kernel$441=caml_new_string("core_kernel"),
     cst_core_kernel$442=caml_new_string("core_kernel"),
     cst_core_kernel$443=caml_new_string("core_kernel"),
     cst_src_ephemeron_ml=caml_new_string("src/ephemeron.ml"),
     cst$204=caml_new_string(""),
     cst_core_kernel$444=caml_new_string("core_kernel"),
     cst_core_kernel$445=caml_new_string("core_kernel"),
     cst_el$16=caml_new_string("el"),
     cst_Fdeque_back_0_front_2=
      caml_new_string("Fdeque: |back| = 0, |front| >= 2"),
     cst_Fdeque_front_0_back_2=
      caml_new_string("Fdeque: |front| = 0, |back| >= 2"),
     cst_core_kernel$446=caml_new_string("core_kernel"),
     cst_src_fdeque_ml=caml_new_string("src/fdeque.ml"),
     cst$205=caml_new_string(""),
     cst_core_kernel$447=caml_new_string("core_kernel"),
     cst_Core_kernel_Fdeque_Empty=caml_new_string("Core_kernel__Fdeque.Empty"),
     acc$1=[0,0,0,0],
     cst_a$97=caml_new_string("a"),
     cst_src_fdeque_ml_309_21=caml_new_string("src/fdeque.ml:309:21"),
     cst_a$98=caml_new_string("a"),
     cst_el$15=caml_new_string("el"),
     cst_src_fdeque_ml_309_8=caml_new_string("src/fdeque.ml:309:8"),
     cst_83f96982_4992_11e6_919d_fbddcfdca576=
      caml_new_string("83f96982-4992-11e6-919d-fbddcfdca576"),
     module_name$15=[0,caml_new_string("Core_kernel.Fdeque")],
     cst_core_kernel$448=caml_new_string("core_kernel"),
     cst_core_kernel$449=caml_new_string("core_kernel"),
     cst_src_fqueue_ml=caml_new_string("src/fqueue.ml"),
     cst$206=caml_new_string(""),
     cst_core_kernel$450=caml_new_string("core_kernel"),
     cst_core_kernel$451=caml_new_string("core_kernel"),
     pos$3=caml_new_string("src/host_and_port.ml:89:36"),
     pos$2=caml_new_string("src/host_and_port.ml:78:21"),
     pos$1=caml_new_string("src/host_and_port.ml:75:21"),
     cst_localhost_8080=caml_new_string("(localhost 8080)"),
     expect=[0,caml_new_string("localhost"),8080],
     cst_localhost_8080$0=caml_new_string("localhost:8080"),
     expect$0=[0,caml_new_string("localhost"),8080],
     cst_src_host_and_port_ml$0=caml_new_string("src/host_and_port.ml"),
     cst_src_host_and_port_ml_Stable_V1_Serializable_t=
      caml_new_string("src/host_and_port.ml.Stable.V1.Serializable.t"),
     cst_core_kernel$452=caml_new_string("core_kernel"),
     cst_src_host_and_port_ml=caml_new_string("src/host_and_port.ml"),
     cst$207=caml_new_string(""),
     cst_core_kernel$453=caml_new_string("core_kernel"),
     tp_loc$34=
      caml_new_string("src/host_and_port.ml.Stable.V1.Serializable.t"),
     cst_t$224=caml_new_string("t"),
     cst_src_host_and_port_ml_7_6=caml_new_string("src/host_and_port.ml:7:6"),
     cst_t$225=caml_new_string("t"),
     cst_src_host_and_port_ml$1=caml_new_string("src/host_and_port.ml"),
     cst_src_host_and_port_ml$2=caml_new_string("src/host_and_port.ml"),
     cst_src_host_and_port_ml$3=caml_new_string("src/host_and_port.ml"),
     cst_src_host_and_port_ml$4=caml_new_string("src/host_and_port.ml"),
     cst_00bf180531f98f4e6b12a27b16abe73e=
      caml_new_string("00bf180531f98f4e6b12a27b16abe73e"),
     cst_src_host_and_port_ml$5=caml_new_string("src/host_and_port.ml"),
     cst_t_of_sexp=caml_new_string(": t_of_sexp"),
     cst_src_host_and_port_ml$6=caml_new_string("src/host_and_port.ml"),
     cst_sexp_roundtrip=caml_new_string(": sexp roundtrip"),
     module_name$16=caml_new_string("Core_kernel.Host_and_port"),
     cst_Host_and_port=caml_new_string("Host_and_port"),
     cst_core_kernel$454=caml_new_string("core_kernel"),
     cst_core_kernel$455=caml_new_string("core_kernel"),
     cst_src_optional_syntax_intf_ml=
      caml_new_string("src/optional_syntax_intf.ml"),
     cst$208=caml_new_string(""),
     cst_core_kernel$456=caml_new_string("core_kernel"),
     cst_core_kernel$457=caml_new_string("core_kernel"),
     cst_core_kernel$458=caml_new_string("core_kernel"),
     cst_src_optional_syntax_ml=caml_new_string("src/optional_syntax.ml"),
     cst$209=caml_new_string(""),
     cst_core_kernel$459=caml_new_string("core_kernel"),
     cst_core_kernel$460=caml_new_string("core_kernel"),
     cst_core_kernel$461=caml_new_string("core_kernel"),
     cst_src_immediate_option_intf_ml=
      caml_new_string("src/immediate_option_intf.ml"),
     cst$210=caml_new_string(""),
     cst_core_kernel$462=caml_new_string("core_kernel"),
     cst_core_kernel$463=caml_new_string("core_kernel"),
     cst_core_kernel$464=caml_new_string("core_kernel"),
     cst_src_immediate_option_ml=caml_new_string("src/immediate_option.ml"),
     cst$211=caml_new_string(""),
     cst_core_kernel$465=caml_new_string("core_kernel"),
     cst_core_kernel$466=caml_new_string("core_kernel"),
     cst_el$18=caml_new_string("el"),
     cst_core_kernel$467=caml_new_string("core_kernel"),
     cst_src_linked_queue_ml=caml_new_string("src/linked_queue.ml"),
     cst$212=caml_new_string(""),
     cst_core_kernel$468=caml_new_string("core_kernel"),
     cst_a$99=caml_new_string("a"),
     cst_src_linked_queue_ml_9_17=caml_new_string("src/linked_queue.ml:9:17"),
     cst_a$100=caml_new_string("a"),
     cst_el$17=caml_new_string("el"),
     cst_src_linked_queue_ml_9_4=caml_new_string("src/linked_queue.ml:9:4"),
     cst_800df9a0_4992_11e6_881d_ffe1a5c8aced=
      caml_new_string("800df9a0-4992-11e6-881d-ffe1a5c8aced"),
     module_name$17=[0,caml_new_string("Core_kernel.Linked_queue")],
     cst_core_kernel$469=caml_new_string("core_kernel"),
     cst_core_kernel$470=caml_new_string("core_kernel"),
     cst_src_memo_ml=caml_new_string("src/memo.ml"),
     cst$213=caml_new_string(""),
     cst_core_kernel$471=caml_new_string("core_kernel"),
     cst_core_kernel$472=caml_new_string("core_kernel"),
     cst_core_kernel$473=caml_new_string("core_kernel"),
     cst_src_no_polymorphic_compare_ml=
      caml_new_string("src/no_polymorphic_compare.ml"),
     cst$214=caml_new_string(""),
     cst_core_kernel$474=caml_new_string("core_kernel"),
     cst_core_kernel$475=caml_new_string("core_kernel"),
     cst_core_kernel$476=caml_new_string("core_kernel"),
     cst_src_only_in_test_ml=caml_new_string("src/only_in_test.ml"),
     cst$215=caml_new_string(""),
     cst_core_kernel$477=caml_new_string("core_kernel"),
     cst_core_kernel$478=caml_new_string("core_kernel"),
     cst_core_kernel$479=caml_new_string("core_kernel"),
     cst_src_pid_ml=caml_new_string("src/pid.ml"),
     cst$216=caml_new_string(""),
     cst_core_kernel$480=caml_new_string("core_kernel"),
     cst_Core_kernel_Pid_Stable_V1_Without_containers_Pid_must_be_positive=
      caml_new_string
       ("Core_kernel__Pid.Stable.V1.Without_containers.Pid_must_be_positive"),
     cst_t$226=caml_new_string("t"),
     cst_src_pid_ml_50_4=caml_new_string("src/pid.ml:50:4"),
     cst_t$227=caml_new_string("t"),
     module_name$18=caml_new_string("Core_kernel.Pid"),
     cst_core_kernel$481=caml_new_string("core_kernel"),
     cst_core_kernel$482=caml_new_string("core_kernel"),
     cst_src_printexc_ml=caml_new_string("src/printexc.ml"),
     cst$217=caml_new_string(""),
     cst_core_kernel$483=caml_new_string("core_kernel"),
     cst_core_kernel$484=caml_new_string("core_kernel"),
     cst_el$20=caml_new_string("el"),
     cst_core_kernel$485=caml_new_string("core_kernel"),
     cst_src_queue_ml=caml_new_string("src/queue.ml"),
     cst$218=caml_new_string(""),
     cst_core_kernel$486=caml_new_string("core_kernel"),
     cst_a$101=caml_new_string("a"),
     cst_src_queue_ml_34_19=caml_new_string("src/queue.ml:34:19"),
     cst_a$102=caml_new_string("a"),
     cst_el$19=caml_new_string("el"),
     cst_src_queue_ml_34_6=caml_new_string("src/queue.ml:34:6"),
     cst_b4c84254_4992_11e6_9ba7_734e154027bd=
      caml_new_string("b4c84254-4992-11e6-9ba7-734e154027bd"),
     module_name$19=[0,caml_new_string("Core_kernel.Queue")],
     cst_core_kernel$487=caml_new_string("core_kernel"),
     cst_Set_once_get_exn_unset=caml_new_string("[Set_once.get_exn] unset"),
     cst_Set_once_set_exn_already_set=
      caml_new_string("[Set_once.set_exn] already set"),
     cst_unset=caml_new_string("unset"),
     cst_t$229=caml_new_string("t"),
     cst_core_kernel$488=caml_new_string("core_kernel"),
     cst_src_set_once_ml=caml_new_string("src/set_once.ml"),
     cst$219=caml_new_string(""),
     cst_core_kernel$489=caml_new_string("core_kernel"),
     cst_a$103=caml_new_string("a"),
     cst_src_set_once_ml_14_18=caml_new_string("src/set_once.ml:14:18"),
     cst_a$104=caml_new_string("a"),
     cst_t$228=caml_new_string("t"),
     cst_src_set_once_ml_14_6=caml_new_string("src/set_once.ml:14:6"),
     cst_core_kernel$490=caml_new_string("core_kernel"),
     cst_Neg$4=caml_new_string("Neg"),
     cst_Zero$4=caml_new_string("Zero"),
     cst_Pos$4=caml_new_string("Pos"),
     cst_Nan$1=caml_new_string("Nan"),
     cst_src_sign_or_nan_ml_Stable_V1_t=
      caml_new_string("src/sign_or_nan.ml.Stable.V1.t"),
     cst_Nan=caml_new_string("Nan"),
     cst_Neg$2=caml_new_string("Neg"),
     cst_Pos$2=caml_new_string("Pos"),
     cst_Zero$2=caml_new_string("Zero"),
     cst_nan$0=caml_new_string("nan"),
     cst_neg$1=caml_new_string("neg"),
     cst_pos$1=caml_new_string("pos"),
     cst_zero$1=caml_new_string("zero"),
     cst_Nan$0=caml_new_string("Nan"),
     cst_Neg$3=caml_new_string("Neg"),
     cst_Pos$3=caml_new_string("Pos"),
     cst_Zero$3=caml_new_string("Zero"),
     cst_nan$1=caml_new_string("nan"),
     cst_neg$2=caml_new_string("neg"),
     cst_pos$2=caml_new_string("pos"),
     cst_zero$2=caml_new_string("zero"),
     cst_core_kernel$491=caml_new_string("core_kernel"),
     cst_src_sign_or_nan_ml=caml_new_string("src/sign_or_nan.ml"),
     cst$220=caml_new_string(""),
     cst_core_kernel$492=caml_new_string("core_kernel"),
     tp_loc$35=caml_new_string("src/sign_or_nan.ml.Stable.V1.t"),
     cst_t$230=caml_new_string("t"),
     cst_src_sign_or_nan_ml_6_4=caml_new_string("src/sign_or_nan.ml:6:4"),
     cst_t$231=caml_new_string("t"),
     name$67=caml_new_string("src/sign_or_nan.ml.Stable.V1.t"),
     cst_core_kernel$493=caml_new_string("core_kernel"),
     cst_bin_io_deserialization_mismatch$0=
      caml_new_string("bin-io deserialization mismatch"),
     cst_serialization_mismatch=caml_new_string("serialization mismatch"),
     cst_sexp_deserialization_msimatch=
      caml_new_string("sexp deserialization msimatch"),
     cst_expected_list_when_serializing_unordered_container=
      caml_new_string("expected list when serializing unordered container"),
     cst_sexp_serialization_mismatch$0=
      caml_new_string("sexp serialization mismatch"),
     cst_src_stable_unit_test_ml$3=caml_new_string("src/stable_unit_test.ml"),
     cst_sexp=caml_new_string(": sexp"),
     cst_src_stable_unit_test_ml$4=caml_new_string("src/stable_unit_test.ml"),
     cst_bin_io$0=caml_new_string(": bin_io"),
     cst_bin_io_serialization_mismatch=
      caml_new_string("bin_io serialization mismatch"),
     cst_bin_io_deserialization_mismatch=
      caml_new_string("bin_io deserialization mismatch"),
     cst_src_stable_unit_test_ml$2=caml_new_string("src/stable_unit_test.ml"),
     cst_bin_io=caml_new_string(": bin_io"),
     cst_sexp_serialization_mismatch=
      caml_new_string("sexp serialization mismatch"),
     cst_src_stable_unit_test_ml$1=caml_new_string("src/stable_unit_test.ml"),
     cst_sexp_serialization=caml_new_string(": sexp serialization"),
     cst_sexp_deserialization_mismatch=
      caml_new_string("sexp deserialization mismatch"),
     cst_could_not_deserialize_sexp=
      caml_new_string("could not deserialize sexp"),
     cst_src_stable_unit_test_ml$0=caml_new_string("src/stable_unit_test.ml"),
     cst_sexp_deserialization=caml_new_string(": sexp deserialization"),
     cst_core_kernel$494=caml_new_string("core_kernel"),
     cst_src_stable_unit_test_ml=caml_new_string("src/stable_unit_test.ml"),
     cst$221=caml_new_string(""),
     cst_core_kernel$495=caml_new_string("core_kernel"),
     cst_core_kernel$496=caml_new_string("core_kernel"),
     cst_core_kernel$497=caml_new_string("core_kernel"),
     cst_src_stack_ml=caml_new_string("src/stack.ml"),
     cst$222=caml_new_string(""),
     cst_core_kernel$498=caml_new_string("core_kernel"),
     cst_core_kernel$499=caml_new_string("core_kernel"),
     cst_core_kernel$500=caml_new_string("core_kernel"),
     cst_src_std_kernel_ml=caml_new_string("src/std_kernel.ml"),
     cst$223=caml_new_string(""),
     cst_core_kernel$501=caml_new_string("core_kernel"),
     cst_core_kernel$502=caml_new_string("core_kernel"),
     cst_core_kernel$503=caml_new_string("core_kernel"),
     cst_src_make_stable_ml=caml_new_string("src/make_stable.ml"),
     cst$224=caml_new_string(""),
     cst_core_kernel$504=caml_new_string("core_kernel"),
     cst_core_kernel$505=caml_new_string("core_kernel"),
     cst_core_kernel$506=caml_new_string("core_kernel"),
     cst_src_stable_ml=caml_new_string("src/stable.ml"),
     cst$225=caml_new_string(""),
     cst_core_kernel$507=caml_new_string("core_kernel"),
     cst_core_kernel$508=caml_new_string("core_kernel"),
     cst_core_kernel$509=caml_new_string("core_kernel"),
     cst_src_queue_intf_ml=caml_new_string("src/queue_intf.ml"),
     cst$226=caml_new_string(""),
     cst_core_kernel$510=caml_new_string("core_kernel"),
     cst_core_kernel$511=caml_new_string("core_kernel"),
     cst_Filename_of_parts_empty_parts_list=
      caml_new_string("Filename.of_parts: empty parts list"),
     cst$243=caml_new_string("."),
     cst$244=caml_new_string("/"),
     cst$245=caml_new_string("/"),
     cst$246=caml_new_string("."),
     cst$242=caml_new_string("/"),
     cst$240=caml_new_string("."),
     cst$241=caml_new_string(".."),
     cst$237=caml_new_string(""),
     cst$238=caml_new_string("/"),
     cst$239=caml_new_string("."),
     cst$228=caml_new_string(""),
     cst$231=caml_new_string(""),
     cst$232=caml_new_string("."),
     cst$233=caml_new_string(""),
     cst$229=caml_new_string(""),
     cst$230=caml_new_string("."),
     cst$234=caml_new_string(""),
     cst$235=caml_new_string("."),
     cst$236=caml_new_string("/"),
     cst_core_kernel$512=caml_new_string("core_kernel"),
     cst_src_filename_ml=caml_new_string("src/filename.ml"),
     cst$227=caml_new_string(""),
     cst_core_kernel$513=caml_new_string("core_kernel"),
     root$0=caml_new_string("/"),
     cst_core_kernel$514=caml_new_string("core_kernel"),
     cst_core_kernel$515=caml_new_string("core_kernel"),
     cst_src_explicit_dependencies_ml=
      caml_new_string("src/explicit_dependencies.ml"),
     cst$247=caml_new_string(""),
     cst_core_kernel$516=caml_new_string("core_kernel"),
     cst_core_kernel$517=caml_new_string("core_kernel"),
     cst_core_kernel$518=caml_new_string("core_kernel"),
     cst_src_command_intf_ml=caml_new_string("src/command_intf.ml"),
     cst$248=caml_new_string(""),
     cst_core_kernel$519=caml_new_string("core_kernel"),
     cst_core_kernel$520=caml_new_string("core_kernel"),
     cst$275=caml_new_string(" "),
     cst$276=caml_new_string("  "),
     cst_help$10=caml_new_string("help"),
     cst_build_info$3=caml_new_string("-build-info"),
     cst_help$11=caml_new_string("-help"),
     cst_version$6=caml_new_string("-version"),
     cst_help$12=caml_new_string("-help"),
     cst_expand_dots$0=caml_new_string("-expand-dots"),
     cst_flags$8=caml_new_string("-flags"),
     cst_r=caml_new_string("-r"),
     cst_help$13=caml_new_string("-help"),
     cst_COMMAND_OUTPUT_INSTALLATION_BASH=
      caml_new_string("COMMAND_OUTPUT_INSTALLATION_BASH"),
     cst_missing_executable_name=caml_new_string("missing executable name"),
     cst_Couldn_t_choose_a_supported_help_output_version_for_Command_exec_from_the_given_supported_versions=
      caml_new_string
       ("Couldn't choose a supported help output version for Command.exec from the given supported versions."),
     partial$1=[12,32,[2,0,[12,10,[10,0]]]],
     cst_SUBCOMMAND=caml_new_string("SUBCOMMAND"),
     cst_expand_subcommands_in_recursive_help=
      caml_new_string(" expand subcommands in recursive help"),
     cst_expand_dots=caml_new_string("-expand-dots"),
     cst_show_flags_as_well_in_recursive_help=
      caml_new_string(" show flags as well in recursive help"),
     cst_flags$7=caml_new_string("-flags"),
     cst_show_subcommands_of_subcommands_etc=
      caml_new_string(" show subcommands of subcommands, etc."),
     cst_recursive=caml_new_string("-recursive"),
     cst_explain_a_given_subcommand_perhaps_recursively=
      caml_new_string("explain a given subcommand (perhaps recursively)"),
     cst_subcommands_and_flags=
      caml_new_string("=== subcommands and flags ==="),
     cst_subcommands$8=caml_new_string("=== subcommands ==="),
     cst$274=caml_new_string("  "),
     cst_help$9=caml_new_string("[-help]"),
     cst_help$8=caml_new_string("help"),
     cst_cannot_parse_command_shape=
      caml_new_string("cannot parse command shape"),
     cst_BUG_failed_to_read=caml_new_string("BUG failed to read"),
     cst_stdout=caml_new_string("stdout"),
     cst_stderr=caml_new_string("stderr"),
     cst$272=caml_new_string(" "),
     cst$273=caml_new_string("."),
     opt=[0,0],
     cst_version$5=caml_new_string("version"),
     cst_the_version_of_this_build=
      caml_new_string("the version of this build"),
     cst_version$4=caml_new_string("-version"),
     cst_info_about_this_build=caml_new_string("info about this build"),
     cst_build_info$2=caml_new_string("-build-info"),
     cst_print_build_info_for_this_build=
      caml_new_string(" print build info for this build"),
     cst_build_info$1=caml_new_string("-build-info"),
     cst_print_the_version_of_this_build=
      caml_new_string(" print the version of this build"),
     cst_version$3=caml_new_string("-version"),
     cst_print_version_information=
      caml_new_string("print version information"),
     cst_src_command_ml_Shape_Fully_forced_t=
      caml_new_string("src/command.ml.Shape.Fully_forced.t"),
     cst_Basic$0=caml_new_string("Basic"),
     cst_Exec$6=caml_new_string("Exec"),
     cst_Group$6=caml_new_string("Group"),
     cst_basic=caml_new_string("basic"),
     cst_exec$5=caml_new_string("exec"),
     cst_group$5=caml_new_string("group"),
     cst_Basic$1=caml_new_string("Basic"),
     cst_Exec$7=caml_new_string("Exec"),
     cst_Group$7=caml_new_string("Group"),
     cst_basic$0=caml_new_string("basic"),
     cst_exec$6=caml_new_string("exec"),
     cst_group$6=caml_new_string("group"),
     cst_child_subcommand$3=caml_new_string("child_subcommand"),
     cst_path_to_exe$7=caml_new_string("path_to_exe"),
     cst_readme$14=caml_new_string("readme"),
     cst_summary$23=caml_new_string("summary"),
     cst_working_dir$5=caml_new_string("working_dir"),
     cst_child_subcommand$4=caml_new_string("child_subcommand"),
     cst_path_to_exe$8=caml_new_string("path_to_exe"),
     cst_working_dir$6=caml_new_string("working_dir"),
     cst_summary$24=caml_new_string("summary"),
     cst_src_command_ml_Shape_Exec_info_t=
      caml_new_string("src/command.ml.Shape.Exec_info.t"),
     cst_readme$11=caml_new_string("readme"),
     cst_subcommands$6=caml_new_string("subcommands"),
     cst_summary$19=caml_new_string("summary"),
     cst_subcommands$7=caml_new_string("subcommands"),
     cst_summary$20=caml_new_string("summary"),
     cst_src_command_ml_Shape_Group_info_t=
      caml_new_string("src/command.ml.Shape.Group_info.t"),
     cst_t$242=caml_new_string("t"),
     cst_src_command_ml_Shape_Base_info_grammar=
      caml_new_string("src/command.ml.Shape.Base_info.grammar"),
     cst_anons$5=caml_new_string("anons"),
     cst_flags$5=caml_new_string("flags"),
     cst_readme$8=caml_new_string("readme"),
     cst_summary$15=caml_new_string("summary"),
     cst_flags$6=caml_new_string("flags"),
     cst_anons$6=caml_new_string("anons"),
     cst_summary$16=caml_new_string("summary"),
     cst_src_command_ml_Shape_Base_info_t=
      caml_new_string("src/command.ml.Shape.Base_info.t"),
     cst_Grammar$2=caml_new_string("Grammar"),
     cst_Usage$2=caml_new_string("Usage"),
     cst_grammar$6=caml_new_string("grammar"),
     cst_usage$3=caml_new_string("usage"),
     cst_Grammar$3=caml_new_string("Grammar"),
     cst_Usage$3=caml_new_string("Usage"),
     cst_grammar$7=caml_new_string("grammar"),
     cst_usage$4=caml_new_string("usage"),
     cst_src_command_ml_Shape_Base_info_anons=
      caml_new_string("src/command.ml.Shape.Base_info.anons"),
     cst_ad_hoc$1=caml_new_string("ad_hoc"),
     cst_Ad_hoc$3=caml_new_string("Ad_hoc"),
     cst_Concat$3=caml_new_string("Concat"),
     cst_Many$3=caml_new_string("Many"),
     cst_Maybe$3=caml_new_string("Maybe"),
     cst_One$3=caml_new_string("One"),
     cst_Zero$7=caml_new_string("Zero"),
     cst_concat$1=caml_new_string("concat"),
     cst_many$1=caml_new_string("many"),
     cst_maybe$1=caml_new_string("maybe"),
     cst_one$1=caml_new_string("one"),
     cst_zero$5=caml_new_string("zero"),
     cst_ad_hoc$2=caml_new_string("ad_hoc"),
     cst_Ad_hoc$4=caml_new_string("Ad_hoc"),
     cst_Concat$4=caml_new_string("Concat"),
     cst_Many$4=caml_new_string("Many"),
     cst_Maybe$4=caml_new_string("Maybe"),
     cst_One$4=caml_new_string("One"),
     cst_Zero$8=caml_new_string("Zero"),
     cst_concat$2=caml_new_string("concat"),
     cst_many$2=caml_new_string("many"),
     cst_maybe$2=caml_new_string("maybe"),
     cst_one$2=caml_new_string("one"),
     cst_zero$6=caml_new_string("zero"),
     cst_aliases$3=caml_new_string("aliases"),
     cst_doc$3=caml_new_string("doc"),
     cst_name$7=caml_new_string("name"),
     cst_aliases$4=caml_new_string("aliases"),
     cst_doc$4=caml_new_string("doc"),
     cst_name$8=caml_new_string("name"),
     cst_src_command_ml_Shape_Flag_info_t=
      caml_new_string("src/command.ml.Shape.Flag_info.t"),
     cst_Path_passed_to_Absolute_must_be_absolute=
      caml_new_string("Path passed to `Absolute must be absolute"),
     cst_Path_passed_to_Relative_to_me_must_be_relative=
      caml_new_string("Path passed to `Relative_to_me must be relative"),
     cst_this_help_text=caml_new_string("this help text"),
     cst_help$7=caml_new_string("-help"),
     cst_unsupported_version_to_use=
      caml_new_string("unsupported version_to_use"),
     cst_V1=caml_new_string("V1"),
     cst_V2=caml_new_string("V2"),
     cst_V3=caml_new_string("V3"),
     cst_v1=caml_new_string("v1"),
     cst_v2=caml_new_string("v2"),
     cst_v3=caml_new_string("v3"),
     cst_V1$0=caml_new_string("V1"),
     cst_V2$0=caml_new_string("V2"),
     cst_V3$0=caml_new_string("V3"),
     cst_v1$0=caml_new_string("v1"),
     cst_v2$0=caml_new_string("v2"),
     cst_v3$0=caml_new_string("v3"),
     cst_Base$4=caml_new_string("Base"),
     cst_Exec$3=caml_new_string("Exec"),
     cst_Group$3=caml_new_string("Group"),
     cst_base$3=caml_new_string("base"),
     cst_exec$3=caml_new_string("exec"),
     cst_group$3=caml_new_string("group"),
     cst_Base$5=caml_new_string("Base"),
     cst_Exec$4=caml_new_string("Exec"),
     cst_Group$4=caml_new_string("Group"),
     cst_base$4=caml_new_string("base"),
     cst_exec$4=caml_new_string("exec"),
     cst_group$4=caml_new_string("group"),
     cst_Base$2=caml_new_string("Base"),
     cst_Exec$1=caml_new_string("Exec"),
     cst_Group$1=caml_new_string("Group"),
     cst_base$1=caml_new_string("base"),
     cst_exec$1=caml_new_string("exec"),
     cst_group$1=caml_new_string("group"),
     cst_Base$3=caml_new_string("Base"),
     cst_Exec$2=caml_new_string("Exec"),
     cst_Group$2=caml_new_string("Group"),
     cst_base$2=caml_new_string("base"),
     cst_exec$2=caml_new_string("exec"),
     cst_group$2=caml_new_string("group"),
     cst_Base$0=caml_new_string("Base"),
     cst_Exec=caml_new_string("Exec"),
     cst_Group=caml_new_string("Group"),
     cst_Lazy=caml_new_string("Lazy"),
     cst_base=caml_new_string("base"),
     cst_exec=caml_new_string("exec"),
     cst_group=caml_new_string("group"),
     cst_lazy=caml_new_string("lazy"),
     cst_Base$1=caml_new_string("Base"),
     cst_Exec$0=caml_new_string("Exec"),
     cst_Group$0=caml_new_string("Group"),
     cst_Lazy$0=caml_new_string("Lazy"),
     cst_base$0=caml_new_string("base"),
     cst_exec$0=caml_new_string("exec"),
     cst_group$0=caml_new_string("group"),
     cst_lazy$0=caml_new_string("lazy"),
     cst$271=caml_new_string("/"),
     cst_path_to_exe$3=caml_new_string("path_to_exe"),
     cst_readme$5=caml_new_string("readme"),
     cst_summary$11=caml_new_string("summary"),
     cst_path_to_exe$4=caml_new_string("path_to_exe"),
     cst_summary$12=caml_new_string("summary"),
     cst_path_to_exe$1=caml_new_string("path_to_exe"),
     cst_readme$4=caml_new_string("readme"),
     cst_summary$9=caml_new_string("summary"),
     cst_working_dir$1=caml_new_string("working_dir"),
     cst_path_to_exe$2=caml_new_string("path_to_exe"),
     cst_working_dir$2=caml_new_string("working_dir"),
     cst_summary$10=caml_new_string("summary"),
     cst_child_subcommand=caml_new_string("child_subcommand"),
     cst_path_to_exe=caml_new_string("path_to_exe"),
     cst_readme$3=caml_new_string("readme"),
     cst_summary$7=caml_new_string("summary"),
     cst_working_dir=caml_new_string("working_dir"),
     cst_child_subcommand$0=caml_new_string("child_subcommand"),
     cst_path_to_exe$0=caml_new_string("path_to_exe"),
     cst_working_dir$0=caml_new_string("working_dir"),
     cst_summary$8=caml_new_string("summary"),
     cst_readme$2=caml_new_string("readme"),
     cst_subcommands$1=caml_new_string("subcommands"),
     cst_summary$5=caml_new_string("summary"),
     cst_subcommands$2=caml_new_string("subcommands"),
     cst_summary$6=caml_new_string("summary"),
     cst_readme$1=caml_new_string("readme"),
     cst_subcommands=caml_new_string("subcommands"),
     cst_summary$3=caml_new_string("summary"),
     cst_subcommands$0=caml_new_string("subcommands"),
     cst_summary$4=caml_new_string("summary"),
     cst_and_arg_name_expects_exactly_one_name_got=
      caml_new_string("[and_arg_name] expects exactly one name, got"),
     cst_Command_Spec_choose_one_called_with_duplicate_name=
      caml_new_string("Command.Spec.choose_one called with duplicate name"),
     cst_For_simplicity_Command_Spec_choose_one_does_not_support_names_with_commas=
      caml_new_string
       ("For simplicity, [Command.Spec.choose_one] does not support names with commas."),
     cst_Arg_Tuple_is_not_supported_by_Command_Spec_flags_of_args_exn=
      caml_new_string
       ("Arg.Tuple is not supported by Command.Spec.flags_of_args_exn"),
     cst_Arg_Expand_is_not_supported_by_Command_Spec_flags_of_args_exn=
      caml_new_string
       ("Arg.Expand is not supported by Command.Spec.flags_of_args_exn"),
     cst_s_default_Sexp=caml_new_string("%s (default: %{Sexp})"),
     cst_default=caml_new_string(" (default: "),
     cst_anon=caml_new_string("-anon"),
     cst$267=caml_new_string("-"),
     cst$268=caml_new_string("-"),
     cst$269=caml_new_string("-"),
     cst_help$6=caml_new_string(" -help\n"),
     cst$270=caml_new_string("  "),
     cst_For_usage_information_run=
      caml_new_string("For usage information, run"),
     cst_Error_parsing_command_line=
      caml_new_string("Error parsing command line:"),
     cst$266=caml_new_string("  "),
     cst_flags$1=caml_new_string("flags"),
     cst_readme$0=caml_new_string("readme"),
     cst_summary$1=caml_new_string("summary"),
     cst_usage$1=caml_new_string("usage"),
     cst_flags$2=caml_new_string("flags"),
     cst_usage$2=caml_new_string("usage"),
     cst_summary$2=caml_new_string("summary"),
     cst_anons=caml_new_string("anons"),
     cst_flags=caml_new_string("flags"),
     cst_readme=caml_new_string("readme"),
     cst_summary=caml_new_string("summary"),
     cst_flags$0=caml_new_string("flags"),
     cst_anons$0=caml_new_string("anons"),
     cst_summary$0=caml_new_string("summary"),
     cst_Grammar=caml_new_string("Grammar"),
     cst_Usage=caml_new_string("Usage"),
     cst_grammar=caml_new_string("grammar"),
     cst_usage=caml_new_string("usage"),
     cst_Grammar$0=caml_new_string("Grammar"),
     cst_Usage$0=caml_new_string("Usage"),
     cst_grammar$0=caml_new_string("grammar"),
     cst_usage$0=caml_new_string("usage"),
     cst_help$4=caml_new_string("-help"),
     cst_Key_type_s_is_an_ambiguous_prefix_s=
      caml_new_string("%{Key_type} %s is an ambiguous prefix: %s"),
     cst_unknown_Key_type_s=caml_new_string("unknown %{Key_type} %s"),
     cst_unknown=caml_new_string("unknown "),
     cst$263=caml_new_string("-"),
     cst_invalid_Key_type_name_S=
      caml_new_string("invalid %{Key_type} name: %S"),
     cst_invalid=caml_new_string("invalid "),
     cst_invalid_Key_type_name_contains_whitespace_S=
      caml_new_string("invalid %{Key_type} name (contains whitespace): %S"),
     cst_invalid$0=caml_new_string("invalid "),
     cst$264=caml_new_string("-"),
     cst$265=caml_new_string("-"),
     cst_flag=caml_new_string("flag"),
     cst_subcommand=caml_new_string("subcommand"),
     cst_WILL_NEVER_BE_PRINTED=caml_new_string("WILL NEVER BE PRINTED"),
     cst_Empty_anonymous_argument_name_provided=
      caml_new_string("Empty anonymous argument name provided"),
     cst_BUG_asked_for_final_value_when_doing_completion=
      caml_new_string("BUG: asked for final value when doing completion"),
     cst_bug_in_command_ml$1=caml_new_string("bug in command.ml"),
     cst_Many_Zero_should_be_just_Zero=
      caml_new_string("Many Zero should be just Zero"),
     cst_Maybe_Zero_should_be_just_Zero=
      caml_new_string("Maybe Zero should be just Zero"),
     cst_Flatten_zero_and_one_element_Concat=
      caml_new_string("Flatten zero and one-element Concat"),
     cst$262=caml_new_string(""),
     cst_bug_in_command_ml=caml_new_string("bug in command.ml"),
     cst_bug_in_command_ml$0=caml_new_string("bug in command.ml"),
     cst_ad_hoc=caml_new_string("ad_hoc"),
     cst_Ad_hoc$0=caml_new_string("Ad_hoc"),
     cst_Concat$0=caml_new_string("Concat"),
     cst_Many$0=caml_new_string("Many"),
     cst_Maybe$0=caml_new_string("Maybe"),
     cst_One$0=caml_new_string("One"),
     cst_Zero$5=caml_new_string("Zero"),
     cst_concat=caml_new_string("concat"),
     cst_many=caml_new_string("many"),
     cst_maybe=caml_new_string("maybe"),
     cst_one=caml_new_string("one"),
     cst_zero$3=caml_new_string("zero"),
     cst_ad_hoc$0=caml_new_string("ad_hoc"),
     cst_Ad_hoc$1=caml_new_string("Ad_hoc"),
     cst_Concat$1=caml_new_string("Concat"),
     cst_Many$1=caml_new_string("Many"),
     cst_Maybe$1=caml_new_string("Maybe"),
     cst_One$1=caml_new_string("One"),
     cst_Zero$6=caml_new_string("Zero"),
     cst_concat$0=caml_new_string("concat"),
     cst_many$0=caml_new_string("many"),
     cst_maybe$0=caml_new_string("maybe"),
     cst_one$0=caml_new_string("one"),
     cst_zero$4=caml_new_string("zero"),
     cst$261=caml_new_string("."),
     cst_help$3=caml_new_string("help"),
     cst$260=caml_new_string(" "),
     cst$259=caml_new_string(" "),
     cst$257=caml_new_string(""),
     cst$258=caml_new_string("_"),
     cst_name$4=caml_new_string("name"),
     cst_src_command_ml$0=caml_new_string("src/command.ml"),
     cst_Command_Spec_Arg_type_comma_separated_empty_list_not_allowed=
      caml_new_string
       ("Command.Spec.Arg_type.comma_separated: empty list not allowed"),
     cst$256=caml_new_string(","),
     cst$251=caml_new_string("  "),
     cst$252=caml_new_string("  "),
     cst$253=caml_new_string("  "),
     cst$254=caml_new_string(""),
     cst$255=caml_new_string(""),
     cst$250=caml_new_string(" "),
     cst_aliases=caml_new_string("aliases"),
     cst_doc=caml_new_string("doc"),
     cst_name$2=caml_new_string("name"),
     cst_aliases$0=caml_new_string("aliases"),
     cst_doc$0=caml_new_string("doc"),
     cst_name$3=caml_new_string("name"),
     cst_help=caml_new_string("[-help]"),
     cst_help$0=caml_new_string("[-help]"),
     cst_version=caml_new_string("[-version]"),
     cst_version$0=caml_new_string("[-version]"),
     cst_build_info=caml_new_string("[-build-info]"),
     cst_build_info$0=caml_new_string("[-build-info]"),
     cst_help$1=caml_new_string("help"),
     cst_help$2=caml_new_string("help"),
     cst_version$1=caml_new_string("version"),
     cst_version$2=caml_new_string("version"),
     cst_core_kernel$521=caml_new_string("core_kernel"),
     cst_src_command_ml=caml_new_string("src/command.ml"),
     cst$249=caml_new_string(""),
     cst_core_kernel$522=caml_new_string("core_kernel"),
     cst_Core_kernel_Command_Exit_called=
      caml_new_string("Core_kernel__Command.Exit_called"),
     cst_Core_kernel_Command_Failed_to_parse_command_line=
      caml_new_string("Core_kernel__Command.Failed_to_parse_command_line"),
     tp_loc$36=caml_new_string("src/command.ml.Format.V1.t"),
     enumerate_003=[0,0,[0,1,0]],
     enumerate_004=[0,0,[0,1,0]],
     cst_src_command_ml$1=caml_new_string("src/command.ml"),
     cst_src_command_ml$2=caml_new_string("src/command.ml"),
     cst_src_command_ml$3=caml_new_string("src/command.ml"),
     cst_src_command_ml$4=caml_new_string("src/command.ml"),
     cst_bbd2aaed4d5263b36871ab962c3db5be=
      caml_new_string("bbd2aaed4d5263b36871ab962c3db5be"),
     any=[0,0,0],
     at_least_once=[0,1,0],
     at_most_once=[0,0,1],
     exactly_once=[0,1,1],
     cst_Ad_hoc=caml_new_string("Ad_hoc"),
     cst_t$232=caml_new_string("t"),
     cst_Concat=caml_new_string("Concat"),
     cst_t$233=caml_new_string("t"),
     cst_Maybe=caml_new_string("Maybe"),
     cst_t$234=caml_new_string("t"),
     cst_Many=caml_new_string("Many"),
     cst_One=caml_new_string("One"),
     cst_t$235=caml_new_string("t"),
     cst_src_command_ml_677_8=caml_new_string("src/command.ml:677:8"),
     cst_t$236=caml_new_string("t"),
     tp_loc$37=caml_new_string("src/command.ml.Anons.Grammar.Sexpable.V1.t"),
     tp_loc$38=caml_new_string("src/command.ml.Base.Sexpable.V2.anons"),
     tp_loc$39=caml_new_string("src/command.ml.Base.Sexpable.V2.t"),
     tp_loc$40=caml_new_string("src/command.ml.Base.Sexpable.V1.t"),
     cst_path=caml_new_string("path"),
     cst_args=caml_new_string("args"),
     cst_help$5=caml_new_string("help"),
     tp_loc$41=caml_new_string("src/command.ml.Group.Sexpable.V2.t"),
     tp_loc$42=caml_new_string("src/command.ml.Group.Sexpable.V1.t"),
     comp_cword=caml_new_string("COMP_CWORD"),
     tp_loc$43=caml_new_string("src/command.ml.Exec.Sexpable.V3.t"),
     tp_loc$44=caml_new_string("src/command.ml.Exec.Sexpable.V2.t"),
     tp_loc$45=caml_new_string("src/command.ml.Exec.Sexpable.V1.t"),
     tp_loc$46=caml_new_string("src/command.ml.Sexpable.V3.t"),
     tp_loc$47=caml_new_string("src/command.ml.Sexpable.V2.t"),
     tp_loc$48=caml_new_string("src/command.ml.Sexpable.V1.t"),
     tp_loc$49=caml_new_string("src/command.ml.Sexpable.Internal.t"),
     extraction_var=caml_new_string("COMMAND_OUTPUT_HELP_SEXP"),
     cst_subcommands$3=caml_new_string("subcommands"),
     cst_aliases$1=caml_new_string("aliases"),
     cst_doc$1=caml_new_string("doc"),
     cst_name$5=caml_new_string("name"),
     cst_t$237=caml_new_string("t"),
     cst_src_command_ml_2134_4=caml_new_string("src/command.ml:2134:4"),
     cst_t$238=caml_new_string("t"),
     names$2=
      [0,
       caml_new_string("name"),
       [0,caml_new_string("doc"),[0,caml_new_string("aliases"),0]]],
     cst_aliases$2=caml_new_string("aliases"),
     cst_doc$2=caml_new_string("doc"),
     cst_name$6=caml_new_string("name"),
     tp_loc$50=caml_new_string("src/command.ml.Shape.Flag_info.t"),
     cst_Ad_hoc$2=caml_new_string("Ad_hoc"),
     cst_grammar$1=caml_new_string("grammar"),
     cst_Concat$2=caml_new_string("Concat"),
     cst_grammar$2=caml_new_string("grammar"),
     cst_Maybe$2=caml_new_string("Maybe"),
     cst_grammar$3=caml_new_string("grammar"),
     cst_Many$2=caml_new_string("Many"),
     cst_One$2=caml_new_string("One"),
     cst_grammar$4=caml_new_string("grammar"),
     cst_src_command_ml_2143_4=caml_new_string("src/command.ml:2143:4"),
     cst_grammar$5=caml_new_string("grammar"),
     tp_loc$51=caml_new_string("src/command.ml.Shape.Base_info.grammar"),
     cst_Grammar$1=caml_new_string("Grammar"),
     cst_Usage$1=caml_new_string("Usage"),
     cst_anons$1=caml_new_string("anons"),
     cst_src_command_ml_2152_4=caml_new_string("src/command.ml:2152:4"),
     cst_anons$2=caml_new_string("anons"),
     tp_loc$52=caml_new_string("src/command.ml.Shape.Base_info.anons"),
     cst_flags$3=caml_new_string("flags"),
     cst_anons$3=caml_new_string("anons"),
     cst_readme$6=caml_new_string("readme"),
     cst_summary$13=caml_new_string("summary"),
     cst_t$239=caml_new_string("t"),
     cst_src_command_ml_2157_4=caml_new_string("src/command.ml:2157:4"),
     cst_t$240=caml_new_string("t"),
     names$3=
      [0,
       caml_new_string("summary"),
       [0,
        caml_new_string("readme"),
        [0,caml_new_string("anons"),[0,caml_new_string("flags"),0]]]],
     cst_flags$4=caml_new_string("flags"),
     cst_anons$4=caml_new_string("anons"),
     cst_readme$7=caml_new_string("readme"),
     cst_summary$14=caml_new_string("summary"),
     tp_loc$53=caml_new_string("src/command.ml.Shape.Base_info.t"),
     cst_a$105=caml_new_string("a"),
     cst_src_command_ml_2176_32=caml_new_string("src/command.ml:2176:32"),
     cst_subcommands$4=caml_new_string("subcommands"),
     cst_readme$9=caml_new_string("readme"),
     cst_summary$17=caml_new_string("summary"),
     cst_a$106=caml_new_string("a"),
     cst_t$241=caml_new_string("t"),
     cst_src_command_ml_2173_4=caml_new_string("src/command.ml:2173:4"),
     names$4=
      [0,
       caml_new_string("summary"),
       [0,caml_new_string("readme"),[0,caml_new_string("subcommands"),0]]],
     cst_subcommands$5=caml_new_string("subcommands"),
     cst_readme$10=caml_new_string("readme"),
     cst_summary$18=caml_new_string("summary"),
     tp_loc$54=caml_new_string("src/command.ml.Shape.Group_info.t"),
     cst_child_subcommand$1=caml_new_string("child_subcommand"),
     cst_path_to_exe$5=caml_new_string("path_to_exe"),
     cst_working_dir$3=caml_new_string("working_dir"),
     cst_readme$12=caml_new_string("readme"),
     cst_summary$21=caml_new_string("summary"),
     cst_t$243=caml_new_string("t"),
     cst_src_command_ml_2184_4=caml_new_string("src/command.ml:2184:4"),
     cst_t$244=caml_new_string("t"),
     names$5=
      [0,
       caml_new_string("summary"),
       [0,
        caml_new_string("readme"),
        [0,
         caml_new_string("working_dir"),
         [0,
          caml_new_string("path_to_exe"),
          [0,caml_new_string("child_subcommand"),0]]]]],
     cst_child_subcommand$2=caml_new_string("child_subcommand"),
     cst_path_to_exe$6=caml_new_string("path_to_exe"),
     cst_working_dir$4=caml_new_string("working_dir"),
     cst_readme$13=caml_new_string("readme"),
     cst_summary$22=caml_new_string("summary"),
     tp_loc$55=caml_new_string("src/command.ml.Shape.Exec_info.t"),
     cst_t$245=caml_new_string("t"),
     cst_Exec$5=caml_new_string("Exec"),
     cst_t$246=caml_new_string("t"),
     cst_Group$5=caml_new_string("Group"),
     cst_Basic=caml_new_string("Basic"),
     cst_t$247=caml_new_string("t"),
     cst_src_command_ml_2203_4=caml_new_string("src/command.ml:2203:4"),
     cst_t$248=caml_new_string("t"),
     tp_loc$56=caml_new_string("src/command.ml.Shape.Fully_forced.t"),
     cst_core_kernel$523=caml_new_string("core_kernel"),
     cst_core_kernel$524=caml_new_string("core_kernel"),
     cst_src_core_kernel_ml=caml_new_string("src/core_kernel.ml"),
     cst$277=caml_new_string(""),
     cst_core_kernel$525=caml_new_string("core_kernel"),
     cst_core_kernel$526=caml_new_string("core_kernel"),
     Bin_prot_Common=global_data.Bin_prot__Common,
     Bin_prot_Shape=global_data.Bin_prot__Shape,
     Ppx_bench_lib_Benchmark_accumulator=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Base=global_data.Base,
     Stdio=global_data.Stdio,
     Bin_prot_Std=global_data.Bin_prot__Std,
     Sexplib_Conv=global_data.Sexplib__Conv,
     Typerep_lib_Make_typename=global_data.Typerep_lib__Make_typename,
     Typerep_lib_Std=global_data.Typerep_lib__Std,
     Base_With_return=global_data.Base__With_return,
     include$0=global_data.Caml,
     Stdlib=global_data.Stdlib,
     Bin_prot_Write=global_data.Bin_prot__Write,
     Assert_failure=global_data.Assert_failure,
     Stdlib_bigarray=global_data.Stdlib__bigarray,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Bin_prot_Utils=global_data.Bin_prot__Utils,
     Bin_prot_Read=global_data.Bin_prot__Read,
     include$2=global_data.Bin_prot__Binable,
     include$4=global_data.Base__Printf,
     Stdio_Out_channel=global_data.Stdio__Out_channel,
     Base_Hash=global_data.Base__Hash,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Ppx_compare_lib=global_data.Ppx_compare_lib,
     include$5=global_data.Base__Comparator,
     include$6=global_data.Base__Result,
     include$7=global_data.Base__Container,
     Base_Fn=global_data.Base__Fn,
     include$8=global_data.Base__Ordered_collection_common,
     Base_Field=global_data.Base__Field,
     Base_Comparable=global_data.Base__Comparable,
     include$9=global_data.Base__Sequence,
     include$11=global_data.Base__Array,
     Base_for_tests_Test_blit=global_data.Base_for_tests__Test_blit,
     include$13=global_data.Base__Float,
     Stdlib_sys=global_data.Stdlib__sys,
     Typerep_lib_Typename=global_data.Typerep_lib__Typename,
     include$15=global_data.Base__Either,
     Base_quickcheck_Generator=global_data.Base_quickcheck__Generator,
     Base_quickcheck_Observer=global_data.Base_quickcheck__Observer,
     Base_quickcheck_Shrinker=global_data.Base_quickcheck__Shrinker,
     include$17=global_data.Base__Source_code_position,
     include$18=global_data.Sexplib__Sexp,
     Base_Exn=global_data.Base__Exn,
     Base_Info=global_data.Base__Info,
     Base_Error=global_data.Base__Error,
     include$22=global_data.Base__Hash_set,
     include$23=global_data.Base__List,
     Base_Hashtbl=global_data.Base__Hashtbl,
     Base_Hashable=global_data.Base__Hashable,
     include$27=global_data.Base__Or_error,
     Expect_test_config=global_data.Expect_test_config,
     Stdlib_set=global_data.Stdlib__set,
     Base_quickcheck_Test=global_data.Base_quickcheck__Test,
     include$29=global_data.Base__Int,
     include$30=global_data.Base__Option,
     CamlinternalLazy=global_data.CamlinternalLazy,
     Splittable_random=global_data.Splittable_random,
     Base_Random=global_data.Base__Random,
     Base_Word_size=global_data.Base__Word_size,
     Base_Map_intf=global_data.Base__Map_intf,
     Base_Map=global_data.Base__Map,
     Base_Set=global_data.Base__Set,
     Expect_test_common_File=global_data.Expect_test_common__File,
     Inline_test_config=global_data.Inline_test_config,
     include$35=global_data.Base__Maybe_bound,
     include$39=global_data.Base__String,
     Base_Staged=global_data.Base__Staged,
     Base_Pretty_printer=global_data.Base__Pretty_printer,
     Base_Bool=global_data.Base__Bool,
     Base_Char=global_data.Base__Char,
     include$48=global_data.Base__Bytes,
     Base_Sign=global_data.Base__Sign,
     include$58=global_data.Base__Int32,
     include$59=global_data.Base__Int64,
     Base_Int63_emul=global_data.Base__Int63_emul,
     include$61=global_data.Base__Int63,
     include$66=global_data.Base__Unit,
     Sexplib_Std=global_data.Sexplib__Std,
     include$67=global_data.Base__Lazy,
     include$69=global_data.Base__Nativeint,
     Match_failure=global_data.Match_failure,
     Sexplib_Conv_error=global_data.Sexplib__Conv_error,
     include$71=global_data.Base__Ordering,
     include$72=global_data.Base__Ref,
     Base_quickcheck_Export=global_data.Base_quickcheck__Export,
     Stdlib_callback=global_data.Stdlib__callback,
     include$73=global_data.Typerep_lib__Std_internal,
     include$75=global_data.Base_bigstring,
     Md5_lib=global_data.Md5_lib,
     Stdlib_digest=global_data.Stdlib__digest,
     Bin_prot_Md5=global_data.Bin_prot__Md5,
     Stdio_In_channel=global_data.Stdio__In_channel,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Base_Sexpable=global_data.Base__Sexpable,
     Base_Validate=global_data.Base__Validate,
     include$85=global_data.Base__Type_equal,
     Base_Invariant=global_data.Base__Invariant,
     include$90=global_data.Base__Uniform_array,
     Typerep_lib_Type_generic=global_data.Typerep_lib__Type_generic,
     Time_now=global_data.Time_now,
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     include$125=global_data.Stdlib__arg,
     Stdlib_format=global_data.Stdlib__format,
     Base_Blit=global_data.Base__Blit,
     Base_Monad=global_data.Base__Monad,
     include$130=global_data.Stdlib__gc,
     include$133=global_data.Base__Option_array,
     Ppx_assert_lib_Runtime=global_data.Ppx_assert_lib__Runtime,
     Base_Backtrace=global_data.Base__Backtrace,
     Base_for_tests_Test_binary_searchable=
      global_data.Base_for_tests__Test_binary_searchable,
     Stdlib_ephemeron=global_data.Stdlib__ephemeron,
     include$144=global_data.Base__Linked_queue,
     Stdlib_printexc=global_data.Stdlib__printexc,
     include$150=global_data.Base__Queue,
     Base_Sign_or_nan=global_data.Base__Sign_or_nan,
     include$155=global_data.Base__Stack,
     Stdlib_filename=global_data.Stdlib__filename,
     Stdlib_list=global_data.Stdlib__list,
     Base_Applicative=global_data.Base__Applicative,
     Core_kernel=[0];
    caml_register_global(4235,Core_kernel,"Core_kernel__");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel);
    caml_call1(Expect_test_collector[4][1],cst_src_import_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$0,cst);
    var
     _a_=Base[86],
     _b_=_a_[1],
     _d_=_a_[3],
     _e_=_a_[4],
     _q_=_a_[16],
     sexp_of_t=_a_[17],
     _r_=_a_[18],
     _v_=_a_[22],
     _w_=_a_[23],
     _x_=_a_[24],
     _z_=_a_[26],
     _A_=_a_[27],
     t_of_sexp=_a_[28],
     sexp_of_t$0=_a_[29],
     _N_=_a_[42],
     _P_=_a_[44],
     _R_=_a_[46],
     _aa_=_a_[57],
     _af_=_a_[62],
     _ah_=_a_[64],
     _ai_=_a_[65],
     _aj_=_a_[66],
     _ak_=_a_[67],
     _aw_=_a_[79],
     _ax_=_a_[80],
     _ay_=_a_[81],
     _az_=_a_[82],
     _aP_=_a_[98],
     _aQ_=_a_[99],
     _aR_=_a_[100],
     _aS_=_a_[101],
     _aT_=_a_[102],
     _aU_=_a_[103],
     _aZ_=_a_[108],
     _a0_=_a_[109],
     _a2_=_a_[111],
     _a7_=_a_[116],
     _a8_=_a_[117],
     _a9_=_a_[118],
     _a__=_a_[119],
     _a$_=_a_[120],
     _ba_=_a_[121],
     _bb_=_a_[122],
     _bf_=Stdio[4],
     _bk_=Stdio[9],
     _bm_=Bin_prot_Std[1],
     _bn_=Bin_prot_Std[2],
     bin_size_t=Bin_prot_Std[3],
     bin_size_t$0=Bin_prot_Std[4],
     _bo_=Bin_prot_Std[5],
     bin_size_t$1=Bin_prot_Std[6],
     bin_size_t$2=Bin_prot_Std[7],
     _bp_=Bin_prot_Std[8],
     _bq_=Bin_prot_Std[9],
     _br_=Bin_prot_Std[10],
     _bt_=Bin_prot_Std[12],
     _bu_=Bin_prot_Std[13],
     _bw_=Bin_prot_Std[15],
     _bz_=Bin_prot_Std[18],
     _bA_=Bin_prot_Std[19],
     bin_size_t$3=Bin_prot_Std[27],
     _bZ_=Bin_prot_Std[45],
     _b1_=Bin_prot_Std[47],
     _b3_=Bin_prot_Std[49],
     _b4_=Bin_prot_Std[50],
     _b6_=Bin_prot_Std[52],
     _b8_=Bin_prot_Std[54],
     _b__=Bin_prot_Std[56],
     _b$_=Bin_prot_Std[57],
     _cb_=Bin_prot_Std[59],
     bin_write_t=Bin_prot_Std[61],
     bin_read_t=Bin_prot_Std[63],
     bin_read_t$0=Bin_prot_Std[64],
     _cf_=Bin_prot_Std[66],
     bin_write_t$0=Bin_prot_Std[68],
     bin_read_t$1=Bin_prot_Std[70],
     bin_read_t$2=Bin_prot_Std[71],
     _cj_=Bin_prot_Std[73],
     _cl_=Bin_prot_Std[75],
     _cn_=Bin_prot_Std[77],
     _co_=Bin_prot_Std[78],
     _cq_=Bin_prot_Std[80],
     bin_write_t$1=Bin_prot_Std[82],
     bin_read_t$3=Bin_prot_Std[84],
     bin_read_t$4=Bin_prot_Std[85],
     _cu_=Bin_prot_Std[87],
     bin_write_t$2=Bin_prot_Std[89],
     bin_read_t$5=Bin_prot_Std[91],
     bin_read_t$6=Bin_prot_Std[92],
     _cF_=Bin_prot_Std[101],
     _cH_=Bin_prot_Std[103],
     _cJ_=Bin_prot_Std[105],
     _cK_=Bin_prot_Std[106],
     _cM_=Bin_prot_Std[108],
     _cO_=Bin_prot_Std[110],
     _cQ_=Bin_prot_Std[112],
     _cR_=Bin_prot_Std[113],
     _cT_=Bin_prot_Std[115],
     _cV_=Bin_prot_Std[117],
     _cX_=Bin_prot_Std[119],
     _cY_=Bin_prot_Std[120],
     _c0_=Bin_prot_Std[122],
     _c2_=Bin_prot_Std[124],
     _c4_=Bin_prot_Std[126],
     _c5_=Bin_prot_Std[127],
     _c7_=Bin_prot_Std[129],
     _c9_=Bin_prot_Std[131],
     _c$_=Bin_prot_Std[133],
     _da_=Bin_prot_Std[134],
     _dj_=Bin_prot_Std[143],
     _dl_=Bin_prot_Std[145],
     _dn_=Bin_prot_Std[147],
     _do_=Bin_prot_Std[148],
     _dq_=Bin_prot_Std[150],
     _ds_=Bin_prot_Std[152],
     _du_=Bin_prot_Std[154],
     _dv_=Bin_prot_Std[155],
     _dx_=Bin_prot_Std[157],
     _dz_=Bin_prot_Std[159],
     _dB_=Bin_prot_Std[161],
     _dC_=Bin_prot_Std[162],
     _dL_=Bin_prot_Std[171],
     bin_write_t$3=Bin_prot_Std[173],
     bin_read_t$7=Bin_prot_Std[175],
     bin_read_t$8=Bin_prot_Std[176],
     include=
      [0,
       Sexplib_Conv[52],
       Sexplib_Conv[60],
       Sexplib_Conv[58],
       Sexplib_Conv[66],
       Sexplib_Conv[55],
       Sexplib_Conv[63],
       Sexplib_Conv[23],
       Sexplib_Conv[47],
       Sexplib_Conv[18],
       Sexplib_Conv[42],
       Sexplib_Conv[25],
       Sexplib_Conv[27],
       Sexplib_Conv[28]],
     _eD_=include[12],
     _eE_=include[13],
     _c_=_a_[2],
     _f_=_a_[5],
     _g_=_a_[6],
     _h_=_a_[7],
     _i_=_a_[8],
     _j_=_a_[9],
     _k_=_a_[10],
     _l_=_a_[11],
     _m_=_a_[12],
     _n_=_a_[13],
     _o_=_a_[14],
     _p_=_a_[15],
     _s_=_a_[19],
     _t_=_a_[20],
     _u_=_a_[21],
     _y_=_a_[25],
     _B_=_a_[30],
     _C_=_a_[31],
     _D_=_a_[32],
     _E_=_a_[33],
     _F_=_a_[34],
     _G_=_a_[35],
     _H_=_a_[36],
     _I_=_a_[37],
     _J_=_a_[38],
     _K_=_a_[39],
     _L_=_a_[40],
     _M_=_a_[41],
     _O_=_a_[43],
     _Q_=_a_[45],
     _S_=_a_[47],
     _T_=_a_[48],
     _U_=_a_[49],
     _V_=_a_[50],
     _W_=_a_[51],
     _X_=_a_[52],
     _Y_=_a_[53],
     _Z_=_a_[54],
     ___=_a_[55],
     _$_=_a_[56],
     _ab_=_a_[58],
     _ac_=_a_[59],
     _ad_=_a_[60],
     _ae_=_a_[61],
     _ag_=_a_[63],
     _al_=_a_[68],
     _am_=_a_[69],
     _an_=_a_[70],
     _ao_=_a_[71],
     _ap_=_a_[72],
     _aq_=_a_[73],
     _ar_=_a_[74],
     _as_=_a_[75],
     _at_=_a_[76],
     _au_=_a_[77],
     _av_=_a_[78],
     _aA_=_a_[83],
     _aB_=_a_[84],
     _aC_=_a_[85],
     _aD_=_a_[86],
     _aE_=_a_[87],
     _aF_=_a_[88],
     _aG_=_a_[89],
     _aH_=_a_[90],
     _aI_=_a_[91],
     _aJ_=_a_[92],
     _aK_=_a_[93],
     _aL_=_a_[94],
     _aM_=_a_[95],
     _aN_=_a_[96],
     _aO_=_a_[97],
     _aV_=_a_[104],
     _aW_=_a_[105],
     _aX_=_a_[106],
     _aY_=_a_[107],
     _a1_=_a_[110],
     _a3_=_a_[112],
     _a4_=_a_[113],
     _a5_=_a_[114],
     _a6_=_a_[115],
     _bc_=Stdio[1],
     _bd_=Stdio[2],
     _be_=Stdio[3],
     _bg_=Stdio[5],
     _bh_=Stdio[6],
     _bi_=Stdio[7],
     _bj_=Stdio[8],
     _bl_=Stdio[10],
     _bs_=Bin_prot_Std[11],
     _bv_=Bin_prot_Std[14],
     _bx_=Bin_prot_Std[16],
     _by_=Bin_prot_Std[17],
     _bB_=Bin_prot_Std[20],
     _bC_=Bin_prot_Std[21],
     _bD_=Bin_prot_Std[22],
     _bE_=Bin_prot_Std[23],
     _bF_=Bin_prot_Std[24],
     _bG_=Bin_prot_Std[25],
     _bH_=Bin_prot_Std[26],
     _bI_=Bin_prot_Std[28],
     _bJ_=Bin_prot_Std[29],
     _bK_=Bin_prot_Std[30],
     _bL_=Bin_prot_Std[31],
     _bM_=Bin_prot_Std[32],
     _bN_=Bin_prot_Std[33],
     _bO_=Bin_prot_Std[34],
     _bP_=Bin_prot_Std[35],
     _bQ_=Bin_prot_Std[36],
     _bR_=Bin_prot_Std[37],
     _bS_=Bin_prot_Std[38],
     _bT_=Bin_prot_Std[39],
     _bU_=Bin_prot_Std[40],
     _bV_=Bin_prot_Std[41],
     _bW_=Bin_prot_Std[42],
     _bX_=Bin_prot_Std[43],
     _bY_=Bin_prot_Std[44],
     _b0_=Bin_prot_Std[46],
     _b2_=Bin_prot_Std[48],
     _b5_=Bin_prot_Std[51],
     _b7_=Bin_prot_Std[53],
     _b9_=Bin_prot_Std[55],
     _ca_=Bin_prot_Std[58],
     _cc_=Bin_prot_Std[60],
     _cd_=Bin_prot_Std[62],
     _ce_=Bin_prot_Std[65],
     _cg_=Bin_prot_Std[67],
     _ch_=Bin_prot_Std[69],
     _ci_=Bin_prot_Std[72],
     _ck_=Bin_prot_Std[74],
     _cm_=Bin_prot_Std[76],
     _cp_=Bin_prot_Std[79],
     _cr_=Bin_prot_Std[81],
     _cs_=Bin_prot_Std[83],
     _ct_=Bin_prot_Std[86],
     _cv_=Bin_prot_Std[88],
     _cw_=Bin_prot_Std[90],
     _cx_=Bin_prot_Std[93],
     _cy_=Bin_prot_Std[94],
     _cz_=Bin_prot_Std[95],
     _cA_=Bin_prot_Std[96],
     _cB_=Bin_prot_Std[97],
     _cC_=Bin_prot_Std[98],
     _cD_=Bin_prot_Std[99],
     _cE_=Bin_prot_Std[100],
     _cG_=Bin_prot_Std[102],
     _cI_=Bin_prot_Std[104],
     _cL_=Bin_prot_Std[107],
     _cN_=Bin_prot_Std[109],
     _cP_=Bin_prot_Std[111],
     _cS_=Bin_prot_Std[114],
     _cU_=Bin_prot_Std[116],
     _cW_=Bin_prot_Std[118],
     _cZ_=Bin_prot_Std[121],
     _c1_=Bin_prot_Std[123],
     _c3_=Bin_prot_Std[125],
     _c6_=Bin_prot_Std[128],
     _c8_=Bin_prot_Std[130],
     _c__=Bin_prot_Std[132],
     _db_=Bin_prot_Std[135],
     _dc_=Bin_prot_Std[136],
     _dd_=Bin_prot_Std[137],
     _de_=Bin_prot_Std[138],
     _df_=Bin_prot_Std[139],
     _dg_=Bin_prot_Std[140],
     _dh_=Bin_prot_Std[141],
     _di_=Bin_prot_Std[142],
     _dk_=Bin_prot_Std[144],
     _dm_=Bin_prot_Std[146],
     _dp_=Bin_prot_Std[149],
     _dr_=Bin_prot_Std[151],
     _dt_=Bin_prot_Std[153],
     _dw_=Bin_prot_Std[156],
     _dy_=Bin_prot_Std[158],
     _dA_=Bin_prot_Std[160],
     _dD_=Bin_prot_Std[163],
     _dE_=Bin_prot_Std[164],
     _dF_=Bin_prot_Std[165],
     _dG_=Bin_prot_Std[166],
     _dH_=Bin_prot_Std[167],
     _dI_=Bin_prot_Std[168],
     _dJ_=Bin_prot_Std[169],
     _dK_=Bin_prot_Std[170],
     _dM_=Bin_prot_Std[172],
     _dN_=Bin_prot_Std[174],
     _dO_=Bin_prot_Std[177],
     _dP_=Bin_prot_Std[178],
     _dQ_=Bin_prot_Std[179],
     _dR_=Bin_prot_Std[180],
     _dS_=Bin_prot_Std[181],
     _dT_=Bin_prot_Std[182],
     _dU_=Bin_prot_Std[183],
     _dV_=Bin_prot_Std[184],
     _dW_=Bin_prot_Std[185],
     _dX_=Bin_prot_Std[186],
     _dY_=Bin_prot_Std[187],
     _dZ_=Bin_prot_Std[188],
     _d0_=Bin_prot_Std[189],
     _d1_=Bin_prot_Std[190],
     _d2_=Bin_prot_Std[191],
     _d3_=Bin_prot_Std[192],
     _d4_=Bin_prot_Std[193],
     _d5_=Bin_prot_Std[194],
     _d6_=Bin_prot_Std[195],
     _d7_=Bin_prot_Std[196],
     _d8_=Bin_prot_Std[197],
     _d9_=Bin_prot_Std[198],
     _d__=Bin_prot_Std[199],
     _d$_=Bin_prot_Std[200],
     _ea_=Bin_prot_Std[201],
     _eb_=Bin_prot_Std[202],
     _ec_=Bin_prot_Std[203],
     _ed_=Bin_prot_Std[204],
     _ee_=Bin_prot_Std[205],
     _ef_=Bin_prot_Std[206],
     _eg_=Bin_prot_Std[207],
     _eh_=Bin_prot_Std[208],
     _ei_=Bin_prot_Std[209],
     _ej_=Bin_prot_Std[210],
     _ek_=Bin_prot_Std[211],
     _el_=Bin_prot_Std[212],
     _em_=Bin_prot_Std[213],
     _en_=Bin_prot_Std[214],
     _eo_=Bin_prot_Std[215],
     _ep_=Bin_prot_Std[216],
     _eq_=Bin_prot_Std[217],
     _er_=Bin_prot_Std[218],
     _es_=include[1],
     _et_=include[2],
     _eu_=include[3],
     _ev_=include[4],
     _ew_=include[5],
     _ex_=include[6],
     _ey_=include[7],
     _ez_=include[8],
     _eA_=include[9],
     _eB_=include[10],
     _eC_=include[11],
     _eF_=caml_call1(Bin_prot_Shape[3][1],cst_a),
     _eG_=caml_call1(Bin_prot_Shape[4][1],cst_src_import_ml_75_24),
     _eH_=caml_call2(Bin_prot_Shape[15],_eG_,_eF_),
     _eI_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$0),0],
     _eJ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_opaque),_eI_,_eH_],0],
     _eK_=caml_call1(Bin_prot_Shape[4][1],cst_src_import_ml_75_2),
     group=caml_call2(Bin_prot_Shape[6],_eK_,_eJ_),
     _eL_=[5,caml_new_string("src/import.ml.sexp_opaque")],
     _fC_=[0,caml_new_string("src/binable0.ml"),130,2],
     _fB_=[0,caml_new_string("src/binable0.ml"),110,2],
     _fz_=
      [0,
       caml_new_string("src/binable0.ml.Stable.Of_stringable.V1.Of_binable")],
     _fA_=[0,caml_new_string("_none_"),0,-1],
     _fy_=[1,caml_new_string("src/binable0.ml.Stable.Of_sexpable.V1.t")],
     _fN_=[0,[2,0,[12,10,[10,0]]],caml_new_string("%s\n%!")],
     _gM_=[5,caml_new_string("src/perms.ml.Only_used_as_phantom_type1.t")],
     _gL_=
      [0,
       [11,
        caml_new_string("Unexpectedly used "),
        [2,0,[11,caml_new_string(" bin_io deserialization"),0]]],
       caml_new_string("Unexpectedly used %s bin_io deserialization")],
     _gK_=
      [0,
       [11,
        caml_new_string("Unexpectedly used "),
        [2,0,[11,caml_new_string(" bin_io serialization"),0]]],
       caml_new_string("Unexpectedly used %s bin_io serialization")],
     _gJ_=
      [0,
       [11,
        caml_new_string("Unexpectedly called ["),
        [2,0,[11,caml_new_string(".hash_fold_t]"),0]]],
       caml_new_string("Unexpectedly called [%s.hash_fold_t]")],
     _gI_=
      [0,
       [11,
        caml_new_string("Unexpectedly called ["),
        [2,0,[11,caml_new_string(".compare]"),0]]],
       caml_new_string("Unexpectedly called [%s.compare]")],
     _gH_=
      [0,
       [11,
        caml_new_string("Unexpectedly called ["),
        [2,0,[11,caml_new_string(".t_of_sexp]"),0]]],
       caml_new_string("Unexpectedly called [%s.t_of_sexp]")],
     _gG_=
      [0,
       [11,
        caml_new_string("Unexpectedly called ["),
        [2,0,[11,caml_new_string(".sexp_of_t]"),0]]],
       caml_new_string("Unexpectedly called [%s.sexp_of_t]")],
     _gF_=[0,caml_new_string("Who_can_write")],
     _gk_=[0,caml_new_string("Who_can_write")],
     _gb_=[0,caml_new_string("Who_can_write")],
     _f6_=[0,caml_new_string("Read")],
     _fZ_=[0,caml_new_string("src/perms.ml"),15,4],
     _fY_=[6,caml_new_string("src/perms.ml.Types.Me.t")],
     _fT_=[0,caml_new_string("src/perms.ml"),9,4],
     _fS_=[6,caml_new_string("src/perms.ml.Types.Nobody.t")],
     _hH_=[0,caml_new_string("Ok")],
     _hI_=[0,caml_new_string("Error")],
     _hG_=[1,caml_new_string("src/result.ml.Stable.V1.t")],
     _ld_=
      [1,caml_new_string("src/sequence.ml.Merge_with_duplicates_element.t")],
     _kT_=[1,caml_new_string("src/sequence.ml.Step.t")],
     _kM_=[0,caml_new_string("Done"),0],
     _l6_=[0,caml_new_string("First")],
     _l7_=[0,caml_new_string("Second")],
     _l5_=[1,caml_new_string("src/either.ml.Stable.V1.t")],
     _mx_=[0,caml_new_string("pos_cnum")],
     _my_=[0,caml_new_string("pos_bol")],
     _mz_=[0,caml_new_string("pos_lnum")],
     _mA_=[0,caml_new_string("pos_fname")],
     _nf_=[1,caml_new_string("src/info.ml.Extend.Internal_repr.Stable.V2.t")],
     _ng_=[0,caml_new_string("Could_not_construct")],
     _nh_=[0,caml_new_string("String")],
     _ni_=[0,caml_new_string("Exn")],
     _nj_=[0,caml_new_string("Sexp")],
     _nk_=[0,caml_new_string("Tag_sexp")],
     _nl_=[0,caml_new_string("Tag_t")],
     _nm_=[0,caml_new_string("Tag_arg")],
     _nn_=[0,caml_new_string("Of_list")],
     _no_=[0,caml_new_string("With_backtrace")],
     _ne_=[1,caml_new_string("src/info.ml.Sexp.t")],
     _tv_=[0,[0,caml_new_string("src/hashtbl.ml"),195,5302,5324]],
     _uV_=[0,caml_new_string("attempts")],
     _uR_=[0,caml_new_string("values")],
     _uS_=[0,caml_new_string("actual_count")],
     _uT_=[0,caml_new_string("expect_count")],
     _uU_=[0,caml_new_string("trials")],
     _uQ_=[0,caml_new_string("_")],
     _uP_=
      [0,
       [11,
        caml_new_string("Generator.of_sequence: probability ["),
        [8,0,0,0,[11,caml_new_string("] out of bounds"),0]]],
       caml_new_string
        ("Generator.of_sequence: probability [%f] out of bounds")],
     _uX_=[0,104758188],
     _wr_=[0,caml_new_string("_")],
     _wq_=[0,caml_new_string("_")],
     _wp_=[0,caml_new_string("_")],
     _wc_=[0,caml_new_string("_")],
     _vD_=[0,caml_new_string("Unequal")],
     _vE_=[0,caml_new_string("Right")],
     _vC_=[0,caml_new_string("Left")],
     _vH_=[1,caml_new_string(" 00674be9fe8dfe9e9ad476067d7d8101 ")],
     _vI_=[0,caml_new_string("")],
     _wO_=[0,caml_new_string("Unbounded")],
     _wP_=[0,caml_new_string("Incl")],
     _wQ_=[0,caml_new_string("Excl")],
     _wN_=[1,caml_new_string("src/maybe_bound.ml.Stable.V1.t")],
     _wC_=[0,[0,caml_new_string("Unbounded"),0],0],
     _xi_=[0,caml_new_string("_")],
     _xh_=[0,caml_new_string("_")],
     _xg_=[0,caml_new_string("_")],
     _w$_=[0,caml_new_string("_")],
     _xF_=[0,caml_new_string("src/list.ml.Duplicate_found")],
     _xG_=[0,caml_new_string("_none_"),0,-1],
     _xD_=[0,caml_new_string("src/list.ml"),21,24],
     _xC_=[0,caml_new_string("src/list.ml"),20,24],
     _yN_=[0,caml_new_string("src/union_find.ml"),58,16],
     _yQ_=[0,caml_new_string("src/doubly_linked.ml"),285,6],
     _yP_=[0,caml_new_string("src/doubly_linked.ml"),286,6],
     _yO_=[0,caml_new_string("src/doubly_linked.ml"),287,6],
     _yR_=[0,caml_new_string("src/doubly_linked.ml"),292,4],
     _zA_=[0,caml_new_string("failure building sexp")],
     _zz_=
      [0,
       caml_new_string
        ("could not build sexp for exn raised when building sexp for value")],
     _zy_=[5,caml_new_string("src/sexp.ml.no_raise")],
     _zk_=[0,caml_new_string("sexp_parse_error")],
     _y$_=[1,caml_new_string("src/sexp.ml.Stable.V1.t")],
     _z4_=[0,caml_new_string("src/hash_queue.ml"),57,10],
     _z5_=[0,caml_new_string("src/hash_queue.ml"),55,18],
     _z6_=[0,caml_new_string("src/hash_queue.ml"),46,6],
     _B8_=[0,caml_new_string("_")],
     _B7_=[0,caml_new_string("_")],
     _B6_=[0,caml_new_string("_")],
     _B5_=[0,caml_new_string("_")],
     _B4_=[0,caml_new_string("\n")],
     _B3_=
      [0,
       [2,
        0,
        [11,
         caml_new_string("  "),
         [2,0,[11,caml_new_string("  |"),[2,0,[12,124,0]]]]]],
       caml_new_string("%s  %s  |%s|")],
     _B2_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,[12,32,partial$0]]]]]]]]]],
       caml_new_string("%s %s %s %s %s %s %s %s  %s %s %s %s %s %s %s %s")],
     _B1_=[0,[4,6,[0,2,2],0,0],caml_new_string("%02x")],
     _B0_=[0,[4,6,[0,2,8],0,0],caml_new_string("%08x")],
     _HK_=[1,0],
     _HL_=[1,1],
     _HM_=[1,2],
     _HJ_=[1,caml_new_string("src/sign.ml.Stable.V1.t")],
     _HB_=[0,caml_new_string("Neg")],
     _HC_=[0,caml_new_string("Zero")],
     _HD_=[0,caml_new_string("Pos")],
     _HE_=
      [0,
       [0,caml_new_string("Neg"),0],
       [0,[0,caml_new_string("Zero"),0],[0,[0,caml_new_string("Pos"),0],0]]],
     _La_=[1,caml_new_string(" 86ba5df747eec837f0b391dd49f33f9e ")],
     _Lb_=[0,caml_new_string("")],
     _L$_=[0,caml_new_string("src/nothing.ml"),52,27],
     _L9_=[0,caml_new_string("src/nothing.ml"),11,27],
     _L__=[0,caml_new_string("src/nothing.ml"),16,250,267],
     _MU_=[1,caml_new_string("src/ordering.ml.t")],
     _MP_=
      [0,
       [0,caml_new_string("Less"),0],
       [0,
        [0,caml_new_string("Equal"),0],
        [0,[0,caml_new_string("Greater"),0],0]]],
     _Rg_=[5,caml_new_string("src/std_internal.ml.sexp_opaque")],
     _Pd_=[0,caml_new_string("src/std_internal.ml.Bug")],
     _Pe_=[0,caml_new_string("_none_"),0,-1],
     _Sv_=[0,0],
     _Sw_=[0,0],
     _Sx_=[0,0],
     _Sy_=[0,0],
     _Sz_=[0,0],
     _SA_=[0,0],
     _SB_=[0,0],
     _SC_=[0,0],
     _SD_=[0,0],
     _SE_=[0,0],
     _SF_=[0,0],
     _SG_=[0,0],
     _SH_=[0,0],
     _Sq_=[0,[8,0,0,[0,0],[0,0]],caml_new_string("%.0f%c")],
     _Sr_=[0,[8,0,0,[0,1],[0,0]],caml_new_string("%.1f%c")],
     _Ss_=[0,[8,0,0,[0,2],[0,0]],caml_new_string("%.2f%c")],
     _St_=[0,[4,0,0,0,[12,66,0]],caml_new_string("%dB")],
     _Sp_=[0,caml_new_string("Bytes")],
     _RE_=[0,0],
     _RF_=[0,0],
     _RG_=[0,0],
     _RH_=[0,0],
     _RI_=[0,0],
     _RJ_=[0,0],
     _RK_=[0,0],
     _RL_=[0,0],
     _RM_=[0,0],
     _RA_=[0,caml_new_string("Gigabytes")],
     _Rz_=[0,caml_new_string("Kilobytes")],
     _RB_=[0,caml_new_string("Bytes")],
     _RC_=[0,caml_new_string("Megabytes")],
     _Rm_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_new_string("' passed to Byte_units.of_string - too short"),
          0]]],
       caml_new_string("'%s' passed to Byte_units.of_string - too short")],
     _Rn_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_new_string("' passed to Byte_units.of_string - "),
          [2,0,[11,caml_new_string(" cannot be converted to float "),0]]]]],
       caml_new_string
        ("'%s' passed to Byte_units.of_string - %s cannot be converted to float ")],
     _Ro_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_new_string
           ("' passed to Byte_units.of_string - illegal extension "),
          [0,0]]]],
       caml_new_string
        ("'%s' passed to Byte_units.of_string - illegal extension %c")],
     _Rh_=[0,[4,0,0,0,[12,66,0]],caml_new_string("%dB")],
     _Ri_=[0,[8,9,0,0,[12,75,0]],caml_new_string("%gK")],
     _Rj_=[0,[8,9,0,0,[12,77,0]],caml_new_string("%gM")],
     _Rk_=[0,[8,9,0,0,[12,71,0]],caml_new_string("%gG")],
     _RO_=[1,caml_new_string(" 1000b ")],
     _RP_=[0,caml_new_string("")],
     _RS_=[1,caml_new_string(" 1023b ")],
     _RT_=[0,caml_new_string("")],
     _RW_=[1,caml_new_string(" 1k ")],
     _RX_=[0,caml_new_string("")],
     _R0_=[1,caml_new_string(" 1.00098k ")],
     _R1_=[0,caml_new_string("")],
     _R4_=[1,caml_new_string(" 1.46484k ")],
     _R5_=[0,caml_new_string("")],
     _R8_=[1,caml_new_string(" 9.76562k ")],
     _R9_=[0,caml_new_string("")],
     _Sa_=[1,caml_new_string(" 97.6562k ")],
     _Sb_=[0,caml_new_string("")],
     _Se_=[1,caml_new_string(" 976.562k ")],
     _Sf_=[0,caml_new_string("")],
     _Si_=[1,caml_new_string(" 9.53674m ")],
     _Sj_=[0,caml_new_string("")],
     _Sl_=[0,caml_new_string("no-js"),0],
     _SJ_=[1,caml_new_string(" 1000B ")],
     _SK_=[0,caml_new_string("")],
     _SN_=[1,caml_new_string(" 1023B ")],
     _SO_=[0,caml_new_string("")],
     _SR_=[1,caml_new_string(" 1.00K ")],
     _SS_=[0,caml_new_string("")],
     _SV_=[1,caml_new_string(" 1.00K ")],
     _SW_=[0,caml_new_string("")],
     _SZ_=[1,caml_new_string(" 9.77K ")],
     _S0_=[0,caml_new_string("")],
     _S3_=[1,caml_new_string(" 97.7K ")],
     _S4_=[0,caml_new_string("")],
     _S7_=[1,caml_new_string(" 977K ")],
     _S8_=[0,caml_new_string("")],
     _S$_=[1,caml_new_string(" 9.54M ")],
     _Ta_=[0,caml_new_string("")],
     _Td_=[1,caml_new_string(" 9.31G ")],
     _Te_=[0,caml_new_string("")],
     _Th_=[1,caml_new_string(" 931G ")],
     _Ti_=[0,caml_new_string("")],
     _Tl_=[1,caml_new_string(" 90.9T ")],
     _Tm_=[0,caml_new_string("")],
     _Tp_=[1,caml_new_string(" 88.8P ")],
     _Tq_=[0,caml_new_string("")],
     _Tt_=[1,caml_new_string(" 2.60E ")],
     _Tu_=[0,caml_new_string("")],
     _Vy_=
      [0,
       [11,
        caml_new_string("Bigstring.set_head_padded_fixed_string: "),
        [3,0,[11,caml_new_string(" is longer than "),[4,0,0,0,0]]]],
       caml_new_string
        ("Bigstring.set_head_padded_fixed_string: %S is longer than %d")],
     _Vx_=
      [0,
       [11,
        caml_new_string("Bigstring.set_tail_padded_fixed_string: "),
        [3,0,[11,caml_new_string(" is longer than "),[4,0,0,0,0]]]],
       caml_new_string
        ("Bigstring.set_tail_padded_fixed_string: %S is longer than %d")],
     _Vq_=[0,caml_new_string("pos_after_data")],
     _Vr_=[0,caml_new_string("start_pos")],
     _Vs_=[0,caml_new_string("bin_prot_size_header_length")],
     _Vt_=[0,caml_new_string("data_len")],
     _Vu_=[0,caml_new_string("total_len")],
     _Vm_=[0,caml_new_string("pos")],
     _Vn_=[0,caml_new_string("pos_after_writing")],
     _Vo_=[0,caml_new_string("bigstring_length")],
     _Vl_=[0,[0,caml_new_string("src/bigstring.ml"),93,2568,2586]],
     _Vp_=[0,[0,caml_new_string("src/bigstring.ml"),96,2697,2701]],
     _Vv_=[0,[0,caml_new_string("src/bigstring.ml"),105,3174,3178]],
     _VA_=[0,caml_new_string("src/core_bin_prot.ml"),24,4],
     _Vz_=[0,caml_new_string("src/core_bin_prot.ml"),14,4],
     _V6_=[0,0,[0,6,0]],
     _WO_=[0,caml_new_string("src/zone.ml"),364,8],
     _WN_=
      [0,
       [11,caml_new_string("UTC"),[2,0,[4,0,0,0,0]]],
       caml_new_string("UTC%s%d")],
     _WM_=
      [0,[2,0,[11,caml_new_string(" - "),[2,0,0]]],caml_new_string("%s - %s")],
     _WL_=[0,caml_new_string("src/zone.ml"),336,10],
     _WK_=
      [0,
       [11,
        caml_new_string("version ("),
        [0,[11,caml_new_string(") is invalid"),0]]],
       caml_new_string("version (%c) is invalid")],
     _WD_=[0,caml_new_string("leap_seconds")],
     _WE_=[0,caml_new_string("default_local_time_type")],
     _WF_=[0,caml_new_string("last_regime_index")],
     _WG_=[0,caml_new_string("transitions")],
     _WH_=[0,caml_new_string("digest")],
     _WI_=[0,caml_new_string("original_filename")],
     _WJ_=[0,caml_new_string("name")],
     _Wt_=[0,caml_new_string("new_regime")],
     _Wu_=[0,caml_new_string("start_time_in_seconds_since_epoch")],
     _Wn_=[0,caml_new_string("seconds")],
     _Wo_=[0,caml_new_string("time_in_seconds_since_epoch")],
     _Wg_=[0,caml_new_string("abbrv")],
     _Wh_=[0,caml_new_string("is_dst")],
     _Wi_=[0,caml_new_string("utc_offset_in_seconds")],
     _Wa_=[0,caml_new_string("src/zone.ml.Invalid_file_format")],
     _Wb_=[0,caml_new_string("_none_"),0,-1],
     _WP_=
      [0,
       caml_new_string("America/New_York"),
       [0,
        caml_new_string("Europe/London"),
        [0,
         caml_new_string("Asia/Hong_Kong"),
         [0,caml_new_string("America/Chicago"),0]]]],
     _Xz_=
      [0,
       [11,caml_new_string("Univ_map.change_exn on unknown key "),[2,0,0]],
       caml_new_string("Univ_map.change_exn on unknown key %s")],
     _Xy_=
      [0,
       [11,caml_new_string("Univ_map.add_exn on existing key "),[2,0,0]],
       caml_new_string("Univ_map.add_exn on existing key %s")],
     _Xx_=
      [0,
       [11,caml_new_string("Univ_map.find_exn on unknown key "),[2,0,0]],
       caml_new_string("Univ_map.find_exn on unknown key %s")],
     _Xv_=[0,caml_new_string("_")],
     _Xu_=[0,caml_new_string("src/univ_map.ml"),35,8],
     _Xw_=[0,caml_new_string("src/univ_map.ml"),33,784,808],
     _XA_=[0,caml_new_string("Nanosecond")],
     _XB_=[0,caml_new_string("Microsecond")],
     _XC_=[0,caml_new_string("Millisecond")],
     _XD_=[0,caml_new_string("Second")],
     _XE_=[0,caml_new_string("Minute")],
     _XF_=[0,caml_new_string("Hour")],
     _XG_=[0,caml_new_string("Day")],
     _X0_=
      [0,
       [11,caml_new_string("Immediate.value_as_int_exn: typename:"),[3,0,0]],
       caml_new_string("Immediate.value_as_int_exn: typename:%S")],
     _XZ_=
      [0,
       [11,
        caml_new_string("Immediate.int_as_value_exn: typename:"),
        [3,0,[11,caml_new_string(" int:"),[4,0,0,0,0]]]],
       caml_new_string("Immediate.int_as_value_exn: typename:%S int:%d")],
     _XY_=
      [0,
       [11,
        caml_new_string("type "),
        [2,0,[11,caml_new_string(" is not independent of its arguments"),0]]],
       caml_new_string("type %s is not independent of its arguments")],
     _XX_=
      [0,
       [11,
        caml_new_string("type "),
        [2,
         0,
         [11,
          caml_new_string(" does not have desired immediacy: wanted "),
          [2,0,[11,caml_new_string(" but got "),[2,0,0]]]]]],
       caml_new_string
        ("type %s does not have desired immediacy: wanted %s but got %s")],
     _XW_=[0,caml_new_string("src/type_immediacy.ml"),204,29],
     _XQ_=[1,0],
     _XR_=[1,0],
     _XS_=[1,0],
     _XT_=[1,1],
     _XU_=[1,255],
     _YI_=
      [0,
       [11,caml_new_string("Day_of_week.of_string: "),[3,0,0]],
       caml_new_string("Day_of_week.of_string: %S")],
     _YH_=
      [0,
       [11,caml_new_string("Day_of_week.of_int_exn: "),[4,0,0,0,0]],
       caml_new_string("Day_of_week.of_int_exn: %d")],
     _YG_=
      [0,
       [11,caml_new_string("Day_of_week.of_string: "),[3,0,0]],
       caml_new_string("Day_of_week.of_string: %S")],
     _Yo_=[1,caml_new_string("src/day_of_week.ml.Stable.V1.T.t")],
     _Yj_=
      [0,
       [0,caml_new_string("Sun"),0],
       [0,
        [0,caml_new_string("Mon"),0],
        [0,
         [0,caml_new_string("Tue"),0],
         [0,
          [0,caml_new_string("Wed"),0],
          [0,
           [0,caml_new_string("Thu"),0],
           [0,[0,caml_new_string("Fri"),0],[0,[0,caml_new_string("Sat"),0],0]]]]]]],
     _YV_=[12,93,0],
     _YW_=[0,0],
     _YX_=[0,0],
     _YU_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_new_string(": "),
           [4,
            0,
            0,
            0,
            [11,caml_new_string(" out of range [0, "),[4,0,0,0,[12,93,0]]]]]]]],
       caml_new_string("%s.%s: %d out of range [0, %d]")],
     _YS_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_new_string(": pos="),
           [4,
            0,
            0,
            0,
            [11,
             caml_new_string(" out of range for string of length "),
             [4,0,0,0,0]]]]]]],
       caml_new_string("%s.%s: pos=%d out of range for string of length %d")],
     _YT_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_new_string(": "),
           [4,
            0,
            0,
            0,
            [11,
             caml_new_string(" digits do not fit at pos "),
             [4,
              0,
              0,
              0,
              [11,caml_new_string(" in string of length "),[4,0,0,0,0]]]]]]]]],
       caml_new_string
        ("%s.%s: %d digits do not fit at pos %d in string of length %d")],
     _YR_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_new_string(": scale="),
           [7,
            0,
            0,
            0,
            [11,
             caml_new_string(" out of range ["),
             [7,0,0,0,[11,caml_new_string(", "),[7,0,0,0,[12,93,0]]]]]]]]]],
       caml_new_string("%s.%s: scale=%Ld out of range [%Ld, %Ld]")],
     _YQ_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_new_string(": digits="),
           [4,0,0,0,[11,caml_new_string(" is not a positive number"),0]]]]]],
       caml_new_string("%s.%s: digits=%d is not a positive number")],
     _YP_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_new_string(": decimals="),
           [4,0,0,0,[11,caml_new_string(" is negative"),0]]]]]],
       caml_new_string("%s.%s: decimals=%d is negative")],
     _YO_=
      [0,
       [2,
        0,
        [12,46,[2,0,[11,caml_new_string(": invalid decimal character"),0]]]],
       caml_new_string("%s.%s: invalid decimal character")],
     _YN_=
      [0,
       [2,0,[12,46,[2,0,[11,caml_new_string(": overflow reading int63"),0]]]],
       caml_new_string("%s.%s: overflow reading int63")],
     _YM_=[0,caml_new_string("Toward_negative_infinity")],
     _YL_=[0,caml_new_string("Toward_positive_infinity")],
     _Za_=
      [0,
       [11,caml_new_string("Invalid month: "),[2,0,0]],
       caml_new_string("Invalid month: %s")],
     _Y__=
      [0,
       [11,caml_new_string("Month.of_int_exn "),[4,0,0,0,0]],
       caml_new_string("Month.of_int_exn %d")],
     _YY_=[0,caml_new_string("Jan")],
     _YZ_=[0,caml_new_string("Feb")],
     _Y0_=[0,caml_new_string("Mar")],
     _Y1_=[0,caml_new_string("Apr")],
     _Y2_=[0,caml_new_string("May")],
     _Y3_=[0,caml_new_string("Jun")],
     _Y4_=[0,caml_new_string("Jul")],
     _Y5_=[0,caml_new_string("Aug")],
     _Y6_=[0,caml_new_string("Sep")],
     _Y7_=[0,caml_new_string("Oct")],
     _Y8_=[0,caml_new_string("Nov")],
     _Y9_=[0,caml_new_string("Dec")],
     _Zo_=[0,caml_new_string("upper_bound")],
     _Zp_=[0,caml_new_string("lower_bound")],
     _Zk_=[0,caml_new_string("src/date0.ml"),378,6],
     _Zh_=
      [0,
       [11,
        caml_new_string("Date.of_string ("),
        [2,0,[11,caml_new_string("): "),[2,0,0]]]],
       caml_new_string("Date.of_string (%s): %s")],
     _Zd_=
      [11,
       caml_new_string(" ~d:"),
       [4,0,0,0,[11,caml_new_string(" error: "),[2,0,0]]]],
     _Ze_=[0,0],
     _Zf_=
      [0,
       [4,0,0,0,[11,caml_new_string(" day month violation"),0]],
       caml_new_string("%d day month violation")],
     _Zl_=[0,0,3,2,5,0,3,5,1,4,6,2,4],
     _Zm_=[0,0,31,59,90,120,151,181,212,243,273,304,334],
     _Zn_=[0,0,31,60,91,121,152,182,213,244,274,305,335],
     _Zy_=
      [0,
       [11,caml_new_string("Ofday.of_string_iso8601_extended: "),[2,0,0]],
       caml_new_string("Ofday.of_string_iso8601_extended: %s")],
     _Zx_=
      [0,
       [11,caml_new_string("invalid second: "),[4,3,0,0,0]],
       caml_new_string("invalid second: %i")],
     _Zw_=[0,caml_new_string("src/ofday_helpers.ml"),76,22],
     _Zs_=[0,[0,[11,caml_new_string(".M."),0]],caml_new_string("%c.M.")],
     _Zt_=[0,[0,[11,caml_new_string(".M"),0]],caml_new_string("%c.M")],
     _Zu_=[0,[0,[12,77,0]],caml_new_string("%cM")],
     _Zv_=[0,[0,0],caml_new_string("%c")],
     _ab0_=
      [0,
       caml_new_string
        ("src/float_with_finite_only_serialization.ml.Stable.V1.Nan_or_inf")],
     _ab1_=[0,caml_new_string("_none_"),0,-1],
     _ach_=
      [0,
       [11,
        caml_new_string("Percent.of_string: must end in x, "),
        [12,37,[11,caml_new_string(", or bp: "),[2,0,0]]]],
       caml_new_string("Percent.of_string: must end in x, %%, or bp: %s")],
     _acg_=[0,[8,12,0,[0,6],0],caml_new_string("%.6G")],
     _ab__=[0,[8,15,0,0,0],caml_new_string("%F")],
     _ab$_=[0,[8,3,0,1,0],caml_new_string("%.*e")],
     _aca_=[0,[8,6,0,1,0],caml_new_string("%.*E")],
     _acb_=[0,[8,0,0,1,0],caml_new_string("%.*f")],
     _acc_=[0,[8,9,0,1,0],caml_new_string("%.*g")],
     _acd_=[0,[8,12,0,1,0],caml_new_string("%.*G")],
     _ace_=[0,[8,16,0,1,0],caml_new_string("%.*h")],
     _acf_=[0,[8,19,0,1,0],caml_new_string("%.*H")],
     _ab2_=[0,caml_new_string("Ocaml")],
     _ab3_=[0,caml_new_string("Exponent")],
     _ab4_=[0,caml_new_string("Exponent_E")],
     _ab5_=[0,caml_new_string("Decimal")],
     _ab6_=[0,caml_new_string("Compact")],
     _ab7_=[0,caml_new_string("Compact_E")],
     _ab8_=[0,caml_new_string("Hex")],
     _ab9_=[0,caml_new_string("Hex_E")],
     _acs_=[0,[4,3,0,0,[11,caml_new_string("ns"),0]],caml_new_string("%ins")],
     _acr_=[0,caml_new_string("src/span_helpers.ml"),15,2],
     _acp_=[0,[4,0,0,0,[12,46,[4,0,0,0,[2,0,0]]]],caml_new_string("%d.%d%s")],
     _acq_=[0,[4,0,0,0,[2,0,0]],caml_new_string("%d%s")],
     _aco_=[0,caml_new_string("percent")],
     _acQ_=[0,[8,9,0,1,0],caml_new_string("%.*g")],
     _acP_=[0,[8,9,0,[0,1],0],caml_new_string("%.1g")],
     _acN_=[0,0,1],
     _acO_=[0,1,1],
     _acI_=[0,2],
     _acL_=[0,1],
     _acM_=[0,0],
     _acK_=[0,3],
     _acJ_=[0,4],
     _acH_=[0,[8,9,0,0,[2,0,0]],caml_new_string("%g%s")],
     _acF_=
      [0,
       caml_new_string
        ("src/span_float.ml.Stable.V1.T_of_sexp_expected_atom_but_got")],
     _acG_=[0,caml_new_string("_none_"),0,-1],
     _acC_=[0,caml_new_string("src/span_float.ml.Stable.V1.T_of_sexp")],
     _acD_=[0,caml_new_string("_none_"),0,-1],
     _acA_=
      [0,
       [11,
        caml_new_string("Span.of_string could not parse '"),
        [2,0,[11,caml_new_string("': "),[2,0,0]]]],
       caml_new_string("Span.of_string could not parse '%s': %s")],
     _act_=[0,caml_new_string("ns")],
     _acu_=[0,caml_new_string("us")],
     _acv_=[0,caml_new_string("ms")],
     _acw_=[0,caml_new_string("sec")],
     _acx_=[0,caml_new_string("min")],
     _acy_=[0,caml_new_string("hr")],
     _acz_=[0,caml_new_string("sign")],
     _ac9_=
      [0,
       [11,
        caml_new_string("Ofday.of_string_iso8601_extended("),
        [2,0,[11,caml_new_string("): "),[2,0,0]]]],
       caml_new_string("Ofday.of_string_iso8601_extended(%s): %s")],
     _ac8_=[0,caml_new_string("src/ofday_float.ml"),152,6],
     _ac5_=[0,0],
     _ac6_=[0,0],
     _ac7_=[0,0],
     _ac4_=[0,0],
     _adx_=
      [0,
       [11,
        caml_new_string("unable to lookup Zone "),
        [2,0,[11,caml_new_string(".  Try using Core.Time.of_string"),0]]],
       caml_new_string
        ("unable to lookup Zone %s.  Try using Core.Time.of_string")],
     _adv_=[0,caml_new_string("src/time.ml.Make.Time_of_string")],
     _adw_=[0,caml_new_string("_none_"),0,-1],
     _adu_=
      [0,
       [11,caml_new_string("invalid offset "),[2,0,0]],
       caml_new_string("invalid offset %s")],
     _adt_=
      [0,
       [11,caml_new_string("no space in date_ofday string: "),[2,0,0]],
       caml_new_string("no space in date_ofday string: %s")],
     _ads_=
      [0,
       [11,
        caml_new_string("Time.of_filename_string ("),
        [2,0,[11,caml_new_string("): "),[2,0,0]]]],
       caml_new_string("Time.of_filename_string (%s): %s")],
     _adr_=[0,caml_new_string("T")],
     _adq_=[0,caml_new_string(" ")],
     _adp_=[0,caml_new_string(" ")],
     _ado_=[0,caml_new_string("")],
     _adk_=[0,caml_new_string("zone")],
     _adl_=[0,caml_new_string("span_since_epoch")],
     _adm_=[0,caml_new_string("src/time.ml"),258,10],
     _adn_=[0,caml_new_string("src/time.ml"),267,10],
     _adA_=[0,[0,caml_new_string("src/time_float0.ml"),116,3590,3594]],
     _adB_=[0,759637122],
     _adz_=
      [0,
       [11,caml_new_string("Time.gmtime: out of range ("),[8,0,0,0,[12,41,0]]],
       caml_new_string("Time.gmtime: out of range (%f)")],
     _aea_=
      [0,
       [11,caml_new_string("Time.Stable.With_utc.V2.t_of_sexp: "),[2,0,0]],
       caml_new_string("Time.Stable.With_utc.V2.t_of_sexp: %s")],
     _ae9_=[0,[0,caml_new_string("src/span_ns.ml"),785,27354,27361]],
     _ae6_=[0,caml_new_string("max_value_for_1us_rounding")],
     _ae7_=[0,caml_new_string("min_value_for_1us_rounding")],
     _ae8_=[0,caml_new_string("t")],
     _aew_=[0,caml_new_string("reason")],
     _aex_=[0,caml_new_string("string")],
     _aev_=[0,caml_new_string("src/span_ns.ml"),402,14],
     _aeu_=[0,caml_new_string("src/span_ns.ml"),419,14],
     _aet_=[0,caml_new_string("src/span_ns.ml"),211,12],
     _aes_=[0,caml_new_string("src/span_ns.ml"),204,17],
     _aeg_=[0,caml_new_string("ns")],
     _aeh_=[0,caml_new_string("us")],
     _aei_=[0,caml_new_string("ms")],
     _aej_=[0,caml_new_string("sec")],
     _aek_=[0,caml_new_string("min")],
     _ael_=[0,caml_new_string("hr")],
     _aem_=[0,caml_new_string("sign")],
     _afj_=
      [0,
       [11,
        caml_new_string("small_diff "),
        [2,0,[12,32,[2,0,[11,caml_new_string(" = "),[2,0,[12,10,0]]]]]]],
       caml_new_string("small_diff %s %s = %s\n")],
     _afk_=
      [0,
       [0,caml_new_string("12:00"),caml_new_string("12:05")],
       [0,
        [0,caml_new_string("12:58"),caml_new_string("13:02")],
        [0,
         [0,caml_new_string("00:52"),caml_new_string("23:19")],
         [0,[0,caml_new_string("00:00"),caml_new_string("24:00")],0]]]],
     _afc_=[0,0],
     _afd_=[0,0],
     _afe_=[0,0],
     _afm_=
      [1,
       caml_new_string
        ("\n    small_diff 12:00:00.000000000 12:05:00.000000000 = -5m\n    small_diff 12:05:00.000000000 12:00:00.000000000 = 5m\n    small_diff 12:58:00.000000000 13:02:00.000000000 = -4m\n    small_diff 13:02:00.000000000 12:58:00.000000000 = 4m\n    small_diff 00:52:00.000000000 23:19:00.000000000 = -27m\n    small_diff 23:19:00.000000000 00:52:00.000000000 = 27m\n    small_diff 00:00:00.000000000 24:00:00.000000000 = 0s\n    small_diff 24:00:00.000000000 00:00:00.000000000 = 0s ")],
     _afn_=[0,caml_new_string("")],
     _afp_=[0,caml_new_string("small_diff")],
     _agG_=[0,1],
     _agF_=
      [0,
       [11,
        caml_new_string("unable to lookup Zone "),
        [2,0,[11,caml_new_string(".  Try using Core.Time.of_string"),0]]],
       caml_new_string
        ("unable to lookup Zone %s.  Try using Core.Time.of_string")],
     _agD_=
      [0,caml_new_string("src/time_ns.ml.To_and_of_string.Time_ns_of_string")],
     _agE_=[0,caml_new_string("_none_"),0,-1],
     _agB_=
      [0,
       [11,caml_new_string("invalid offset "),[2,0,0]],
       caml_new_string("invalid offset %s")],
     _agA_=
      [0,
       [11,caml_new_string("no space in date_ofday string: "),[2,0,0]],
       caml_new_string("no space in date_ofday string: %s")],
     _agz_=
      [0,
       [11,
        caml_new_string("Time.of_filename_string ("),
        [2,0,[11,caml_new_string("): "),[2,0,0]]]],
       caml_new_string("Time.of_filename_string (%s): %s")],
     _agy_=[0,caml_new_string("T")],
     _agx_=[0,caml_new_string(" ")],
     _agw_=[0,caml_new_string(" ")],
     _agv_=[0,caml_new_string("")],
     _agr_=[0,caml_new_string("zone")],
     _ags_=[0,caml_new_string("span_since_epoch")],
     _agt_=[0,caml_new_string("src/time_ns.ml"),699,10],
     _agu_=[0,caml_new_string("src/time_ns.ml"),708,10],
     _agl_=[0,caml_new_string("src/time_ns.ml"),275,6],
     _agk_=[0,caml_new_string("src/time_ns.ml"),257,8],
     _agj_=[0,caml_new_string("src/time_ns.ml"),269,17],
     _aga_=[0,[12,46,[4,0,[0,2,1],0,0]],caml_new_string(".%01d")],
     _agb_=[0,[12,46,[4,0,[0,2,2],0,0]],caml_new_string(".%02d")],
     _agc_=[0,[12,46,[4,0,[0,2,3],0,0]],caml_new_string(".%03d")],
     _agd_=[0,[12,46,[4,0,[0,2,4],0,0]],caml_new_string(".%04d")],
     _age_=[0,[12,46,[4,0,[0,2,5],0,0]],caml_new_string(".%05d")],
     _agf_=[0,[12,46,[4,0,[0,2,6],0,0]],caml_new_string(".%06d")],
     _agg_=[0,[12,46,[4,0,[0,2,7],0,0]],caml_new_string(".%07d")],
     _agh_=[0,[12,46,[4,0,[0,2,8],0,0]],caml_new_string(".%08d")],
     _agi_=[0,[12,46,[4,0,[0,2,9],0,0]],caml_new_string(".%09d")],
     _af$_=[0,caml_new_string("src/time_ns.ml"),215,13],
     _af__=[0,caml_new_string("src/time_ns.ml"),204,6],
     _af9_=
      [0,
       [4,0,[0,2,2],0,[12,58,[4,0,[0,2,2],0,[12,58,[4,0,[0,2,2],0,0]]]]],
       caml_new_string("%02d:%02d:%02d")],
     _af8_=[0,caml_new_string("src/time_ns.ml"),177,4],
     _af7_=[0,[0,caml_new_string("src/time_ns.ml"),122,3394,3396]],
     _af6_=[0,[0,caml_new_string("src/time_ns.ml"),104,2843,2847]],
     _agK_=[0,0],
     _agJ_=
      [0,
       [11,
        caml_new_string("Substring.blit_from_"),
        [2,
         0,
         [11,
          caml_new_string(" len > substring length : "),
          [4,0,0,0,[11,caml_new_string(" > "),[4,0,0,0,0]]]]]],
       caml_new_string
        ("Substring.blit_from_%s len > substring length : %d > %d")],
     _ahn_=[0,0],
     _ahm_=[0,0],
     _ahl_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_new_string("' is not a valid "),
          [2,0,[11,caml_new_string(" because "),[2,0,0]]]]]],
       caml_new_string("'%s' is not a valid %s because %s")],
     _ais_=[0,caml_new_string("init")],
     _ait_=[0,caml_new_string("len")],
     _aiu_=[0,caml_new_string("pos")],
     _aiv_=[0,caml_new_string("bstr")],
     _aiz_=[0,caml_new_string("start")],
     _aiA_=[0,caml_new_string("closing")],
     _aiB_=[0,caml_new_string("opening")],
     _aiy_=[0,caml_new_string("src/bigbuffer.ml"),149,9],
     _aj$_=[0,0],
     _aj__=[0,1],
     _aj4_=[0,caml_new_string("true")],
     _aj5_=[0,caml_new_string("false")],
     _aj6_=[0,caml_new_string("and")],
     _aj7_=[0,caml_new_string("or")],
     _aj8_=[0,caml_new_string("not")],
     _aj9_=[0,caml_new_string("if")],
     _aj3_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(" expects three arguments, "),
         [4,0,0,0,[11,caml_new_string(" found"),0]]]],
       caml_new_string("%s expects three arguments, %d found")],
     _aj2_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(" expects one argument, "),
         [4,0,0,0,[11,caml_new_string(" found"),0]]]],
       caml_new_string("%s expects one argument, %d found")],
     _aj0_=[1,caml_new_string("src/blang.ml.T.t")],
     _aj1_=[0,caml_new_string("src/blang.ml"),53,24],
     _ajT_=[0,caml_new_string("False"),0],
     _ajU_=[0,caml_new_string("True"),0],
     _ako_=[0,caml_new_string("label")],
     _akl_=[0,caml_new_string("max")],
     _akm_=[0,caml_new_string("min")],
     _akn_=[0,caml_new_string("index")],
     _alY_=[0,1000000],
     _alX_=
      [0,
       [11,
        caml_new_string("Gc.Control."),
        [2,
         0,
         [11,caml_new_string(": "),[2,0,[11,caml_new_string(" -> "),[2,0,0]]]]]],
       caml_new_string("Gc.Control.%s: %s -> %s")],
     _alq_=[0,caml_new_string("custom_minor_max_size")],
     _alr_=[0,caml_new_string("custom_minor_ratio")],
     _als_=[0,caml_new_string("custom_major_ratio")],
     _alt_=[0,caml_new_string("window_size")],
     _alu_=[0,caml_new_string("allocation_policy")],
     _alv_=[0,caml_new_string("stack_limit")],
     _alw_=[0,caml_new_string("max_overhead")],
     _alx_=[0,caml_new_string("verbose")],
     _aly_=[0,caml_new_string("space_overhead")],
     _alz_=[0,caml_new_string("major_heap_increment")],
     _alA_=[0,caml_new_string("minor_heap_size")],
     _akC_=[0,caml_new_string("stack_size")],
     _akD_=[0,caml_new_string("top_heap_words")],
     _akE_=[0,caml_new_string("compactions")],
     _akF_=[0,caml_new_string("fragments")],
     _akG_=[0,caml_new_string("largest_free")],
     _akH_=[0,caml_new_string("free_blocks")],
     _akI_=[0,caml_new_string("free_words")],
     _akJ_=[0,caml_new_string("live_blocks")],
     _akK_=[0,caml_new_string("live_words")],
     _akL_=[0,caml_new_string("heap_chunks")],
     _akM_=[0,caml_new_string("heap_words")],
     _akN_=[0,caml_new_string("major_collections")],
     _akO_=[0,caml_new_string("minor_collections")],
     _akP_=[0,caml_new_string("major_words")],
     _akQ_=[0,caml_new_string("promoted_words")],
     _akR_=[0,caml_new_string("minor_words")],
     _akv_=[0,caml_new_string("Next_fit")],
     _akw_=[0,caml_new_string("First_fit")],
     _akx_=[0,caml_new_string("Best_fit")],
     _aku_=[1,caml_new_string("src/gc.ml.Stable.Allocation_policy.V1.t")],
     _akp_=
      [0,
       [0,caml_new_string("Next_fit"),0],
       [0,
        [0,caml_new_string("First_fit"),0],
        [0,[0,caml_new_string("Best_fit"),0],0]]],
     _ano_=[0,caml_new_string("src/bus.ml"),746,22643,22667],
     _anp_=[0,caml_new_string("src/bus.ml"),747,22685,22709],
     _anq_=[0,caml_new_string("src/bus.ml"),748,22727,22751],
     _anr_=[0,caml_new_string("src/bus.ml"),749,22769,22793],
     _ann_=[0,caml_new_string("src/bus.ml"),725,21669,21703],
     _ank_=[0,caml_new_string("_")],
     _anj_=[0,caml_new_string("_")],
     _anl_=[0,[0,caml_new_string("src/bus.ml"),708,21120,21127]],
     _anf_=[0,caml_new_string("Arity1")],
     _ang_=[0,caml_new_string("Arity2")],
     _anh_=[0,caml_new_string("Arity3")],
     _ani_=[0,caml_new_string("Arity4")],
     _and_=[0,caml_new_string("_")],
     _anc_=[0,caml_new_string("_")],
     _ane_=[0,[0,caml_new_string("src/bus.ml"),685,20415,20422]],
     _am__=[0,caml_new_string("_")],
     _am9_=[0,caml_new_string("_")],
     _am$_=[0,caml_new_string("bus")],
     _ana_=[0,caml_new_string("subscribed_from")],
     _anb_=[0,[0,caml_new_string("src/bus.ml"),642,18839,18843]],
     _am2_=[0,caml_new_string("_")],
     _am3_=[0,caml_new_string("subscriber")],
     _am4_=[0,caml_new_string("backtrace")],
     _am5_=[0,caml_new_string("exn")],
     _am6_=[0,caml_new_string("original_error")],
     _am7_=[0,caml_new_string("backtrace")],
     _am8_=[0,caml_new_string("exn")],
     _am1_=[0,caml_new_string("src/bus.ml"),392,19],
     _am0_=[0,caml_new_string("src/bus.ml"),377,2],
     _amX_=[0,caml_new_string("_")],
     _amW_=[0,caml_new_string("_")],
     _amU_=[0,caml_new_string("_")],
     _amT_=[0,caml_new_string("_")],
     _amV_=[0,[0,caml_new_string("src/bus.ml"),303,8586,8600]],
     _amY_=[0,[0,caml_new_string("src/bus.ml"),305,8693,8697]],
     _amZ_=[0,caml_new_string("src/bus.ml"),306,19],
     _amR_=[0,caml_new_string("_")],
     _amQ_=[0,caml_new_string("_")],
     _amP_=[0,caml_new_string("src/bus.ml"),268,54],
     _amN_=[0,caml_new_string("src/bus.ml"),281,15],
     _amO_=[0,caml_new_string("src/bus.ml"),282,18],
     _amM_=[0,caml_new_string("src/bus.ml"),260,11],
     _amL_=[0,caml_new_string("src/bus.ml"),264,18],
     _amS_=[0,caml_new_string("src/bus.ml"),253,6817,6839],
     _amI_=[0,caml_new_string("_")],
     _amC_=[0,caml_new_string("_")],
     _amD_=[0,caml_new_string("subscribers")],
     _amE_=[0,caml_new_string("write_ever_called")],
     _amF_=[0,caml_new_string("state")],
     _amG_=[0,caml_new_string("on_subscription_after_first_write")],
     _amH_=[0,caml_new_string("created_from")],
     _amJ_=[0,caml_new_string("callback_arity")],
     _amK_=[0,caml_new_string("name")],
     _amu_=[0,caml_new_string("_")],
     _amv_=[0,caml_new_string("src/bus.ml"),164,4337,4361],
     _amo_=[0,1],
     _amp_=[0,caml_new_string("subscribed_from")],
     _amq_=[0,caml_new_string("extract_exn")],
     _amr_=[0,caml_new_string("on_callback_raise")],
     _ams_=[0,caml_new_string("subscribers_index")],
     _amt_=[0,caml_new_string("Bus.Subscriber.t")],
     _amj_=[0,caml_new_string("Allow")],
     _amk_=[0,caml_new_string("Allow_and_send_last_value")],
     _aml_=[0,caml_new_string("Raise")],
     _amf_=[0,caml_new_string("Arity1")],
     _amg_=[0,caml_new_string("Arity2")],
     _amh_=[0,caml_new_string("Arity3")],
     _ami_=[0,caml_new_string("Arity4")],
     _amc_=[0,caml_new_string("Closed")],
     _amd_=[0,caml_new_string("Write_in_progress")],
     _ame_=[0,caml_new_string("Ok_to_write")],
     _any_=[0,[2,0,[11,caml_new_string(":\n"),0]],caml_new_string("%s:\n")],
     _anz_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _anA_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _anB_=[0,[10,0],caml_new_string("%!")],
     _ant_=[0,caml_new_string("")],
     _anu_=[0,[0,caml_new_string("src/debug.ml"),22,702,710]],
     _anv_=[0,[0,caml_new_string("src/debug.ml"),28,928,936]],
     _anw_=[0,caml_new_string("-result"),0],
     _anx_=[0,caml_new_string("")],
     _ans_=[0,[2,0,[12,10,[10,0]]],caml_new_string("%s\n%!")],
     _anT_=
      [0,
       [11,
        caml_new_string("invalid index: "),
        [4,
         3,
         0,
         0,
         [11,
          caml_new_string(" for array with indices ("),
          [4,3,0,0,[12,44,[4,3,0,0,[12,41,0]]]]]]],
       caml_new_string("invalid index: %i for array with indices (%i,%i)")],
     _anS_=
      [0,
       [2,0,[11,caml_new_string(": Deque.t is empty"),0]],
       caml_new_string("%s: Deque.t is empty")],
     _anR_=
      [0,
       [11,
        caml_new_string("Deque.drop:  negative input ("),
        [4,0,0,0,[12,41,0]]],
       caml_new_string("Deque.drop:  negative input (%d)")],
     _anP_=[0,caml_new_string("src/deque.ml"),229,2],
     _anQ_=[0,caml_new_string("src/deque.ml"),266,2],
     _anC_=
      [0,
       [11,
        caml_new_string("passed negative initial_length to Deque.create: "),
        [4,3,0,0,0]],
       caml_new_string("passed negative initial_length to Deque.create: %i")],
     _aop_=[0,caml_new_string("src/fdeque.ml"),324,14],
     _an9_=[0,0,0],
     _an8_=[0,0,0],
     _an7_=[0,caml_new_string("src/fdeque.ml"),25,2],
     _an6_=[0,caml_new_string("src/fdeque.ml"),26,2],
     _an4_=[0,caml_new_string("src/fdeque.ml.Empty")],
     _an5_=[0,caml_new_string("_none_"),0,-1],
     _aoH_=
      [0,
       [11,caml_new_string("Host_and_port.of_string: bad port: "),[2,0,0]],
       caml_new_string("Host_and_port.of_string: bad port: %s")],
     _aoG_=
      [0,
       [11,caml_new_string("Host_and_port.of_string: "),[2,0,0]],
       caml_new_string("Host_and_port.of_string: %s")],
     _aoF_=[0,[2,0,[12,58,[4,0,0,0,0]]],caml_new_string("%s:%d")],
     _aoy_=
      [1,
       caml_new_string
        ("\n                  957990f0fc4161fb874e66872550fb40\n                  957990f0fc4161fb874e66872550fb40 ")],
     _aoz_=[0,caml_new_string("")],
     _aoB_=[0,caml_new_string("stable")],
     _aqd_=
      [0,
       [11,
        caml_new_string("Memo.lru: max_cache_size of "),
        [4,3,0,0,[11,caml_new_string(" <= 0"),0]]],
       caml_new_string("Memo.lru: max_cache_size of %i <= 0")],
     _aqc_=[0,0],
     _aqf_=
      [0,
       caml_new_string
        ("src/pid.ml.Stable.V1.Without_containers.Pid_must_be_positive")],
     _aqg_=[0,caml_new_string("_none_"),0,-1],
     _arr_=[0,caml_new_string("src/set_once.ml"),104,2275,2310],
     _arq_=[0,caml_new_string("at")],
     _arn_=[0,0],
     _aro_=[0,caml_new_string("previously_set_at")],
     _arp_=[0,caml_new_string("setting_at")],
     _arm_=[0,caml_new_string("src/set_once.ml"),65,1282,1323],
     _ark_=[0,caml_new_string("set_at")],
     _arl_=[0,caml_new_string("value")],
     _ari_=[0,caml_new_string("src/set_once.ml"),20,377,449],
     _arC_=[1,0],
     _arD_=[1,1],
     _arE_=[1,2],
     _arF_=[1,3],
     _arB_=[1,caml_new_string("src/sign_or_nan.ml.Stable.V1.t")],
     _ars_=[0,caml_new_string("Neg")],
     _art_=[0,caml_new_string("Zero")],
     _aru_=[0,caml_new_string("Pos")],
     _arv_=[0,caml_new_string("Nan")],
     _arw_=
      [0,
       [0,caml_new_string("Neg"),0],
       [0,
        [0,caml_new_string("Zero"),0],
        [0,[0,caml_new_string("Pos"),0],[0,[0,caml_new_string("Nan"),0],0]]]],
     _asP_=[0,caml_new_string("Expected")],
     _asQ_=[0,caml_new_string("But_got")],
     _asR_=[0,[0,caml_new_string("src/stable_unit_test.ml"),147,5603,5613]],
     _asM_=[0,caml_new_string("Expected")],
     _asN_=[0,caml_new_string("But_got")],
     _asO_=[0,[0,caml_new_string("src/stable_unit_test.ml"),138,5144,5152]],
     _asJ_=[0,caml_new_string("Expected")],
     _asK_=[0,caml_new_string("But_got")],
     _asL_=[0,[0,caml_new_string("src/stable_unit_test.ml"),102,3785,3795]],
     _asG_=[0,caml_new_string("Expected")],
     _asH_=[0,caml_new_string("But_got")],
     _asF_=[0,[0,caml_new_string("src/stable_unit_test.ml"),87,3038,3048]],
     _asI_=[0,[0,caml_new_string("src/stable_unit_test.ml"),93,3364,3372]],
     _asC_=[0,caml_new_string("Expected")],
     _asD_=[0,caml_new_string("But_got")],
     _asz_=[0,caml_new_string("Expected")],
     _asA_=[0,caml_new_string("But_got")],
     _asB_=[0,[0,caml_new_string("src/stable_unit_test.ml"),56,1959,1967]],
     _asE_=[0,[0,caml_new_string("src/stable_unit_test.ml"),63,2269,2277]],
     _asw_=[0,caml_new_string("Expected")],
     _asx_=[0,caml_new_string("But_got")],
     _asy_=[0,[0,caml_new_string("src/stable_unit_test.ml"),40,1337,1350]],
     _asv_=[0,caml_new_string("Expected")],
     _ast_=[0,caml_new_string("Expected")],
     _asu_=[0,caml_new_string("But_got")],
     _ass_=[0,0],
     _auB_=[0,caml_new_string("."),caml_new_string(".")],
     _auA_=[0,caml_new_string("/"),caml_new_string("/")],
     _auz_=
      [0,
       [11,
        caml_new_string
         ("Filename.concat called with an empty string as its first argument (second argument: "),
        [2,0,[12,41,0]]],
       caml_new_string
        ("Filename.concat called with an empty string as its first argument (second argument: %s)")],
     _ayS_=[0,caml_new_string("=== flags ===")],
     _ayZ_=[0,[2,0,[12,10,[10,0]]],caml_new_string("%s\n%!")],
     _ay0_=[0,[2,0,0],caml_new_string("%s")],
     _ay1_=
      [0,
       [11,caml_new_string("missing subcommand for command "),[2,0,0]],
       caml_new_string("missing subcommand for command %s")],
     _ayY_=[0,caml_new_string(""),0],
     _ayX_=[0,[0,caml_new_string("src/command.ml"),2724,82229,82235]],
     _ayV_=
      [0,
       [11,caml_new_string("_jsautocom_"),[2,0,0]],
       caml_new_string("_jsautocom_%s")],
     _ayW_=
      [0,
       [11,
        caml_new_string("function "),
        [2,
         0,
         [11,
          caml_new_string(" {\n  export COMP_CWORD\n  COMP_WORDS[0]="),
          [2,
           0,
           [11,
            caml_new_string
             ('\n  if type readarray > /dev/null\n  then readarray -t COMPREPLY < <("${COMP_WORDS['),
            [17,
             0,
             [11,
              caml_new_string
               ('}")\n  else IFS="\n" read -d "" -A COMPREPLY < <("${COMP_WORDS['),
              [17,
               0,
               [11,
                caml_new_string('}")\n  fi\n}\ncomplete -F '),
                [2,0,partial$1]]]]]]]]]],
       caml_new_string
        ('function %s {\n  export COMP_CWORD\n  COMP_WORDS[0]=%s\n  if type readarray > /dev/null\n  then readarray -t COMPREPLY < <("${COMP_WORDS[@]}")\n  else IFS="\n" read -d "" -A COMPREPLY < <("${COMP_WORDS[@]}")\n  fi\n}\ncomplete -F %s %s\n%!')],
     _ayU_=[0,caml_new_string("src/command.ml"),2659,21],
     _ayT_=
      [0,
       [11,
        caml_new_string("unknown subcommand "),
        [2,
         0,
         [11,
          caml_new_string(" for command "),
          [2,0,[11,caml_new_string(": "),[2,0,0]]]]]],
       caml_new_string("unknown subcommand %s for command %s: %s")],
     _ayR_=[0,caml_new_string(" SUBCOMMAND"),0],
     _ayP_=
      [0,
       [11,caml_new_string("unexpected subcommand "),[3,0,0]],
       caml_new_string("unexpected subcommand %S")],
     _ayQ_=
      [0,
       [11,caml_new_string("unknown subcommand "),[3,0,0]],
       caml_new_string("unknown subcommand %S")],
     _ayN_=[0,caml_new_string("stderr")],
     _ayO_=[0,caml_new_string("stdout")],
     _ayM_=[0,caml_new_string("info")],
     _ayL_=[0,caml_new_string("src/command.ml"),2460,72314,72356],
     _ayK_=[0,caml_new_string("src/command.ml"),2374,36],
     _ayJ_=[0,caml_new_string("\n")],
     _ayF_=[1,caml_new_string("src/command.ml.Shape.Fully_forced.t")],
     _ayG_=[0,caml_new_string("Basic")],
     _ayH_=[0,caml_new_string("Group")],
     _ayI_=[0,caml_new_string("Exec")],
     _ays_=[0,caml_new_string("child_subcommand")],
     _ayt_=[0,caml_new_string("path_to_exe")],
     _ayu_=[0,caml_new_string("working_dir")],
     _ayv_=[0,caml_new_string("readme")],
     _ayw_=[0,caml_new_string("summary")],
     _ax$_=[0,caml_new_string("subcommands")],
     _aya_=[0,caml_new_string("readme")],
     _ayb_=[0,caml_new_string("summary")],
     _axq_=[1,caml_new_string("src/command.ml.Shape.Base_info.grammar")],
     _axr_=[0,caml_new_string("Zero")],
     _axs_=[0,caml_new_string("One")],
     _axt_=[0,caml_new_string("Many")],
     _axu_=[0,caml_new_string("Maybe")],
     _axv_=[0,caml_new_string("Concat")],
     _axw_=[0,caml_new_string("Ad_hoc")],
     _axS_=[0,caml_new_string("flags")],
     _axT_=[0,caml_new_string("anons")],
     _axU_=[0,caml_new_string("readme")],
     _axV_=[0,caml_new_string("summary")],
     _axC_=[0,caml_new_string("Usage")],
     _axD_=[0,caml_new_string("Grammar")],
     _axB_=[1,caml_new_string("src/command.ml.Shape.Base_info.anons")],
     _axc_=[0,caml_new_string("aliases")],
     _axd_=[0,caml_new_string("doc")],
     _axe_=[0,caml_new_string("name")],
     _aw2_=
      [0,
       [11,caml_new_string("multiple subcommands named "),[2,0,0]],
       caml_new_string("multiple subcommands named %s")],
     _aw1_=[0,caml_new_string("-?"),0],
     _aw0_=
      [0,
       [11,
        caml_new_string(" print "),
        [2,0,[11,caml_new_string(" and exit"),0]]],
       caml_new_string(" print %s and exit")],
     _awZ_=
      [0,
       [11,
        caml_new_string("there is already a "),
        [2,0,[11,caml_new_string(" named "),[2,0,0]]]],
       caml_new_string("there is already a %s named %s")],
     _awX_=[0,[0,caml_new_string("src/command.ml"),1964,57827,57844]],
     _awU_=[0,caml_new_string("V1")],
     _awV_=[0,caml_new_string("V2")],
     _awW_=[0,caml_new_string("V3")],
     _awR_=[0,caml_new_string("Base")],
     _awS_=[0,caml_new_string("Group")],
     _awT_=[0,caml_new_string("Exec")],
     _awO_=[0,caml_new_string("Base")],
     _awP_=[0,caml_new_string("Group")],
     _awQ_=[0,caml_new_string("Exec")],
     _awK_=[0,caml_new_string("Base")],
     _awL_=[0,caml_new_string("Group")],
     _awM_=[0,caml_new_string("Exec")],
     _awN_=[0,caml_new_string("Lazy")],
     _awH_=[0,caml_new_string("path_to_exe")],
     _awI_=[0,caml_new_string("readme")],
     _awJ_=[0,caml_new_string("summary")],
     _awD_=[0,caml_new_string("path_to_exe")],
     _awE_=[0,caml_new_string("working_dir")],
     _awF_=[0,caml_new_string("readme")],
     _awG_=[0,caml_new_string("summary")],
     _awy_=[0,caml_new_string("child_subcommand")],
     _awz_=[0,caml_new_string("path_to_exe")],
     _awA_=[0,caml_new_string("working_dir")],
     _awB_=[0,caml_new_string("readme")],
     _awC_=[0,caml_new_string("summary")],
     _awv_=[0,caml_new_string("subcommands")],
     _aww_=[0,caml_new_string("readme")],
     _awx_=[0,caml_new_string("summary")],
     _aws_=[0,caml_new_string("subcommands")],
     _awt_=[0,caml_new_string("readme")],
     _awu_=[0,caml_new_string("summary")],
     _awr_=
      [0,
       [11,
        caml_new_string("Cannot pass both "),
        [2,0,[11,caml_new_string(" and "),[2,0,0]]]],
       caml_new_string("Cannot pass both %s and %s")],
     _awp_=[0,caml_new_string("; ")],
     _awq_=
      [0,
       [11,caml_new_string("Must pass one of these: "),[2,0,0]],
       caml_new_string("Must pass one of these: %s")],
     _awo_=[0,[0,caml_new_string("src/command.ml"),1626,48996,49006]],
     _awm_=[0,[0,caml_new_string("src/command.ml"),1603,48270,48278]],
     _awn_=[0,caml_new_string(",")],
     _awk_=[12,41,0],
     _awl_=[0,0],
     _awe_=[0,[2,0,0],caml_new_string("%s")],
     _awd_=
      [0,
       [11,caml_new_string("missing argument for flag "),[2,0,0]],
       caml_new_string("missing argument for flag %s")],
     _awf_=[0,caml_new_string("\n\n")],
     _awc_=[0,caml_new_string("\n")],
     _av__=[0,caml_new_string("flags")],
     _av$_=[0,caml_new_string("usage")],
     _awa_=[0,caml_new_string("readme")],
     _awb_=[0,caml_new_string("summary")],
     _av6_=[0,caml_new_string("flags")],
     _av7_=[0,caml_new_string("anons")],
     _av8_=[0,caml_new_string("readme")],
     _av9_=[0,caml_new_string("summary")],
     _av4_=[0,caml_new_string("Usage")],
     _av5_=[0,caml_new_string("Grammar")],
     _av3_=
      [0,
       [11,caml_new_string("multiple flags named "),[2,0,0]],
       caml_new_string("multiple flags named %s")],
     _avY_=[0,caml_new_string(", ")],
     _avZ_=
      [12,32,[2,0,[11,caml_new_string(" is an ambiguous prefix: "),[2,0,0]]]],
     _av0_=[0,0],
     _av1_=[12,32,[2,0,0]],
     _av2_=[0,0],
     _avU_=[11,caml_new_string(" name: "),[3,0,0]],
     _avV_=[0,0],
     _avW_=[11,caml_new_string(" name (contains whitespace): "),[3,0,0]],
     _avX_=[0,0],
     _avT_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           caml_new_string(" contains an underscore. Use a dash instead."),
           0]]]],
       caml_new_string("%s %s contains an underscore. Use a dash instead.")],
     _avR_=
      [0,
       [11,
        caml_new_string("argument name "),
        [3,0,[11,caml_new_string(" has surrounding whitespace"),0]]],
       caml_new_string("argument name %S has surrounding whitespace")],
     _avS_=[0,60,[0,62,[0,91,[0,93,[0,40,[0,41,[0,123,[0,125,0]]]]]]]],
     _avO_=
      [0,
       [11,caml_new_string("missing anonymous argument: "),[2,0,0]],
       caml_new_string("missing anonymous argument: %s")],
     _avP_=
      [0,
       [11,caml_new_string("too many anonymous arguments"),0],
       caml_new_string("too many anonymous arguments")],
     _avQ_=[3,0],
     _avN_=
      [0,
       [11,caml_new_string("missing anonymous argument: "),[2,0,0]],
       caml_new_string("missing anonymous argument: %s")],
     _avL_=[3,0],
     _avM_=
      [0,
       [11,
        caml_new_string("failed to parse "),
        [2,0,[11,caml_new_string(" value "),[3,0,[12,10,[2,0,0]]]]]],
       caml_new_string("failed to parse %s value %S\n%s")],
     _avI_=[0,caml_new_string("src/command.ml"),745,11],
     _avK_=
      [0,
       [11,
        caml_new_string("the grammar "),
        [2,
         0,
         [11,
          caml_new_string
           (" for anonymous arguments is not supported because there is the possibility for arguments ("),
          [2,
           0,
           [11,
            caml_new_string(") following a variable number of arguments ("),
            [2,
             0,
             [11,
              caml_new_string
               (").  Supporting such grammars would complicate the implementation significantly."),
              0]]]]]]],
       caml_new_string
        ("the grammar %s for anonymous arguments is not supported because there is the possibility for arguments (%s) following a variable number of arguments (%s).  Supporting such grammars would complicate the implementation significantly.")],
     _avJ_=
      [0,
       [11,
        caml_new_string("iteration of variable-length grammars such as "),
        [2,0,[11,caml_new_string(" is disallowed"),0]]],
       caml_new_string
        ("iteration of variable-length grammars such as %s is disallowed")],
     _avx_=[0,caml_new_string("Zero")],
     _avy_=[0,caml_new_string("One")],
     _avz_=[0,caml_new_string("Many")],
     _avA_=[0,caml_new_string("Maybe")],
     _avB_=[0,caml_new_string("Concat")],
     _avC_=[0,caml_new_string("Ad_hoc")],
     _avD_=[0,caml_new_string("src/command.ml"),687,20148,20178],
     _avF_=
      [0,
       [11,caml_new_string("[("),[2,0,[11,caml_new_string(") ...]"),0]]],
       caml_new_string("[(%s) ...]")],
     _avE_=
      [0,
       [12,91,[2,0,[11,caml_new_string(" ...]"),0]]],
       caml_new_string("[%s ...]")],
     _avG_=[0,[12,91,[2,0,[12,93,0]]],caml_new_string("[%s]")],
     _avH_=[0,caml_new_string(" ")],
     _avl_=[0,caml_new_string("src/command.ml"),629,11],
     _avk_=
      [0,
       [11,caml_new_string("missing required flag: "),[2,0,0]],
       caml_new_string("missing required flag: %s")],
     _avj_=[0,caml_new_string("_")],
     _avi_=[0,caml_new_string("_")],
     _avh_=
      [0,
       [11,
        caml_new_string("flag "),
        [2,0,[11,caml_new_string(" passed more than once"),0]]],
       caml_new_string("flag %s passed more than once")],
     _avg_=[0,caml_new_string("_")],
     _avf_=
      [0,
       [11,caml_new_string("missing required flag: "),[2,0,0]],
       caml_new_string("missing required flag: %s")],
     _ave_=[0,caml_new_string("_")],
     _avd_=
      [0,
       [11,
        caml_new_string("flag "),
        [2,0,[11,caml_new_string(" passed more than once"),0]]],
       caml_new_string("flag %s passed more than once")],
     _avc_=
      [0,
       [11,
        caml_new_string("failed to parse "),
        [2,
         0,
         [11,
          caml_new_string(" value "),
          [3,0,[11,caml_new_string(".\n"),[2,0,0]]]]]],
       caml_new_string("failed to parse %s value %S.\n%s")],
     _ava_=
      [0,
       [11,caml_new_string("multiple flags or aliases named "),[2,0,0]],
       caml_new_string("multiple flags or aliases named %s")],
     _avb_=
      [0,
       [11,caml_new_string("multiple flags named "),[2,0,0]],
       caml_new_string("multiple flags named %s")],
     _au$_=
      [0,
       [11,caml_new_string('same as "'),[2,0,[12,34,0]]],
       caml_new_string('same as "%s"')],
     _au__=
      [0,
       [11,caml_new_string('same as "'),[2,0,[12,34,0]]],
       caml_new_string('same as "%s"')],
     _au1_=[0,[12,91,[2,0,[12,93,0]]],caml_new_string("[%s]")],
     _au0_=[0,[2,0,[11,caml_new_string(" ..."),0]],caml_new_string("%s ...")],
     _auY_=[0,caml_new_string("at_most_once")],
     _auZ_=[0,caml_new_string("at_least_once")],
     _auX_=[0,caml_new_string(",")],
     _auV_=
      [0,
       [11,
        caml_new_string("Command.Spec.Arg_type.of_alist_exn: duplicate key "),
        [2,0,0]],
       caml_new_string("Command.Spec.Arg_type.of_alist_exn: duplicate key %s")],
     _auT_=[0,caml_new_string(",")],
     _auU_=
      [0,
       [11,caml_new_string("valid arguments: {"),[2,0,[12,125,0]]],
       caml_new_string("valid arguments: {%s}")],
     _auO_=[0,caml_new_string("\n"),0],
     _auN_=[0,caml_new_string("\n"),0],
     _auP_=[0,caml_new_string("\n"),0],
     _auQ_=[0,caml_new_string(", ")],
     _auR_=
      [0,
       [11,caml_new_string("(aliases: "),[2,0,[12,41,0]]],
       caml_new_string("(aliases: %s)")],
     _auS_=
      [0,
       [11,caml_new_string("(alias: "),[2,0,[12,41,0]]],
       caml_new_string("(alias: %s)")],
     _auK_=[0,caml_new_string("aliases")],
     _auL_=[0,caml_new_string("doc")],
     _auM_=[0,caml_new_string("name")],
     _auJ_=[0,caml_new_string("\n\n")],
     _auI_=[0,caml_new_string(" ")],
     _auF_=[0,caml_new_string("status")],
     _auG_=[0,caml_new_string("src/command.ml.Exit_called")],
     _auH_=[0,caml_new_string("_none_"),0,-1],
     _auW_=
      [0,[0,caml_new_string("true"),1],[0,[0,caml_new_string("false"),0],0]],
     _au4_=
      [1,
       caml_new_string
        ('\n        (((at_least_once false) (at_most_once false)) "[name] ...")\n        (((at_least_once true) (at_most_once false)) "name ...")\n        (((at_least_once false) (at_most_once true)) [name])\n        (((at_least_once true) (at_most_once true)) name) ')],
     _au5_=[0,caml_new_string("")],
     _au7_=[0,caml_new_string("to_help_string")],
     _avr_=[0,caml_new_string("Zero"),0],
     _axk_=[0,caml_new_string("Zero"),0];
    function bin_shape_sexp_opaque(a)
     {var _bsD_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_opaque$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group,_bsD_),[0,a,0])}
    function bin_size_sexp_opaque(size_of_a){return size_of_a}
    function bin_write_sexp_opaque(write_a){return write_a}
    function bin_writer_sexp_opaque(bin_writer_a)
     {function _bsC_(v){return caml_call1(bin_writer_a[2],v)}
      return [0,function(v){return caml_call1(bin_writer_a[1],v)},_bsC_]}
    function bin_read_sexp_opaque(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[18],_eL_,pos_ref[1])}
    function bin_read_sexp_opaque$0(of_a){return of_a}
    function bin_reader_sexp_opaque(bin_reader_a)
     {function _bsB_(buf,pos_ref,vtag)
       {return bin_read_sexp_opaque(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2(bin_reader_a[1],buf,pos_ref)},
              _bsB_]}
    function bin_sexp_opaque(bin_a)
     {var
       _bsz_=bin_reader_sexp_opaque(bin_a[3]),
       _bsA_=bin_writer_sexp_opaque(bin_a[2]);
      return [0,bin_shape_sexp_opaque(bin_a[1]),_bsA_,_bsz_]}
    function compare_sexp_opaque(cmp_a,a_001,b_002)
     {return caml_call2(cmp_a,a_001,b_002)}
    function hash_fold_sexp_opaque(hash_fold_a,hsv,arg)
     {return caml_call2(hash_fold_a,hsv,arg)}
    var
     Typename_of_sexp_opaque=caml_call1(Typerep_lib_Make_typename[2],[0,name]),
     typename_of_sexp_opaque=Typename_of_sexp_opaque[2];
    function typerep_of_sexp_opaque(of_a)
     {var name_of_sexp_opaque=caml_call1(Typename_of_sexp_opaque[1],of_a);
      return [9,[0,name_of_sexp_opaque,[0,of_a]]]}
    var
     _eQ_=Typerep_lib_Std[42],
     _eX_=Typerep_lib_Std[35],
     _eY_=Typerep_lib_Std[34],
     _eZ_=Typerep_lib_Std[33],
     _e0_=Typerep_lib_Std[32],
     _e1_=Typerep_lib_Std[31],
     _e2_=Typerep_lib_Std[30],
     _e3_=Typerep_lib_Std[29],
     _e4_=Typerep_lib_Std[28],
     _e5_=Typerep_lib_Std[27],
     _e6_=Typerep_lib_Std[26],
     _e7_=Typerep_lib_Std[25],
     _e__=Typerep_lib_Std[22],
     _e$_=Typerep_lib_Std[21],
     _fa_=Typerep_lib_Std[20],
     _fc_=Typerep_lib_Std[18],
     _fd_=Typerep_lib_Std[17],
     _fe_=Typerep_lib_Std[16],
     _fg_=Typerep_lib_Std[14],
     _fh_=Typerep_lib_Std[13],
     _fi_=Typerep_lib_Std[12],
     _fj_=Typerep_lib_Std[11],
     _fk_=Typerep_lib_Std[10],
     _fl_=Typerep_lib_Std[9],
     _fm_=Typerep_lib_Std[8],
     _fn_=Typerep_lib_Std[7],
     _fo_=Typerep_lib_Std[6],
     _fp_=Typerep_lib_Std[5],
     _fq_=Typerep_lib_Std[4],
     _fr_=Typerep_lib_Std[3],
     _fs_=Typerep_lib_Std[2],
     _ft_=Base_With_return[1],
     _fu_=Ppx_inline_test_lib_Runtime[15],
     _eM_=Typerep_lib_Std[46],
     _eN_=Typerep_lib_Std[45],
     _eO_=Typerep_lib_Std[44],
     _eP_=Typerep_lib_Std[43],
     _eR_=Typerep_lib_Std[41],
     _eS_=Typerep_lib_Std[40],
     _eT_=Typerep_lib_Std[39],
     _eU_=Typerep_lib_Std[38],
     _eV_=Typerep_lib_Std[37],
     _eW_=Typerep_lib_Std[36],
     _e8_=Typerep_lib_Std[24],
     _e9_=Typerep_lib_Std[23],
     _fb_=Typerep_lib_Std[19],
     _ff_=Typerep_lib_Std[15];
    try
     {runtime.caml_sys_getenv(cst_TESTING_FRAMEWORK);
      var _ay2_=1,am_running_test=_ay2_}
    catch(_bsy_)
     {_bsy_ = caml_wrap_exception(_bsy_);
      if(_bsy_ !== include$0[103])throw _bsy_;
      var am_running_test=0}
    var
     Not_found=Stdlib[8],
     Not_found_s=Base[210],
     include$1=[0,Not_found,Not_found_s],
     _fw_=include$1[2],
     _fv_=include$1[1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$1);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Import=
      [0,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_,
       sexp_of_t,
       _r_,
       _s_,
       _t_,
       _u_,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       t_of_sexp,
       sexp_of_t$0,
       _B_,
       _C_,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       _U_,
       _V_,
       _W_,
       _X_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ao_,
       _ap_,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_,
       _aD_,
       _aE_,
       _aF_,
       _aG_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aL_,
       _aM_,
       _aN_,
       _aO_,
       _aP_,
       _aQ_,
       _aR_,
       _aS_,
       _aT_,
       _aU_,
       _aV_,
       _aW_,
       _aX_,
       _aY_,
       _aZ_,
       _a0_,
       _a1_,
       _a2_,
       _a3_,
       _a4_,
       _a5_,
       _a6_,
       _a7_,
       _a8_,
       _a9_,
       _a__,
       _a$_,
       _ba_,
       _bb_,
       _bc_,
       _bd_,
       _be_,
       _bf_,
       _bg_,
       _bh_,
       _bi_,
       _bj_,
       _bk_,
       _bl_,
       _bm_,
       _bn_,
       bin_size_t,
       bin_size_t$0,
       _bo_,
       bin_size_t$1,
       bin_size_t$2,
       _bp_,
       _bq_,
       _br_,
       _bs_,
       _bt_,
       _bu_,
       _bv_,
       _bw_,
       _bx_,
       _by_,
       _bz_,
       _bA_,
       _bB_,
       _bC_,
       _bD_,
       _bE_,
       _bF_,
       _bG_,
       _bH_,
       bin_size_t$3,
       _bI_,
       _bJ_,
       _bK_,
       _bL_,
       _bM_,
       _bN_,
       _bO_,
       _bP_,
       _bQ_,
       _bR_,
       _bS_,
       _bT_,
       _bU_,
       _bV_,
       _bW_,
       _bX_,
       _bY_,
       _bZ_,
       _b0_,
       _b1_,
       _b2_,
       _b3_,
       _b4_,
       _b5_,
       _b6_,
       _b7_,
       _b8_,
       _b9_,
       _b__,
       _b$_,
       _ca_,
       _cb_,
       _cc_,
       bin_write_t,
       _cd_,
       bin_read_t,
       bin_read_t$0,
       _ce_,
       _cf_,
       _cg_,
       bin_write_t$0,
       _ch_,
       bin_read_t$1,
       bin_read_t$2,
       _ci_,
       _cj_,
       _ck_,
       _cl_,
       _cm_,
       _cn_,
       _co_,
       _cp_,
       _cq_,
       _cr_,
       bin_write_t$1,
       _cs_,
       bin_read_t$3,
       bin_read_t$4,
       _ct_,
       _cu_,
       _cv_,
       bin_write_t$2,
       _cw_,
       bin_read_t$5,
       bin_read_t$6,
       _cx_,
       _cy_,
       _cz_,
       _cA_,
       _cB_,
       _cC_,
       _cD_,
       _cE_,
       _cF_,
       _cG_,
       _cH_,
       _cI_,
       _cJ_,
       _cK_,
       _cL_,
       _cM_,
       _cN_,
       _cO_,
       _cP_,
       _cQ_,
       _cR_,
       _cS_,
       _cT_,
       _cU_,
       _cV_,
       _cW_,
       _cX_,
       _cY_,
       _cZ_,
       _c0_,
       _c1_,
       _c2_,
       _c3_,
       _c4_,
       _c5_,
       _c6_,
       _c7_,
       _c8_,
       _c9_,
       _c__,
       _c$_,
       _da_,
       _db_,
       _dc_,
       _dd_,
       _de_,
       _df_,
       _dg_,
       _dh_,
       _di_,
       _dj_,
       _dk_,
       _dl_,
       _dm_,
       _dn_,
       _do_,
       _dp_,
       _dq_,
       _dr_,
       _ds_,
       _dt_,
       _du_,
       _dv_,
       _dw_,
       _dx_,
       _dy_,
       _dz_,
       _dA_,
       _dB_,
       _dC_,
       _dD_,
       _dE_,
       _dF_,
       _dG_,
       _dH_,
       _dI_,
       _dJ_,
       _dK_,
       _dL_,
       _dM_,
       bin_write_t$3,
       _dN_,
       bin_read_t$7,
       bin_read_t$8,
       _dO_,
       _dP_,
       _dQ_,
       _dR_,
       _dS_,
       _dT_,
       _dU_,
       _dV_,
       _dW_,
       _dX_,
       _dY_,
       _dZ_,
       _d0_,
       _d1_,
       _d2_,
       _d3_,
       _d4_,
       _d5_,
       _d6_,
       _d7_,
       _d8_,
       _d9_,
       _d__,
       _d$_,
       _ea_,
       _eb_,
       _ec_,
       _ed_,
       _ee_,
       _ef_,
       _eg_,
       _eh_,
       _ei_,
       _ej_,
       _ek_,
       _el_,
       _em_,
       _en_,
       _eo_,
       _ep_,
       _eq_,
       _er_,
       include,
       _es_,
       _et_,
       _eu_,
       _ev_,
       _ew_,
       _ex_,
       _ey_,
       _ez_,
       _eA_,
       _eB_,
       _eC_,
       _eD_,
       _eE_,
       bin_shape_sexp_opaque,
       bin_size_sexp_opaque,
       bin_write_sexp_opaque,
       bin_writer_sexp_opaque,
       bin_read_sexp_opaque$0,
       bin_read_sexp_opaque,
       bin_reader_sexp_opaque,
       bin_sexp_opaque,
       compare_sexp_opaque,
       hash_fold_sexp_opaque,
       typerep_of_sexp_opaque,
       typename_of_sexp_opaque,
       _fs_,
       _fr_,
       _fq_,
       _fp_,
       _fo_,
       _fn_,
       _fm_,
       _fl_,
       _fk_,
       _fj_,
       _fi_,
       _fh_,
       _fg_,
       _ff_,
       _fe_,
       _fd_,
       _fc_,
       _fb_,
       _fa_,
       _e$_,
       _e__,
       _e9_,
       _e8_,
       _e7_,
       _e6_,
       _e5_,
       _e4_,
       _e3_,
       _e2_,
       _e1_,
       _e0_,
       _eZ_,
       _eY_,
       _eX_,
       _eW_,
       _eV_,
       _eU_,
       _eT_,
       _eS_,
       _eR_,
       _eQ_,
       _eP_,
       _eO_,
       _eN_,
       _eM_,
       _ft_,
       _fu_,
       am_running_test,
       include$1,
       _fv_,
       _fw_];
    caml_register_global(4250,Core_kernel_Import,"Core_kernel__Import");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$2);
    caml_call1(Expect_test_collector[4][1],cst_src_sexpable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$3,cst$0);
    function V1(Sexpable,M)
     {function t_of_sexp(sexp)
       {var s=caml_call1(Sexpable[1],sexp);
        try
         {var _bsx_=caml_call1(M[2],s);return _bsx_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_eE_,exn,sexp)}}
      function sexp_of_t(t)
       {var _bsw_=caml_call1(M[1],t);return caml_call1(Sexpable[2],_bsw_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable=[0,V1];
    function V1$0(Sexpable,M)
     {function t_of_sexp(a_of_sexp,sexp)
       {var s=caml_call2(Sexpable[1],a_of_sexp,sexp);
        try
         {var _bsv_=caml_call1(M[2],s);return _bsv_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_eE_,exn,sexp)}}
      function sexp_of_t(sexp_of_a,t)
       {var _bsu_=caml_call1(M[1],t);
        return caml_call2(Sexpable[2],sexp_of_a,_bsu_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable1=[0,V1$0];
    function V1$1(Sexpable,M)
     {function t_of_sexp(a_of_sexp,b_of_sexp,sexp)
       {var s=caml_call3(Sexpable[1],a_of_sexp,b_of_sexp,sexp);
        try
         {var _bst_=caml_call1(M[2],s);return _bst_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_eE_,exn,sexp)}}
      function sexp_of_t(sexp_of_a,sexp_of_b,t)
       {var _bss_=caml_call1(M[1],t);
        return caml_call3(Sexpable[2],sexp_of_a,sexp_of_b,_bss_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable2=[0,V1$1];
    function V1$2(Sexpable,M)
     {function t_of_sexp(a_of_sexp,b_of_sexp,c_of_sexp,sexp)
       {var s=caml_call4(Sexpable[1],a_of_sexp,b_of_sexp,c_of_sexp,sexp);
        try
         {var _bsr_=caml_call1(M[2],s);return _bsr_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_eE_,exn,sexp)}}
      function sexp_of_t(sexp_of_a,sexp_of_b,sexp_of_c,t)
       {var _bsq_=caml_call1(M[1],t);
        return caml_call4(Sexpable[2],sexp_of_a,sexp_of_b,sexp_of_c,_bsq_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable3=[0,V1$2];
    function V1$3(M)
     {function t_of_sexp(sexp)
       {if(0 === sexp[0])
         {var s=sexp[1];
          try
           {var _bsp_=caml_call1(M[1],s);return _bsp_}
          catch(exn)
           {exn = caml_wrap_exception(exn);return caml_call2(_eE_,exn,sexp)}}
        return caml_call2
                (_eD_,
                 cst_Sexpable_Of_stringable_t_of_sexp_expected_an_atom_but_got_a_list,
                 sexp)}
      function sexp_of_t(t){return [0,caml_call1(M[2],t)]}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_stringable=[0,V1$3];
    function V1$4(M)
     {function of_string(x){return caml_call2(Sexplib_Conv[67],M[1],x)}
      function to_string(x){return caml_call2(Sexplib_Conv[59],M[2],x)}
      return [0,of_string,to_string]}
    var
     To_stringable=[0,V1$4],
     Stable=
      [0,
       Of_sexpable,
       Of_sexpable1,
       Of_sexpable2,
       Of_sexpable3,
       Of_stringable,
       To_stringable];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$4);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var _fx_=Stable[6][1],Core_kernel_Sexpable=[0,_fx_,Stable];
    caml_register_global(4251,Core_kernel_Sexpable,"Core_kernel__Sexpable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$5);
    caml_call1(Expect_test_collector[4][1],cst_src_binable0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$6,cst$1);
    var Minimal=include$2[1];
    function V1$5(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[7],[0,Binable,to_binable,of_binable])}
    var Of_binable=[0,V1$5];
    function V1$6(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[8],[0,Binable,to_binable,of_binable])}
    var Of_binable1=[0,V1$6];
    function V1$7(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[9],[0,Binable,to_binable,of_binable])}
    var Of_binable2=[0,V1$7];
    function V1$8(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[10],[0,Binable,to_binable,of_binable])}
    var Of_binable3=[0,V1$8];
    function V1$9(M)
     {var
       to_binable=M[2],
       of_binable=M[1],
       _bsh_=caml_call1(Bin_prot_Shape[2][1],cst_t),
       _bsi_=
        [0,
         [0,cst_Atom,[0,_cb_,0]],
         [0,
          [0,
           cst_List,
           [0,
            caml_call1
             (_dq_,caml_call1(caml_call1(Bin_prot_Shape[13],_bsh_),0)),
            0]],
          0]],
       _bsj_=caml_call1(Bin_prot_Shape[9],_bsi_),
       _bsk_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$0),0,_bsj_],0],
       _bsl_=caml_call1(Bin_prot_Shape[4][1],cst_src_binable0_ml_65_10),
       group=caml_call2(Bin_prot_Shape[6],_bsl_,_bsk_),
       _bsm_=caml_call1(Bin_prot_Shape[2][1],cst_t$1),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bsm_),0),
       _bsg_=[0,to_binable,of_binable];
      function bin_size_t$0(param)
       {if(0 === param[0])
         {var v1=param[1],_bsn_=caml_call1(bin_size_t,v1);
          return caml_call2(Bin_prot_Common[23],1,_bsn_)}
        var v1$0=param[1],_bso_=caml_call2(_bz_,bin_size_t$0,v1$0);
        return caml_call2(Bin_prot_Common[23],1,_bso_)}
      function bin_write_t$0(buf,pos,param)
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
          return caml_call3(bin_write_t,buf,pos$0,v1)}
        var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
        return caml_call3(caml_call1(_ds_,bin_write_t$0),buf,pos$1,v1$0)}
      function bin_read_t$0(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_src_binable0_ml_Stable_Of_sexpable_V1_t,
                 pos_ref[1])}
      function bin_read_t$1(buf,pos_ref)
       {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
        if(0 === match)
         {var arg_1=caml_call2(bin_read_t,buf,pos_ref);return [0,arg_1]}
        if(1 === match)
         {var arg_1$0=caml_call2(caml_call1(_du_,bin_read_t$1),buf,pos_ref);
          return [1,arg_1$0]}
        return caml_call2(Bin_prot_Common[18],_fy_,pos_ref[1])}
      return caml_call1
              (caml_call1
                (Of_binable[1],
                 [0,
                  bin_shape_t,
                  bin_size_t$0,
                  bin_write_t$0,
                  bin_read_t$1,
                  bin_read_t$0]),
               _bsg_)}
    var Of_sexpable$0=[0,V1$9];
    function V1$10(M)
     {var
       _bsa_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$2),0,_cb_],0],
       _bsb_=caml_call1(Bin_prot_Shape[4][1],cst_src_binable0_ml_81_10),
       group=caml_call2(Bin_prot_Shape[6],_bsb_,_bsa_),
       _bsc_=caml_call1(Bin_prot_Shape[2][1],cst_t$3),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bsc_),0),
       _bsd_=M[2],
       Of_binable=[248,cst_Of_binable,caml_fresh_oo_id(0)];
      function _bse_(param)
       {if(param[1] === Of_binable)
         {var
           v1=param[3],
           v0=param[2],
           v0$0=caml_call1(_ak_,v0),
           v1$0=caml_call1(sexp_of_t,v1);
          return [1,[0,_fz_,[0,v0$0,[0,v1$0,0]]]]}
        throw [0,Assert_failure,_fA_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Of_binable,_bse_);
      function of_binable(s)
       {try
         {var _bsf_=caml_call1(M[1],s);return _bsf_}
        catch(x){x = caml_wrap_exception(x);throw [0,Of_binable,s,x]}}
      return caml_call1
              (Bin_prot_Utils[7],
               [0,
                [0,bin_shape_t,bin_size_t,bin_write_t,bin_read_t,bin_read_t$0],
                _bsd_,
                of_binable])}
    var
     Of_stringable$0=[0,V1$10],
     Stable$0=
      [0,
       Of_binable,
       Of_binable1,
       Of_binable2,
       Of_binable3,
       Of_sexpable$0,
       Of_stringable$0];
    function of_bigstring(m,bigstring)
     {var
       pos_ref=[0,0],
       t=caml_call2(m[3],bigstring,pos_ref),
       _br$_=runtime.caml_ba_dim_1(bigstring);
      if(caml_call2(_aS_,pos_ref[1],_br$_))return t;
      throw [0,Assert_failure,_fB_]}
    function create_bigstring(size)
     {return caml_call3
              (Stdlib_bigarray[19][1],
               Stdlib_bigarray[13],
               Stdlib_bigarray[15],
               size)}
    function to_bigstring(opt,m,t)
     {if(opt)
       var sth=opt[1],prefix_with_length=sth;
      else
       var prefix_with_length=0;
      var
       t_length=caml_call1(m[1],t),
       bigstring_length=
        prefix_with_length?caml_call2(_aw_,t_length,8):t_length,
       bigstring=create_bigstring(bigstring_length),
       pos=
        prefix_with_length
         ?caml_call3(Bin_prot_Write[33],bigstring,0,t_length)
         :0,
       pos$0=caml_call3(m[2],bigstring,pos,t);
      if(caml_call2(_aS_,pos$0,bigstring_length))return bigstring;
      throw [0,Assert_failure,_fC_]}
    function Of_only_functions_and_shape(X)
     {var
       _br7_=X[5],
       _br8_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$4),0,_br7_],0],
       _br9_=caml_call1(Bin_prot_Shape[4][1],cst_src_binable0_ml_149_2),
       group=caml_call2(Bin_prot_Shape[6],_br9_,_br8_),
       _br__=caml_call1(Bin_prot_Shape[2][1],cst_t$5),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_br__),0),
       bin_size_t=X[1],
       bin_write_t=X[2],
       bin_writer_t=[0,bin_size_t,bin_write_t],
       bin_read_t=X[4],
       bin_read_t$0=X[3],
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$7);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$3=
      [0,
       Minimal,
       Stable$0,
       of_bigstring,
       create_bigstring,
       to_bigstring,
       Of_only_functions_and_shape];
    caml_register_global(4259,include$3,"Core_kernel__Binable0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$8);
    caml_call1(Expect_test_collector[4][1],cst_src_printf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$9,cst$2);
    var
     _fD_=include$4[1],
     _fE_=include$4[2],
     _fF_=include$4[3],
     _fG_=include$4[4],
     failwithf=include$4[6],
     _fJ_=Stdio_Out_channel[26],
     _fK_=Stdio_Out_channel[22],
     _fM_=Stdio_Out_channel[23],
     _fH_=include$4[5],
     _fI_=include$4[7],
     _fL_=Stdio_Out_channel[27];
    function exitf(fmt)
     {return caml_call2
              (_fG_,
               function(s,param)
                {caml_call2(_fJ_,_fN_,s);return caml_call1(Stdlib[99],1)},
               fmt)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$10);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Printf=
      [0,_fD_,_fE_,_fF_,_fG_,_fH_,failwithf,_fI_,_fJ_,_fK_,_fL_,_fM_,exitf];
    caml_register_global(4262,Core_kernel_Printf,"Core_kernel__Printf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$11);
    caml_call1(Expect_test_collector[4][1],cst_src_perms_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$12,cst$3);
    var
     _fO_=caml_call1(Bin_prot_Shape[9],0),
     _fP_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$6),0,_fO_],0],
     _fQ_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_9_4),
     group$0=caml_call2(Bin_prot_Shape[6],_fQ_,_fP_),
     _fR_=caml_call1(Bin_prot_Shape[2][1],cst_t$7),
     bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_fR_),0);
    function bin_size_t$4(v)
     {throw [0,Bin_prot_Common[17],cst_src_perms_ml_Types_Nobody_t]}
    function bin_write_t$4(buf,param,v)
     {throw [0,Bin_prot_Common[17],cst_src_perms_ml_Types_Nobody_t$0]}
    var bin_writer_t=[0,bin_size_t$4,bin_write_t$4];
    function bin_read_t$9(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_perms_ml_Types_Nobody_t$1,
               pos_ref[1])}
    function bin_read_t$10(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[18],_fS_,pos_ref[1])}
    var
     bin_reader_t=[0,bin_read_t$10,bin_read_t$9],
     bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
    function compare(a_001,b_002)
     {return caml_call3(Ppx_compare_lib[2],cst_t$8,a_001,b_002)}
    function hash_fold_t(hsv,arg)
     {return caml_call1
              (_a__,
               cst_hash_called_on_the_type_t_which_is_abstract_in_an_implementation)}
    function hash(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_br6_=hash_fold_t(hsv,x);
      return caml_call1(Base_Hash[9],_br6_)}
    function t_of_sexp$0(sexp)
     {return caml_call2(Sexplib0_Sexp_conv_error[26],tp_loc,sexp)}
    function sexp_of_t$1(v){throw [0,Assert_failure,_fT_]}
    var
     _fU_=caml_call1(Bin_prot_Shape[9],0),
     _fV_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$9),0,_fU_],0],
     _fW_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_15_4),
     group$1=caml_call2(Bin_prot_Shape[6],_fW_,_fV_),
     _fX_=caml_call1(Bin_prot_Shape[2][1],cst_t$10),
     bin_shape_t$0=caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_fX_),0);
    function bin_size_t$5(v)
     {throw [0,Bin_prot_Common[17],cst_src_perms_ml_Types_Me_t]}
    function bin_write_t$5(buf,param,v)
     {throw [0,Bin_prot_Common[17],cst_src_perms_ml_Types_Me_t$0]}
    var bin_writer_t$0=[0,bin_size_t$5,bin_write_t$5];
    function bin_read_t$11(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_perms_ml_Types_Me_t$1,pos_ref[1])}
    function bin_read_t$12(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[18],_fY_,pos_ref[1])}
    var
     bin_reader_t$0=[0,bin_read_t$12,bin_read_t$11],
     bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0];
    function compare$0(a_003,b_004)
     {return caml_call3(Ppx_compare_lib[2],cst_t$11,a_003,b_004)}
    function hash_fold_t$0(hsv,arg)
     {return caml_call1
              (_a__,
               cst_hash_called_on_the_type_t_which_is_abstract_in_an_implementation$0)}
    function hash$0(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_br5_=hash_fold_t$0(hsv,x);
      return caml_call1(Base_Hash[9],_br5_)}
    function t_of_sexp$1(sexp)
     {return caml_call2(Sexplib0_Sexp_conv_error[26],tp_loc$0,sexp)}
    function sexp_of_t$2(v){throw [0,Assert_failure,_fZ_]}
    var
     _f0_=[0,caml_call2(Bin_prot_Shape[10],cst_Read,0),0],
     _f1_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_21_13),
     _f2_=caml_call2(Bin_prot_Shape[12],_f1_,_f0_),
     _f3_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$12),0,_f2_],0],
     _f4_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_21_4),
     group$2=caml_call2(Bin_prot_Shape[6],_f4_,_f3_),
     _f5_=caml_call1(Bin_prot_Shape[2][1],cst_t$13),
     bin_shape_t$1=caml_call1(caml_call2(Bin_prot_Shape[14],group$2,_f5_),0);
    function bin_size_t$6(param){return 4}
    function bin_write_t$6(buf,pos,param)
     {return caml_call3(Bin_prot_Write[29],buf,pos,914388854)}
    var bin_writer_t$1=[0,bin_size_t$6,bin_write_t$6];
    function bin_read_t$13(buf,param,vint)
     {if(914388854 === vint)return 914388854;throw Bin_prot_Common[13]}
    function bin_read_t$14(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _br3_=bin_read_t$13(buf,pos_ref,vint);return _br3_}
      catch(_br4_)
       {_br4_ = caml_wrap_exception(_br4_);
        if(_br4_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err,pos_ref[1]);
        throw _br4_}}
    var
     bin_reader_t$1=[0,bin_read_t$14,bin_read_t$13],
     bin_t$1=[0,bin_shape_t$1,bin_writer_t$1,bin_reader_t$1];
    function compare$1(a_005,b_006)
     {return caml_call2(Ppx_compare_lib[1],a_005,b_006)?0:0}
    function hash_fold_t$1(hsv,arg)
     {return caml_call2(Base_Hash[3],hsv,914388854)}
    function hash$1(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_br2_=hash_fold_t$1(hsv,x);
      return caml_call1(Base_Hash[9],_br2_)}
    function t_of_sexp$2(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Read$0)
                ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                :914388854}
      var _br0_=sexp[1];
      if(_br0_)
       {var _br1_=_br0_[1];
        if(0 === _br1_[0])
         {var atom$0=_br1_[1];
          return caml_string_notequal(atom$0,cst_Read$1)
                  ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                  :caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$1,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$1,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$1,sexp)}
    function t_of_sexp$3(sexp)
     {try
       {var _brY_=t_of_sexp$2(sexp);return _brY_}
      catch(_brZ_)
       {_brZ_ = caml_wrap_exception(_brZ_);
        if(_brZ_ === Sexplib0_Sexp_conv_error[17])
         return caml_call2(Sexplib0_Sexp_conv_error[19],tp_loc$2,sexp);
        throw _brZ_}}
    function sexp_of_t$3(param){return _f6_}
    var
     _f7_=
      [0,caml_call2(Bin_prot_Shape[10],cst_Who_can_write,[0,bin_shape_t$0]),0],
     _f8_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_27_13),
     _f9_=caml_call2(Bin_prot_Shape[12],_f8_,_f7_),
     _f__=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$14),0,_f9_],0],
     _f$_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_27_4),
     group$3=caml_call2(Bin_prot_Shape[6],_f$_,_f__),
     _ga_=caml_call1(Bin_prot_Shape[2][1],cst_t$15),
     bin_shape_t$2=caml_call1(caml_call2(Bin_prot_Shape[14],group$3,_ga_),0);
    function bin_size_t$7(param)
     {var args=param[2],size_args=bin_size_t$5(args);
      return caml_call2(Bin_prot_Common[23],size_args,4)}
    function bin_write_t$7(buf,pos,param)
     {var
       args=param[2],
       pos$0=caml_call3(Bin_prot_Write[29],buf,pos,271892623);
      return bin_write_t$5(buf,pos$0,args)}
    var bin_writer_t$2=[0,bin_size_t$7,bin_write_t$7];
    function bin_read_t$15(buf,pos_ref,vint)
     {if(271892623 === vint)
       {var arg_1=bin_read_t$12(buf,pos_ref);return [0,271892623,arg_1]}
      throw Bin_prot_Common[13]}
    function bin_read_t$16(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _brW_=bin_read_t$15(buf,pos_ref,vint);return _brW_}
      catch(_brX_)
       {_brX_ = caml_wrap_exception(_brX_);
        if(_brX_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$0,pos_ref[1]);
        throw _brX_}}
    var
     bin_reader_t$2=[0,bin_read_t$16,bin_read_t$15],
     bin_t$2=[0,bin_shape_t$2,bin_writer_t$2,bin_reader_t$2];
    function compare$2(a_007,b_008)
     {if(caml_call2(Ppx_compare_lib[1],a_007,b_008))return 0;
      var right_010=b_008[2],left_009=a_007[2];
      return compare$0(left_009,right_010)}
    function hash_fold_t$2(hsv,arg)
     {var v=arg[2],hsv$0=caml_call2(Base_Hash[3],hsv,271892623);
      return hash_fold_t$0(hsv$0,v)}
    function hash$2(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_brV_=hash_fold_t$2(hsv,x);
      return caml_call1(Base_Hash[9],_brV_)}
    function t_of_sexp$4(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Who_can_write$0)
                ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$3,sexp)}
      var _brT_=sexp[1];
      if(_brT_)
       {var _brU_=_brT_[1];
        if(0 === _brU_[0])
         {var sexp_args=_brT_[2],atom$0=_brU_[1];
          if(caml_string_notequal(atom$0,cst_Who_can_write$1))
           return caml_call1(Sexplib0_Sexp_conv_error[18],0);
          if(sexp_args)
           if(! sexp_args[2])
            {var v0=sexp_args[1],v0$0=t_of_sexp$1(v0);
             return [0,271892623,v0$0]}
          return caml_call3(Sexplib0_Sexp_conv_error[21],tp_loc$3,atom$0,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$3,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$3,sexp)}
    function t_of_sexp$5(sexp)
     {try
       {var _brR_=t_of_sexp$4(sexp);return _brR_}
      catch(_brS_)
       {_brS_ = caml_wrap_exception(_brS_);
        if(_brS_ === Sexplib0_Sexp_conv_error[17])
         return caml_call2(Sexplib0_Sexp_conv_error[19],tp_loc$4,sexp);
        throw _brS_}}
    function sexp_of_t$4(param)
     {var v0=param[2];return [1,[0,_gb_,[0,sexp_of_t$2(v0),0]]]}
    var
     _gc_=
      [0,caml_call2(Bin_prot_Shape[10],cst_Who_can_write$2,[0,bin_shape_t]),0],
     _gd_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_34_8),
     _ge_=[0,caml_call2(Bin_prot_Shape[11],_gd_,bin_shape_t$1),_gc_],
     _gf_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_34_6),
     _gg_=caml_call2(Bin_prot_Shape[12],_gf_,_ge_),
     _gh_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$16),0,_gg_],0],
     _gi_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_33_4),
     group$4=caml_call2(Bin_prot_Shape[6],_gi_,_gh_),
     _gj_=caml_call1(Bin_prot_Shape[2][1],cst_t$17),
     bin_shape_t$3=caml_call1(caml_call2(Bin_prot_Shape[14],group$4,_gj_),0);
    function bin_size_t$8(v)
     {if(typeof v === "number")return 4;
      var args=v[2],size_args=bin_size_t$4(args);
      return caml_call2(Bin_prot_Common[23],size_args,4)}
    function bin_write_t$8(buf,pos,v)
     {if(typeof v === "number")return bin_write_t$6(buf,pos,v);
      var args=v[2],pos$0=caml_call3(Bin_prot_Write[29],buf,pos,271892623);
      return bin_write_t$4(buf,pos$0,args)}
    var bin_writer_t$3=[0,bin_size_t$8,bin_write_t$8];
    function bin_read_t$17(buf,pos_ref,vint)
     {try
       {var _brP_=bin_read_t$13(buf,pos_ref,vint);return _brP_}
      catch(_brQ_)
       {_brQ_ = caml_wrap_exception(_brQ_);
        if(_brQ_ === Bin_prot_Common[13])
         {if(271892623 === vint)
           {var arg_1=bin_read_t$10(buf,pos_ref);return [0,271892623,arg_1]}
          throw Bin_prot_Common[13]}
        throw _brQ_}}
    function bin_read_t$18(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _brN_=bin_read_t$17(buf,pos_ref,vint);return _brN_}
      catch(_brO_)
       {_brO_ = caml_wrap_exception(_brO_);
        if(_brO_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$1,pos_ref[1]);
        throw _brO_}}
    var
     bin_reader_t$3=[0,bin_read_t$18,bin_read_t$17],
     bin_t$3=[0,bin_shape_t$3,bin_writer_t$3,bin_reader_t$3];
    function compare$3(a_011,b_012)
     {if(caml_call2(Ppx_compare_lib[1],a_011,b_012))return 0;
      if(typeof a_011 === "number")
       {if(914388854 === b_012)return compare$1(a_011,b_012)}
      else
       if(typeof b_012 !== "number")
        if(271892623 === b_012[1])
         {var right_016=b_012[2],left_015=a_011[2];
          return compare(left_015,right_016)}
      return caml_compare(a_011,b_012)}
    function hash_fold_t$3(hsv,arg)
     {if(typeof arg === "number")return hash_fold_t$1(hsv,arg);
      var v=arg[2],hsv$0=caml_call2(Base_Hash[3],hsv,271892623);
      return hash_fold_t(hsv$0,v)}
    function hash$3(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_brM_=hash_fold_t$3(hsv,x);
      return caml_call1(Base_Hash[9],_brM_)}
    function t_of_sexp$6(sexp)
     {try
       {try
         {var _brI_=t_of_sexp$2(sexp),_brJ_=_brI_}
        catch(_brL_)
         {_brL_ = caml_wrap_exception(_brL_);
          if(_brL_ !== Sexplib0_Sexp_conv_error[17])throw _brL_;
          if(0 === sexp[0])
           var
            atom=sexp[1],
            _brJ_=
             caml_string_notequal(atom,cst_Who_can_write$3)
              ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
              :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$5,sexp);
          else
           {var _brG_=sexp[1];
            if(_brG_)
             {var _brH_=_brG_[1];
              if(0 === _brH_[0])
               {var sexp_args=_brG_[2],atom$0=_brH_[1];
                if(caml_string_notequal(atom$0,cst_Who_can_write$4))
                 var _brJ_=caml_call1(Sexplib0_Sexp_conv_error[18],0);
                else
                 {if(sexp_args)
                   if(sexp_args[2])
                    var switch$0=0;
                   else
                    var
                     v0=sexp_args[1],
                     v0$0=t_of_sexp$0(v0),
                     _brJ_=[0,271892623,v0$0],
                     switch$0=1;
                  else
                   var switch$0=0;
                  if(! switch$0)
                   var
                    _brJ_=
                     caml_call3
                      (Sexplib0_Sexp_conv_error[21],tp_loc$5,atom$0,sexp)}}
              else
               var
                _brJ_=
                 caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$5,sexp)}
            else
             var _brJ_=caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$5,sexp)}}
        return _brJ_}
      catch(_brK_)
       {_brK_ = caml_wrap_exception(_brK_);
        if(_brK_ === Sexplib0_Sexp_conv_error[17])
         return caml_call2(Sexplib0_Sexp_conv_error[19],tp_loc$6,sexp);
        throw _brK_}}
    function sexp_of_t$5(v)
     {if(typeof v === "number")return sexp_of_t$3(v);
      var v0=v[2];
      return [1,[0,_gk_,[0,sexp_of_t$1(v0),0]]]}
    var
     _gl_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_45_8),
     _gm_=[0,caml_call2(Bin_prot_Shape[11],_gl_,bin_shape_t$2),0],
     _gn_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_44_8),
     _go_=[0,caml_call2(Bin_prot_Shape[11],_gn_,bin_shape_t$1),_gm_],
     _gp_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_44_6),
     _gq_=caml_call2(Bin_prot_Shape[12],_gp_,_go_),
     _gr_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$18),0,_gq_],0],
     _gs_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_43_4),
     group$5=caml_call2(Bin_prot_Shape[6],_gs_,_gr_),
     _gt_=caml_call1(Bin_prot_Shape[2][1],cst_t$19),
     bin_shape_t$4=caml_call1(caml_call2(Bin_prot_Shape[14],group$5,_gt_),0);
    function bin_size_t$9(v){return typeof v === "number"?4:bin_size_t$7(v)}
    function bin_write_t$9(buf,pos,v)
     {return typeof v === "number"
              ?bin_write_t$6(buf,pos,v)
              :bin_write_t$7(buf,pos,v)}
    var bin_writer_t$4=[0,bin_size_t$9,bin_write_t$9];
    function bin_read_t$19(buf,pos_ref,vint)
     {try
       {var _brE_=bin_read_t$13(buf,pos_ref,vint);return _brE_}
      catch(_brF_)
       {_brF_ = caml_wrap_exception(_brF_);
        if(_brF_ === Bin_prot_Common[13])
         return bin_read_t$15(buf,pos_ref,vint);
        throw _brF_}}
    function bin_read_t$20(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _brC_=bin_read_t$19(buf,pos_ref,vint);return _brC_}
      catch(_brD_)
       {_brD_ = caml_wrap_exception(_brD_);
        if(_brD_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$2,pos_ref[1]);
        throw _brD_}}
    var
     bin_reader_t$4=[0,bin_read_t$20,bin_read_t$19],
     bin_t$4=[0,bin_shape_t$4,bin_writer_t$4,bin_reader_t$4];
    function compare$4(a_017,b_018)
     {if(caml_call2(Ppx_compare_lib[1],a_017,b_018))return 0;
      if(typeof a_017 === "number")
       {if(914388854 === b_018)return compare$1(a_017,b_018)}
      else
       if(typeof b_018 !== "number")
        if(271892623 === b_018[1])return compare$2(a_017,b_018);
      return caml_compare(a_017,b_018)}
    function hash_fold_t$4(hsv,arg)
     {return typeof arg === "number"
              ?hash_fold_t$1(hsv,arg)
              :hash_fold_t$2(hsv,arg)}
    function hash$4(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_brB_=hash_fold_t$4(hsv,x);
      return caml_call1(Base_Hash[9],_brB_)}
    function t_of_sexp$7(sexp)
     {try
       {try
         {var _brx_=t_of_sexp$2(sexp),_bry_=_brx_}
        catch(_brA_)
         {_brA_ = caml_wrap_exception(_brA_);
          if(_brA_ !== Sexplib0_Sexp_conv_error[17])throw _brA_;
          var _bry_=t_of_sexp$4(sexp)}
        return _bry_}
      catch(_brz_)
       {_brz_ = caml_wrap_exception(_brz_);
        if(_brz_ === Sexplib0_Sexp_conv_error[17])
         return caml_call2(Sexplib0_Sexp_conv_error[19],tp_loc$7,sexp);
        throw _brz_}}
    function sexp_of_t$6(v)
     {return typeof v === "number"?sexp_of_t$3(v):sexp_of_t$4(v)}
    var
     _gu_=caml_call1(Bin_prot_Shape[3][1],cst_a$1),
     _gv_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_55_26),
     _gw_=[0,caml_call2(Bin_prot_Shape[15],_gv_,_gu_)],
     _gx_=[0,caml_call2(Bin_prot_Shape[10],cst_Who_can_write$5,_gw_),0],
     _gy_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_54_8),
     _gz_=[0,caml_call2(Bin_prot_Shape[11],_gy_,bin_shape_t$1),_gx_],
     _gA_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_54_6),
     _gB_=caml_call2(Bin_prot_Shape[12],_gA_,_gz_),
     _gC_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$2),0],
     _gD_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$20),_gC_,_gB_],0],
     _gE_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_53_4),
     group$6=caml_call2(Bin_prot_Shape[6],_gE_,_gD_);
    function bin_shape_t$5(a)
     {var _brw_=caml_call1(Bin_prot_Shape[2][1],cst_t$21);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$6,_brw_),[0,a,0])}
    function bin_read_t$21(of_a,buf,pos_ref,vint)
     {try
       {var _bru_=bin_read_t$13(buf,pos_ref,vint);return _bru_}
      catch(_brv_)
       {_brv_ = caml_wrap_exception(_brv_);
        if(_brv_ === Bin_prot_Common[13])
         {if(271892623 === vint)
           {var arg_1=caml_call2(of_a,buf,pos_ref);return [0,271892623,arg_1]}
          throw Bin_prot_Common[13]}
        throw _brv_}}
    function bin_read_t$22(of_a,buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var
         _brp_=
          function(_brr_,_brs_,_brt_)
            {return bin_read_t$21(of_a,_brr_,_brs_,_brt_)}
           (buf,pos_ref,vint);
        return _brp_}
      catch(_brq_)
       {_brq_ = caml_wrap_exception(_brq_);
        if(_brq_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$3,pos_ref[1]);
        throw _brq_}}
    function Only_used_as_phantom_type1(Name)
     {function sexp_of_t(param,_bro_)
       {return caml_call3(failwithf,_gG_,Name[1],0)}
      function t_of_sexp(param,_brn_)
       {return caml_call3(failwithf,_gH_,Name[1],0)}
      function compare(param,_brm_,_brl_)
       {return caml_call3(failwithf,_gI_,Name[1],0)}
      function hash_fold_t(param,_brk_,_brj_)
       {return caml_call3(failwithf,_gJ_,Name[1],0)}
      function to_binable(param){return caml_call3(failwithf,_gK_,Name[1],0)}
      function of_binable(param){return caml_call3(failwithf,_gL_,Name[1],0)}
      var
       _brc_=caml_call1(Bin_prot_Shape[3][1],cst_a$3),
       _brd_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_84_20),
       _bre_=caml_call2(Bin_prot_Shape[15],_brd_,_brc_),
       _brf_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$4),0],
       _brg_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$22),_brf_,_bre_],0],
       _brh_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_84_8),
       group=caml_call2(Bin_prot_Shape[6],_brh_,_brg_),
       _brb_=[0,to_binable,of_binable];
      function bin_shape_t(a)
       {var _bri_=caml_call1(Bin_prot_Shape[2][1],cst_t$23);
        return caml_call1(caml_call2(Bin_prot_Shape[14],group,_bri_),[0,a,0])}
      function bin_size_t(size_of_a){return size_of_a}
      function bin_write_t(write_a){return write_a}
      function bin_read_t(of_a,buf,pos_ref,vint)
       {return caml_call2(Bin_prot_Common[18],_gM_,pos_ref[1])}
      function bin_read_t$0(of_a){return of_a}
      var
       include=
        caml_call1
         (caml_call1
           (Stable$0[2][1],
            [0,bin_shape_t,bin_size_t,bin_write_t,bin_read_t$0,bin_read_t]),
          _brb_),
       bin_shape_t$0=include[1],
       bin_size_t$0=include[2],
       bin_write_t$0=include[3],
       bin_read_t$1=include[4],
       bin_read_t$2=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_shape_t$0,
              bin_size_t$0,
              bin_write_t$0,
              bin_read_t$1,
              bin_read_t$2,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              hash_fold_t,
              t_of_sexp,
              sexp_of_t]}
    function Only_used_as_phantom_type0(T)
     {var
       M=Only_used_as_phantom_type1([0,T[14]]),
       _bq8_=caml_call1(M[1],T[5]),
       _bq9_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$24),0,_bq8_],0],
       _bq__=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_108_2),
       group=caml_call2(Bin_prot_Shape[6],_bq__,_bq9_),
       _bq$_=caml_call1(Bin_prot_Shape[2][1],cst_t$25),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bq$_),0);
      function bin_size_t(v){return caml_call2(M[2],T[1],v)}
      function bin_write_t(buf,pos,v)
       {return caml_call3(caml_call1(M[3],T[2]),buf,pos,v)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call3(caml_call1(M[5],T[3]),buf,pos_ref,vint)}
      function bin_read_t$0(buf,pos_ref)
       {return caml_call2(caml_call1(M[4],T[3]),buf,pos_ref)}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      function compare(a_029,b_030){return caml_call3(M[9],T[9],a_029,b_030)}
      function hash_fold_t(hsv,arg){return caml_call3(M[10],T[10],hsv,arg)}
      function hash(x)
       {var hsv=caml_call2(Base_Hash[11],0,0),_bra_=hash_fold_t(hsv,x);
        return caml_call1(Base_Hash[9],_bra_)}
      function t_of_sexp(t){return caml_call2(M[11],T[12],t)}
      function sexp_of_t(v){return caml_call2(M[12],T[13],v)}
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              hash_fold_t,
              hash,
              t_of_sexp,
              t_of_sexp,
              sexp_of_t]}
    var
     Nobody=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$10,
         bin_read_t$9,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         compare,
         hash_fold_t,
         hash,
         t_of_sexp$0,
         sexp_of_t$1,
         name$0]),
     Me=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$12,
         bin_read_t$11,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         compare$0,
         hash_fold_t$0,
         hash$0,
         t_of_sexp$1,
         sexp_of_t$2,
         name$1]),
     Read=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$6,
         bin_write_t$6,
         bin_read_t$14,
         bin_read_t$13,
         bin_shape_t$1,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         compare$1,
         hash_fold_t$1,
         hash$1,
         t_of_sexp$3,
         sexp_of_t$3,
         name$2]),
     Write=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$7,
         bin_write_t$7,
         bin_read_t$16,
         bin_read_t$15,
         bin_shape_t$2,
         bin_writer_t$2,
         bin_reader_t$2,
         bin_t$2,
         compare$2,
         hash_fold_t$2,
         hash$2,
         t_of_sexp$5,
         sexp_of_t$4,
         name$3]),
     Read_write=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$9,
         bin_write_t$9,
         bin_read_t$20,
         bin_read_t$19,
         bin_shape_t$4,
         bin_writer_t$4,
         bin_reader_t$4,
         bin_t$4,
         compare$4,
         hash_fold_t$4,
         hash$4,
         t_of_sexp$7,
         sexp_of_t$6,
         name$5]),
     Immutable=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$8,
         bin_write_t$8,
         bin_read_t$18,
         bin_read_t$17,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3,
         compare$3,
         hash_fold_t$3,
         hash$3,
         t_of_sexp$6,
         sexp_of_t$5,
         name$4]),
     _gN_=Nobody[5],
     _gO_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_nobody),0,_gN_],0],
     _gP_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_122_4),
     group$7=caml_call2(Bin_prot_Shape[6],_gP_,_gO_),
     _gQ_=caml_call1(Bin_prot_Shape[2][1],cst_nobody$0),
     bin_shape_nobody=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$7,_gQ_),0),
     bin_size_nobody=Nobody[1],
     bin_write_nobody=Nobody[2],
     bin_writer_nobody=[0,bin_size_nobody,bin_write_nobody],
     bin_read_nobody=Nobody[4],
     bin_read_nobody$0=Nobody[3],
     bin_reader_nobody=[0,bin_read_nobody$0,bin_read_nobody],
     bin_nobody=[0,bin_shape_nobody,bin_writer_nobody,bin_reader_nobody],
     compare_nobody=Nobody[9],
     hash_fold_nobody=Nobody[10],
     func=Nobody[11];
    function hash_nobody(x){return caml_call1(func,x)}
    var
     _gR_=Nobody[12],
     _gS_=Nobody[14],
     _gT_=Me[5],
     _gU_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_me),0,_gT_],0],
     _gV_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_123_4),
     group$8=caml_call2(Bin_prot_Shape[6],_gV_,_gU_),
     _gW_=caml_call1(Bin_prot_Shape[2][1],cst_me$0),
     bin_shape_me=caml_call1(caml_call2(Bin_prot_Shape[14],group$8,_gW_),0),
     bin_size_me=Me[1],
     bin_write_me=Me[2],
     bin_writer_me=[0,bin_size_me,bin_write_me],
     bin_read_me=Me[4],
     bin_read_me$0=Me[3],
     bin_reader_me=[0,bin_read_me$0,bin_read_me],
     bin_me=[0,bin_shape_me,bin_writer_me,bin_reader_me],
     compare_me=Me[9],
     hash_fold_me=Me[10],
     func$0=Me[11];
    function hash_me(x){return caml_call1(func$0,x)}
    var
     _gX_=Me[12],
     _gY_=Me[14],
     M=Only_used_as_phantom_type1([0,name$6]),
     _gZ_=caml_call1(Bin_prot_Shape[3][1],cst_a$5),
     _g0_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_128_18),
     _g1_=bin_shape_t$5(caml_call2(Bin_prot_Shape[15],_g0_,_gZ_)),
     _g2_=caml_call1(M[1],_g1_),
     _g3_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$6),0],
     _g4_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$26),_g3_,_g2_],0],
     _g5_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_128_6),
     group$9=caml_call2(Bin_prot_Shape[6],_g5_,_g4_);
    function bin_shape_t$6(a)
     {var _bq7_=caml_call1(Bin_prot_Shape[2][1],cst_t$27);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$9,_bq7_),[0,a,0])}
    function bin_size_t$10(size_of_a,v)
     {function _bq6_(v)
       {if(typeof v === "number")return 4;
        var args=v[2],size_args=caml_call1(size_of_a,args);
        return caml_call2(Bin_prot_Common[23],size_args,4)}
      return caml_call2(M[2],_bq6_,v)}
    function bin_write_t$10(write_a,buf,pos,v)
     {function _bq5_(buf,pos$0,v)
       {if(typeof v === "number")return bin_write_t$6(buf,pos$0,v);
        var args=v[2],pos=caml_call3(Bin_prot_Write[29],buf,pos$0,271892623);
        return caml_call3(write_a,buf,pos,args)}
      return caml_call3(caml_call1(M[3],_bq5_),buf,pos,v)}
    function bin_writer_t$5(bin_writer_a)
     {function _bq1_(v)
       {var _bq2_=bin_writer_a[2];
        return function(_bq3_,_bq4_)
         {return bin_write_t$10(_bq2_,v,_bq3_,_bq4_)}}
      return [0,function(v){return bin_size_t$10(bin_writer_a[1],v)},_bq1_]}
    function bin_read_t$23(of_a,buf,pos_ref,vint)
     {function _bqY_(_bqZ_,_bq0_){return bin_read_t$22(of_a,_bqZ_,_bq0_)}
      return caml_call3(caml_call1(M[5],_bqY_),buf,pos_ref,vint)}
    function bin_read_t$24(of_a,buf,pos_ref)
     {function _bqV_(_bqW_,_bqX_){return bin_read_t$22(of_a,_bqW_,_bqX_)}
      return caml_call2(caml_call1(M[4],_bqV_),buf,pos_ref)}
    function bin_reader_t$5(bin_reader_a)
     {function _bqU_(buf,pos_ref,vtag)
       {return bin_read_t$23(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$24(bin_reader_a[1],buf,pos_ref)},
              _bqU_]}
    function bin_t$5(bin_a)
     {var _bqS_=bin_reader_t$5(bin_a[3]),_bqT_=bin_writer_t$5(bin_a[2]);
      return [0,bin_shape_t$6(bin_a[1]),_bqT_,_bqS_]}
    function compare_perms(cmp_a,a_037,b_038)
     {function _bqR_(a_039,b_040)
       {if(caml_call2(Ppx_compare_lib[1],a_039,b_040))return 0;
        if(typeof a_039 === "number")
         {if(914388854 === b_040)return compare$1(a_039,b_040)}
        else
         if(typeof b_040 !== "number")
          if(271892623 === b_040[1])
           {var right_028=b_040[2],left_027=a_039[2];
            return caml_call2(cmp_a,left_027,right_028)}
        return caml_compare(a_039,b_040)}
      return caml_call3(M[9],_bqR_,a_037,b_038)}
    function hash_fold_perms(hash_fold_a,hsv,arg)
     {function _bqQ_(hsv$0,arg)
       {if(typeof arg === "number")return hash_fold_t$1(hsv$0,arg);
        var v=arg[2],hsv=caml_call2(Base_Hash[3],hsv$0,271892623);
        return caml_call2(hash_fold_a,hsv,v)}
      return caml_call3(M[10],_bqQ_,hsv,arg)}
    function perms_of_sexp(of_a,t)
     {function _bqJ_(sexp)
       {try
         {try
           {var _bqM_=t_of_sexp$2(sexp),_bqN_=_bqM_}
          catch(_bqP_)
           {_bqP_ = caml_wrap_exception(_bqP_);
            if(_bqP_ !== Sexplib0_Sexp_conv_error[17])throw _bqP_;
            if(0 === sexp[0])
             var
              atom=sexp[1],
              _bqN_=
               caml_string_notequal(atom,cst_Who_can_write$6)
                ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$8,sexp);
            else
             {var _bqK_=sexp[1];
              if(_bqK_)
               {var _bqL_=_bqK_[1];
                if(0 === _bqL_[0])
                 {var sexp_args=_bqK_[2],atom$0=_bqL_[1];
                  if(caml_string_notequal(atom$0,cst_Who_can_write$7))
                   var _bqN_=caml_call1(Sexplib0_Sexp_conv_error[18],0);
                  else
                   {if(sexp_args)
                     if(sexp_args[2])
                      var switch$0=0;
                     else
                      var
                       v0=sexp_args[1],
                       v0$0=caml_call1(of_a,v0),
                       _bqN_=[0,271892623,v0$0],
                       switch$0=1;
                    else
                     var switch$0=0;
                    if(! switch$0)
                     var
                      _bqN_=
                       caml_call3
                        (Sexplib0_Sexp_conv_error[21],tp_loc$8,atom$0,sexp)}}
                else
                 var
                  _bqN_=
                   caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$8,sexp)}
              else
               var
                _bqN_=
                 caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$8,sexp)}}
          return _bqN_}
        catch(_bqO_)
         {_bqO_ = caml_wrap_exception(_bqO_);
          if(_bqO_ === Sexplib0_Sexp_conv_error[17])
           return caml_call2(Sexplib0_Sexp_conv_error[19],tp_loc$9,sexp);
          throw _bqO_}}
      return caml_call2(M[11],_bqJ_,t)}
    function sexp_of_perms(of_a,v)
     {function _bqI_(v)
       {if(typeof v === "number")return sexp_of_t$3(v);
        var v0=v[2];
        return [1,[0,_gF_,[0,caml_call1(of_a,v0),0]]]}
      return caml_call2(M[12],_bqI_,v)}
    var
     _g6_=Read[5],
     _g7_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_read),0,_g6_],0],
     _g8_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_135_4),
     group$10=caml_call2(Bin_prot_Shape[6],_g8_,_g7_),
     _g9_=caml_call1(Bin_prot_Shape[2][1],cst_read$0),
     bin_shape_read=caml_call1(caml_call2(Bin_prot_Shape[14],group$10,_g9_),0),
     bin_size_read=Read[1],
     bin_write_read=Read[2],
     bin_writer_read=[0,bin_size_read,bin_write_read],
     bin_read_read=Read[4],
     bin_read_read$0=Read[3],
     bin_reader_read=[0,bin_read_read$0,bin_read_read],
     bin_read=[0,bin_shape_read,bin_writer_read,bin_reader_read],
     compare_read=Read[9],
     hash_fold_read=Read[10],
     func$1=Read[11];
    function hash_read(x){return caml_call1(func$1,x)}
    var
     read_of_sexp=Read[12],
     sexp_of_read=Read[14],
     compare_write=Write[9],
     hash_fold_write=Write[10],
     func$2=Write[11];
    function hash_write(x){return caml_call1(func$2,x)}
    var
     _g__=Write[12],
     _g$_=Write[14],
     _ha_=Immutable[5],
     _hb_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_immutable),0,_ha_],0],
     _hc_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_137_4),
     group$11=caml_call2(Bin_prot_Shape[6],_hc_,_hb_),
     _hd_=caml_call1(Bin_prot_Shape[2][1],cst_immutable$0),
     bin_shape_immutable=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$11,_hd_),0),
     bin_size_immutable=Immutable[1],
     bin_write_immutable=Immutable[2],
     bin_writer_immutable=[0,bin_size_immutable,bin_write_immutable],
     bin_read_immutable=Immutable[4],
     bin_read_immutable$0=Immutable[3],
     bin_reader_immutable=[0,bin_read_immutable$0,bin_read_immutable],
     bin_immutable=
      [0,bin_shape_immutable,bin_writer_immutable,bin_reader_immutable],
     compare_immutable=Immutable[9],
     hash_fold_immutable=Immutable[10],
     func$3=Immutable[11];
    function hash_immutable(x){return caml_call1(func$3,x)}
    var
     _he_=Immutable[12],
     _hf_=Immutable[14],
     _hg_=Read_write[5],
     _hh_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_read_write),0,_hg_],0],
     _hi_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_138_4),
     group$12=caml_call2(Bin_prot_Shape[6],_hi_,_hh_),
     _hj_=caml_call1(Bin_prot_Shape[2][1],cst_read_write$0),
     bin_shape_read_write=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$12,_hj_),0),
     bin_size_read_write=Read_write[1],
     bin_write_read_write=Read_write[2],
     bin_writer_read_write=[0,bin_size_read_write,bin_write_read_write],
     bin_read_read_write=Read_write[4],
     bin_read_read_write$0=Read_write[3],
     bin_reader_read_write=[0,bin_read_read_write$0,bin_read_read_write],
     bin_read_write=
      [0,bin_shape_read_write,bin_writer_read_write,bin_reader_read_write],
     compare_read_write=Read_write[9],
     hash_fold_read_write=Read_write[10],
     func$4=Read_write[11];
    function hash_read_write(x){return caml_call1(func$4,x)}
    var
     _hk_=Read_write[12],
     _hl_=Read_write[14],
     _hm_=caml_call1(Bin_prot_Shape[3][1],cst_a$7),
     _hn_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_139_20),
     _ho_=bin_shape_t$6(caml_call2(Bin_prot_Shape[15],_hn_,_hm_)),
     _hp_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$8),0],
     _hq_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_perms),_hp_,_ho_],0],
     _hr_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_139_4),
     group$13=caml_call2(Bin_prot_Shape[6],_hr_,_hq_);
    function bin_shape_perms(a)
     {var _bqH_=caml_call1(Bin_prot_Shape[2][1],cst_perms$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$13,_bqH_),[0,a,0])}
    function bin_size_perms(size_of_a,v){return bin_size_t$10(size_of_a,v)}
    function bin_write_perms(write_a,buf,pos,v)
     {return bin_write_t$10(write_a,buf,pos,v)}
    function bin_writer_perms(bin_writer_a)
     {function _bqD_(v)
       {var _bqE_=bin_writer_a[2];
        return function(_bqF_,_bqG_)
         {return bin_write_perms(_bqE_,v,_bqF_,_bqG_)}}
      return [0,function(v){return bin_size_perms(bin_writer_a[1],v)},_bqD_]}
    function bin_read_perms(of_a,buf,pos_ref,vint)
     {return bin_read_t$23(of_a,buf,pos_ref,vint)}
    function bin_read_perms$0(of_a,buf,pos_ref)
     {return bin_read_t$24(of_a,buf,pos_ref)}
    function bin_reader_perms(bin_reader_a)
     {function _bqC_(buf,pos_ref,vtag)
       {return bin_read_perms(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_perms$0(bin_reader_a[1],buf,pos_ref)},
              _bqC_]}
    function bin_perms(bin_a)
     {var _bqA_=bin_reader_perms(bin_a[3]),_bqB_=bin_writer_perms(bin_a[2]);
      return [0,bin_shape_perms(bin_a[1]),_bqB_,_bqA_]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$13);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _hs_=
      [0,
       [0,
        bin_shape_nobody,
        bin_size_nobody,
        bin_write_nobody,
        bin_writer_nobody,
        bin_read_nobody$0,
        bin_read_nobody,
        bin_reader_nobody,
        bin_nobody,
        compare_nobody,
        hash_fold_nobody,
        hash_nobody,
        _gS_,
        _gR_,
        bin_shape_me,
        bin_size_me,
        bin_write_me,
        bin_writer_me,
        bin_read_me$0,
        bin_read_me,
        bin_reader_me,
        bin_me,
        compare_me,
        hash_fold_me,
        hash_me,
        _gY_,
        _gX_,
        [0,
         Read[1],
         Read[2],
         Read[3],
         Read[4],
         Read[5],
         Read[6],
         Read[7],
         Read[8],
         Read[9],
         Read[10],
         Read[11],
         Read[12],
         Read[14]],
        [0,
         Write[1],
         Write[2],
         Write[3],
         Write[4],
         Write[5],
         Write[6],
         Write[7],
         Write[8],
         Write[9],
         Write[10],
         Write[11],
         Write[12],
         Write[14]],
        [0,
         Immutable[1],
         Immutable[2],
         Immutable[3],
         Immutable[4],
         Immutable[5],
         Immutable[6],
         Immutable[7],
         Immutable[8],
         Immutable[9],
         Immutable[10],
         Immutable[11],
         Immutable[12],
         Immutable[14]],
        [0,
         Read_write[1],
         Read_write[2],
         Read_write[3],
         Read_write[4],
         Read_write[5],
         Read_write[6],
         Read_write[7],
         Read_write[8],
         Read_write[9],
         Read_write[10],
         Read_write[11],
         Read_write[12],
         Read_write[14]],
        [0,
         bin_shape_t$6,
         bin_size_t$10,
         bin_write_t$10,
         bin_read_t$24,
         bin_read_t$23,
         bin_writer_t$5,
         bin_reader_t$5,
         bin_t$5,
         compare_perms,
         hash_fold_perms,
         perms_of_sexp,
         sexp_of_perms]],
       [0,
        bin_shape_read,
        bin_size_read,
        bin_write_read,
        bin_writer_read,
        bin_read_read$0,
        bin_read_read,
        bin_reader_read,
        bin_read,
        compare_read,
        hash_fold_read,
        hash_read,
        sexp_of_read,
        read_of_sexp,
        compare_write,
        hash_fold_write,
        hash_write,
        _g$_,
        _g__,
        bin_shape_immutable,
        bin_size_immutable,
        bin_write_immutable,
        bin_writer_immutable,
        bin_read_immutable$0,
        bin_read_immutable,
        bin_reader_immutable,
        bin_immutable,
        compare_immutable,
        hash_fold_immutable,
        hash_immutable,
        _hf_,
        _he_,
        bin_shape_read_write,
        bin_size_read_write,
        bin_write_read_write,
        bin_writer_read_write,
        bin_read_read_write$0,
        bin_read_read_write,
        bin_reader_read_write,
        bin_read_write,
        compare_read_write,
        hash_fold_read_write,
        hash_read_write,
        _hl_,
        _hk_,
        bin_shape_perms,
        bin_size_perms,
        bin_write_perms,
        bin_writer_perms,
        bin_read_perms$0,
        bin_read_perms,
        bin_reader_perms,
        bin_perms,
        compare_perms,
        hash_fold_perms,
        sexp_of_perms,
        perms_of_sexp]],
     _ht_=
      [0,
       bin_shape_read,
       bin_size_read,
       bin_write_read,
       bin_writer_read,
       bin_read_read$0,
       bin_read_read,
       bin_reader_read,
       bin_read,
       compare_read,
       hash_fold_read,
       hash_read,
       sexp_of_read,
       read_of_sexp,
       compare_write,
       hash_fold_write,
       hash_write,
       _g$_,
       _g__,
       bin_shape_immutable,
       bin_size_immutable,
       bin_write_immutable,
       bin_writer_immutable,
       bin_read_immutable$0,
       bin_read_immutable,
       bin_reader_immutable,
       bin_immutable,
       compare_immutable,
       hash_fold_immutable,
       hash_immutable,
       _hf_,
       _he_,
       bin_shape_read_write,
       bin_size_read_write,
       bin_write_read_write,
       bin_writer_read_write,
       bin_read_read_write$0,
       bin_read_read_write,
       bin_reader_read_write,
       bin_read_write,
       compare_read_write,
       hash_fold_read_write,
       hash_read_write,
       _hl_,
       _hk_,
       bin_shape_perms,
       bin_size_perms,
       bin_write_perms,
       bin_writer_perms,
       bin_read_perms$0,
       bin_read_perms,
       bin_reader_perms,
       bin_perms,
       compare_perms,
       hash_fold_perms,
       sexp_of_perms,
       perms_of_sexp],
     Core_kernel_Perms=
      [0,
       bin_shape_nobody,
       bin_size_nobody,
       bin_write_nobody,
       bin_writer_nobody,
       bin_read_nobody$0,
       bin_read_nobody,
       bin_reader_nobody,
       bin_nobody,
       compare_nobody,
       hash_fold_nobody,
       hash_nobody,
       _gS_,
       _gR_,
       bin_shape_me,
       bin_size_me,
       bin_write_me,
       bin_writer_me,
       bin_read_me$0,
       bin_read_me,
       bin_reader_me,
       bin_me,
       compare_me,
       hash_fold_me,
       hash_me,
       _gY_,
       _gX_,
       [0,
        Read[1],
        Read[2],
        Read[3],
        Read[4],
        Read[5],
        Read[6],
        Read[7],
        Read[8],
        Read[9],
        Read[10],
        Read[11],
        Read[14],
        Read[12],
        Read[13]],
       [0,
        Write[1],
        Write[2],
        Write[3],
        Write[4],
        Write[5],
        Write[6],
        Write[7],
        Write[8],
        Write[9],
        Write[10],
        Write[11],
        Write[14],
        Write[12],
        Write[13]],
       [0,
        Immutable[1],
        Immutable[2],
        Immutable[3],
        Immutable[4],
        Immutable[5],
        Immutable[6],
        Immutable[7],
        Immutable[8],
        Immutable[9],
        Immutable[10],
        Immutable[11],
        Immutable[14],
        Immutable[12],
        Immutable[13]],
       [0,
        Read_write[1],
        Read_write[2],
        Read_write[3],
        Read_write[4],
        Read_write[5],
        Read_write[6],
        Read_write[7],
        Read_write[8],
        Read_write[9],
        Read_write[10],
        Read_write[11],
        Read_write[14],
        Read_write[12],
        Read_write[13]],
       [0,
        bin_shape_t$6,
        bin_size_t$10,
        bin_write_t$10,
        bin_read_t$24,
        bin_read_t$23,
        bin_writer_t$5,
        bin_reader_t$5,
        bin_t$5,
        compare_perms,
        hash_fold_perms,
        sexp_of_perms,
        perms_of_sexp,
        perms_of_sexp],
       _ht_,
       _hs_];
    caml_register_global(4266,Core_kernel_Perms,"Core_kernel__Perms");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$14);
    caml_call1(Expect_test_collector[4][1],cst_src_binary_searchable_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$15,cst$4);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$16);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Binary_searchable_intf=[0];
    caml_register_global
     (4267,
      Core_kernel_Binary_searchable_intf,
      "Core_kernel__Binary_searchable_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$17);
    caml_call1(Expect_test_collector[4][1],cst_src_binary_searchable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$18,cst$5);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$19);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Binary_searchable=[0];
    caml_register_global
     (4268,Core_kernel_Binary_searchable,"Core_kernel__Binary_searchable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$20);
    caml_call1(Expect_test_collector[4][1],cst_src_blit_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$21,cst$6);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$22);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Blit_intf=[0];
    caml_register_global(4269,Core_kernel_Blit_intf,"Core_kernel__Blit_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$23);
    caml_call1(Expect_test_collector[4][1],cst_src_blit_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$24,cst$7);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$25);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Blit=[0];
    caml_register_global(4270,Core_kernel_Blit,"Core_kernel__Blit");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$26);
    caml_call1(Expect_test_collector[4][1],cst_src_comparator_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$27,cst$8);
    var
     make=include$5[1],
     Poly=include$5[2],
     S_to_S1=include$5[3],
     Make=include$5[4],
     Make1=include$5[5],
     Derived=include$5[6],
     Derived2=include$5[7],
     Derived_phantom=include$5[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$28);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _hu_=[0,[0,make,Make,Make1]],
     Core_kernel_Comparator=
      [0,make,Poly,S_to_S1,Make,Make1,Derived,Derived2,Derived_phantom,_hu_];
    caml_register_global
     (4272,Core_kernel_Comparator,"Core_kernel__Comparator");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$29);
    caml_call1(Expect_test_collector[4][1],cst_src_result_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$30,cst$9);
    var
     _hv_=caml_call1(Bin_prot_Shape[3][1],cst_b),
     _hw_=caml_call1(Bin_prot_Shape[4][1],cst_src_result_ml_8_17),
     _hx_=[0,[0,cst_Error,[0,caml_call2(Bin_prot_Shape[15],_hw_,_hv_),0]],0],
     _hy_=caml_call1(Bin_prot_Shape[3][1],cst_a$9),
     _hz_=caml_call1(Bin_prot_Shape[4][1],cst_src_result_ml_7_14),
     _hA_=[0,[0,cst_Ok,[0,caml_call2(Bin_prot_Shape[15],_hz_,_hy_),0]],_hx_],
     _hB_=caml_call1(Bin_prot_Shape[9],_hA_),
     _hC_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$0),0],
     _hD_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$10),_hC_],
     _hE_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$28),_hD_,_hB_],0],
     _hF_=caml_call1(Bin_prot_Shape[4][1],cst_src_result_ml_6_4),
     group$14=caml_call2(Bin_prot_Shape[6],_hF_,_hE_);
    function bin_shape_t$7(a,b)
     {var _bqz_=caml_call1(Bin_prot_Shape[2][1],cst_t$29);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$14,_bqz_),[0,a,[0,b,0]])}
    function bin_size_t$11(size_of_a,size_of_b,param)
     {if(0 === param[0])
       {var v1=param[1],_bqx_=caml_call1(size_of_a,v1);
        return caml_call2(Bin_prot_Common[23],1,_bqx_)}
      var v1$0=param[1],_bqy_=caml_call1(size_of_b,v1$0);
      return caml_call2(Bin_prot_Common[23],1,_bqy_)}
    function bin_write_t$11(write_a,write_b,buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(write_a,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return caml_call3(write_b,buf,pos$1,v1$0)}
    function bin_writer_t$6(bin_writer_a,bin_writer_b)
     {function _bqs_(v)
       {var _bqt_=bin_writer_b[2],_bqu_=bin_writer_a[2];
        return function(_bqv_,_bqw_)
         {return bin_write_t$11(_bqu_,_bqt_,v,_bqv_,_bqw_)}}
      return [0,
              function(v)
               {return bin_size_t$11(bin_writer_a[1],bin_writer_b[1],v)},
              _bqs_]}
    function bin_read_t$25(of_a,of_b,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_result_ml_Stable_V1_t,pos_ref[1])}
    function bin_read_t$26(of_a,of_b,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match){var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(of_b,buf,pos_ref);return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_hG_,pos_ref[1])}
    function bin_reader_t$6(bin_reader_a,bin_reader_b)
     {function _bqr_(buf,pos_ref,vtag)
       {return bin_read_t$25(bin_reader_a[1],bin_reader_b[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$26
                        (bin_reader_a[1],bin_reader_b[1],buf,pos_ref)},
              _bqr_]}
    function bin_t$6(bin_a,bin_b)
     {var
       _bqp_=bin_reader_t$6(bin_a[3],bin_b[3]),
       _bqq_=bin_writer_t$6(bin_a[2],bin_b[2]);
      return [0,bin_shape_t$7(bin_a[1],bin_b[1]),_bqq_,_bqp_]}
    function compare$5(cmp_a,cmp_b,a_001,match)
     {if(caml_call2(Ppx_compare_lib[1],a_001,match))return 0;
      if(0 === a_001[0])
       {var _bqn_=a_001[1];
        if(0 === match[0])
         {var b_004=match[1];return caml_call2(cmp_a,_bqn_,b_004)}
        return -1}
      var _bqo_=a_001[1];
      if(0 === match[0])return 1;
      var b_006=match[1];
      return caml_call2(cmp_b,_bqo_,b_006)}
    function t_of_sexp$8(of_a,of_b,sexp)
     {if(0 === sexp[0])
       {var _bqj_=sexp[1];
        if(caml_string_notequal(_bqj_,cst_Error$0))
         {if(caml_string_notequal(_bqj_,cst_Ok$0))
           if(caml_string_notequal(_bqj_,cst_error))
            if(caml_string_notequal(_bqj_,cst_ok))
             var switch$0=1,switch$1=0;
            else
             var switch$1=1;
           else
            var switch$0=0,switch$1=0;
          else
           var switch$1=1;
          if(switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$10,sexp)}
        else
         var switch$0=0;
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$10,sexp)}
      else
       {var _bqk_=sexp[1];
        if(! _bqk_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$10,sexp);
        var _bql_=_bqk_[1];
        if(0 !== _bql_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$10,sexp);
        var _bqm_=_bql_[1];
        if(caml_string_notequal(_bqm_,cst_Error$1))
         {if(caml_string_notequal(_bqm_,cst_Ok$1))
           if(caml_string_notequal(_bqm_,cst_error$0))
            if(caml_string_notequal(_bqm_,cst_ok$0))
             var switch$2=1,switch$3=0;
            else
             var switch$3=1;
           else
            var switch$2=0,switch$3=0;
          else
           var switch$3=1;
          if(switch$3)
           {var sexp_args=_bqk_[2];
            if(sexp_args)
             if(! sexp_args[2])
              {var v0=sexp_args[1],v0$0=caml_call1(of_a,v0);return [0,v0$0]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$10,_bqm_,sexp)}}
        else
         var switch$2=0;
        if(! switch$2)
         {var sexp_args$0=_bqk_[2];
          if(sexp_args$0)
           if(! sexp_args$0[2])
            {var v0$1=sexp_args$0[1],v0$2=caml_call1(of_b,v0$1);
             return [1,v0$2]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$10,_bqm_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$10,sexp)}
    function sexp_of_t$7(of_a,of_b,param)
     {if(0 === param[0])
       {var v0=param[1],v0$0=caml_call1(of_a,v0);
        return [1,[0,_hH_,[0,v0$0,0]]]}
      var v0$1=param[1],v0$2=caml_call1(of_b,v0$1);
      return [1,[0,_hI_,[0,v0$2,0]]]}
    function map(x,f1,f2)
     {if(0 === x[0]){var x$0=x[1];return [0,caml_call1(f1,x$0)]}
      var err=x[1];
      return [1,caml_call1(f2,err)]}
    var
     _hJ_=0,
     _hK_=function(_bqi_){return bin_shape_t$7(_cb_,_bqi_)}(_cq_),
     _hL_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$30),0,_hK_],_hJ_],
     _hM_=caml_call1(Bin_prot_Shape[4][1],cst_src_result_ml_19_4),
     group$15=caml_call2(Bin_prot_Shape[6],_hM_,_hL_),
     _hN_=caml_call1(Bin_prot_Shape[2][1],cst_t$31),
     bin_shape_t$8=caml_call1(caml_call2(Bin_prot_Shape[14],group$15,_hN_),0);
    function bin_size_t$12(v){return bin_size_t$11(bin_size_t,bin_size_t$1,v)}
    function bin_write_t$12(buf,pos,v)
     {return bin_write_t$11(bin_write_t,bin_write_t$1,buf,pos,v)}
    var bin_writer_t$7=[0,bin_size_t$12,bin_write_t$12];
    function bin_read_t$27(buf,pos_ref,vint)
     {return bin_read_t$25(bin_read_t,bin_read_t$3,buf,pos_ref,vint)}
    function bin_read_t$28(buf,pos_ref)
     {return bin_read_t$26(bin_read_t,bin_read_t$3,buf,pos_ref)}
    var
     bin_reader_t$7=[0,bin_read_t$28,bin_read_t$27],
     bin_t$7=[0,bin_shape_t$8,bin_writer_t$7,bin_reader_t$7];
    function t_of_sexp$9(t){return t_of_sexp$8(_aj_,t_of_sexp,t)}
    function sexp_of_t$8(v){return sexp_of_t$7(_ak_,sexp_of_t$0,v)}
    function equal(x_013,x_014)
     {var match=compare$5(_af_,_x_,x_013,x_014);return 0 === match?1:0}
    var
     _hP_=include$6[2],
     _hQ_=include$6[3],
     _hS_=include$6[5],
     _h6_=include$6[19],
     _h9_=include$6[22],
     _id_=include$6[28],
     _ie_=include$6[29],
     _ik_=include$6[35],
     _im_=include$6[37],
     _hO_=include$6[1],
     _hR_=include$6[4],
     _hT_=include$6[6],
     _hU_=include$6[7],
     _hV_=include$6[8],
     _hW_=include$6[9],
     _hX_=include$6[10],
     _hY_=include$6[11],
     _hZ_=include$6[12],
     _h0_=include$6[13],
     _h1_=include$6[14],
     _h2_=include$6[15],
     _h3_=include$6[16],
     _h4_=include$6[17],
     _h5_=include$6[18],
     _h7_=include$6[20],
     _h8_=include$6[21],
     _h__=include$6[23],
     _h$_=include$6[24],
     _ia_=include$6[25],
     _ib_=include$6[26],
     _ic_=include$6[27],
     _if_=include$6[30],
     _ig_=include$6[31],
     _ih_=include$6[32],
     _ii_=include$6[33],
     _ij_=include$6[34],
     _il_=include$6[36];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$31);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _in_=
      [0,
       [0,
        bin_shape_t$7,
        bin_size_t$11,
        bin_write_t$11,
        bin_read_t$26,
        bin_read_t$25,
        bin_writer_t$6,
        bin_reader_t$6,
        bin_t$6,
        compare$5,
        t_of_sexp$8,
        sexp_of_t$7,
        map],
       [0,
        t_of_sexp$9,
        sexp_of_t$8,
        bin_size_t$12,
        bin_write_t$12,
        bin_read_t$28,
        bin_read_t$27,
        bin_shape_t$8,
        bin_writer_t$7,
        bin_reader_t$7,
        bin_t$7,
        equal,
        tests]],
     Core_kernel_Result=
      [0,
       bin_shape_t$7,
       bin_size_t$11,
       bin_write_t$11,
       bin_read_t$26,
       bin_read_t$25,
       bin_writer_t$6,
       bin_reader_t$6,
       bin_t$6,
       _hO_,
       _hP_,
       _hQ_,
       _hR_,
       _hS_,
       _hT_,
       _hU_,
       _hV_,
       _hW_,
       _hX_,
       _hY_,
       _hZ_,
       _h0_,
       _h1_,
       _h2_,
       _h3_,
       _h4_,
       _h5_,
       _h6_,
       _h7_,
       _h8_,
       _h9_,
       _h__,
       _h$_,
       _ia_,
       _ib_,
       _ic_,
       _id_,
       _ie_,
       _if_,
       _ig_,
       _ih_,
       _ii_,
       _ij_,
       _ik_,
       _il_,
       _im_,
       _in_];
    caml_register_global(4274,Core_kernel_Result,"Core_kernel__Result");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$32);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_module_types_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$33,cst$10);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$34);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Stable_module_types=[0];
    caml_register_global
     (4275,Core_kernel_Stable_module_types,"Core_kernel__Stable_module_types");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$35);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_unit_test_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$36,cst$11);
    var Unordered_container_test=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$37);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Stable_unit_test_intf=[0,Unordered_container_test];
    caml_register_global
     (4276,
      Core_kernel_Stable_unit_test_intf,
      "Core_kernel__Stable_unit_test_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$38);
    caml_call1(Expect_test_collector[4][1],cst_src_container_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$39,cst$12);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$40);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Container_intf=[0];
    caml_register_global
     (4277,Core_kernel_Container_intf,"Core_kernel__Container_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$41);
    caml_call1(Expect_test_collector[4][1],cst_src_container_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$42,cst$13);
    var
     _ip_=include$7[2],
     _iq_=include$7[3],
     _ir_=include$7[4],
     _iu_=include$7[7],
     _iv_=include$7[8],
     _iw_=include$7[9],
     _io_=include$7[1],
     _is_=include$7[5],
     _it_=include$7[6],
     _ix_=include$7[10],
     _iy_=include$7[11],
     _iz_=include$7[12],
     _iA_=include$7[13],
     _iB_=include$7[14],
     _iC_=include$7[15];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$43);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Container=
      [0,
       _io_,
       _ip_,
       _iq_,
       _ir_,
       _is_,
       _it_,
       _iu_,
       _iv_,
       _iw_,
       _ix_,
       _iy_,
       _iz_,
       _iA_,
       _iB_,
       _iC_];
    caml_register_global(4279,Core_kernel_Container,"Core_kernel__Container");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$44);
    caml_call1(Expect_test_collector[4][1],cst_src_deprecate_pipe_bang_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$45,cst$14);
    function symbol(x,y){return caml_call1(y,x)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$46);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Deprecate_pipe_bang=[0,symbol];
    caml_register_global
     (4280,Core_kernel_Deprecate_pipe_bang,"Core_kernel__Deprecate_pipe_bang");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$47);
    caml_call1(Expect_test_collector[4][1],cst_src_fn_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$48,cst$15);
    var
     _iD_=Base_Fn[1],
     _iH_=Base_Fn[5],
     _iE_=Base_Fn[2],
     _iF_=Base_Fn[3],
     _iG_=Base_Fn[4],
     _iI_=Base_Fn[6];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$49);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Fn=[0,_iD_,_iE_,_iF_,_iG_,_iH_,_iI_,symbol];
    caml_register_global(4282,Core_kernel_Fn,"Core_kernel__Fn");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$50);
    caml_call1
     (Expect_test_collector[4][1],cst_src_ordered_collection_common_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$51,cst$16);
    var _iJ_=include$8[1],_iK_=include$8[2],_iL_=include$8[3];
    function normalize(length_fun,t,i)
     {return 0 <= i?i:i + caml_call1(length_fun,t) | 0}
    function slice(length_fun,sub_fun,t,start,stop)
     {var
       stop$0=0 === stop?caml_call1(length_fun,t):stop,
       pos=normalize(length_fun,t,start),
       len=normalize(length_fun,t,stop$0) - pos | 0;
      return caml_call3(sub_fun,t,pos,len)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$52);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Ordered_collection_common=
      [0,_iJ_,_iK_,_iL_,normalize,slice];
    caml_register_global
     (4284,
      Core_kernel_Ordered_collection_common,
      "Core_kernel__Ordered_collection_common");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$53);
    caml_call1(Expect_test_collector[4][1],cst_src_sequence_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$54,cst$17);
    var
     _iS_=include$9[7],
     _iT_=include$9[8],
     _i2_=include$9[17],
     _je_=include$9[32],
     _jj_=include$9[38],
     _jm_=include$9[41],
     _jn_=include$9[42],
     _jy_=include$9[53],
     _jG_=include$9[61],
     _jL_=include$9[66],
     _kb_=include$9[95],
     _kd_=include$9[97],
     _ke_=include$9[98],
     _ki_=include$9[102],
     _iM_=include$9[1],
     _iN_=include$9[2],
     _iO_=include$9[3],
     _iP_=include$9[4],
     _iQ_=include$9[5],
     _iR_=include$9[6],
     _iU_=include$9[9],
     _iV_=include$9[10],
     _iW_=include$9[11],
     _iX_=include$9[12],
     _iY_=include$9[13],
     _iZ_=include$9[14],
     _i0_=include$9[15],
     _i1_=include$9[16],
     _i3_=include$9[18],
     _i4_=include$9[19],
     _i5_=include$9[20],
     _i6_=include$9[21],
     _i7_=include$9[22],
     _i8_=include$9[23],
     _i9_=include$9[24],
     _i__=include$9[25],
     _i$_=include$9[26],
     _ja_=include$9[27],
     _jb_=include$9[28],
     _jc_=include$9[30],
     _jd_=include$9[31],
     _jf_=include$9[33],
     _jg_=include$9[34],
     _jh_=include$9[35],
     _ji_=include$9[36],
     _jk_=include$9[39],
     _jl_=include$9[40],
     _jo_=include$9[43],
     _jp_=include$9[44],
     _jq_=include$9[45],
     _jr_=include$9[46],
     _js_=include$9[47],
     _jt_=include$9[48],
     _ju_=include$9[49],
     _jv_=include$9[50],
     _jw_=include$9[51],
     _jx_=include$9[52],
     _jz_=include$9[54],
     _jA_=include$9[55],
     _jB_=include$9[56],
     _jC_=include$9[57],
     _jD_=include$9[58],
     _jE_=include$9[59],
     _jF_=include$9[60],
     _jH_=include$9[62],
     _jI_=include$9[63],
     _jJ_=include$9[64],
     _jK_=include$9[65],
     _jM_=include$9[67],
     _jN_=include$9[68],
     _jO_=include$9[69],
     _jP_=include$9[70],
     _jQ_=include$9[71],
     _jR_=include$9[72],
     _jS_=include$9[73],
     _jT_=include$9[74],
     _jU_=include$9[75],
     _jV_=include$9[76],
     _jW_=include$9[77],
     _jX_=include$9[78],
     _jY_=include$9[79],
     _jZ_=include$9[80],
     _j0_=include$9[81],
     _j1_=include$9[82],
     _j2_=include$9[83],
     _j3_=include$9[84],
     _j4_=include$9[85],
     _j5_=include$9[86],
     _j6_=include$9[87],
     _j7_=include$9[88],
     _j8_=include$9[89],
     _j9_=include$9[90],
     _j__=include$9[92],
     _j$_=include$9[93],
     _ka_=include$9[94],
     _kc_=include$9[96],
     _kf_=include$9[99],
     _kg_=include$9[100],
     _kh_=include$9[101],
     _kj_=include$9[103],
     _kk_=include$9[104],
     _kl_=include$9[105],
     _km_=include$9[106],
     _kn_=include$9[107],
     _ko_=include$9[109],
     _kp_=caml_call1(Bin_prot_Shape[3][1],cst_a$11),
     _kq_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_6_18),
     _kr_=caml_call1(_dq_,caml_call2(Bin_prot_Shape[15],_kq_,_kp_)),
     _ks_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$12),0],
     _kt_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$32),_ks_,_kr_],0],
     _ku_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_6_6),
     group$16=caml_call2(Bin_prot_Shape[6],_ku_,_kt_);
    function bin_shape_t$9(a)
     {var _bqh_=caml_call1(Bin_prot_Shape[2][1],cst_t$33);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$16,_bqh_),[0,a,0])}
    function bin_size_t$13(size_of_a,v){return caml_call2(_bz_,size_of_a,v)}
    function bin_write_t$13(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_ds_,write_a),buf,pos,v)}
    function bin_read_t$29(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dv_,of_a),buf,pos_ref,vint)}
    function bin_read_t$30(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_du_,of_a),buf,pos_ref)}
    var
     of_binable=include$9[102],
     to_binable=include$9[17],
     include$10=
      caml_call1
       (Bin_prot_Utils[8],
        [0,
         [0,
          bin_shape_t$9,
          bin_size_t$13,
          bin_write_t$13,
          bin_read_t$30,
          bin_read_t$29],
         to_binable,
         of_binable]),
     _kv_=include$10[1],
     _kw_=include$10[2],
     _kx_=include$10[3],
     _ky_=include$10[4],
     _kz_=include$10[5],
     _kA_=include$10[6],
     _kB_=include$10[7],
     _kC_=include$10[8],
     _kD_=_jl_[1],
     _kE_=caml_call1(Bin_prot_Shape[3][1],cst_s),
     _kF_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_21_20),
     _kG_=[0,caml_call2(Bin_prot_Shape[15],_kF_,_kE_),0],
     _kH_=caml_call1(Bin_prot_Shape[3][1],cst_a$13),
     _kI_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_21_15),
     _kJ_=
      [0,[0,cst_Yield,[0,caml_call2(Bin_prot_Shape[15],_kI_,_kH_),_kG_]],0],
     _kK_=caml_call1(Bin_prot_Shape[3][1],cst_s$0),
     _kL_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_20_14),
     _kN_=
      [0,
       _kM_,
       [0,[0,cst_Skip,[0,caml_call2(Bin_prot_Shape[15],_kL_,_kK_),0]],_kJ_]],
     _kO_=caml_call1(Bin_prot_Shape[9],_kN_),
     _kP_=[0,caml_call1(Bin_prot_Shape[3][1],cst_s$1),0],
     _kQ_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$14),_kP_],
     _kR_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$34),_kQ_,_kO_],0],
     _kS_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_18_2),
     group$17=caml_call2(Bin_prot_Shape[6],_kS_,_kR_);
    function bin_shape_t$10(a,s)
     {var _bqg_=caml_call1(Bin_prot_Shape[2][1],cst_t$35);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$17,_bqg_),[0,a,[0,s,0]])}
    function bin_size_t$14(size_of_a,size_of_s,param)
     {if(typeof param === "number")
       return 1;
      else
       {if(0 === param[0])
         {var v1=param[1],_bqd_=caml_call1(size_of_s,v1);
          return caml_call2(Bin_prot_Common[23],1,_bqd_)}
        var
         v2=param[2],
         v1$0=param[1],
         _bqe_=caml_call1(size_of_a,v1$0),
         size=caml_call2(Bin_prot_Common[23],1,_bqe_),
         _bqf_=caml_call1(size_of_s,v2);
        return caml_call2(Bin_prot_Common[23],size,_bqf_)}}
    function bin_write_t$14(write_a,write_s,buf,pos,param)
     {if(typeof param === "number")
       return caml_call3(Bin_prot_Write[30],buf,pos,0);
      else
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,1);
          return caml_call3(write_s,buf,pos$0,v1)}
        var
         v2=param[2],
         v1$0=param[1],
         pos$1=caml_call3(Bin_prot_Write[30],buf,pos,2),
         pos$2=caml_call3(write_a,buf,pos$1,v1$0);
        return caml_call3(write_s,buf,pos$2,v2)}}
    function bin_writer_t$8(bin_writer_a,bin_writer_s)
     {function _bp__(v)
       {var _bp$_=bin_writer_s[2],_bqa_=bin_writer_a[2];
        return function(_bqb_,_bqc_)
         {return bin_write_t$14(_bqa_,_bp$_,v,_bqb_,_bqc_)}}
      return [0,
              function(v)
               {return bin_size_t$14(bin_writer_a[1],bin_writer_s[1],v)},
              _bp__]}
    function bin_read_t$31(of_a,of_s,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_sequence_ml_Step_t,pos_ref[1])}
    function bin_read_t$32(of_a,of_s,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_kT_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:var arg_1=caml_call2(of_s,buf,pos_ref);return [0,arg_1];
        default:
         var
          arg_1$0=caml_call2(of_a,buf,pos_ref),
          arg_2=caml_call2(of_s,buf,pos_ref);
         return [1,arg_1$0,arg_2]}}
    function bin_reader_t$8(bin_reader_a,bin_reader_s)
     {function _bp9_(buf,pos_ref,vtag)
       {return bin_read_t$31(bin_reader_a[1],bin_reader_s[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$32
                        (bin_reader_a[1],bin_reader_s[1],buf,pos_ref)},
              _bp9_]}
    function bin_t$8(bin_a,bin_s)
     {var
       _bp7_=bin_reader_t$8(bin_a[3],bin_s[3]),
       _bp8_=bin_writer_t$8(bin_a[2],bin_s[2]);
      return [0,bin_shape_t$10(bin_a[1],bin_s[1]),_bp8_,_bp7_]}
    var
     _kU_=_jy_[1],
     _kV_=_jy_[2],
     _kW_=_jy_[3],
     _kX_=_jy_[4],
     _kY_=caml_call1(Bin_prot_Shape[3][1],cst_b$1),
     _kZ_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_31_19),
     _k0_=[0,caml_call2(Bin_prot_Shape[15],_kZ_,_kY_),0],
     _k1_=caml_call1(Bin_prot_Shape[3][1],cst_a$15),
     _k2_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_31_14),
     _k3_=[0,[0,cst_Both,[0,caml_call2(Bin_prot_Shape[15],_k2_,_k1_),_k0_]],0],
     _k4_=caml_call1(Bin_prot_Shape[3][1],cst_b$2),
     _k5_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_30_15),
     _k6_=
      [0,[0,cst_Right,[0,caml_call2(Bin_prot_Shape[15],_k5_,_k4_),0]],_k3_],
     _k7_=caml_call1(Bin_prot_Shape[3][1],cst_a$16),
     _k8_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_29_14),
     _k9_=[0,[0,cst_Left,[0,caml_call2(Bin_prot_Shape[15],_k8_,_k7_),0]],_k6_],
     _k__=caml_call1(Bin_prot_Shape[9],_k9_),
     _k$_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$3),0],
     _la_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$17),_k$_],
     _lb_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$36),_la_,_k__],0],
     _lc_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_28_2),
     group$18=caml_call2(Bin_prot_Shape[6],_lc_,_lb_);
    function bin_shape_t$11(a,b)
     {var _bp6_=caml_call1(Bin_prot_Shape[2][1],cst_t$37);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$18,_bp6_),[0,a,[0,b,0]])}
    function bin_size_t$15(size_of_a,size_of_b,param)
     {switch(param[0])
       {case 0:
         var v1=param[1],_bp2_=caml_call1(size_of_a,v1);
         return caml_call2(Bin_prot_Common[23],1,_bp2_);
        case 1:
         var v1$0=param[1],_bp3_=caml_call1(size_of_b,v1$0);
         return caml_call2(Bin_prot_Common[23],1,_bp3_);
        default:
         var
          v2=param[2],
          v1$1=param[1],
          _bp4_=caml_call1(size_of_a,v1$1),
          size=caml_call2(Bin_prot_Common[23],1,_bp4_),
          _bp5_=caml_call1(size_of_b,v2);
         return caml_call2(Bin_prot_Common[23],size,_bp5_)}}
    function bin_write_t$15(write_a,write_b,buf,pos,param)
     {switch(param[0])
       {case 0:
         var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
         return caml_call3(write_a,buf,pos$0,v1);
        case 1:
         var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
         return caml_call3(write_b,buf,pos$1,v1$0);
        default:
         var
          v2=param[2],
          v1$1=param[1],
          pos$2=caml_call3(Bin_prot_Write[30],buf,pos,2),
          pos$3=caml_call3(write_a,buf,pos$2,v1$1);
         return caml_call3(write_b,buf,pos$3,v2)}}
    function bin_writer_t$9(bin_writer_a,bin_writer_b)
     {function _bpX_(v)
       {var _bpY_=bin_writer_b[2],_bpZ_=bin_writer_a[2];
        return function(_bp0_,_bp1_)
         {return bin_write_t$15(_bpZ_,_bpY_,v,_bp0_,_bp1_)}}
      return [0,
              function(v)
               {return bin_size_t$15(bin_writer_a[1],bin_writer_b[1],v)},
              _bpX_]}
    function bin_read_t$33(of_a,of_b,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_sequence_ml_Merge_with_duplicates_element_t,
               pos_ref[1])}
    function bin_read_t$34(of_a,of_b,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_ld_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1];
        case 1:var arg_1$0=caml_call2(of_b,buf,pos_ref);return [1,arg_1$0];
        default:
         var
          arg_1$1=caml_call2(of_a,buf,pos_ref),
          arg_2=caml_call2(of_b,buf,pos_ref);
         return [2,arg_1$1,arg_2]}}
    function bin_reader_t$9(bin_reader_a,bin_reader_b)
     {function _bpW_(buf,pos_ref,vtag)
       {return bin_read_t$33(bin_reader_a[1],bin_reader_b[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$34
                        (bin_reader_a[1],bin_reader_b[1],buf,pos_ref)},
              _bpW_]}
    function bin_t$9(bin_a,bin_b)
     {var
       _bpU_=bin_reader_t$9(bin_a[3],bin_b[3]),
       _bpV_=bin_writer_t$9(bin_a[2],bin_b[2]);
      return [0,bin_shape_t$11(bin_a[1],bin_b[1]),_bpV_,_bpU_]}
    function merge_all(Heap,seqs,compare)
     {function _bpR_(param)
       {var not_yet_in_heap=param[2],heap=param[1];
        if(not_yet_in_heap)
         {var
           not_yet_in_heap$0=not_yet_in_heap[2],
           seq=not_yet_in_heap[1],
           match=caml_call1(_ko_[1],seq);
          if(typeof match === "number")
           return [0,[0,heap,not_yet_in_heap$0]];
          else
           {if(0 === match[0])
             {var seq$0=match[1];
              return [0,[0,heap,[0,seq$0,not_yet_in_heap$0]]]}
            var seq$1=match[2],elt=match[1];
            return [0,
                    [0,caml_call2(Heap[2],heap,[0,elt,seq$1]),not_yet_in_heap$0]]}}
        var match$0=caml_call1(Heap[3],heap);
        if(match$0)
         {var
           _bpT_=match$0[1],
           heap$0=_bpT_[2],
           match$1=_bpT_[1],
           seq$2=match$1[2],
           elt$0=match$1[1];
          return [1,elt$0,[0,heap$0,[0,seq$2,0]]]}
        return 0}
      var _bpS_=caml_call2(Base_Comparable[2],compare,_a8_);
      return caml_call2(_jm_,[0,caml_call1(Heap[1],_bpS_),seqs],_bpR_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$55);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _le_=
      [0,
       bin_shape_t$11,
       bin_size_t$15,
       bin_write_t$15,
       bin_read_t$34,
       bin_read_t$33,
       bin_writer_t$9,
       bin_reader_t$9,
       bin_t$9,
       _kU_,
       _kV_,
       _kW_,
       _kX_],
     Core_kernel_Sequence=
      [0,
       _kv_,
       _kw_,
       _kx_,
       _ky_,
       _kz_,
       _kA_,
       _kB_,
       _kC_,
       [0,
        bin_shape_t$10,
        bin_size_t$14,
        bin_write_t$14,
        bin_read_t$32,
        bin_read_t$31,
        bin_writer_t$8,
        bin_reader_t$8,
        bin_t$8,
        _kD_],
       _le_,
       _iM_,
       _iN_,
       _iO_,
       _iP_,
       _iQ_,
       _iR_,
       _iS_,
       _iT_,
       _iU_,
       _iV_,
       _iW_,
       _iX_,
       _iY_,
       _iZ_,
       _i0_,
       _i1_,
       _i2_,
       _i3_,
       _i4_,
       _i5_,
       _i6_,
       _i7_,
       _i8_,
       _i9_,
       _i__,
       _i$_,
       _ja_,
       _jb_,
       _jc_,
       _jd_,
       _je_,
       _jf_,
       _jg_,
       _jh_,
       _ji_,
       _jj_,
       _jk_,
       _jm_,
       _jn_,
       _jo_,
       _jp_,
       _jq_,
       _jr_,
       _js_,
       _jt_,
       _ju_,
       _jv_,
       _jw_,
       _jx_,
       _jz_,
       _jA_,
       _jB_,
       _jC_,
       _jD_,
       _jE_,
       _jF_,
       _jG_,
       _jH_,
       _jI_,
       _jJ_,
       _jK_,
       _jL_,
       _jM_,
       _jN_,
       _jO_,
       _jP_,
       _jQ_,
       _jR_,
       _jS_,
       _jT_,
       _jU_,
       _jV_,
       _jW_,
       _jX_,
       _jY_,
       _jZ_,
       _j0_,
       _j1_,
       _j2_,
       _j3_,
       _j4_,
       _j5_,
       _j6_,
       _j7_,
       _j8_,
       _j9_,
       _j__,
       _j$_,
       _ka_,
       _kb_,
       _kc_,
       _kd_,
       _ke_,
       _kf_,
       _kg_,
       _kh_,
       _ki_,
       _kj_,
       _kk_,
       _kl_,
       _km_,
       _kn_,
       merge_all];
    caml_register_global(4288,Core_kernel_Sequence,"Core_kernel__Sequence");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$56);
    caml_call1(Expect_test_collector[4][1],cst_src_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$57,cst$18);
    var
     _lf_=include$11[1],
     _lg_=include$11[3],
     _lh_=include$11[2],
     _li_=caml_call1(Bin_prot_Shape[3][1],cst_a$18),
     _lj_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_12_12),
     _lk_=caml_call1(_dx_,caml_call2(Bin_prot_Shape[15],_lj_,_li_)),
     _ll_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$19),0],
     _lm_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$38),_ll_,_lk_],0],
     _ln_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_12_0),
     group$19=caml_call2(Bin_prot_Shape[6],_ln_,_lm_);
    function bin_shape_t$12(a)
     {var _bpQ_=caml_call1(Bin_prot_Shape[2][1],cst_t$39);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$19,_bpQ_),[0,a,0])}
    function bin_size_t$16(size_of_a,v){return caml_call2(_bA_,size_of_a,v)}
    function bin_write_t$16(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_dz_,write_a),buf,pos,v)}
    function bin_writer_t$10(bin_writer_a)
     {function _bpM_(v)
       {var _bpN_=bin_writer_a[2];
        return function(_bpO_,_bpP_)
         {return bin_write_t$16(_bpN_,v,_bpO_,_bpP_)}}
      return [0,function(v){return bin_size_t$16(bin_writer_a[1],v)},_bpM_]}
    function bin_read_t$35(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dC_,of_a),buf,pos_ref,vint)}
    function bin_read_t$36(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_dB_,of_a),buf,pos_ref)}
    function bin_reader_t$10(bin_reader_a)
     {function _bpL_(buf,pos_ref,vtag)
       {return bin_read_t$35(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$36(bin_reader_a[1],buf,pos_ref)},
              _bpL_]}
    function bin_t$10(bin_a)
     {var _bpJ_=bin_reader_t$10(bin_a[3]),_bpK_=bin_writer_t$10(bin_a[2]);
      return [0,bin_shape_t$12(bin_a[1]),_bpK_,_bpJ_]}
    var
     Typename_of_t=caml_call1(Typerep_lib_Make_typename[2],[0,name$7]),
     typename_of_t=Typename_of_t[2];
    function typerep_of_t(of_a)
     {var name_of_t=caml_call1(Typename_of_t[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_bpI_){return caml_call1(_fe_,of_a)}]]]]}
    var
     binary_search=include$11[4],
     binary_search_segmented=include$11[5],
     mem=include$11[6],
     length=include$11[7],
     is_empty=include$11[8],
     iter=include$11[9],
     fold=include$11[10],
     fold_result=include$11[11],
     fold_until=include$11[12],
     exists=include$11[13],
     for_all=include$11[14],
     count=include$11[15],
     sum=include$11[16],
     find=include$11[17],
     find_map=include$11[18],
     to_list=include$11[19],
     to_array=include$11[20],
     min_elt=include$11[21],
     max_elt=include$11[22],
     create=include$11[25],
     init=include$11[26],
     make_matrix=include$11[27],
     append=include$11[28],
     concat=include$11[29],
     copy=include$11[30],
     fill=include$11[31],
     blit=include$11[32],
     blito=include$11[33],
     unsafe_blit=include$11[34],
     sub=include$11[35],
     subo=include$11[36],
     of_list=include$11[37],
     map$0=include$11[38],
     folding_map=include$11[39],
     folding_mapi=include$11[40],
     fold_map=include$11[41],
     fold_mapi=include$11[42],
     iteri=include$11[43],
     mapi=include$11[44],
     foldi=include$11[45],
     fold_right=include$11[46],
     sort=include$11[47],
     stable_sort=include$11[48],
     is_sorted=include$11[49],
     is_sorted_strictly=include$11[50],
     concat_map=include$11[51],
     concat_mapi=include$11[52],
     partition_tf=include$11[53],
     partitioni_tf=include$11[54],
     cartesian_product=include$11[55],
     transpose=include$11[56],
     transpose_exn=include$11[57],
     filter_opt=include$11[58],
     filter_map=include$11[59],
     filter_mapi=include$11[60],
     for_alli=include$11[61],
     existsi=include$11[62],
     counti=include$11[63],
     iter2_exn=include$11[64],
     map2_exn=include$11[65],
     fold2_exn=include$11[66],
     for_all2_exn=include$11[67],
     exists2_exn=include$11[68],
     filter=include$11[69],
     filteri=include$11[70],
     swap=include$11[71],
     rev_inplace=include$11[72],
     of_list_rev=include$11[73],
     of_list_map=include$11[74],
     of_list_mapi=include$11[75],
     of_list_rev_map=include$11[76],
     of_list_rev_mapi=include$11[77],
     map_inplace=include$11[78],
     find_exn=include$11[79],
     find_map_exn=include$11[80],
     findi=include$11[81],
     findi_exn=include$11[82],
     find_mapi=include$11[83],
     find_mapi_exn=include$11[84],
     find_consecutive_duplicate=include$11[85],
     reduce=include$11[86],
     reduce_exn=include$11[87],
     permute=include$11[88],
     random_element=include$11[89],
     random_element_exn=include$11[90],
     zip=include$11[91],
     zip_exn=include$11[92],
     unzip=include$11[93],
     sorted_copy=include$11[94],
     last=include$11[95],
     equal$0=include$11[96],
     unsafe_truncate=include$11[97],
     to_sequence=include$11[98],
     to_sequence_mutable=include$11[99];
    function normalize$0(t,i){return normalize(length,t,i)}
    function slice$0(t,start,stop){return slice(length,sub,t,start,stop)}
    function nget(t,i)
     {var _bpH_=normalize$0(t,i);return caml_check_bound(t,_bpH_)[1 + _bpH_]}
    function nset(t,i,v)
     {var _bpG_=normalize$0(t,i);
      caml_check_bound(t,_bpG_)[1 + _bpG_] = v;
      return 0}
    var length$0=include$11[7];
    function get(_bpF_,_bpE_){return caml_check_bound(_bpF_,_bpE_)[1 + _bpE_]}
    function set(_bpD_,_bpC_,_bpB_)
     {caml_check_bound(_bpD_,_bpC_)[1 + _bpC_] = _bpB_;return 0}
    var
     _lo_=caml_call1(_dx_,_cq_),
     _lp_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$40),0,_lo_],0],
     _lq_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_40_4),
     group$20=caml_call2(Bin_prot_Shape[6],_lq_,_lp_),
     _lr_=caml_call1(Bin_prot_Shape[2][1],cst_t$41),
     bin_shape_t$13=caml_call1(caml_call2(Bin_prot_Shape[14],group$20,_lr_),0);
    function bin_size_t$17(v){return caml_call2(_bA_,bin_size_t$1,v)}
    function bin_write_t$17(buf,pos,v)
     {return caml_call3(caml_call1(_dz_,bin_write_t$1),buf,pos,v)}
    function bin_read_t$37(buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dC_,bin_read_t$3),buf,pos_ref,vint)}
    function bin_read_t$38(buf,pos_ref)
     {return caml_call2(caml_call1(_dB_,bin_read_t$3),buf,pos_ref)}
    function compare_t(a_001,b_002){return caml_call3(_b_,_x_,a_001,b_002)}
    function t_of_sexp$10(t){return caml_call2(_d_,t_of_sexp,t)}
    function sexp_of_t$9(v){return caml_call2(_e_,sexp_of_t$0,v)}
    function create$0(len){return caml_call2(create,len,0)}
    var
     _ls_=
      [0,
       create$0,
       length$0,
       get,
       set,
       function(_bpA_,_bpz_,_bpy_,_bpx_,_bpw_)
        {return runtime.core_array_unsafe_int_blit
                 (_bpA_,_bpz_,_bpy_,_bpx_,_bpw_)}];
    function of_bool(b){return b?1:0}
    var
     include$12=
      caml_call1
       (caml_call1(Base_for_tests_Test_blit[5],[0,_aS_,of_bool]),_ls_),
     blit$0=include$12[1],
     blito$0=include$12[2],
     sub$0=include$12[4],
     subo$0=include$12[5],
     _lt_=caml_call1(_dx_,_cu_),
     _lu_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$42),0,_lt_],0],
     _lv_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_75_4),
     group$21=caml_call2(Bin_prot_Shape[6],_lv_,_lu_),
     _lw_=caml_call1(Bin_prot_Shape[2][1],cst_t$43),
     bin_shape_t$14=caml_call1(caml_call2(Bin_prot_Shape[14],group$21,_lw_),0);
    function bin_size_t$18(v){return caml_call2(_bA_,bin_size_t$2,v)}
    function bin_write_t$18(buf,pos,v)
     {return caml_call3(caml_call1(_dz_,bin_write_t$2),buf,pos,v)}
    function bin_read_t$39(buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dC_,bin_read_t$5),buf,pos_ref,vint)}
    function bin_read_t$40(buf,pos_ref)
     {return caml_call2(caml_call1(_dB_,bin_read_t$5),buf,pos_ref)}
    function compare_t$0(a_005,b_006){return caml_call3(_b_,_r_,a_005,b_006)}
    function t_of_sexp$11(t){return caml_call2(_d_,_v_,t)}
    function sexp_of_t$10(v){return caml_call2(_e_,_w_,v)}
    function create$1(len){return caml_call2(create,len,0.)}
    var
     _lx_=
      [0,
       create$1,
       length$0,
       get,
       set,
       function(_bpv_,_bpu_,_bpt_,_bps_,_bpr_)
        {return runtime.core_array_unsafe_float_blit
                 (_bpv_,_bpu_,_bpt_,_bps_,_bpr_)}],
     equal$1=include$13[14];
    function of_bool$0(b){return b?1.:0.}
    var
     include$14=
      caml_call1
       (caml_call1(Base_for_tests_Test_blit[5],[0,equal$1,of_bool$0]),_lx_),
     blit$1=include$14[1],
     blito$1=include$14[2],
     sub$1=include$14[4],
     subo$1=include$14[5],
     _ly_=caml_call1(Bin_prot_Shape[3][1],cst_a$20),
     _lz_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_333_25),
     _lA_=caml_call1(_dx_,caml_call2(Bin_prot_Shape[15],_lz_,_ly_)),
     _lB_=[0,caml_call1(Bin_prot_Shape[3][1],cst_perms$1),0],
     _lC_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$21),_lB_],
     _lD_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$44),_lC_,_lA_],0],
     _lE_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_333_2),
     group$22=caml_call2(Bin_prot_Shape[6],_lE_,_lD_);
    function bin_shape_t$15(a,perms)
     {var _bpq_=caml_call1(Bin_prot_Shape[2][1],cst_t$45);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$22,_bpq_),
               [0,a,[0,perms,0]])}
    function bin_size_t$19(size_of_a,size_of_perms,v)
     {return caml_call2(_bA_,size_of_a,v)}
    function bin_write_t$19(write_a,write_perms,buf,pos,v)
     {return caml_call3(caml_call1(_dz_,write_a),buf,pos,v)}
    function bin_writer_t$11(bin_writer_a,bin_writer_perms)
     {function _bpl_(v)
       {var _bpm_=bin_writer_perms[2],_bpn_=bin_writer_a[2];
        return function(_bpo_,_bpp_)
         {return bin_write_t$19(_bpn_,_bpm_,v,_bpo_,_bpp_)}}
      return [0,
              function(v)
               {return bin_size_t$19(bin_writer_a[1],bin_writer_perms[1],v)},
              _bpl_]}
    function bin_read_t$41(of_a,of_perms,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dC_,of_a),buf,pos_ref,vint)}
    function bin_read_t$42(of_a,of_perms,buf,pos_ref)
     {return caml_call2(caml_call1(_dB_,of_a),buf,pos_ref)}
    function bin_reader_t$11(bin_reader_a,bin_reader_perms)
     {function _bpk_(buf,pos_ref,vtag)
       {return bin_read_t$41
                (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$42
                        (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref)},
              _bpk_]}
    function bin_t$11(bin_a,bin_perms)
     {var
       _bpi_=bin_reader_t$11(bin_a[3],bin_perms[3]),
       _bpj_=bin_writer_t$11(bin_a[2],bin_perms[2]);
      return [0,bin_shape_t$15(bin_a[1],bin_perms[1]),_bpj_,_bpi_]}
    function compare$6(cmp_a,cmp_perms,a_009,b_010)
     {return caml_call3(_b_,cmp_a,a_009,b_010)}
    function t_of_sexp$12(of_a,of_perms,t){return caml_call2(_d_,of_a,t)}
    function sexp_of_t$11(of_a,of_perms,v){return caml_call2(_e_,of_a,v)}
    caml_call1(Typerep_lib_Make_typename[3],[0,name$8]);
    var
     _lF_=[0,caml_call1(Bin_prot_Shape[3][1],cst_perms$2),0],
     _lG_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$46),_lF_,bin_shape_t$13],0],
     _lH_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_338_4),
     group$23=caml_call2(Bin_prot_Shape[6],_lH_,_lG_);
    function bin_shape_t$16(perms)
     {var _bph_=caml_call1(Bin_prot_Shape[2][1],cst_t$47);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$23,_bph_),[0,perms,0])}
    function bin_size_t$20(size_of_perms){return bin_size_t$17}
    function bin_write_t$20(write_perms){return bin_write_t$17}
    function bin_writer_t$12(bin_writer_perms)
     {function _bpg_(v)
       {return caml_call1(bin_write_t$20(bin_writer_perms[2]),v)}
      return [0,
              function(v)
               {return caml_call1(bin_size_t$20(bin_writer_perms[1]),v)},
              _bpg_]}
    function bin_read_t$43(of_perms){return bin_read_t$37}
    function bin_read_t$44(of_perms){return bin_read_t$38}
    function bin_reader_t$12(bin_reader_perms)
     {function _bpf_(buf,pos_ref,vtag)
       {return caml_call3(bin_read_t$43(bin_reader_perms[1]),buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2
                        (bin_read_t$44(bin_reader_perms[1]),buf,pos_ref)},
              _bpf_]}
    function bin_t$12(bin_perms)
     {var
       _bpd_=bin_reader_t$12(bin_perms[3]),
       _bpe_=bin_writer_t$12(bin_perms[2]);
      return [0,bin_shape_t$16(bin_perms[1]),_bpe_,_bpd_]}
    function compare$7(cmp_perms,a_013,b_014){return compare_t(a_013,b_014)}
    function t_of_sexp$13(of_perms,t){return t_of_sexp$10(t)}
    function sexp_of_t$12(of_perms,v){return sexp_of_t$9(v)}
    var
     _lI_=[0,caml_call1(Bin_prot_Shape[3][1],cst_perms$3),0],
     _lJ_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$48),_lI_,bin_shape_t$14],0],
     _lK_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_344_4),
     group$24=caml_call2(Bin_prot_Shape[6],_lK_,_lJ_);
    function bin_shape_t$17(perms)
     {var _bpc_=caml_call1(Bin_prot_Shape[2][1],cst_t$49);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$24,_bpc_),[0,perms,0])}
    function bin_size_t$21(size_of_perms){return bin_size_t$18}
    function bin_write_t$21(write_perms){return bin_write_t$18}
    function bin_writer_t$13(bin_writer_perms)
     {function _bpb_(v)
       {return caml_call1(bin_write_t$21(bin_writer_perms[2]),v)}
      return [0,
              function(v)
               {return caml_call1(bin_size_t$21(bin_writer_perms[1]),v)},
              _bpb_]}
    function bin_read_t$45(of_perms){return bin_read_t$39}
    function bin_read_t$46(of_perms){return bin_read_t$40}
    function bin_reader_t$13(bin_reader_perms)
     {function _bpa_(buf,pos_ref,vtag)
       {return caml_call3(bin_read_t$45(bin_reader_perms[1]),buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2
                        (bin_read_t$46(bin_reader_perms[1]),buf,pos_ref)},
              _bpa_]}
    function bin_t$13(bin_perms)
     {var
       _bo__=bin_reader_t$13(bin_perms[3]),
       _bo$_=bin_writer_t$13(bin_perms[2]);
      return [0,bin_shape_t$17(bin_perms[1]),_bo$_,_bo__]}
    function compare$8(cmp_perms,a_015,b_016){return compare_t$0(a_015,b_016)}
    function t_of_sexp$14(of_perms,t){return t_of_sexp$11(t)}
    function sexp_of_t$13(of_perms,v){return sexp_of_t$10(v)}
    function to_array_id(_bo9_){return _bo9_}
    function of_array_id(_bo8_){return _bo8_}
    var
     _lL_=
      [0,
       bin_shape_t$17,
       bin_size_t$21,
       bin_write_t$21,
       bin_read_t$46,
       bin_read_t$45,
       bin_writer_t$13,
       bin_reader_t$13,
       bin_t$13,
       compare$8,
       t_of_sexp$14,
       sexp_of_t$13,
       blit$1,
       blito$1,
       sub$1,
       subo$1],
     _lM_=
      [0,
       bin_shape_t$16,
       bin_size_t$20,
       bin_write_t$20,
       bin_read_t$44,
       bin_read_t$43,
       bin_writer_t$12,
       bin_reader_t$12,
       bin_t$12,
       compare$7,
       t_of_sexp$13,
       sexp_of_t$12,
       blit$0,
       blito$0,
       sub$0,
       subo$0];
    function invariant(invariant_a,t){return caml_call2(iter,t,invariant_a)}
    var
     _lN_=Stdlib_sys[14],
     _lO_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$50),0,bin_shape_t$13],0],
     _lP_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_453_2),
     group$25=caml_call2(Bin_prot_Shape[6],_lP_,_lO_),
     _lQ_=caml_call1(Bin_prot_Shape[2][1],cst_t$51),
     bin_shape_t$18=caml_call1(caml_call2(Bin_prot_Shape[14],group$25,_lQ_),0),
     bin_writer_t$14=[0,bin_size_t$17,bin_write_t$17],
     bin_reader_t$14=[0,bin_read_t$38,bin_read_t$37],
     bin_t$14=[0,bin_shape_t$18,bin_writer_t$14,bin_reader_t$14],
     _lR_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$52),0,bin_shape_t$14],0],
     _lS_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_459_2),
     group$26=caml_call2(Bin_prot_Shape[6],_lS_,_lR_),
     _lT_=caml_call1(Bin_prot_Shape[2][1],cst_t$53),
     bin_shape_t$19=caml_call1(caml_call2(Bin_prot_Shape[14],group$26,_lT_),0),
     bin_writer_t$15=[0,bin_size_t$18,bin_write_t$18],
     bin_reader_t$15=[0,bin_read_t$40,bin_read_t$39],
     bin_t$15=[0,bin_shape_t$19,bin_writer_t$15,bin_reader_t$15];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$58);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Array=
      [0,
       bin_shape_t$12,
       bin_size_t$16,
       bin_write_t$16,
       bin_read_t$36,
       bin_read_t$35,
       bin_writer_t$10,
       bin_reader_t$10,
       bin_t$10,
       typerep_of_t,
       typename_of_t,
       _lf_,
       _lh_,
       _lg_,
       binary_search,
       binary_search_segmented,
       mem,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       invariant,
       _lN_,
       create,
       init,
       make_matrix,
       append,
       concat,
       copy,
       fill,
       blit,
       blito,
       unsafe_blit,
       sub,
       subo,
       of_list,
       map$0,
       folding_map,
       folding_mapi,
       fold_map,
       fold_mapi,
       iteri,
       mapi,
       foldi,
       fold_right,
       sort,
       stable_sort,
       is_sorted,
       is_sorted_strictly,
       concat_map,
       concat_mapi,
       partition_tf,
       partitioni_tf,
       cartesian_product,
       transpose,
       transpose_exn,
       filter_opt,
       filter_map,
       filter_mapi,
       for_alli,
       existsi,
       counti,
       iter2_exn,
       map2_exn,
       fold2_exn,
       for_all2_exn,
       exists2_exn,
       filter,
       filteri,
       swap,
       rev_inplace,
       of_list_rev,
       of_list_map,
       of_list_mapi,
       of_list_rev_map,
       of_list_rev_mapi,
       map_inplace,
       find_exn,
       find_map_exn,
       findi,
       findi_exn,
       find_mapi,
       find_mapi_exn,
       find_consecutive_duplicate,
       reduce,
       reduce_exn,
       permute,
       random_element,
       random_element_exn,
       zip,
       zip_exn,
       unzip,
       sorted_copy,
       last,
       equal$0,
       unsafe_truncate,
       to_sequence,
       to_sequence_mutable,
       [0,
        bin_size_t$17,
        bin_write_t$17,
        bin_read_t$38,
        bin_read_t$37,
        bin_shape_t$18,
        bin_writer_t$14,
        bin_reader_t$14,
        bin_t$14,
        compare_t,
        t_of_sexp$10,
        sexp_of_t$9,
        blit$0,
        blito$0,
        sub$0,
        subo$0],
       [0,
        bin_size_t$18,
        bin_write_t$18,
        bin_read_t$40,
        bin_read_t$39,
        bin_shape_t$19,
        bin_writer_t$15,
        bin_reader_t$15,
        bin_t$15,
        compare_t$0,
        t_of_sexp$11,
        sexp_of_t$10,
        blit$1,
        blito$1,
        sub$1,
        subo$1],
       normalize$0,
       slice$0,
       nget,
       nset,
       [0,
        bin_shape_t$15,
        bin_size_t$19,
        bin_write_t$19,
        bin_read_t$42,
        bin_read_t$41,
        bin_writer_t$11,
        bin_reader_t$11,
        bin_t$11,
        compare$6,
        t_of_sexp$12,
        sexp_of_t$11,
        _lM_,
        _lL_,
        of_array_id,
        to_array_id,
        to_sequence_mutable,
        mem,
        iter,
        fold,
        fold_result,
        fold_until,
        exists,
        for_all,
        count,
        sum,
        find,
        find_map,
        to_list,
        copy,
        min_elt,
        max_elt,
        blit,
        blito,
        unsafe_blit,
        sub,
        subo,
        binary_search,
        binary_search_segmented,
        length,
        is_empty,
        create,
        init,
        make_matrix,
        append,
        concat,
        copy,
        fill,
        of_list,
        map$0,
        mapi,
        folding_map,
        iteri,
        foldi,
        folding_mapi,
        fold_right,
        sort,
        stable_sort,
        is_sorted,
        is_sorted_strictly,
        concat_map,
        concat_mapi,
        partition_tf,
        partitioni_tf,
        cartesian_product,
        transpose,
        transpose_exn,
        normalize$0,
        slice$0,
        nget,
        nset,
        filter_opt,
        filter_map,
        filter_mapi,
        for_alli,
        existsi,
        counti,
        iter2_exn,
        map2_exn,
        fold2_exn,
        for_all2_exn,
        exists2_exn,
        filter,
        filteri,
        swap,
        rev_inplace,
        of_list_rev,
        of_list_map,
        of_list_mapi,
        of_list_rev_map,
        of_list_rev_mapi,
        map_inplace,
        find_exn,
        find_map_exn,
        findi,
        findi_exn,
        find_mapi,
        find_mapi_exn,
        find_consecutive_duplicate,
        reduce,
        reduce_exn,
        permute,
        zip,
        zip_exn,
        unzip,
        sorted_copy,
        last,
        equal$0,
        unsafe_truncate,
        to_sequence,
        to_sequence_mutable]];
    caml_register_global(4293,Core_kernel_Array,"Core_kernel__Array");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$59);
    caml_call1(Expect_test_collector[4][1],cst_src_either_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$60,cst$19);
    var
     _lU_=caml_call1(Bin_prot_Shape[3][1],cst_s$2),
     _lV_=caml_call1(Bin_prot_Shape[4][1],cst_src_either_ml_5_18),
     _lW_=[0,[0,cst_Second,[0,caml_call2(Bin_prot_Shape[15],_lV_,_lU_),0]],0],
     _lX_=caml_call1(Bin_prot_Shape[3][1],cst_f),
     _lY_=caml_call1(Bin_prot_Shape[4][1],cst_src_either_ml_4_17),
     _lZ_=
      [0,[0,cst_First,[0,caml_call2(Bin_prot_Shape[15],_lY_,_lX_),0]],_lW_],
     _l0_=caml_call1(Bin_prot_Shape[9],_lZ_),
     _l1_=[0,caml_call1(Bin_prot_Shape[3][1],cst_s$3),0],
     _l2_=[0,caml_call1(Bin_prot_Shape[3][1],cst_f$0),_l1_],
     _l3_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$54),_l2_,_l0_],0],
     _l4_=caml_call1(Bin_prot_Shape[4][1],cst_src_either_ml_3_4),
     group$27=caml_call2(Bin_prot_Shape[6],_l4_,_l3_);
    function bin_shape_t$20(f,s)
     {var _bo7_=caml_call1(Bin_prot_Shape[2][1],cst_t$55);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$27,_bo7_),[0,f,[0,s,0]])}
    function bin_size_t$22(size_of_f,size_of_s,param)
     {if(0 === param[0])
       {var v1=param[1],_bo5_=caml_call1(size_of_f,v1);
        return caml_call2(Bin_prot_Common[23],1,_bo5_)}
      var v1$0=param[1],_bo6_=caml_call1(size_of_s,v1$0);
      return caml_call2(Bin_prot_Common[23],1,_bo6_)}
    function bin_write_t$22(write_f,write_s,buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(write_f,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return caml_call3(write_s,buf,pos$1,v1$0)}
    function bin_writer_t$16(bin_writer_f,bin_writer_s)
     {function _bo0_(v)
       {var _bo1_=bin_writer_s[2],_bo2_=bin_writer_f[2];
        return function(_bo3_,_bo4_)
         {return bin_write_t$22(_bo2_,_bo1_,v,_bo3_,_bo4_)}}
      return [0,
              function(v)
               {return bin_size_t$22(bin_writer_f[1],bin_writer_s[1],v)},
              _bo0_]}
    function bin_read_t$47(of_f,of_s,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_either_ml_Stable_V1_t,pos_ref[1])}
    function bin_read_t$48(of_f,of_s,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match){var arg_1=caml_call2(of_f,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(of_s,buf,pos_ref);return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_l5_,pos_ref[1])}
    function bin_reader_t$16(bin_reader_f,bin_reader_s)
     {function _boZ_(buf,pos_ref,vtag)
       {return bin_read_t$47(bin_reader_f[1],bin_reader_s[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$48
                        (bin_reader_f[1],bin_reader_s[1],buf,pos_ref)},
              _boZ_]}
    function bin_t$16(bin_f,bin_s)
     {var
       _boX_=bin_reader_t$16(bin_f[3],bin_s[3]),
       _boY_=bin_writer_t$16(bin_f[2],bin_s[2]);
      return [0,bin_shape_t$20(bin_f[1],bin_s[1]),_boY_,_boX_]}
    function compare$9(cmp_f,cmp_s,a_001,match)
     {if(caml_call2(Ppx_compare_lib[1],a_001,match))return 0;
      if(0 === a_001[0])
       {var _boV_=a_001[1];
        if(0 === match[0])
         {var b_004=match[1];return caml_call2(cmp_f,_boV_,b_004)}
        return -1}
      var _boW_=a_001[1];
      if(0 === match[0])return 1;
      var b_006=match[1];
      return caml_call2(cmp_s,_boW_,b_006)}
    function t_of_sexp$15(of_f,of_s,sexp)
     {if(0 === sexp[0])
       {var _boR_=sexp[1];
        if(caml_string_notequal(_boR_,cst_First$0))
         {if(caml_string_notequal(_boR_,cst_Second$0))
           if(caml_string_notequal(_boR_,cst_first))
            if(caml_string_notequal(_boR_,cst_second))
             var switch$0=1,switch$1=0;
            else
             var switch$1=1;
           else
            var switch$0=0,switch$1=0;
          else
           var switch$1=1;
          if(switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$11,sexp)}
        else
         var switch$0=0;
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$11,sexp)}
      else
       {var _boS_=sexp[1];
        if(! _boS_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$11,sexp);
        var _boT_=_boS_[1];
        if(0 !== _boT_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$11,sexp);
        var _boU_=_boT_[1];
        if(caml_string_notequal(_boU_,cst_First$1))
         {if(caml_string_notequal(_boU_,cst_Second$1))
           if(caml_string_notequal(_boU_,cst_first$0))
            if(caml_string_notequal(_boU_,cst_second$0))
             var switch$2=1,switch$3=0;
            else
             var switch$3=1;
           else
            var switch$2=0,switch$3=0;
          else
           var switch$3=1;
          if(switch$3)
           {var sexp_args=_boS_[2];
            if(sexp_args)
             if(! sexp_args[2])
              {var v0=sexp_args[1],v0$0=caml_call1(of_s,v0);return [1,v0$0]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$11,_boU_,sexp)}}
        else
         var switch$2=0;
        if(! switch$2)
         {var sexp_args$0=_boS_[2];
          if(sexp_args$0)
           if(! sexp_args$0[2])
            {var v0$1=sexp_args$0[1],v0$2=caml_call1(of_f,v0$1);
             return [0,v0$2]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$11,_boU_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$11,sexp)}
    function sexp_of_t$14(of_f,of_s,param)
     {if(0 === param[0])
       {var v0=param[1],v0$0=caml_call1(of_f,v0);
        return [1,[0,_l6_,[0,v0$0,0]]]}
      var v0$1=param[1],v0$2=caml_call1(of_s,v0$1);
      return [1,[0,_l7_,[0,v0$2,0]]]}
    var
     Typename_of_t$0=caml_call1(Typerep_lib_Make_typename[3],[0,name$9]),
     typename_of_t$0=Typename_of_t$0[2];
    function typerep_of_t$0(of_f,of_s)
     {var name_of_t=caml_call2(Typename_of_t$0[1],of_f,of_s);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_boM_)
                  {var
                    _boN_=[0,function(v0){return [0,v0]}],
                    _boO_=
                     [0,
                      cst_First$2,
                      of_f,
                      1,
                      0,
                      0,
                      0,
                      caml_call2(Typerep_lib_Typename[1],0,0),
                      _boN_],
                    tag0=caml_call1(Typerep_lib_Std[1][4][9],_boO_),
                    _boP_=[0,function(v0){return [1,v0]}],
                    _boQ_=
                     [0,
                      cst_Second$2,
                      of_s,
                      1,
                      0,
                      1,
                      1,
                      caml_call2(Typerep_lib_Typename[1],0,0),
                      _boP_],
                    tag1=caml_call1(Typerep_lib_Std[1][4][9],_boQ_),
                    typename=caml_call1(Typerep_lib_Std[1][1][2],name_of_t),
                    tags=[0,[0,tag0],[0,tag1]],
                    polymorphic=0;
                   function value(param)
                    {if(0 === param[0]){var v0=param[1];return [0,tag0,v0]}
                     var v0$0=param[1];
                     return [0,tag1,v0$0]}
                   return [8,
                           caml_call1
                            (Typerep_lib_Std[1][6][7],
                             [0,typename,tags,polymorphic,value])]}]]]]}
    function map$1(x,f1,f2)
     {if(0 === x[0]){var x1=x[1];return [0,caml_call1(f1,x1)]}
      var x2=x[1];
      return [1,caml_call1(f2,x2)]}
    var
     compare$10=include$15[1],
     hash_fold_t$5=include$15[2],
     t_of_sexp$16=include$15[3],
     sexp_of_t$15=include$15[4],
     invariant$0=include$15[5],
     swap$0=include$15[6],
     value=include$15[7],
     iter$0=include$15[8],
     value_map=include$15[9],
     map$2=include$15[10],
     equal$2=include$15[11],
     is_first=include$15[14],
     is_second=include$15[15],
     first=include$15[16],
     second=include$15[17],
     include$16=caml_call1(Derived2,[0,compare$10,sexp_of_t$15]),
     _l8_=include$16[1],
     _l9_=Base_quickcheck_Generator[14],
     _l__=Base_quickcheck_Observer[16],
     _l$_=Base_quickcheck_Shrinker[16];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$61);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Either=
      [0,
       bin_shape_t$20,
       bin_size_t$22,
       bin_write_t$22,
       bin_read_t$48,
       bin_read_t$47,
       bin_writer_t$16,
       bin_reader_t$16,
       bin_t$16,
       typerep_of_t$0,
       typename_of_t$0,
       compare$10,
       hash_fold_t$5,
       t_of_sexp$16,
       sexp_of_t$15,
       invariant$0,
       swap$0,
       value,
       iter$0,
       value_map,
       map$2,
       equal$2,
       is_first,
       is_second,
       first,
       second,
       _l8_,
       _l9_,
       _l__,
       _l$_,
       [0,
        [0,
         bin_shape_t$20,
         bin_size_t$22,
         bin_write_t$22,
         bin_read_t$48,
         bin_read_t$47,
         bin_writer_t$16,
         bin_reader_t$16,
         bin_t$16,
         compare$9,
         t_of_sexp$15,
         sexp_of_t$14,
         map$1]]];
    caml_register_global(4299,Core_kernel_Either,"Core_kernel__Either");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$62);
    caml_call1(Expect_test_collector[4][1],cst_src_info_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$63,cst$20);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$64);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Info_intf=[0];
    caml_register_global(4300,Core_kernel_Info_intf,"Core_kernel__Info_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$65);
    caml_call1(Expect_test_collector[4][1],cst_src_source_code_position0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$66,cst$21);
    var
     _ma_=include$17[4],
     _mb_=include$17[5],
     _mc_=include$17[6],
     _md_=include$17[7],
     _me_=include$17[8],
     _mf_=include$17[9],
     _mg_=include$17[10],
     _mh_=include$17[12],
     _mi_=include$17[13],
     _mj_=include$17[14],
     _mk_=include$17[15],
     _ml_=include$17[16],
     _mm_=include$17[17],
     _mn_=include$17[18],
     _mo_=include$17[19],
     _mp_=include$17[20],
     _mq_=include$17[21],
     _mr_=include$17[22],
     _ms_=include$17[23],
     _mt_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_pos_fname,_cb_],
         [0,
          [0,cst_pos_lnum,_cq_],
          [0,[0,cst_pos_bol,_cq_],[0,[0,cst_pos_cnum,_cq_],0]]]]),
     _mu_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$56),0,_mt_],0],
     _mv_=
      caml_call1(Bin_prot_Shape[4][1],cst_src_source_code_position0_ml_7_4),
     group$28=caml_call2(Bin_prot_Shape[6],_mv_,_mu_),
     _mw_=caml_call1(Bin_prot_Shape[2][1],cst_t$57),
     bin_shape_t$21=caml_call1(caml_call2(Bin_prot_Shape[14],group$28,_mw_),0);
    function bin_size_t$23(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _boI_=caml_call1(bin_size_t,v1),
       size=caml_call2(Bin_prot_Common[23],0,_boI_),
       _boJ_=caml_call1(bin_size_t$1,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_boJ_),
       _boK_=caml_call1(bin_size_t$1,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_boK_),
       _boL_=caml_call1(bin_size_t$1,v4);
      return caml_call2(Bin_prot_Common[23],size$1,_boL_)}
    function bin_write_t$23(buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$1,buf,pos$0,v2),
       pos$2=caml_call3(bin_write_t$1,buf,pos$1,v3);
      return caml_call3(bin_write_t$1,buf,pos$2,v4)}
    var bin_writer_t$17=[0,bin_size_t$23,bin_write_t$23];
    function bin_read_t$49(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_source_code_position0_ml_Stable_V1_t,
               pos_ref[1])}
    function bin_read_t$50(buf,pos_ref)
     {var
       v_pos_fname=caml_call2(bin_read_t,buf,pos_ref),
       v_pos_lnum=caml_call2(bin_read_t$3,buf,pos_ref),
       v_pos_bol=caml_call2(bin_read_t$3,buf,pos_ref),
       v_pos_cnum=caml_call2(bin_read_t$3,buf,pos_ref);
      return [0,v_pos_fname,v_pos_lnum,v_pos_bol,v_pos_cnum]}
    var
     bin_reader_t$17=[0,bin_read_t$50,bin_read_t$49],
     bin_t$17=[0,bin_shape_t$21,bin_writer_t$17,bin_reader_t$17];
    function compare$11(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(_af_,a_001[1],b_002[1]);
      if(0 === n)
       {var n$0=caml_call2(_x_,a_001[2],b_002[2]);
        if(0 === n$0)
         {var n$1=caml_call2(_x_,a_001[3],b_002[3]);
          return 0 === n$1?caml_call2(_x_,a_001[4],b_002[4]):n$1}
        return n$0}
      return n}
    function hash_fold_t$6(hsv,arg)
     {var
       hsv$0=caml_call2(_ah_,hsv,arg[1]),
       hsv$1=caml_call2(_z_,hsv$0,arg[2]),
       hsv$2=caml_call2(_z_,hsv$1,arg[3]);
      return caml_call2(_z_,hsv$2,arg[4])}
    function hash$5(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_boH_=hash_fold_t$6(hsv,x);
      return caml_call1(Base_Hash[9],_boH_)}
    function t_of_sexp$17(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$12,sexp);
      var
       field_sexps=sexp[1],
       pos_fname_field=[0,0],
       pos_lnum_field=[0,0],
       pos_bol_field=[0,0],
       pos_cnum_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _boy_=param[1];
          if(1 === _boy_[0])
           {var _boz_=_boy_[1];
            if(_boz_)
             {var _boA_=_boz_[1];
              if(0 === _boA_[0])
               {var _boB_=_boz_[2],_boC_=_boA_[1];
                if(! _boB_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_boC_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _boB_[2])
                 {var tail=param[2],field_sexp=_boB_[1];
                  if(caml_string_notequal(_boC_,cst_pos_bol$0))
                   if(caml_string_notequal(_boC_,cst_pos_cnum$0))
                    if(caml_string_notequal(_boC_,cst_pos_fname$0))
                     if(caml_string_notequal(_boC_,cst_pos_lnum$0))
                      {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_boC_,extra[1]]}
                     else
                      if(pos_lnum_field[1])
                       duplicates[1] = [0,_boC_,duplicates[1]];
                      else
                       {var fvalue=caml_call1(t_of_sexp,field_sexp);
                        pos_lnum_field[1] = [0,fvalue]}
                    else
                     if(pos_fname_field[1])
                      duplicates[1] = [0,_boC_,duplicates[1]];
                     else
                      {var fvalue$0=caml_call1(_aj_,field_sexp);
                       pos_fname_field[1] = [0,fvalue$0]}
                   else
                    if(pos_cnum_field[1])
                     duplicates[1] = [0,_boC_,duplicates[1]];
                    else
                     {var fvalue$1=caml_call1(t_of_sexp,field_sexp);
                      pos_cnum_field[1] = [0,fvalue$1]}
                  else
                   if(pos_bol_field[1])
                    duplicates[1] = [0,_boC_,duplicates[1]];
                   else
                    {var fvalue$2=caml_call1(t_of_sexp,field_sexp);
                     pos_bol_field[1] = [0,fvalue$2]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$12,_boy_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$12,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$12,extra[1],sexp);
        var
         _boD_=pos_fname_field[1],
         _boE_=pos_lnum_field[1],
         _boF_=pos_bol_field[1],
         _boG_=pos_cnum_field[1];
        if(_boD_)
         if(_boE_)
          if(_boF_)
           if(_boG_)
            {var
              pos_cnum_value=_boG_[1],
              pos_bol_value=_boF_[1],
              pos_lnum_value=_boE_[1],
              pos_fname_value=_boD_[1];
             return [0,
                     pos_fname_value,
                     pos_lnum_value,
                     pos_bol_value,
                     pos_cnum_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$12,
                 sexp,
                 [0,
                  [0,0 === pos_fname_field[1]?1:0,cst_pos_fname$1],
                  [0,
                   [0,0 === pos_lnum_field[1]?1:0,cst_pos_lnum$1],
                   [0,
                    [0,0 === pos_bol_field[1]?1:0,cst_pos_bol$1],
                    [0,[0,0 === pos_cnum_field[1]?1:0,cst_pos_cnum$1],0]]]])}}
    function sexp_of_t$16(param)
     {var
       v_pos_cnum=param[4],
       v_pos_bol=param[3],
       v_pos_lnum=param[2],
       v_pos_fname=param[1],
       arg=caml_call1(sexp_of_t$0,v_pos_cnum),
       bnds=[0,[1,[0,_mx_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$0,v_pos_bol),
       bnds$0=[0,[1,[0,_my_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$0,v_pos_lnum),
       bnds$1=[0,[1,[0,_mz_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_ak_,v_pos_fname),
       bnds$2=[0,[1,[0,_mA_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    var
     V1$11=
      [0,
       _ma_,
       _mb_,
       _mc_,
       _md_,
       _me_,
       _mf_,
       _mg_,
       _mh_,
       _mi_,
       _mj_,
       _mk_,
       _ml_,
       _mm_,
       _mn_,
       _mo_,
       _mp_,
       _mq_,
       _mr_,
       _ms_,
       bin_shape_t$21,
       bin_size_t$23,
       bin_write_t$23,
       bin_writer_t$17,
       bin_read_t$49,
       bin_read_t$50,
       bin_reader_t$17,
       bin_t$17,
       compare$11,
       hash_fold_t$6,
       hash$5,
       t_of_sexp$17,
       sexp_of_t$16],
     Stable$1=[0,V1$11],
     _mB_=Stable$1[1],
     _m2_=_mB_[28],
     _m3_=_mB_[29],
     _m4_=_mB_[30],
     _m5_=_mB_[31],
     _m6_=include$17[23],
     _m7_=include$17[3],
     _mC_=_mB_[1],
     _mD_=_mB_[2],
     _mE_=_mB_[3],
     _mF_=_mB_[4],
     _mG_=_mB_[5],
     _mH_=_mB_[6],
     _mI_=_mB_[7],
     _mJ_=_mB_[8],
     _mK_=_mB_[9],
     _mL_=_mB_[10],
     _mM_=_mB_[11],
     _mN_=_mB_[12],
     _mO_=_mB_[13],
     _mP_=_mB_[14],
     _mQ_=_mB_[15],
     _mR_=_mB_[16],
     _mS_=_mB_[17],
     _mT_=_mB_[18],
     _mU_=_mB_[20],
     _mV_=_mB_[21],
     _mW_=_mB_[22],
     _mX_=_mB_[23],
     _mY_=_mB_[24],
     _mZ_=_mB_[25],
     _m0_=_mB_[26],
     _m1_=_mB_[27];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$67);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Source_code_position0=
      [0,
       Stable$1,
       _mC_,
       _mD_,
       _mE_,
       _mF_,
       _mG_,
       _mH_,
       _mI_,
       _mJ_,
       _mK_,
       _mL_,
       _mM_,
       _mN_,
       _mO_,
       _mP_,
       _mQ_,
       _mR_,
       _mS_,
       _mT_,
       _mU_,
       _mV_,
       _mW_,
       _mX_,
       _mY_,
       _mZ_,
       _m0_,
       _m1_,
       _m2_,
       _m3_,
       _m4_,
       _m5_,
       _m6_,
       _m7_];
    caml_register_global
     (4302,
      Core_kernel_Source_code_position0,
      "Core_kernel__Source_code_position0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$68);
    caml_call1(Expect_test_collector[4][1],cst_src_info_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$69,cst$22);
    var
     _m8_=include$18[58],
     _m9_=include$18[59],
     _m__=caml_call1(Bin_prot_Shape[2][1],cst_t$58),
     _m$_=
      [0,
       [0,cst_Atom$0,[0,_cb_,0]],
       [0,
        [0,
         cst_List$0,
         [0,
          caml_call1(_dq_,caml_call1(caml_call1(Bin_prot_Shape[13],_m__),0)),
          0]],
        0]],
     _na_=caml_call1(Bin_prot_Shape[9],_m$_),
     _nb_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$59),0,_na_],0],
     _nc_=caml_call1(Bin_prot_Shape[4][1],cst_src_info_ml_18_4),
     group$29=caml_call2(Bin_prot_Shape[6],_nc_,_nb_),
     _nd_=caml_call1(Bin_prot_Shape[2][1],cst_t$60),
     bin_shape_t$22=caml_call1(caml_call2(Bin_prot_Shape[14],group$29,_nd_),0);
    function bin_size_t$24(param)
     {if(0 === param[0])
       {var v1=param[1],_bow_=caml_call1(bin_size_t,v1);
        return caml_call2(Bin_prot_Common[23],1,_bow_)}
      var v1$0=param[1],_box_=caml_call2(_bz_,bin_size_t$24,v1$0);
      return caml_call2(Bin_prot_Common[23],1,_box_)}
    function bin_write_t$24(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(bin_write_t,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return caml_call3(caml_call1(_ds_,bin_write_t$24),buf,pos$1,v1$0)}
    function bin_read_t$51(buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[19],cst_src_info_ml_Sexp_t,pos_ref[1])}
    function bin_read_t$52(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match)
       {var arg_1=caml_call2(bin_read_t,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(caml_call1(_du_,bin_read_t$52),buf,pos_ref);
        return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_ne_,pos_ref[1])}
    var
     hash_fold_t$7=function _bov_(_bot_,_bou_){return _bov_.fun(_bot_,_bou_)},
     hash$6=function _bos_(_bor_){return _bos_.fun(_bor_)};
    caml_update_dummy
     (hash_fold_t$7,
      function(hsv,arg)
       {if(0 === arg[0])
         {var a0=arg[1],hsv$0=caml_call2(Base_Hash[3],hsv,0);
          return caml_call2(_ah_,hsv$0,a0)}
        var a0$0=arg[1],hsv$1=caml_call2(Base_Hash[3],hsv,1);
        return caml_call3(_P_,hash_fold_t$7,hsv$1,a0$0)});
    caml_update_dummy
     (hash$6,
      function(x)
       {var
         hsv=caml_call2(Base_Hash[11],0,0),
         _boq_=caml_call2(hash_fold_t$7,hsv,x);
        return caml_call1(Base_Hash[9],_boq_)});
    function to_binable$0(t){return caml_call1(sexp_of_t,t)}
    var
     of_binable$0=Base_Exn[5],
     include$19=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$22,
           bin_size_t$24,
           bin_write_t$24,
           bin_read_t$52,
           bin_read_t$51]),
        [0,to_binable$0,of_binable$0]),
     bin_size_t$25=include$19[1],
     bin_write_t$25=include$19[2],
     bin_read_t$53=include$19[3],
     bin_shape_t$23=include$19[5];
    function Extend(Info)
     {var
       _bnr_=Info[1],
       _bns_=Info[2],
       _bnt_=Info[3],
       _bnu_=Info[4],
       _bnv_=Info[5],
       _bnw_=Info[6],
       _bnx_=Info[7],
       _bny_=Info[8],
       _bnz_=Info[9],
       _bnA_=Info[10],
       _bnB_=Info[11],
       _bnC_=Info[12],
       _bnD_=Info[13],
       _bnE_=Info[14],
       _bnF_=Info[15],
       _bnG_=Info[16],
       _bnH_=Info[17],
       _bnI_=Info[18],
       _bnJ_=Info[19],
       _bnK_=Info[20],
       _bnL_=Info[21],
       _bnM_=Info[22],
       _bnN_=Info[23],
       _bnO_=Info[24],
       _bnP_=Stable$1[1][20],
       _bnQ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$61),0,_bnP_],0],
       _bnR_=caml_call1(Bin_prot_Shape[4][1],cst_src_info_ml_59_10),
       group=caml_call2(Bin_prot_Shape[6],_bnR_,_bnQ_),
       _bnS_=caml_call1(Bin_prot_Shape[2][1],cst_t$62),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bnS_),0),
       bin_size_t$0=Stable$1[1][21],
       bin_write_t$0=Stable$1[1][22],
       bin_writer_t=[0,bin_size_t$0,bin_write_t$0],
       bin_read_t$0=Stable$1[1][24],
       bin_read_t$1=Stable$1[1][25],
       bin_reader_t=[0,bin_read_t$1,bin_read_t$0],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t],
       V1=
        [0,
         bin_shape_t,
         bin_size_t$0,
         bin_write_t$0,
         bin_writer_t,
         bin_read_t$0,
         bin_read_t$1,
         bin_reader_t,
         bin_t,
         _m7_],
       Source_code_position=[0,V1],
       _bnT_=caml_call1(Bin_prot_Shape[2][1],cst_t$63),
       _bnU_=
        [0,
         [0,
          cst_With_backtrace,
          [0,caml_call1(caml_call1(Bin_prot_Shape[13],_bnT_),0),[0,_cb_,0]]],
         0],
       _bnV_=caml_call1(Bin_prot_Shape[2][1],cst_t$64),
       _bnW_=
        [0,
         caml_call1(_dq_,caml_call1(caml_call1(Bin_prot_Shape[13],_bnV_),0)),
         0],
       _bnX_=[0,[0,cst_Of_list,[0,caml_call1(_dj_,_cq_),_bnW_]],_bnU_],
       _bnY_=caml_call1(Bin_prot_Shape[2][1],cst_t$65),
       _bnZ_=
        [0,
         [0,
          cst_Tag_arg,
          [0,
           _cb_,
           [0,
            bin_shape_t$22,
            [0,caml_call1(caml_call1(Bin_prot_Shape[13],_bnY_),0),0]]]],
         _bnX_],
       _bn0_=caml_call1(Bin_prot_Shape[2][1],cst_t$66),
       _bn1_=
        [0,
         [0,
          cst_Tag_t,
          [0,_cb_,[0,caml_call1(caml_call1(Bin_prot_Shape[13],_bn0_),0),0]]],
         _bnZ_],
       _bn2_=
        [0,
         [0,cst_Could_not_construct,[0,bin_shape_t$22,0]],
         [0,
          [0,cst_String,[0,_cb_,0]],
          [0,
           [0,cst_Exn,[0,bin_shape_t$23,0]],
           [0,
            [0,cst_Sexp,[0,bin_shape_t$22,0]],
            [0,
             [0,
              cst_Tag_sexp,
              [0,
               _cb_,
               [0,
                bin_shape_t$22,
                [0,caml_call1(_dj_,Source_code_position[1][1]),0]]]],
             _bn1_]]]]],
       _bn3_=caml_call1(Bin_prot_Shape[9],_bn2_),
       _bn4_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$67),0,_bn3_],0],
       _bn5_=caml_call1(Bin_prot_Shape[4][1],cst_src_info_ml_69_8),
       group$0=caml_call2(Bin_prot_Shape[6],_bn5_,_bn4_),
       _bn6_=caml_call1(Bin_prot_Shape[2][1],cst_t$68),
       bin_shape_t$0=
        caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_bn6_),0);
      function bin_size_t$2(param)
       {switch(param[0])
         {case 0:
           var v1=param[1],_boa_=bin_size_t$24(v1);
           return caml_call2(Bin_prot_Common[23],1,_boa_);
          case 1:
           var v1$0=param[1],_bob_=caml_call1(bin_size_t,v1$0);
           return caml_call2(Bin_prot_Common[23],1,_bob_);
          case 2:
           var v1$1=param[1],_boc_=caml_call1(bin_size_t$25,v1$1);
           return caml_call2(Bin_prot_Common[23],1,_boc_);
          case 3:
           var v1$2=param[1],_bod_=bin_size_t$24(v1$2);
           return caml_call2(Bin_prot_Common[23],1,_bod_);
          case 4:
           var
            v3=param[3],
            v2=param[2],
            v1$3=param[1],
            _boe_=caml_call1(bin_size_t,v1$3),
            size=caml_call2(Bin_prot_Common[23],1,_boe_),
            _bof_=bin_size_t$24(v2),
            size$0=caml_call2(Bin_prot_Common[23],size,_bof_),
            _bog_=caml_call2(_bw_,Source_code_position[1][2],v3);
           return caml_call2(Bin_prot_Common[23],size$0,_bog_);
          case 5:
           var
            v2$0=param[2],
            v1$4=param[1],
            _boh_=caml_call1(bin_size_t,v1$4),
            size$1=caml_call2(Bin_prot_Common[23],1,_boh_),
            _boi_=bin_size_t$2(v2$0);
           return caml_call2(Bin_prot_Common[23],size$1,_boi_);
          case 6:
           var
            v3$0=param[3],
            v2$1=param[2],
            v1$5=param[1],
            _boj_=caml_call1(bin_size_t,v1$5),
            size$2=caml_call2(Bin_prot_Common[23],1,_boj_),
            _bok_=bin_size_t$24(v2$1),
            size$3=caml_call2(Bin_prot_Common[23],size$2,_bok_),
            _bol_=bin_size_t$2(v3$0);
           return caml_call2(Bin_prot_Common[23],size$3,_bol_);
          case 7:
           var
            v2$2=param[2],
            v1$6=param[1],
            _bom_=caml_call2(_bw_,bin_size_t$1,v1$6),
            size$4=caml_call2(Bin_prot_Common[23],1,_bom_),
            _bon_=caml_call2(_bz_,bin_size_t$2,v2$2);
           return caml_call2(Bin_prot_Common[23],size$4,_bon_);
          default:
           var
            v2$3=param[2],
            v1$7=param[1],
            _boo_=bin_size_t$2(v1$7),
            size$5=caml_call2(Bin_prot_Common[23],1,_boo_),
            _bop_=caml_call1(bin_size_t,v2$3);
           return caml_call2(Bin_prot_Common[23],size$5,_bop_)}}
      function bin_write_t$2(buf,pos,param)
       {var pos$0=pos,param$0=param;
        for(;;)
         switch(param$0[0])
          {case 0:
            var
             v1=param$0[1],
             pos$1=caml_call3(Bin_prot_Write[30],buf,pos$0,0);
            return bin_write_t$24(buf,pos$1,v1);
           case 1:
            var
             v1$0=param$0[1],
             pos$2=caml_call3(Bin_prot_Write[30],buf,pos$0,1);
            return caml_call3(bin_write_t,buf,pos$2,v1$0);
           case 2:
            var
             v1$1=param$0[1],
             pos$3=caml_call3(Bin_prot_Write[30],buf,pos$0,2);
            return caml_call3(bin_write_t$25,buf,pos$3,v1$1);
           case 3:
            var
             v1$2=param$0[1],
             pos$4=caml_call3(Bin_prot_Write[30],buf,pos$0,3);
            return bin_write_t$24(buf,pos$4,v1$2);
           case 4:
            var
             v3=param$0[3],
             v2=param$0[2],
             v1$3=param$0[1],
             pos$5=caml_call3(Bin_prot_Write[30],buf,pos$0,4),
             pos$6=caml_call3(bin_write_t,buf,pos$5,v1$3),
             pos$7=bin_write_t$24(buf,pos$6,v2);
            return caml_call3
                    (caml_call1(_dl_,Source_code_position[1][3]),buf,pos$7,v3);
           case 5:
            var
             v2$0=param$0[2],
             v1$4=param$0[1],
             pos$8=caml_call3(Bin_prot_Write[30],buf,pos$0,5),
             pos$9=caml_call3(bin_write_t,buf,pos$8,v1$4),
             pos$0=pos$9,
             param$0=v2$0;
            continue;
           case 6:
            var
             v3$0=param$0[3],
             v2$1=param$0[2],
             v1$5=param$0[1],
             pos$10=caml_call3(Bin_prot_Write[30],buf,pos$0,6),
             pos$11=caml_call3(bin_write_t,buf,pos$10,v1$5),
             pos$12=bin_write_t$24(buf,pos$11,v2$1),
             pos$0=pos$12,
             param$0=v3$0;
            continue;
           case 7:
            var
             v2$2=param$0[2],
             v1$6=param$0[1],
             pos$13=caml_call3(Bin_prot_Write[30],buf,pos$0,7),
             pos$14=caml_call3(caml_call1(_dl_,bin_write_t$1),buf,pos$13,v1$6);
            return caml_call3(caml_call1(_ds_,bin_write_t$2),buf,pos$14,v2$2);
           default:
            var
             v2$3=param$0[2],
             v1$7=param$0[1],
             pos$15=caml_call3(Bin_prot_Write[30],buf,pos$0,8),
             pos$16=bin_write_t$2(buf,pos$15,v1$7);
            return caml_call3(bin_write_t,buf,pos$16,v2$3)}}
      var bin_writer_t$0=[0,bin_size_t$2,bin_write_t$2];
      function bin_read_t$2(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_src_info_ml_Extend_Internal_repr_Stable_V2_t,
                 pos_ref[1])}
      function bin_read_t$4(buf,pos_ref)
       {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
        if(8 < match >>> 0)
         return caml_call2(Bin_prot_Common[18],_nf_,pos_ref[1]);
        switch(match)
         {case 0:var arg_1=bin_read_t$52(buf,pos_ref);return [0,arg_1];
          case 1:
           var arg_1$0=caml_call2(bin_read_t,buf,pos_ref);return [1,arg_1$0];
          case 2:
           var arg_1$1=caml_call2(bin_read_t$53,buf,pos_ref);
           return [2,arg_1$1];
          case 3:var arg_1$2=bin_read_t$52(buf,pos_ref);return [3,arg_1$2];
          case 4:
           var
            arg_1$3=caml_call2(bin_read_t,buf,pos_ref),
            arg_2=bin_read_t$52(buf,pos_ref),
            arg_3=
             caml_call2
              (caml_call1(_dn_,Source_code_position[1][6]),buf,pos_ref);
           return [4,arg_1$3,arg_2,arg_3];
          case 5:
           var
            arg_1$4=caml_call2(bin_read_t,buf,pos_ref),
            arg_2$0=bin_read_t$4(buf,pos_ref);
           return [5,arg_1$4,arg_2$0];
          case 6:
           var
            arg_1$5=caml_call2(bin_read_t,buf,pos_ref),
            arg_2$1=bin_read_t$52(buf,pos_ref),
            arg_3$0=bin_read_t$4(buf,pos_ref);
           return [6,arg_1$5,arg_2$1,arg_3$0];
          case 7:
           var
            arg_1$6=caml_call2(caml_call1(_dn_,bin_read_t$3),buf,pos_ref),
            arg_2$2=caml_call2(caml_call1(_du_,bin_read_t$4),buf,pos_ref);
           return [7,arg_1$6,arg_2$2];
          default:
           var
            arg_1$7=bin_read_t$4(buf,pos_ref),
            arg_2$3=caml_call2(bin_read_t,buf,pos_ref);
           return [8,arg_1$7,arg_2$3]}}
      var
       bin_reader_t$0=[0,bin_read_t$4,bin_read_t$2],
       bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0];
      function sexp_of_t$1(param)
       {switch(param[0])
         {case 0:
           var v0=param[1],v0$0=caml_call1(_m8_,v0);
           return [1,[0,_ng_,[0,v0$0,0]]];
          case 1:
           var v0$1=param[1],v0$2=caml_call1(_ak_,v0$1);
           return [1,[0,_nh_,[0,v0$2,0]]];
          case 2:
           var v0$3=param[1],v0$4=caml_call1(sexp_of_t,v0$3);
           return [1,[0,_ni_,[0,v0$4,0]]];
          case 3:
           var v0$5=param[1],v0$6=caml_call1(_m8_,v0$5);
           return [1,[0,_nj_,[0,v0$6,0]]];
          case 4:
           var
            v2=param[3],
            v1=param[2],
            v0$7=param[1],
            v0$8=caml_call1(_ak_,v0$7),
            v1$0=caml_call1(_m8_,v1),
            v2$0=caml_call2(_aa_,Source_code_position[1][9],v2);
           return [1,[0,_nk_,[0,v0$8,[0,v1$0,[0,v2$0,0]]]]];
          case 5:
           var
            v1$1=param[2],
            v0$9=param[1],
            v0$10=caml_call1(_ak_,v0$9),
            v1$2=sexp_of_t$1(v1$1);
           return [1,[0,_nl_,[0,v0$10,[0,v1$2,0]]]];
          case 6:
           var
            v2$1=param[3],
            v1$3=param[2],
            v0$11=param[1],
            v0$12=caml_call1(_ak_,v0$11),
            v1$4=caml_call1(_m8_,v1$3),
            v2$2=sexp_of_t$1(v2$1);
           return [1,[0,_nm_,[0,v0$12,[0,v1$4,[0,v2$2,0]]]]];
          case 7:
           var
            v1$5=param[2],
            v0$13=param[1],
            v0$14=caml_call2(_aa_,sexp_of_t$0,v0$13),
            v1$6=caml_call2(_R_,sexp_of_t$1,v1$5);
           return [1,[0,_nn_,[0,v0$14,[0,v1$6,0]]]];
          default:
           var
            v1$7=param[2],
            v0$15=param[1],
            v0$16=sexp_of_t$1(v0$15),
            v1$8=caml_call1(_ak_,v1$7);
           return [1,[0,_no_,[0,v0$16,[0,v1$8,0]]]]}}
      var
       V2=
        [0,
         bin_shape_t$0,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$0,
         bin_read_t$2,
         bin_read_t$4,
         bin_reader_t$0,
         bin_t$0,
         sexp_of_t$1],
       Stable$2=[0,Source_code_position,V2],
       include=Stable$2[2],
       bin_shape_t$1=include[1],
       bin_size_t$3=include[2],
       bin_write_t$3=include[3],
       bin_writer_t$1=include[4],
       bin_read_t$5=include[5],
       bin_read_t$6=include[6],
       bin_reader_t$1=include[7],
       bin_t$1=include[8],
       sexp_of_t$2=include[9],
       to_info=Info[25][3],
       of_info=Info[25][2],
       Internal_repr=
        [0,
         Stable$2,
         bin_shape_t$1,
         bin_size_t$3,
         bin_write_t$3,
         bin_writer_t$1,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$1,
         bin_t$1,
         sexp_of_t$2,
         to_info,
         of_info],
       t_of_sexp=Info[5],
       sexp_of_t$3=Info[6],
       compare=Info[1],
       hash_fold_t=Info[3],
       func=Info[4];
      function hash(x){return caml_call1(func,x)}
      var
       T=[0,t_of_sexp,sexp_of_t$3,compare,hash_fold_t,hash],
       t_of_sexp$0=T[1],
       sexp_of_t$4=T[2],
       compare$0=T[3],
       hash_fold_t$0=T[4],
       hash$0=T[5],
       include$0=caml_call1(_hu_[1][2],[0,T[3],T[2]]),
       comparator=include$0[1],
       to_binable=Info[25][2],
       of_binable=Info[25][3],
       _bn7_=Internal_repr[1][2],
       include$1=
        caml_call1
         (caml_call1
           (Stable$0[1][1],[0,_bn7_[1],_bn7_[2],_bn7_[3],_bn7_[6],_bn7_[5]]),
          [0,to_binable,of_binable]),
       bin_size_t$4=include$1[1],
       bin_write_t$4=include$1[2],
       bin_read_t$7=include$1[3],
       bin_read_t$8=include$1[4],
       bin_shape_t$2=include$1[5],
       bin_writer_t$2=include$1[6],
       bin_reader_t$2=include$1[7],
       bin_t$2=include$1[8],
       V2$0=
        [0,
         T,
         t_of_sexp$0,
         sexp_of_t$4,
         compare$0,
         hash_fold_t$0,
         hash$0,
         comparator,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$7,
         bin_read_t$8,
         bin_shape_t$2,
         bin_writer_t$2,
         bin_reader_t$2,
         bin_t$2],
       compare$1=Info[1],
       to_sexpable=Info[6],
       of_sexpable=Info[5],
       include$2=
        caml_call1
         (caml_call1(Stable[1][1],[0,_m9_,_m8_]),[0,to_sexpable,of_sexpable]),
       t_of_sexp$1=include$2[1],
       sexp_of_t$5=include$2[2],
       T$0=[0,t_of_sexp$1,sexp_of_t$5,compare$1],
       t_of_sexp$2=T$0[1],
       sexp_of_t$6=T$0[2],
       compare$2=T$0[3],
       include$3=caml_call1(_hu_[1][2],[0,T$0[3],T$0[2]]),
       comparator$0=include$3[1],
       include$4=
        caml_call1
         (caml_call1
           (Stable$0[1][1],
            [0,
             bin_shape_t$22,
             bin_size_t$24,
             bin_write_t$24,
             bin_read_t$52,
             bin_read_t$51]),
          [0,sexp_of_t$6,t_of_sexp$2]),
       bin_size_t$5=include$4[1],
       bin_write_t$5=include$4[2],
       bin_read_t$9=include$4[3],
       bin_read_t$10=include$4[4],
       bin_shape_t$3=include$4[5],
       bin_writer_t$3=include$4[6],
       bin_reader_t$3=include$4[7],
       bin_t$3=include$4[8],
       V1$0=
        [0,
         T$0,
         t_of_sexp$2,
         sexp_of_t$6,
         compare$2,
         comparator$0,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3],
       Stable$3=[0,V2$0,V1$0],
       _bn8_=Stable$3[1][12],
       _bn9_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$69),0,_bn8_],0],
       _bn__=caml_call1(Bin_prot_Shape[4][1],cst_src_info_ml_138_2),
       group$1=caml_call2(Bin_prot_Shape[6],_bn__,_bn9_),
       _bn$_=caml_call1(Bin_prot_Shape[2][1],cst_t$70),
       bin_shape_t$4=
        caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_bn$_),0),
       bin_size_t$6=Stable$3[1][8],
       bin_write_t$6=Stable$3[1][9],
       bin_writer_t$4=[0,bin_size_t$6,bin_write_t$6],
       bin_read_t$11=Stable$3[1][11],
       bin_read_t$12=Stable$3[1][10],
       bin_reader_t$4=[0,bin_read_t$12,bin_read_t$11],
       bin_t$4=[0,bin_shape_t$4,bin_writer_t$4,bin_reader_t$4];
      return [0,
              _bnr_,
              _bns_,
              _bnt_,
              _bnu_,
              _bnv_,
              _bnw_,
              _bnx_,
              _bny_,
              _bnz_,
              _bnA_,
              _bnB_,
              _bnC_,
              _bnD_,
              _bnE_,
              _bnF_,
              _bnG_,
              _bnH_,
              _bnI_,
              _bnJ_,
              _bnK_,
              _bnL_,
              _bnM_,
              _bnN_,
              _bnO_,
              Internal_repr,
              Stable$3,
              bin_shape_t$4,
              bin_size_t$6,
              bin_write_t$6,
              bin_writer_t$4,
              bin_read_t$11,
              bin_read_t$12,
              bin_reader_t$4,
              bin_t$4]}
    var
     include$20=Extend(Base_Info),
     _nu_=include$20[6],
     _nz_=include$20[11],
     _nN_=include$20[25],
     _nO_=include$20[26],
     _np_=include$20[1],
     _nq_=include$20[2],
     _nr_=include$20[3],
     _ns_=include$20[4],
     _nt_=include$20[5],
     _nv_=include$20[7],
     _nw_=include$20[8],
     _nx_=include$20[9],
     _ny_=include$20[10],
     _nA_=include$20[12],
     _nB_=include$20[13],
     _nC_=include$20[14],
     _nD_=include$20[15],
     _nE_=include$20[16],
     _nF_=include$20[17],
     _nG_=include$20[18],
     _nH_=include$20[19],
     _nI_=include$20[20],
     _nJ_=include$20[21],
     _nK_=include$20[22],
     _nL_=include$20[23],
     _nM_=include$20[24],
     _nP_=include$20[27],
     _nQ_=include$20[28],
     _nR_=include$20[29],
     _nS_=include$20[30],
     _nT_=include$20[31],
     _nU_=include$20[32],
     _nV_=include$20[33],
     _nW_=include$20[34];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$70);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _nX_(_bnm_)
     {var _bnn_=Extend(_bnm_),_bno_=_bnn_[26],_bnp_=_bno_[1],_bnq_=_bno_[2];
      return [0,
              _bnn_[28],
              _bnn_[29],
              _bnn_[32],
              _bnn_[31],
              _bnn_[27],
              _bnn_[30],
              _bnn_[33],
              _bnn_[34],
              [0,
               [0,
                _bnq_[6],
                _bnq_[7],
                _bnq_[8],
                _bnq_[9],
                _bnq_[10],
                _bnq_[11],
                _bnq_[12],
                _bnq_[13],
                _bnq_[4],
                _bnq_[2],
                _bnq_[3],
                _bnq_[5]],
               [0,
                _bnp_[8],
                _bnp_[9],
                _bnp_[10],
                _bnp_[11],
                _bnp_[12],
                _bnp_[13],
                _bnp_[14],
                _bnp_[15],
                _bnp_[4],
                _bnp_[2],
                _bnp_[3],
                _bnp_[7]]]]}
    var
     _nY_=_nO_[1],
     _nZ_=_nO_[2],
     Core_kernel_Info=
      [0,
       _np_,
       _nq_,
       _nr_,
       _ns_,
       _nt_,
       _nu_,
       _nv_,
       _nw_,
       _nx_,
       _ny_,
       _nz_,
       _nA_,
       _nB_,
       _nC_,
       _nD_,
       _nE_,
       _nF_,
       _nG_,
       _nH_,
       _nI_,
       _nJ_,
       _nK_,
       _nL_,
       _nM_,
       [0,_nN_[10],_nN_[12],_nN_[11]],
       _nQ_,
       _nR_,
       _nU_,
       _nT_,
       _nP_,
       _nS_,
       _nV_,
       _nW_,
       [0,
        [0,
         _nZ_[6],
         _nZ_[7],
         _nZ_[8],
         _nZ_[9],
         _nZ_[10],
         _nZ_[11],
         _nZ_[12],
         _nZ_[13],
         _nZ_[4],
         _nZ_[2],
         _nZ_[3],
         _nZ_[5]],
        [0,
         _nY_[8],
         _nY_[9],
         _nY_[10],
         _nY_[11],
         _nY_[12],
         _nY_[13],
         _nY_[14],
         _nY_[15],
         _nY_[4],
         _nY_[2],
         _nY_[3],
         _nY_[7]]],
       _nX_];
    caml_register_global(4306,Core_kernel_Info,"Core_kernel__Info");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$71);
    caml_call1(Expect_test_collector[4][1],cst_src_error_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$72,cst$23);
    var
     _n0_=Base_Error[1],
     _n2_=Base_Error[3],
     _n4_=Base_Error[5],
     _n5_=Base_Error[6],
     _n8_=Base_Error[9],
     _oc_=Base_Error[15],
     _of_=Base_Error[18],
     _oj_=Base_Error[22],
     _om_=Base_Error[26],
     _on_=Base_Error[27],
     _n1_=Base_Error[2],
     _n3_=Base_Error[4],
     _n6_=Base_Error[7],
     _n7_=Base_Error[8],
     _n9_=Base_Error[10],
     _n__=Base_Error[11],
     _n$_=Base_Error[12],
     _oa_=Base_Error[13],
     _ob_=Base_Error[14],
     _od_=Base_Error[16],
     _oe_=Base_Error[17],
     _og_=Base_Error[19],
     _oh_=Base_Error[20],
     _oi_=Base_Error[21],
     _ok_=Base_Error[23],
     _ol_=Base_Error[24],
     _oo_=Base_Error[28],
     _op_=Base_Error[29],
     include$21=
      _nX_
       ([0,
         Base_Error[1],
         Base_Error[2],
         Base_Error[3],
         Base_Error[4],
         Base_Error[5],
         Base_Error[6],
         Base_Error[7],
         Base_Error[8],
         Base_Error[9],
         Base_Error[10],
         Base_Error[11],
         Base_Error[12],
         Base_Error[13],
         Base_Error[14],
         Base_Error[15],
         Base_Error[16],
         Base_Error[17],
         Base_Error[18],
         Base_Error[19],
         Base_Error[20],
         Base_Error[21],
         Base_Error[22],
         Base_Error[23],
         Base_Error[24],
         Base_Error[25]]),
     _oq_=include$21[1],
     _or_=include$21[2],
     _os_=include$21[3],
     _ou_=include$21[5],
     _oy_=include$21[9],
     _ot_=include$21[4],
     _ov_=include$21[6],
     _ow_=include$21[7],
     _ox_=include$21[8];
    function failwiths(strict,here,message,a,sexp_of_a)
     {return caml_call1(_om_,caml_call5(_oc_,here,strict,message,a,sexp_of_a))}
    function failwithp(strict,here,message,a,sexp_of_a)
     {return caml_call1
              (_om_,caml_call5(_oc_,[0,here],strict,message,a,sexp_of_a))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$73);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Error=
      [0,
       _n0_,
       _n1_,
       _n2_,
       _n3_,
       _n4_,
       _n5_,
       _n6_,
       _n7_,
       _n8_,
       _n9_,
       _n__,
       _n$_,
       _oa_,
       _ob_,
       _oc_,
       _od_,
       _oe_,
       _of_,
       _og_,
       _oh_,
       _oi_,
       _oj_,
       _ok_,
       _ol_,
       _om_,
       _on_,
       _oo_,
       _op_,
       _oq_,
       _or_,
       _os_,
       _ot_,
       _ou_,
       _ov_,
       _ow_,
       _ox_,
       _oy_,
       failwiths,
       failwithp];
    caml_register_global(4308,Core_kernel_Error,"Core_kernel__Error");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$74);
    caml_call1(Expect_test_collector[4][1],cst_src_t_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$75,cst$24);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$76);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_T=[0];
    caml_register_global(4309,Core_kernel_T,"Core_kernel__T");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$77);
    caml_call1(Expect_test_collector[4][1],cst_src_hashtbl_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$78,cst$25);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$79);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Hashtbl_intf=[0];
    caml_register_global
     (4310,Core_kernel_Hashtbl_intf,"Core_kernel__Hashtbl_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$80);
    caml_call1(Expect_test_collector[4][1],cst_src_hash_set_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$81,cst$26);
    var
     _oz_=include$22[1],
     _oA_=include$22[2],
     _oB_=include$22[3],
     _oC_=include$22[4],
     _oD_=include$22[5],
     _oE_=include$22[6],
     _oF_=include$22[7],
     _oG_=include$22[8],
     _oH_=include$22[9],
     _oI_=include$22[10],
     _oJ_=include$22[11],
     _oK_=include$22[12],
     _oL_=include$22[13],
     _oM_=include$22[14],
     _oN_=include$22[15],
     _oO_=include$22[16],
     _oP_=include$22[17],
     _oQ_=include$22[18],
     _oR_=include$22[19],
     _oS_=include$22[20],
     _oT_=include$22[21],
     _oU_=include$22[22],
     _oV_=include$22[23],
     _oW_=include$22[24],
     _oX_=include$22[25],
     _oY_=include$22[26],
     _oZ_=include$22[27],
     _o0_=include$22[28],
     _o1_=include$22[29],
     _o2_=include$22[30],
     _o3_=include$22[31],
     _o4_=include$22[32],
     _o5_=include$22[33],
     _o6_=include$22[34],
     _o7_=include$22[35],
     _o8_=include$22[36],
     _o9_=include$22[37],
     _o__=include$22[38],
     _o$_=include$22[39],
     _pa_=include$22[40],
     _pb_=include$22[41],
     _pc_=include$22[42],
     _pd_=include$22[43];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$82);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Hash_set_intf=
      [0,
       _oz_,
       _oA_,
       _oB_,
       _oC_,
       _oD_,
       _oE_,
       _oF_,
       _oG_,
       _oH_,
       _oI_,
       _oJ_,
       _oK_,
       _oL_,
       _oM_,
       _oN_,
       _oO_,
       _oP_,
       _oQ_,
       _oR_,
       _oS_,
       _oT_,
       _oU_,
       _oV_,
       _oW_,
       _oX_,
       _oY_,
       _oZ_,
       _o0_,
       _o1_,
       _o2_,
       _o3_,
       _o4_,
       _o5_,
       _o6_,
       _o7_,
       _o8_,
       _o9_,
       _o__,
       _o$_,
       _pa_,
       _pb_,
       _pc_,
       _pd_];
    caml_register_global
     (4312,Core_kernel_Hash_set_intf,"Core_kernel__Hash_set_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$83);
    caml_call1(Expect_test_collector[4][1],cst_src_list0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$84,cst$27);
    var
     compare_sexp_list=include$23[1],
     hash_fold_sexp_list=include$23[2],
     _pe_=include$23[3],
     _pf_=include$23[4],
     _pg_=include$23[5],
     length$1=include$23[6],
     is_empty$0=include$23[7],
     _ph_=include$23[8],
     _pi_=include$23[9],
     _pj_=include$23[10],
     _pk_=include$23[11],
     _pl_=include$23[12],
     _pm_=include$23[13],
     _pn_=include$23[14],
     _po_=include$23[15],
     _pp_=include$23[16],
     _pq_=include$23[17],
     _pr_=include$23[18],
     _ps_=include$23[19],
     _pt_=include$23[20],
     _pu_=include$23[21],
     _pv_=include$23[22],
     _px_=include$23[24],
     _py_=include$23[25],
     _pz_=include$23[26],
     _pA_=include$23[27],
     _pB_=include$23[28],
     _pC_=include$23[29],
     _pF_=include$23[32],
     _pG_=include$23[33],
     _pH_=include$23[34],
     parts=include$23[35],
     _pI_=include$23[36],
     _pJ_=include$23[37],
     _pK_=include$23[38],
     _pL_=include$23[39],
     _pM_=include$23[40],
     _pN_=include$23[41],
     _pO_=include$23[42],
     _pP_=include$23[43],
     _pQ_=include$23[44],
     _pR_=include$23[45],
     _pS_=include$23[46],
     _pT_=include$23[47],
     _pU_=include$23[48],
     _pV_=include$23[49],
     _pW_=include$23[50],
     _pX_=include$23[51],
     _pY_=include$23[52],
     _pZ_=include$23[53],
     _p0_=include$23[54],
     _p1_=include$23[55],
     _p2_=include$23[56],
     _p3_=include$23[57],
     _p4_=include$23[58],
     _p5_=include$23[59],
     _p6_=include$23[60],
     _p7_=include$23[61],
     _p8_=include$23[62],
     _p9_=include$23[63],
     _p__=include$23[64],
     _p$_=include$23[65],
     _qa_=include$23[66],
     _qb_=include$23[67],
     _qc_=include$23[68],
     _qd_=include$23[69],
     _qe_=include$23[70],
     _qf_=include$23[71],
     _qg_=include$23[72],
     _qh_=include$23[73],
     _qi_=include$23[74],
     _qj_=include$23[75],
     _qk_=include$23[76],
     _ql_=include$23[77],
     _qm_=include$23[78],
     _qn_=include$23[79],
     _qo_=include$23[80],
     _qp_=include$23[81],
     _qq_=include$23[82],
     _qr_=include$23[83],
     _qs_=include$23[84],
     _qt_=include$23[85],
     _qu_=include$23[86],
     _qv_=include$23[87],
     _qw_=include$23[88],
     _qx_=include$23[89],
     _qy_=include$23[90],
     _qz_=include$23[91],
     _qA_=include$23[92],
     _qB_=include$23[93],
     _qC_=include$23[94],
     _qD_=include$23[95],
     _qE_=include$23[96],
     _qF_=include$23[97],
     _qG_=include$23[98],
     _qH_=include$23[99],
     _qI_=include$23[100],
     _qJ_=include$23[101],
     _qK_=include$23[102],
     _qL_=include$23[103],
     _qM_=include$23[104],
     _qN_=include$23[105],
     _qO_=include$23[106],
     _qP_=include$23[107],
     _qQ_=include$23[108],
     _qR_=include$23[109],
     _qS_=include$23[110],
     _qT_=include$23[111],
     _qU_=include$23[112],
     _qV_=include$23[113],
     _qW_=include$23[114],
     _qX_=include$23[115],
     _qY_=include$23[116],
     _qZ_=include$23[117],
     _q0_=include$23[118],
     _q1_=include$23[119],
     _q2_=include$23[120],
     _q3_=include$23[121],
     _q4_=include$23[122],
     _q5_=include$23[123],
     _q6_=include$23[124],
     _q7_=include$23[125],
     _q8_=include$23[126],
     _q9_=include$23[127],
     _q__=include$23[128],
     _q$_=include$23[129],
     _ra_=include$23[130],
     _rb_=include$23[131],
     _rc_=include$23[132],
     _rd_=include$23[133],
     _re_=include$23[134],
     _rf_=include$23[135],
     _rg_=include$23[136],
     _rh_=include$23[137],
     _ri_=include$23[138],
     _rj_=include$23[139],
     _rk_=include$23[140],
     _rm_=include$23[142],
     _rn_=include$23[143],
     _ro_=include$23[144],
     _pw_=include$23[23],
     _pD_=include$23[30],
     _pE_=include$23[31],
     _rl_=include$23[141],
     _rp_=caml_call1(Bin_prot_Shape[3][1],cst_a$22),
     _rq_=caml_call1(Bin_prot_Shape[4][1],cst_src_list0_ml_6_12),
     _rr_=caml_call1(_dq_,caml_call2(Bin_prot_Shape[15],_rq_,_rp_)),
     _rs_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$23),0],
     _rt_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$71),_rs_,_rr_],0],
     _ru_=caml_call1(Bin_prot_Shape[4][1],cst_src_list0_ml_6_0),
     group$30=caml_call2(Bin_prot_Shape[6],_ru_,_rt_);
    function bin_shape_t$24(a)
     {var _bnl_=caml_call1(Bin_prot_Shape[2][1],cst_t$72);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$30,_bnl_),[0,a,0])}
    function bin_size_t$26(size_of_a,v){return caml_call2(_bz_,size_of_a,v)}
    function bin_write_t$26(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_ds_,write_a),buf,pos,v)}
    function bin_writer_t$18(bin_writer_a)
     {function _bnh_(v)
       {var _bni_=bin_writer_a[2];
        return function(_bnj_,_bnk_)
         {return bin_write_t$26(_bni_,v,_bnj_,_bnk_)}}
      return [0,function(v){return bin_size_t$26(bin_writer_a[1],v)},_bnh_]}
    function bin_read_t$54(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dv_,of_a),buf,pos_ref,vint)}
    function bin_read_t$55(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_du_,of_a),buf,pos_ref)}
    function bin_reader_t$18(bin_reader_a)
     {function _bng_(buf,pos_ref,vtag)
       {return bin_read_t$54(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$55(bin_reader_a[1],buf,pos_ref)},
              _bng_]}
    function bin_t$18(bin_a)
     {var _bne_=bin_reader_t$18(bin_a[3]),_bnf_=bin_writer_t$18(bin_a[2]);
      return [0,bin_shape_t$24(bin_a[1]),_bnf_,_bne_]}
    var
     Typename_of_t$1=caml_call1(Typerep_lib_Make_typename[2],[0,name$10]),
     _rv_=Typename_of_t$1[2];
    function typerep_of_t$1(of_a)
     {var name_of_t=caml_call1(Typename_of_t$1[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_bnd_){return caml_call1(Typerep_lib_Std[15],of_a)}]]]]}
    var
     _rw_=_q4_[1],
     _rx_=_q4_[2],
     _ry_=_q4_[3],
     _rz_=_q4_[4],
     _rA_=_q4_[5],
     _rB_=_q4_[6],
     _rC_=_q4_[7],
     _rD_=_q4_[8],
     _rE_=_q4_[9],
     _rF_=caml_call1(Bin_prot_Shape[3][1],cst_b$4),
     _rG_=caml_call1(Bin_prot_Shape[4][1],cst_src_list0_ml_11_26),
     _rH_=[0,caml_call2(Bin_prot_Shape[15],_rG_,_rF_),0],
     _rI_=caml_call1(Bin_prot_Shape[3][1],cst_a$24),
     _rJ_=caml_call1(Bin_prot_Shape[4][1],cst_src_list0_ml_11_21),
     _rK_=[0,caml_call2(Bin_prot_Shape[15],_rJ_,_rI_),_rH_],
     _rL_=caml_call1(_dq_,caml_call1(Bin_prot_Shape[7],_rK_)),
     _rM_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$5),0],
     _rN_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$25),_rM_],
     _rO_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$73),_rN_,_rL_],0],
     _rP_=caml_call1(Bin_prot_Shape[4][1],cst_src_list0_ml_11_2),
     group$31=caml_call2(Bin_prot_Shape[6],_rP_,_rO_);
    function bin_shape_t$25(a,b)
     {var _bnc_=caml_call1(Bin_prot_Shape[2][1],cst_t$74);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$31,_bnc_),[0,a,[0,b,0]])}
    function bin_size_t$27(size_of_a,size_of_b,v)
     {return caml_call2
              (_bz_,
               function(param)
                {var
                  v2=param[2],
                  v1=param[1],
                  _bna_=caml_call1(size_of_a,v1),
                  size=caml_call2(Bin_prot_Common[23],0,_bna_),
                  _bnb_=caml_call1(size_of_b,v2);
                 return caml_call2(Bin_prot_Common[23],size,_bnb_)},
               v)}
    function bin_write_t$27(write_a,write_b,buf,pos,v)
     {return caml_call3
              (caml_call1
                (_ds_,
                 function(buf,pos,param)
                  {var
                    v2=param[2],
                    v1=param[1],
                    pos$0=caml_call3(write_a,buf,pos,v1);
                   return caml_call3(write_b,buf,pos$0,v2)}),
               buf,
               pos,
               v)}
    function bin_writer_t$19(bin_writer_a,bin_writer_b)
     {function _bm7_(v)
       {var _bm8_=bin_writer_b[2],_bm9_=bin_writer_a[2];
        return function(_bm__,_bm$_)
         {return bin_write_t$27(_bm9_,_bm8_,v,_bm__,_bm$_)}}
      return [0,
              function(v)
               {return bin_size_t$27(bin_writer_a[1],bin_writer_b[1],v)},
              _bm7_]}
    function bin_read_t$56(of_a,of_b,buf,pos_ref,vint)
     {return caml_call3
              (caml_call1
                (_dv_,
                 function(buf,pos_ref)
                  {var
                    v1=caml_call2(of_a,buf,pos_ref),
                    v2=caml_call2(of_b,buf,pos_ref);
                   return [0,v1,v2]}),
               buf,
               pos_ref,
               vint)}
    function bin_read_t$57(of_a,of_b,buf,pos_ref)
     {return caml_call2
              (caml_call1
                (_du_,
                 function(buf,pos_ref)
                  {var
                    v1=caml_call2(of_a,buf,pos_ref),
                    v2=caml_call2(of_b,buf,pos_ref);
                   return [0,v1,v2]}),
               buf,
               pos_ref)}
    function bin_reader_t$19(bin_reader_a,bin_reader_b)
     {function _bm6_(buf,pos_ref,vtag)
       {return bin_read_t$56(bin_reader_a[1],bin_reader_b[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$57
                        (bin_reader_a[1],bin_reader_b[1],buf,pos_ref)},
              _bm6_]}
    function bin_t$19(bin_a,bin_b)
     {var
       _bm4_=bin_reader_t$19(bin_a[3],bin_b[3]),
       _bm5_=bin_writer_t$19(bin_a[2],bin_b[2]);
      return [0,bin_shape_t$25(bin_a[1],bin_b[1]),_bm5_,_bm4_]}
    function compare$12(compare_a,compare_b,a_001,b_002)
     {return caml_call3
              (_N_,
               function(a_003,b_004)
                {var
                  t_006=a_003[2],
                  t_005=a_003[1],
                  t_008=b_004[2],
                  t_007=b_004[1],
                  n=caml_call2(compare_a,t_005,t_007);
                 return 0 === n?caml_call2(compare_b,t_006,t_008):n},
               a_001,
               b_002)}
    var
     Assoc=
      [0,
       _rw_,
       _rx_,
       _ry_,
       _rz_,
       _rA_,
       _rB_,
       _rC_,
       _rD_,
       _rE_,
       bin_shape_t$25,
       bin_size_t$27,
       bin_write_t$27,
       bin_writer_t$19,
       bin_read_t$56,
       bin_read_t$57,
       bin_reader_t$19,
       bin_t$19,
       compare$12];
    function to_string(f,t)
     {var
       _bm2_=caml_call2(_qg_,t,f),
       _bm3_=caml_call2(_pf_,function(x){return [0,x]},_bm2_);
      return caml_call1(include$18[51],_bm3_)}
    var
     include$24=caml_call1(Derived,[0,compare_sexp_list,_pf_]),
     _rQ_=include$24[1],
     _rR_=Base_quickcheck_Generator[13],
     _rS_=Base_quickcheck_Generator[103];
    function gen_with_length(length,quickcheck_generator)
     {return caml_call2
              (Base_quickcheck_Generator[104],quickcheck_generator,length)}
    var
     _rT_=Base_quickcheck_Generator[105],
     _rU_=Base_quickcheck_Generator[106],
     _rV_=Base_quickcheck_Observer[14],
     _rW_=Base_quickcheck_Shrinker[14];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$85);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$25=
      [0,
       compare_sexp_list,
       hash_fold_sexp_list,
       _pe_,
       _pf_,
       _pg_,
       length$1,
       is_empty$0,
       _ph_,
       _pi_,
       _pj_,
       _pk_,
       _pl_,
       _pm_,
       _pn_,
       _po_,
       _pp_,
       _pq_,
       _pr_,
       _ps_,
       _pt_,
       _pu_,
       _pv_,
       _pw_,
       _px_,
       _py_,
       _pz_,
       _pA_,
       _pB_,
       _pC_,
       _pD_,
       _pE_,
       _pF_,
       _pG_,
       _pH_,
       parts,
       _pI_,
       _pJ_,
       _pK_,
       _pL_,
       _pM_,
       _pN_,
       _pO_,
       _pP_,
       _pQ_,
       _pR_,
       _pS_,
       _pT_,
       _pU_,
       _pV_,
       _pW_,
       _pX_,
       _pY_,
       _pZ_,
       _p0_,
       _p1_,
       _p2_,
       _p3_,
       _p4_,
       _p5_,
       _p6_,
       _p7_,
       _p8_,
       _p9_,
       _p__,
       _p$_,
       _qa_,
       _qb_,
       _qc_,
       _qd_,
       _qe_,
       _qf_,
       _qg_,
       _qh_,
       _qi_,
       _qj_,
       _qk_,
       _ql_,
       _qm_,
       _qn_,
       _qo_,
       _qp_,
       _qq_,
       _qr_,
       _qs_,
       _qt_,
       _qu_,
       _qv_,
       _qw_,
       _qx_,
       _qy_,
       _qz_,
       _qA_,
       _qB_,
       _qC_,
       _qD_,
       _qE_,
       _qF_,
       _qG_,
       _qH_,
       _qI_,
       _qJ_,
       _qK_,
       _qL_,
       _qM_,
       _qN_,
       _qO_,
       _qP_,
       _qQ_,
       _qR_,
       _qS_,
       _qT_,
       _qU_,
       _qV_,
       _qW_,
       _qX_,
       _qY_,
       _qZ_,
       _q0_,
       _q1_,
       _q2_,
       _q3_,
       _q5_,
       _q6_,
       _q7_,
       _q8_,
       _q9_,
       _q__,
       _q$_,
       _ra_,
       _rb_,
       _rc_,
       _rd_,
       _re_,
       _rf_,
       _rg_,
       _rh_,
       _ri_,
       _rj_,
       _rk_,
       _rl_,
       _rm_,
       _rn_,
       _ro_,
       bin_shape_t$24,
       bin_size_t$26,
       bin_write_t$26,
       bin_writer_t$18,
       bin_read_t$54,
       bin_read_t$55,
       bin_reader_t$18,
       bin_t$18,
       Typename_of_t$1,
       _rv_,
       typerep_of_t$1,
       Assoc,
       to_string,
       _rQ_,
       _rR_,
       _rS_,
       gen_with_length,
       _rT_,
       _rU_,
       _rV_,
       _rW_];
    caml_register_global(4314,include$25,"Core_kernel__List0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$86);
    caml_call1(Expect_test_collector[4][1],cst_src_hashtbl_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$87,cst$28);
    var
     invariant$1=Base_Hashtbl[78],
     hashable_s=Base_Hashtbl[77],
     find_multi=Base_Hashtbl[76],
     remove_multi=Base_Hashtbl[75],
     add_multi=Base_Hashtbl[74],
     decr=Base_Hashtbl[73],
     incr=Base_Hashtbl[72],
     validate=Base_Hashtbl[71],
     to_alist=Base_Hashtbl[70],
     similar=Base_Hashtbl[69],
     equal$3=Base_Hashtbl[68],
     filter_mapi_inplace=Base_Hashtbl[67],
     filter_map_inplace=Base_Hashtbl[66],
     mapi_inplace=Base_Hashtbl[65],
     map_inplace$0=Base_Hashtbl[64],
     filteri_inplace=Base_Hashtbl[63],
     filter_inplace=Base_Hashtbl[62],
     filter_keys_inplace=Base_Hashtbl[61],
     data=Base_Hashtbl[60],
     keys=Base_Hashtbl[59],
     merge_into=Base_Hashtbl[58],
     merge=Base_Hashtbl[57],
     find_and_remove=Base_Hashtbl[56],
     findi_and_call=Base_Hashtbl[55],
     find_and_call=Base_Hashtbl[54],
     find_exn$0=Base_Hashtbl[53],
     find$0=Base_Hashtbl[52],
     findi_or_add=Base_Hashtbl[51],
     find_or_add=Base_Hashtbl[50],
     partitioni_tf$0=Base_Hashtbl[49],
     partition_tf$0=Base_Hashtbl[48],
     partition_mapi=Base_Hashtbl[47],
     partition_map=Base_Hashtbl[46],
     filteri$0=Base_Hashtbl[45],
     filter$0=Base_Hashtbl[44],
     filter_keys=Base_Hashtbl[43],
     filter_mapi$0=Base_Hashtbl[42],
     filter_map$0=Base_Hashtbl[41],
     mapi$0=Base_Hashtbl[40],
     map$3=Base_Hashtbl[39],
     update=Base_Hashtbl[38],
     change=Base_Hashtbl[37],
     add_exn=Base_Hashtbl[36],
     add=Base_Hashtbl[35],
     set$0=Base_Hashtbl[34],
     choose_exn=Base_Hashtbl[33],
     choose=Base_Hashtbl[32],
     remove=Base_Hashtbl[31],
     mem$0=Base_Hashtbl[30],
     is_empty$1=Base_Hashtbl[29],
     length$2=Base_Hashtbl[28],
     count$0=Base_Hashtbl[27],
     counti$0=Base_Hashtbl[26],
     for_all$0=Base_Hashtbl[25],
     for_alli$0=Base_Hashtbl[24],
     exists$0=Base_Hashtbl[23],
     existsi$0=Base_Hashtbl[22],
     iteri$0=Base_Hashtbl[21],
     iter$1=Base_Hashtbl[20],
     iter_keys=Base_Hashtbl[19],
     fold$0=Base_Hashtbl[18],
     copy$0=Base_Hashtbl[17],
     clear=Base_Hashtbl[16],
     sexp_of_key=Base_Hashtbl[15],
     _rX_=Base_Hashtbl[14],
     _rY_=Base_Hashtbl[13],
     _rZ_=Base_Hashtbl[12],
     _r0_=Base_Hashtbl[11],
     _r1_=Base_Hashtbl[10],
     _r2_=Base_Hashtbl[9],
     _r3_=Base_Hashtbl[8],
     _r4_=Base_Hashtbl[7],
     _r5_=Base_Hashtbl[6],
     _r6_=Base_Hashtbl[5],
     _r7_=Base_Hashtbl[4],
     sexp_of_t$17=Base_Hashtbl[3],
     hash_param=Base_Hashtbl[2],
     hash$7=Base_Hashtbl[1];
    function create$2(growth_allowed,size,hashable,param)
     {return caml_call3
              (_r7_,growth_allowed,size,caml_call1(Base_Hashable[4],hashable))}
    function of_alist(growth_allowed,size,hashable,l)
     {return caml_call4
              (_r6_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_report_all_dups(growth_allowed,size,hashable,l)
     {return caml_call4
              (_r5_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_or_error(growth_allowed,size,hashable,l)
     {return caml_call4
              (_r4_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_exn(growth_allowed,size,hashable,l)
     {return caml_call4
              (_r3_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_multi(growth_allowed,size,hashable,l)
     {return caml_call4
              (_r2_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function create_mapped(growth_allowed,size,hashable,get_key,get_data,l)
     {return caml_call6
              (_r1_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               get_data,
               l)}
    function create_with_key(growth_allowed,size,hashable,get_key,l)
     {return caml_call5
              (_r0_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               l)}
    function create_with_key_or_error(growth_allowed,size,hashable,get_key,l)
     {return caml_call5
              (_rZ_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               l)}
    function create_with_key_exn(growth_allowed,size,hashable,get_key,l)
     {return caml_call5
              (_rY_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               l)}
    function group$32(growth_allowed,size,hashable,get_key,get_data,combine,l)
     {return caml_call7
              (_rX_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               get_data,
               combine,
               l)}
    var
     _r8_=Base_Hashtbl[80],
     _r__=_r8_[2],
     _sb_=_r8_[5],
     _ss_=_r8_[22],
     _sz_=_r8_[29],
     _sF_=_r8_[35],
     _sX_=_r8_[53],
     _r9_=_r8_[1],
     _r$_=_r8_[3],
     _sa_=_r8_[4],
     _sc_=_r8_[6],
     _sd_=_r8_[7],
     _se_=_r8_[8],
     _sf_=_r8_[9],
     _sg_=_r8_[10],
     _sh_=_r8_[11],
     _si_=_r8_[12],
     _sj_=_r8_[13],
     _sk_=_r8_[14],
     _sl_=_r8_[15],
     _sm_=_r8_[16],
     _sn_=_r8_[17],
     _so_=_r8_[18],
     _sp_=_r8_[19],
     _sq_=_r8_[20],
     _sr_=_r8_[21],
     _st_=_r8_[23],
     _su_=_r8_[24],
     _sv_=_r8_[25],
     _sw_=_r8_[26],
     _sx_=_r8_[27],
     _sy_=_r8_[28],
     _sA_=_r8_[30],
     _sB_=_r8_[31],
     _sC_=_r8_[32],
     _sD_=_r8_[33],
     _sE_=_r8_[34],
     _sG_=_r8_[36],
     _sH_=_r8_[37],
     _sI_=_r8_[38],
     _sJ_=_r8_[39],
     _sK_=_r8_[40],
     _sL_=_r8_[41],
     _sM_=_r8_[42],
     _sN_=_r8_[43],
     _sO_=_r8_[44],
     _sP_=_r8_[45],
     _sQ_=_r8_[46],
     _sR_=_r8_[47],
     _sS_=_r8_[48],
     _sT_=_r8_[49],
     _sU_=_r8_[50],
     _sV_=_r8_[51],
     _sW_=_r8_[52],
     _sY_=_r8_[54],
     _sZ_=_r8_[55],
     _s0_=_r8_[56],
     _s1_=_r8_[57],
     _s2_=_r8_[58],
     _s3_=_r8_[59],
     _s4_=_r8_[60],
     _s5_=_r8_[61],
     _s6_=_r8_[62],
     _s7_=_r8_[63],
     _s8_=_r8_[64],
     _s9_=_r8_[65],
     _s__=_r8_[66],
     _s$_=_r8_[67],
     _ta_=_r8_[68],
     _tb_=_r8_[69],
     _tc_=_r8_[70],
     _td_=_r8_[71],
     _te_=_r8_[72],
     _tf_=_r8_[73],
     _tg_=_r8_[74],
     _th_=_r8_[75],
     _ti_=_r8_[76],
     _tj_=_r8_[77],
     _tk_=caml_call1(Bin_prot_Shape[3][1],cst_b$6),
     _tl_=caml_call1(Bin_prot_Shape[4][1],cst_src_hashtbl_ml_101_30),
     _tm_=[0,caml_call2(Bin_prot_Shape[15],_tl_,_tk_),0],
     _tn_=caml_call1(Bin_prot_Shape[3][1],cst_a$26),
     _to_=caml_call1(Bin_prot_Shape[4][1],cst_src_hashtbl_ml_101_25),
     _tp_=[0,caml_call2(Bin_prot_Shape[15],_to_,_tn_),_tm_],
     _tq_=caml_call1(Bin_prot_Shape[7],_tp_),
     _tr_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$7),0],
     _ts_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$27),_tr_],
     _tt_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el),_ts_,_tq_],0],
     _tu_=caml_call1(Bin_prot_Shape[4][1],cst_src_hashtbl_ml_101_6),
     group$33=caml_call2(Bin_prot_Shape[6],_tu_,_tt_);
    function bin_shape_el(a,b)
     {var _bm1_=caml_call1(Bin_prot_Shape[2][1],cst_el$0);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$33,_bm1_),[0,a,[0,b,0]])}
    function bin_size_el(size_of_a,size_of_b,param)
     {var
       v2=param[2],
       v1=param[1],
       _bmZ_=caml_call1(size_of_a,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bmZ_),
       _bm0_=caml_call1(size_of_b,v2);
      return caml_call2(Bin_prot_Common[23],size,_bm0_)}
    function bin_write_el(write_a,write_b,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(write_a,buf,pos,v1);
      return caml_call3(write_b,buf,pos$0,v2)}
    function bin_read_el(of_a,of_b,buf,pos_ref)
     {var v1=caml_call2(of_a,buf,pos_ref),v2=caml_call2(of_b,buf,pos_ref);
      return [0,v1,v2]}
    var
     caller_identity=
      caml_call1
       (Bin_prot_Shape[5][1],cst_8f3e445c_4992_11e6_a279_3703be311e7b);
    function iter$2(t,f)
     {return caml_call2
              (_ss_,t,function(key,data){return caml_call1(f,[0,key,data])})}
    function init$0(len,next)
     {var t=caml_call3(_sb_,0,[0,len],0),_bmX_=caml_call2(_ax_,len,1),_bmW_=0;
      if(! (_bmX_ < 0))
       {var i=_bmW_;
        for(;;)
         {var
           match=caml_call1(next,0),
           data=match[2],
           key=match[1],
           match$0=caml_call2(_sX_,t,key);
          if(match$0)
           caml_call1(_a__,cst_Core_hashtbl_bin_read_t_duplicate_key);
          else
           caml_call3(_sF_,t,key,data);
          var _bmY_=i + 1 | 0;
          if(_bmX_ !== i){var i=_bmY_;continue}
          break}}
      return t}
    var
     include$26=
      caml_call1
       (Bin_prot_Utils[13],
        [0,
         caller_identity,
         module_name,
         _sz_,
         iter$2,
         init$0,
         bin_size_el,
         bin_write_el,
         bin_read_el,
         bin_shape_el]),
     bin_shape_t$26=include$26[1],
     bin_size_t$28=include$26[2],
     bin_write_t$28=include$26[3],
     bin_read_t$58=include$26[4],
     bin_read_t$59=include$26[5],
     bin_writer_t$20=include$26[6],
     bin_reader_t$20=include$26[7],
     bin_t$20=include$26[8];
    function Make_plain(Key)
     {var
       hashable=[0,Key[3],Key[1],Key[2]],
       _bmG_=caml_call1(Base_Hashtbl[79],[0,hashable]),
       t_of_sexp=_bmG_[1],
       create=_bmG_[2],
       of_alist=_bmG_[3],
       of_alist_report_all_dups=_bmG_[4],
       of_alist_or_error=_bmG_[5],
       of_alist_exn=_bmG_[6],
       of_alist_multi=_bmG_[7],
       create_mapped=_bmG_[8],
       create_with_key=_bmG_[9],
       create_with_key_or_error=_bmG_[10],
       create_with_key_exn=_bmG_[11],
       group=_bmG_[12],
       find_multi=Base_Hashtbl[76],
       remove_multi=Base_Hashtbl[75],
       add_multi=Base_Hashtbl[74],
       decr=Base_Hashtbl[73],
       incr=Base_Hashtbl[72],
       validate=Base_Hashtbl[71],
       to_alist=Base_Hashtbl[70],
       similar=Base_Hashtbl[69],
       equal=Base_Hashtbl[68],
       filter_mapi_inplace=Base_Hashtbl[67],
       filter_map_inplace=Base_Hashtbl[66],
       mapi_inplace=Base_Hashtbl[65],
       map_inplace=Base_Hashtbl[64],
       filteri_inplace=Base_Hashtbl[63],
       filter_inplace=Base_Hashtbl[62],
       filter_keys_inplace=Base_Hashtbl[61],
       data=Base_Hashtbl[60],
       keys=Base_Hashtbl[59],
       merge_into=Base_Hashtbl[58],
       merge=Base_Hashtbl[57],
       find_and_remove=Base_Hashtbl[56],
       findi_and_call=Base_Hashtbl[55],
       find_and_call=Base_Hashtbl[54],
       find_exn=Base_Hashtbl[53],
       find=Base_Hashtbl[52],
       findi_or_add=Base_Hashtbl[51],
       find_or_add=Base_Hashtbl[50],
       partitioni_tf=Base_Hashtbl[49],
       partition_tf=Base_Hashtbl[48],
       partition_mapi=Base_Hashtbl[47],
       partition_map=Base_Hashtbl[46],
       filteri=Base_Hashtbl[45],
       filter=Base_Hashtbl[44],
       filter_keys=Base_Hashtbl[43],
       filter_mapi=Base_Hashtbl[42],
       filter_map=Base_Hashtbl[41],
       mapi=Base_Hashtbl[40],
       map=Base_Hashtbl[39],
       update=Base_Hashtbl[38],
       change=Base_Hashtbl[37],
       add_exn=Base_Hashtbl[36],
       add=Base_Hashtbl[35],
       set=Base_Hashtbl[34],
       choose_exn=Base_Hashtbl[33],
       choose=Base_Hashtbl[32],
       remove=Base_Hashtbl[31],
       mem=Base_Hashtbl[30],
       is_empty=Base_Hashtbl[29],
       length=Base_Hashtbl[28],
       count=Base_Hashtbl[27],
       counti=Base_Hashtbl[26],
       for_all=Base_Hashtbl[25],
       for_alli=Base_Hashtbl[24],
       exists=Base_Hashtbl[23],
       existsi=Base_Hashtbl[22],
       iteri=Base_Hashtbl[21],
       iter=Base_Hashtbl[20],
       iter_keys=Base_Hashtbl[19],
       fold=Base_Hashtbl[18],
       copy=Base_Hashtbl[17],
       clear=Base_Hashtbl[16],
       sexp_of_key=Base_Hashtbl[15],
       _bmH_=Base_Hashtbl[78];
      function invariant(invariant_key,t)
       {return caml_call3(_bmH_,function(_bmV_){return 0},invariant_key,t)}
      function sexp_of_t(sexp_of_v,t)
       {return caml_call3(_r__,Key[2],sexp_of_v,t)}
      function Provide_of_sexp(Key)
       {function t_of_sexp$0(v_of_sexp,sexp)
         {return caml_call3(t_of_sexp,Key[1],v_of_sexp,sexp)}
        return [0,t_of_sexp$0]}
      function Provide_bin_io(Key$0)
       {var
         sexp_of_t=Key[2],
         bin_size_t=Key$0[1],
         bin_write_t=Key$0[2],
         bin_read_t=Key$0[3],
         bin_shape_t=Key$0[5],
         _bmI_=caml_call1(Bin_prot_Shape[3][1],cst_a$28),
         _bmJ_=caml_call1(Bin_prot_Shape[4][1],cst_src_hashtbl_ml_179_27),
         _bmK_=
          [0,bin_shape_t,[0,caml_call2(Bin_prot_Shape[15],_bmJ_,_bmI_),0]],
         _bmL_=caml_call1(Bin_prot_Shape[7],_bmK_),
         _bmM_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$29),0],
         _bmN_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$1),_bmM_,_bmL_],0],
         _bmO_=caml_call1(Bin_prot_Shape[4][1],cst_src_hashtbl_ml_179_6),
         group=caml_call2(Bin_prot_Shape[6],_bmO_,_bmN_);
        function bin_shape_el(a)
         {var _bmU_=caml_call1(Bin_prot_Shape[2][1],cst_el$2);
          return caml_call1
                  (caml_call2(Bin_prot_Shape[14],group,_bmU_),[0,a,0])}
        function bin_size_el(size_of_a,param)
         {var
           v2=param[2],
           v1=param[1],
           _bmS_=caml_call1(bin_size_t,v1),
           size=caml_call2(Bin_prot_Common[23],0,_bmS_),
           _bmT_=caml_call1(size_of_a,v2);
          return caml_call2(Bin_prot_Common[23],size,_bmT_)}
        function bin_write_el(write_a,buf,pos,param)
         {var
           v2=param[2],
           v1=param[1],
           pos$0=caml_call3(bin_write_t,buf,pos,v1);
          return caml_call3(write_a,buf,pos$0,v2)}
        function bin_read_el(of_a,buf,pos_ref)
         {var
           v1=caml_call2(bin_read_t,buf,pos_ref),
           v2=caml_call2(of_a,buf,pos_ref);
          return [0,v1,v2]}
        var
         caller_identity=
          caml_call1
           (Bin_prot_Shape[5][1],cst_8fabab0a_4992_11e6_8cca_9ba2c4686d9e);
        function iter(t,f)
         {return caml_call2
                  (iteri,
                   t,
                   function(key,data){return caml_call1(f,[0,key,data])})}
        function init(len,next)
         {var
           t=caml_call3(create,0,[0,len],0),
           _bmQ_=caml_call2(_ax_,len,1),
           _bmP_=0;
          if(! (_bmQ_ < 0))
           {var i=_bmP_;
            for(;;)
             {var
               match=caml_call1(next,0),
               data=match[2],
               key=match[1],
               match$0=caml_call2(find,t,key);
              if(match$0)
               failwiths
                (0,_tv_,cst_Hashtbl_bin_read_t_duplicate_key,key,sexp_of_t);
              else
               caml_call3(set,t,key,data);
              var _bmR_=i + 1 | 0;
              if(_bmQ_ !== i){var i=_bmR_;continue}
              break}}
          return t}
        return caml_call1
                (Bin_prot_Utils[12],
                 [0,
                  caller_identity,
                  module_name$0,
                  length,
                  iter,
                  init,
                  bin_size_el,
                  bin_write_el,
                  bin_read_el,
                  bin_shape_el])}
      return [0,
              hashable,
              t_of_sexp,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              choose,
              choose_exn,
              set,
              add,
              add_exn,
              change,
              update,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              findi_and_call,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              validate,
              incr,
              decr,
              add_multi,
              remove_multi,
              find_multi,
              invariant,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io]}
    function Make$0(Key)
     {var
       _bmF_=Make_plain([0,Key[2],Key[3],Key[4]]),
       hashable=_bmF_[1],
       create=_bmF_[3],
       of_alist=_bmF_[4],
       of_alist_report_all_dups=_bmF_[5],
       of_alist_or_error=_bmF_[6],
       of_alist_exn=_bmF_[7],
       of_alist_multi=_bmF_[8],
       create_mapped=_bmF_[9],
       create_with_key=_bmF_[10],
       create_with_key_or_error=_bmF_[11],
       create_with_key_exn=_bmF_[12],
       group=_bmF_[13],
       sexp_of_key=_bmF_[14],
       clear=_bmF_[15],
       copy=_bmF_[16],
       fold=_bmF_[17],
       iter_keys=_bmF_[18],
       iter=_bmF_[19],
       iteri=_bmF_[20],
       existsi=_bmF_[21],
       exists=_bmF_[22],
       for_alli=_bmF_[23],
       for_all=_bmF_[24],
       counti=_bmF_[25],
       count=_bmF_[26],
       length=_bmF_[27],
       is_empty=_bmF_[28],
       mem=_bmF_[29],
       remove=_bmF_[30],
       choose=_bmF_[31],
       choose_exn=_bmF_[32],
       set=_bmF_[33],
       add=_bmF_[34],
       add_exn=_bmF_[35],
       change=_bmF_[36],
       update=_bmF_[37],
       map=_bmF_[38],
       mapi=_bmF_[39],
       filter_map=_bmF_[40],
       filter_mapi=_bmF_[41],
       filter_keys=_bmF_[42],
       filter=_bmF_[43],
       filteri=_bmF_[44],
       partition_map=_bmF_[45],
       partition_mapi=_bmF_[46],
       partition_tf=_bmF_[47],
       partitioni_tf=_bmF_[48],
       find_or_add=_bmF_[49],
       findi_or_add=_bmF_[50],
       find=_bmF_[51],
       find_exn=_bmF_[52],
       find_and_call=_bmF_[53],
       findi_and_call=_bmF_[54],
       find_and_remove=_bmF_[55],
       merge=_bmF_[56],
       merge_into=_bmF_[57],
       keys=_bmF_[58],
       data=_bmF_[59],
       filter_keys_inplace=_bmF_[60],
       filter_inplace=_bmF_[61],
       filteri_inplace=_bmF_[62],
       map_inplace=_bmF_[63],
       mapi_inplace=_bmF_[64],
       filter_map_inplace=_bmF_[65],
       filter_mapi_inplace=_bmF_[66],
       equal=_bmF_[67],
       similar=_bmF_[68],
       to_alist=_bmF_[69],
       validate=_bmF_[70],
       incr=_bmF_[71],
       decr=_bmF_[72],
       add_multi=_bmF_[73],
       remove_multi=_bmF_[74],
       find_multi=_bmF_[75],
       invariant=_bmF_[76],
       sexp_of_t=_bmF_[77],
       Provide_of_sexp=_bmF_[78],
       Provide_bin_io=_bmF_[79],
       include=caml_call1(Provide_of_sexp,[0,Key[1]]),
       t_of_sexp=include[1];
      return [0,
              hashable,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              choose,
              choose_exn,
              set,
              add,
              add_exn,
              change,
              update,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              findi_and_call,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              validate,
              incr,
              decr,
              add_multi,
              remove_multi,
              find_multi,
              invariant,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp]}
    var _tw_=Base_Hashtbl[83],_tx_=Base_Hashtbl[82],_ty_=Base_Hashtbl[84][1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$88);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var _tz_=Base_Hashtbl[81];
    function _tA_(Key)
     {var
       _bmE_=Make$0([0,Key[9],Key[10],Key[11],Key[12]]),
       hashable=_bmE_[1],
       create=_bmE_[2],
       of_alist=_bmE_[3],
       of_alist_report_all_dups=_bmE_[4],
       of_alist_or_error=_bmE_[5],
       of_alist_exn=_bmE_[6],
       of_alist_multi=_bmE_[7],
       create_mapped=_bmE_[8],
       create_with_key=_bmE_[9],
       create_with_key_or_error=_bmE_[10],
       create_with_key_exn=_bmE_[11],
       group=_bmE_[12],
       sexp_of_key=_bmE_[13],
       clear=_bmE_[14],
       copy=_bmE_[15],
       fold=_bmE_[16],
       iter_keys=_bmE_[17],
       iter=_bmE_[18],
       iteri=_bmE_[19],
       existsi=_bmE_[20],
       exists=_bmE_[21],
       for_alli=_bmE_[22],
       for_all=_bmE_[23],
       counti=_bmE_[24],
       count=_bmE_[25],
       length=_bmE_[26],
       is_empty=_bmE_[27],
       mem=_bmE_[28],
       remove=_bmE_[29],
       choose=_bmE_[30],
       choose_exn=_bmE_[31],
       set=_bmE_[32],
       add=_bmE_[33],
       add_exn=_bmE_[34],
       change=_bmE_[35],
       update=_bmE_[36],
       map=_bmE_[37],
       mapi=_bmE_[38],
       filter_map=_bmE_[39],
       filter_mapi=_bmE_[40],
       filter_keys=_bmE_[41],
       filter=_bmE_[42],
       filteri=_bmE_[43],
       partition_map=_bmE_[44],
       partition_mapi=_bmE_[45],
       partition_tf=_bmE_[46],
       partitioni_tf=_bmE_[47],
       find_or_add=_bmE_[48],
       findi_or_add=_bmE_[49],
       find=_bmE_[50],
       find_exn=_bmE_[51],
       find_and_call=_bmE_[52],
       findi_and_call=_bmE_[53],
       find_and_remove=_bmE_[54],
       merge=_bmE_[55],
       merge_into=_bmE_[56],
       keys=_bmE_[57],
       data=_bmE_[58],
       filter_keys_inplace=_bmE_[59],
       filter_inplace=_bmE_[60],
       filteri_inplace=_bmE_[61],
       map_inplace=_bmE_[62],
       mapi_inplace=_bmE_[63],
       filter_map_inplace=_bmE_[64],
       filter_mapi_inplace=_bmE_[65],
       equal=_bmE_[66],
       similar=_bmE_[67],
       to_alist=_bmE_[68],
       validate=_bmE_[69],
       incr=_bmE_[70],
       decr=_bmE_[71],
       add_multi=_bmE_[72],
       remove_multi=_bmE_[73],
       find_multi=_bmE_[74],
       invariant=_bmE_[75],
       sexp_of_t=_bmE_[76],
       Provide_of_sexp=_bmE_[77],
       Provide_bin_io=_bmE_[78],
       t_of_sexp=_bmE_[79],
       include=
        caml_call1
         (Provide_bin_io,
          [0,Key[1],Key[2],Key[3],Key[4],Key[5],Key[6],Key[7],Key[8]]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              sexp_of_t,
              hashable,
              invariant,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              choose,
              choose_exn,
              set,
              add,
              add_exn,
              change,
              update,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              findi_and_call,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              validate,
              incr,
              decr,
              add_multi,
              remove_multi,
              find_multi,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _tB_(_bmC_)
     {var _bmD_=Make$0(_bmC_);
      return [0,
              _bmD_[76],
              _bmD_[1],
              _bmD_[75],
              _bmD_[2],
              _bmD_[3],
              _bmD_[4],
              _bmD_[5],
              _bmD_[6],
              _bmD_[7],
              _bmD_[8],
              _bmD_[9],
              _bmD_[10],
              _bmD_[11],
              _bmD_[12],
              _bmD_[13],
              _bmD_[14],
              _bmD_[15],
              _bmD_[16],
              _bmD_[17],
              _bmD_[18],
              _bmD_[19],
              _bmD_[20],
              _bmD_[21],
              _bmD_[22],
              _bmD_[23],
              _bmD_[24],
              _bmD_[25],
              _bmD_[26],
              _bmD_[27],
              _bmD_[28],
              _bmD_[29],
              _bmD_[30],
              _bmD_[31],
              _bmD_[32],
              _bmD_[33],
              _bmD_[34],
              _bmD_[35],
              _bmD_[36],
              _bmD_[37],
              _bmD_[38],
              _bmD_[39],
              _bmD_[40],
              _bmD_[41],
              _bmD_[42],
              _bmD_[43],
              _bmD_[44],
              _bmD_[45],
              _bmD_[46],
              _bmD_[47],
              _bmD_[48],
              _bmD_[49],
              _bmD_[50],
              _bmD_[51],
              _bmD_[52],
              _bmD_[53],
              _bmD_[54],
              _bmD_[55],
              _bmD_[56],
              _bmD_[57],
              _bmD_[58],
              _bmD_[59],
              _bmD_[60],
              _bmD_[61],
              _bmD_[62],
              _bmD_[63],
              _bmD_[64],
              _bmD_[65],
              _bmD_[66],
              _bmD_[67],
              _bmD_[68],
              _bmD_[69],
              _bmD_[70],
              _bmD_[71],
              _bmD_[72],
              _bmD_[73],
              _bmD_[74],
              _bmD_[77],
              _bmD_[78],
              _bmD_[79]]}
    var
     Core_kernel_Hashtbl=
      [0,
       hash$7,
       hash_param,
       sexp_of_t$17,
       _r7_,
       _r6_,
       _r5_,
       _r4_,
       _r3_,
       _r2_,
       _r1_,
       _r0_,
       _rZ_,
       _rY_,
       _rX_,
       sexp_of_key,
       clear,
       copy$0,
       fold$0,
       iter_keys,
       iter$1,
       iteri$0,
       existsi$0,
       exists$0,
       for_alli$0,
       for_all$0,
       counti$0,
       count$0,
       length$2,
       is_empty$1,
       mem$0,
       remove,
       choose,
       choose_exn,
       set$0,
       add,
       add_exn,
       change,
       update,
       map$3,
       mapi$0,
       filter_map$0,
       filter_mapi$0,
       filter_keys,
       filter$0,
       filteri$0,
       partition_map,
       partition_mapi,
       partition_tf$0,
       partitioni_tf$0,
       find_or_add,
       findi_or_add,
       find$0,
       find_exn$0,
       find_and_call,
       findi_and_call,
       find_and_remove,
       merge,
       merge_into,
       keys,
       data,
       filter_keys_inplace,
       filter_inplace,
       filteri_inplace,
       map_inplace$0,
       mapi_inplace,
       filter_map_inplace,
       filter_mapi_inplace,
       equal$3,
       similar,
       to_alist,
       validate,
       incr,
       decr,
       add_multi,
       remove_multi,
       find_multi,
       hashable_s,
       invariant$1,
       [0,
        create$2,
        of_alist,
        of_alist_report_all_dups,
        of_alist_or_error,
        of_alist_exn,
        of_alist_multi,
        create_mapped,
        create_with_key,
        create_with_key_or_error,
        create_with_key_exn,
        group$32],
       [0,
        bin_shape_t$26,
        bin_size_t$28,
        bin_write_t$28,
        bin_read_t$58,
        bin_read_t$59,
        bin_writer_t$20,
        bin_reader_t$20,
        bin_t$20,
        _r9_,
        _r__,
        _r$_,
        _sa_,
        _sb_,
        _sc_,
        _sd_,
        _se_,
        _sf_,
        _sg_,
        _sh_,
        _si_,
        _sj_,
        _sk_,
        _sl_,
        _sm_,
        _sn_,
        _so_,
        _sp_,
        _sq_,
        _sr_,
        _ss_,
        _st_,
        _su_,
        _sv_,
        _sw_,
        _sx_,
        _sy_,
        _sz_,
        _sA_,
        _sB_,
        _sC_,
        _sD_,
        _sE_,
        _sF_,
        _sG_,
        _sH_,
        _sI_,
        _sJ_,
        _sK_,
        _sL_,
        _sM_,
        _sN_,
        _sO_,
        _sP_,
        _sQ_,
        _sR_,
        _sS_,
        _sT_,
        _sU_,
        _sV_,
        _sW_,
        _sX_,
        _sY_,
        _sZ_,
        _s0_,
        _s1_,
        _s2_,
        _s3_,
        _s4_,
        _s5_,
        _s6_,
        _s7_,
        _s8_,
        _s9_,
        _s__,
        _s$_,
        _ta_,
        _tb_,
        _tc_,
        _td_,
        _te_,
        _tf_,
        _tg_,
        _th_,
        _ti_,
        _tj_],
       function(_bmA_)
        {var _bmB_=Make_plain(_bmA_);
         return [0,
                 _bmB_[77],
                 _bmB_[1],
                 _bmB_[76],
                 _bmB_[3],
                 _bmB_[4],
                 _bmB_[5],
                 _bmB_[6],
                 _bmB_[7],
                 _bmB_[8],
                 _bmB_[9],
                 _bmB_[10],
                 _bmB_[11],
                 _bmB_[12],
                 _bmB_[13],
                 _bmB_[14],
                 _bmB_[15],
                 _bmB_[16],
                 _bmB_[17],
                 _bmB_[18],
                 _bmB_[19],
                 _bmB_[20],
                 _bmB_[21],
                 _bmB_[22],
                 _bmB_[23],
                 _bmB_[24],
                 _bmB_[25],
                 _bmB_[26],
                 _bmB_[27],
                 _bmB_[28],
                 _bmB_[29],
                 _bmB_[30],
                 _bmB_[31],
                 _bmB_[32],
                 _bmB_[33],
                 _bmB_[34],
                 _bmB_[35],
                 _bmB_[36],
                 _bmB_[37],
                 _bmB_[38],
                 _bmB_[39],
                 _bmB_[40],
                 _bmB_[41],
                 _bmB_[42],
                 _bmB_[43],
                 _bmB_[44],
                 _bmB_[45],
                 _bmB_[46],
                 _bmB_[47],
                 _bmB_[48],
                 _bmB_[49],
                 _bmB_[50],
                 _bmB_[51],
                 _bmB_[52],
                 _bmB_[53],
                 _bmB_[54],
                 _bmB_[55],
                 _bmB_[56],
                 _bmB_[57],
                 _bmB_[58],
                 _bmB_[59],
                 _bmB_[60],
                 _bmB_[61],
                 _bmB_[62],
                 _bmB_[63],
                 _bmB_[64],
                 _bmB_[65],
                 _bmB_[66],
                 _bmB_[67],
                 _bmB_[68],
                 _bmB_[69],
                 _bmB_[70],
                 _bmB_[71],
                 _bmB_[72],
                 _bmB_[73],
                 _bmB_[74],
                 _bmB_[75],
                 _bmB_[78],
                 _bmB_[79]]},
       _tB_,
       _tA_,
       _tz_,
       _ty_,
       _tx_,
       _tw_];
    caml_register_global(4317,Core_kernel_Hashtbl,"Core_kernel__Hashtbl");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$89);
    caml_call1(Expect_test_collector[4][1],cst_src_hash_set_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$90,cst$29);
    var
     sexp_of_t$18=include$22[1],
     _tC_=include$22[2],
     _tD_=include$22[3],
     length$3=include$22[4],
     is_empty$2=include$22[5],
     iter$3=include$22[6],
     fold$1=include$22[7],
     fold_result$0=include$22[8],
     fold_until$0=include$22[9],
     exists$1=include$22[10],
     for_all$1=include$22[11],
     count$1=include$22[12],
     sum$0=include$22[13],
     find$1=include$22[14],
     find_map$0=include$22[15],
     to_list$0=include$22[16],
     to_array$0=include$22[17],
     min_elt$0=include$22[18],
     max_elt$0=include$22[19],
     mem$1=include$22[20],
     copy$1=include$22[21],
     add$0=include$22[22],
     strict_add=include$22[23],
     strict_add_exn=include$22[24],
     remove$0=include$22[25],
     strict_remove=include$22[26],
     strict_remove_exn=include$22[27],
     clear$0=include$22[28],
     equal$4=include$22[29],
     filter$1=include$22[30],
     filter_inplace$0=include$22[31],
     inter=include$22[32],
     union=include$22[33],
     diff=include$22[34],
     of_hashtbl_keys=include$22[35],
     to_hashtbl=include$22[36],
     Poly$0=include$22[38],
     M$0=include$22[39],
     sexp_of_m_t=include$22[40],
     m_t_of_sexp=include$22[41],
     Creators=include$22[42],
     Private=include$22[43];
    function Make_plain$0(Elt)
     {var
       hashable=caml_call1(Base_Hashable[3],Elt),
       include=caml_call1(Creators,[0,hashable]),
       t_of_sexp=include[1],
       create=include[2],
       of_list=include[3];
      function sexp_of_t(t){return caml_call2(Poly$0[2],Elt[2],t)}
      function Provide_of_sexp(X)
       {function t_of_sexp$0(sexp){return caml_call2(t_of_sexp,X[1],sexp)}
        return [0,t_of_sexp$0]}
      function Provide_bin_io(X)
       {var
         bin_size_t=X[1],
         bin_write_t=X[2],
         bin_read_t=X[3],
         bin_shape_t=X[5],
         _bmu_=
          [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$3),0,bin_shape_t],0],
         _bmv_=caml_call1(Bin_prot_Shape[4][1],cst_src_hash_set_ml_46_6),
         group=caml_call2(Bin_prot_Shape[6],_bmv_,_bmu_),
         _bmw_=caml_call1(Bin_prot_Shape[2][1],cst_el$4),
         bin_shape_el=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bmw_),0),
         caller_identity=
          caml_call1
           (Bin_prot_Shape[5][1],cst_ad381672_4992_11e6_9e36_b76dc8cd466f);
        function init(len,next)
         {var
           t=caml_call3(create,0,[0,len],0),
           _bmy_=caml_call2(_ax_,len,1),
           _bmx_=0;
          if(! (_bmy_ < 0))
           {var i=_bmx_;
            for(;;)
             {var v=caml_call1(next,0);
              caml_call2(add$0,t,v);
              var _bmz_=i + 1 | 0;
              if(_bmy_ !== i){var i=_bmz_;continue}
              break}}
          return t}
        return caml_call1
                (Bin_prot_Utils[11],
                 [0,
                  caller_identity,
                  module_name$1,
                  length$3,
                  iter$3,
                  init,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t,
                  bin_shape_el])}
      return [0,
              t_of_sexp,
              create,
              of_list,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io]}
    function Make$1(Elt)
     {var
       _bmt_=Make_plain$0([0,Elt[2],Elt[3],Elt[4]]),
       create=_bmt_[2],
       of_list=_bmt_[3],
       sexp_of_t=_bmt_[4],
       Provide_of_sexp=_bmt_[5],
       Provide_bin_io=_bmt_[6],
       include=caml_call1(Provide_of_sexp,[0,Elt[1]]),
       t_of_sexp=include[1];
      return [0,
              create,
              of_list,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp]}
    function create$3(growth_allowed,size,hashable,param)
     {return caml_call3
              (_tC_,growth_allowed,size,caml_call1(Base_Hashable[4],hashable))}
    function of_list$0(growth_allowed,size,hashable,l)
     {return caml_call4
              (_tD_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    var Using_hashable=[0,create$3,of_list$0],_tE_=Private[1];
    function create$4(growth_allowed,size,m)
     {return caml_call3(_tC_,growth_allowed,size,m)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$91);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _tF_(Elt)
     {var
       _bms_=Make$1([0,Elt[9],Elt[10],Elt[11],Elt[12]]),
       create=_bms_[1],
       of_list=_bms_[2],
       sexp_of_t=_bms_[3],
       Provide_of_sexp=_bms_[4],
       Provide_bin_io=_bms_[5],
       t_of_sexp=_bms_[6],
       include=
        caml_call1
         (Provide_bin_io,
          [0,Elt[1],Elt[2],Elt[3],Elt[4],Elt[5],Elt[6],Elt[7],Elt[8]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              sexp_of_t,
              create,
              of_list,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _tG_(_bmq_)
     {var _bmr_=Make$1(_bmq_);
      return [0,_bmr_[3],_bmr_[1],_bmr_[2],_bmr_[4],_bmr_[5],_bmr_[6]]}
    function _tH_(_bmo_)
     {var _bmp_=Make_plain$0(_bmo_);
      return [0,_bmp_[4],_bmp_[2],_bmp_[3],_bmp_[5],_bmp_[6]]}
    var
     Core_kernel_Hash_set=
      [0,
       sexp_of_t$18,
       create$4,
       _tD_,
       length$3,
       is_empty$2,
       iter$3,
       fold$1,
       fold_result$0,
       fold_until$0,
       exists$1,
       for_all$1,
       count$1,
       sum$0,
       find$1,
       find_map$0,
       to_list$0,
       to_array$0,
       min_elt$0,
       max_elt$0,
       mem$1,
       copy$1,
       add$0,
       strict_add,
       strict_add_exn,
       remove$0,
       strict_remove,
       strict_remove_exn,
       clear$0,
       equal$4,
       filter$1,
       filter_inplace$0,
       inter,
       union,
       diff,
       of_hashtbl_keys,
       to_hashtbl,
       _tE_,
       Using_hashable,
       Poly$0,
       _tH_,
       _tG_,
       _tF_,
       M$0,
       sexp_of_m_t,
       m_t_of_sexp];
    caml_register_global(4318,Core_kernel_Hash_set,"Core_kernel__Hash_set");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$92);
    caml_call1(Expect_test_collector[4][1],cst_src_or_error_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$93,cst$30);
    var
     _tY_=include$27[19],
     _t6_=include$27[28],
     _t9_=include$27[31],
     _ua_=include$27[34],
     _ub_=include$27[35],
     _uc_=include$27[36],
     _ug_=include$27[40],
     _um_=include$27[46],
     _tI_=include$27[1],
     _tJ_=include$27[2],
     _tK_=include$27[3],
     _tL_=include$27[4],
     _tM_=include$27[5],
     _tN_=include$27[6],
     _tO_=include$27[7],
     _tP_=include$27[8],
     _tQ_=include$27[9],
     _tR_=include$27[10],
     _tS_=include$27[11],
     _tT_=include$27[12],
     _tU_=include$27[14],
     _tV_=include$27[15],
     _tW_=include$27[16],
     _tX_=include$27[18],
     _tZ_=include$27[20],
     _t0_=include$27[21],
     _t1_=include$27[22],
     _t2_=include$27[23],
     _t3_=include$27[25],
     _t4_=include$27[26],
     _t5_=include$27[27],
     _t7_=include$27[29],
     _t8_=include$27[30],
     _t__=include$27[32],
     _t$_=include$27[33],
     _ud_=include$27[37],
     _ue_=include$27[38],
     _uf_=include$27[39],
     _uh_=include$27[41],
     _ui_=include$27[42],
     _uj_=include$27[43],
     _uk_=include$27[44],
     _ul_=include$27[45],
     _un_=include$27[47],
     _uo_=include$27[48],
     _up_=include$27[49],
     _ur_=caml_call1(Bin_prot_Shape[3][1],cst_a$30),
     _us_=caml_call1(Bin_prot_Shape[4][1],cst_src_or_error_ml_4_13),
     _uq_=0,
     _ut_=caml_call2(Bin_prot_Shape[15],_us_,_ur_),
     _uu_=function(_bmn_){return bin_shape_t$7(_ut_,_bmn_)}(_ou_),
     _uv_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$31),0],
     _uw_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$75),_uv_,_uu_],_uq_],
     _ux_=caml_call1(Bin_prot_Shape[4][1],cst_src_or_error_ml_4_0),
     group$34=caml_call2(Bin_prot_Shape[6],_ux_,_uw_);
    function bin_shape_t$27(a)
     {var _bmm_=caml_call1(Bin_prot_Shape[2][1],cst_t$76);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$34,_bmm_),[0,a,0])}
    function bin_size_t$29(size_of_a,v)
     {return bin_size_t$11(size_of_a,_oq_,v)}
    function bin_write_t$29(write_a,buf,pos,v)
     {return bin_write_t$11(write_a,_or_,buf,pos,v)}
    function bin_writer_t$21(bin_writer_a)
     {function _bmi_(v)
       {var _bmj_=bin_writer_a[2];
        return function(_bmk_,_bml_)
         {return bin_write_t$29(_bmj_,v,_bmk_,_bml_)}}
      return [0,function(v){return bin_size_t$29(bin_writer_a[1],v)},_bmi_]}
    function bin_read_t$60(of_a,buf,pos_ref,vint)
     {return bin_read_t$25(of_a,_os_,buf,pos_ref,vint)}
    function bin_read_t$61(of_a,buf,pos_ref)
     {return bin_read_t$26(of_a,_os_,buf,pos_ref)}
    function bin_reader_t$21(bin_reader_a)
     {function _bmh_(buf,pos_ref,vtag)
       {return bin_read_t$60(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$61(bin_reader_a[1],buf,pos_ref)},
              _bmh_]}
    function bin_t$21(bin_a)
     {var _bmf_=bin_reader_t$21(bin_a[3]),_bmg_=bin_writer_t$21(bin_a[2]);
      return [0,bin_shape_t$27(bin_a[1]),_bmg_,_bmf_]}
    var bind=include$27[18],return$0=include$27[19];
    function to_run(t){return t}
    function flush(param){return caml_call1(_tY_,0)}
    function run(f){return caml_call1(_t9_,caml_call1(f,0))}
    function flushed(param){return 1}
    var
     upon_unreleasable_issue=Expect_test_config[7],
     _uy_=_oy_[1][5],
     _uz_=caml_call1(Bin_prot_Shape[3][1],cst_a$32),
     _uA_=caml_call1(Bin_prot_Shape[4][1],cst_src_or_error_ml_24_17),
     _uB_=caml_call2(Bin_prot_Shape[15],_uA_,_uz_),
     _uC_=caml_call1(caml_call1(_in_[1][1],_uB_),_uy_),
     _uD_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$33),0],
     _uE_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$77),_uD_,_uC_],0],
     _uF_=caml_call1(Bin_prot_Shape[4][1],cst_src_or_error_ml_24_4),
     group$35=caml_call2(Bin_prot_Shape[6],_uF_,_uE_);
    function bin_shape_t$28(a)
     {var _bme_=caml_call1(Bin_prot_Shape[2][1],cst_t$78);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$35,_bme_),[0,a,0])}
    function bin_size_t$30(size_of_a,v)
     {return caml_call3(_in_[1][2],size_of_a,_oy_[1][1],v)}
    function bin_write_t$30(write_a,buf,pos,v)
     {return caml_call3(caml_call2(_in_[1][3],write_a,_oy_[1][2]),buf,pos,v)}
    function bin_writer_t$22(bin_writer_a)
     {function _bma_(v)
       {var _bmb_=bin_writer_a[2];
        return function(_bmc_,_bmd_)
         {return bin_write_t$30(_bmb_,v,_bmc_,_bmd_)}}
      return [0,function(v){return bin_size_t$30(bin_writer_a[1],v)},_bma_]}
    function bin_read_t$62(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call2(_in_[1][5],of_a,_oy_[1][3]),buf,pos_ref,vint)}
    function bin_read_t$63(of_a,buf,pos_ref)
     {return caml_call2(caml_call2(_in_[1][4],of_a,_oy_[1][3]),buf,pos_ref)}
    function bin_reader_t$22(bin_reader_a)
     {function _bl$_(buf,pos_ref,vtag)
       {return bin_read_t$62(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$63(bin_reader_a[1],buf,pos_ref)},
              _bl$_]}
    function bin_t$22(bin_a)
     {var _bl9_=bin_reader_t$22(bin_a[3]),_bl__=bin_writer_t$22(bin_a[2]);
      return [0,bin_shape_t$28(bin_a[1]),_bl__,_bl9_]}
    function compare$13(cmp_a,a_001,b_002)
     {return caml_call4(_in_[1][9],cmp_a,_oy_[1][9],a_001,b_002)}
    function t_of_sexp$18(of_a,t)
     {return caml_call3(_in_[1][10],of_a,_oy_[1][10],t)}
    function sexp_of_t$19(of_a,v)
     {return caml_call3(_in_[1][11],of_a,_oy_[1][11],v)}
    function map$4(x,f)
     {function _bl7_(_bl8_){return _bl8_}
      return caml_call3(_in_[1][12],x,f,_bl7_)}
    var
     _uG_=_oy_[2][5],
     _uH_=caml_call1(Bin_prot_Shape[3][1],cst_a$34),
     _uI_=caml_call1(Bin_prot_Shape[4][1],cst_src_or_error_ml_31_17),
     _uJ_=caml_call2(Bin_prot_Shape[15],_uI_,_uH_),
     _uK_=caml_call1(caml_call1(_in_[1][1],_uJ_),_uG_),
     _uL_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$35),0],
     _uM_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$79),_uL_,_uK_],0],
     _uN_=caml_call1(Bin_prot_Shape[4][1],cst_src_or_error_ml_31_4),
     group$36=caml_call2(Bin_prot_Shape[6],_uN_,_uM_);
    function bin_shape_t$29(a)
     {var _bl6_=caml_call1(Bin_prot_Shape[2][1],cst_t$80);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$36,_bl6_),[0,a,0])}
    function bin_size_t$31(size_of_a,v)
     {return caml_call3(_in_[1][2],size_of_a,_oy_[2][1],v)}
    function bin_write_t$31(write_a,buf,pos,v)
     {return caml_call3(caml_call2(_in_[1][3],write_a,_oy_[2][2]),buf,pos,v)}
    function bin_writer_t$23(bin_writer_a)
     {function _bl2_(v)
       {var _bl3_=bin_writer_a[2];
        return function(_bl4_,_bl5_)
         {return bin_write_t$31(_bl3_,v,_bl4_,_bl5_)}}
      return [0,function(v){return bin_size_t$31(bin_writer_a[1],v)},_bl2_]}
    function bin_read_t$64(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call2(_in_[1][5],of_a,_oy_[2][3]),buf,pos_ref,vint)}
    function bin_read_t$65(of_a,buf,pos_ref)
     {return caml_call2(caml_call2(_in_[1][4],of_a,_oy_[2][3]),buf,pos_ref)}
    function bin_reader_t$23(bin_reader_a)
     {function _bl1_(buf,pos_ref,vtag)
       {return bin_read_t$64(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$65(bin_reader_a[1],buf,pos_ref)},
              _bl1_]}
    function bin_t$23(bin_a)
     {var _blZ_=bin_reader_t$23(bin_a[3]),_bl0_=bin_writer_t$23(bin_a[2]);
      return [0,bin_shape_t$29(bin_a[1]),_bl0_,_blZ_]}
    function compare$14(cmp_a,a_007,b_008)
     {return caml_call4(_in_[1][9],cmp_a,_oy_[2][9],a_007,b_008)}
    function t_of_sexp$19(of_a,t)
     {return caml_call3(_in_[1][10],of_a,_oy_[2][10],t)}
    function sexp_of_t$20(of_a,v)
     {return caml_call3(_in_[1][11],of_a,_oy_[2][11],v)}
    function map$5(x,f)
     {function _blX_(_blY_){return _blY_}
      return caml_call3(_in_[1][12],x,f,_blX_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$94);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Or_error=
      [0,
       bin_shape_t$27,
       bin_size_t$29,
       bin_write_t$29,
       bin_read_t$61,
       bin_read_t$60,
       bin_writer_t$21,
       bin_reader_t$21,
       bin_t$21,
       _tI_,
       _tJ_,
       _tK_,
       _tL_,
       _tM_,
       _tN_,
       _tO_,
       _tP_,
       _tQ_,
       _tR_,
       _tS_,
       _tT_,
       _tU_,
       _tV_,
       _tW_,
       _tX_,
       _tY_,
       _tZ_,
       _t0_,
       _t1_,
       _t2_,
       _t3_,
       _t4_,
       _t5_,
       _t6_,
       _t7_,
       _t8_,
       _t9_,
       _t__,
       _t$_,
       _ua_,
       _ub_,
       _uc_,
       _ud_,
       _ue_,
       _uf_,
       _ug_,
       _uh_,
       _ui_,
       _uj_,
       _uk_,
       _ul_,
       _um_,
       _un_,
       _uo_,
       _up_,
       [0,
        [0],
        [0,return$0,bind,to_run],
        flush,
        run,
        flushed,
        upon_unreleasable_issue],
       [0,
        [0,
         bin_shape_t$28,
         bin_size_t$30,
         bin_write_t$30,
         bin_read_t$63,
         bin_read_t$62,
         bin_writer_t$22,
         bin_reader_t$22,
         bin_t$22,
         compare$13,
         t_of_sexp$18,
         sexp_of_t$19,
         map$4],
        [0,
         bin_shape_t$29,
         bin_size_t$31,
         bin_write_t$31,
         bin_read_t$65,
         bin_read_t$64,
         bin_writer_t$23,
         bin_reader_t$23,
         bin_t$23,
         compare$14,
         t_of_sexp$19,
         sexp_of_t$20,
         map$5]]];
    caml_register_global(4321,Core_kernel_Or_error,"Core_kernel__Or_error");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$95);
    caml_call1(Expect_test_collector[4][1],cst_src_quickcheck_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$96,cst$31);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$97);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Quickcheck_intf=[0];
    caml_register_global
     (4322,Core_kernel_Quickcheck_intf,"Core_kernel__Quickcheck_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$98);
    caml_call1(Expect_test_collector[4][1],cst_src_quickcheck_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$99,cst$32);
    function variant2(generator_012,generator_013)
     {var _blS_=0;
      function _blT_(size_016,random_017)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_013,
                  size_016,
                  random_017)]}
      var
       _blU_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_blT_)],_blS_];
      function _blV_(size_014,random_015)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_012,
                  size_014,
                  random_015)]}
      var
       _blW_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_blV_)],_blU_];
      return caml_call1(Base_quickcheck_Generator[51],_blW_)}
    function variant2$0(observer_005,observer_006)
     {function _blR_(x_007,size_008,hash_009)
       {if(66 <= x_007[1])
         {var
           x_011=x_007[2],
           hash_009$0=caml_call2(Base[112],hash_009,66),
           hash_009$1=
            caml_call4
             (Base_quickcheck_Observer[28],
              observer_006,
              x_011,
              size_008,
              hash_009$0);
          return hash_009$1}
        var
         x_010=x_007[2],
         hash_009$2=caml_call2(Base[112],hash_009,65),
         hash_009$3=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_005,
            x_010,
            size_008,
            hash_009$2);
        return hash_009$3}
      return caml_call1(Base_quickcheck_Observer[27],_blR_)}
    function variant2$1(shrinker_001,shrinker_002)
     {function _blI_(param)
       {if(66 <= param[1])
         {var
           x_004=param[2],
           _blJ_=0,
           _blK_=function(x_004){return [0,66,x_004]},
           _blL_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_002,x_004),
           _blM_=[0,caml_call2(include$9[32],_blL_,_blK_),_blJ_];
          return caml_call1(include$9[66],_blM_)}
        var x_003=param[2],_blN_=0;
        function _blO_(x_003){return [0,65,x_003]}
        var
         _blP_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_001,x_003),
         _blQ_=[0,caml_call2(include$9[32],_blP_,_blO_),_blN_];
        return caml_call1(include$9[66],_blQ_)}
      return caml_call1(Base_quickcheck_Shrinker[25],_blI_)}
    function variant3(generator_033,generator_034,generator_035)
     {var _blB_=0;
      function _blC_(size_040,random_041)
       {return [0,
                67,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_035,
                  size_040,
                  random_041)]}
      var
       _blD_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_blC_)],_blB_];
      function _blE_(size_038,random_039)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_034,
                  size_038,
                  random_039)]}
      var
       _blF_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_blE_)],_blD_];
      function _blG_(size_036,random_037)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_033,
                  size_036,
                  random_037)]}
      var
       _blH_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_blG_)],_blF_];
      return caml_call1(Base_quickcheck_Generator[51],_blH_)}
    function variant3$0(observer_024,observer_025,observer_026)
     {function _blA_(x_027,size_028,hash_029)
       {var switcher=x_027[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_030=x_027[2],
            hash_029$0=caml_call2(Base[112],hash_029,65),
            hash_029$1=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_024,
               x_030,
               size_028,
               hash_029$0);
           return hash_029$1;
          case 1:
           var
            x_031=x_027[2],
            hash_029$2=caml_call2(Base[112],hash_029,66),
            hash_029$3=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_025,
               x_031,
               size_028,
               hash_029$2);
           return hash_029$3;
          default:
           var
            x_032=x_027[2],
            hash_029$4=caml_call2(Base[112],hash_029,67),
            hash_029$5=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_026,
               x_032,
               size_028,
               hash_029$4);
           return hash_029$5}}
      return caml_call1(Base_quickcheck_Observer[27],_blA_)}
    function variant3$1(shrinker_018,shrinker_019,shrinker_020)
     {function _bln_(param)
       {var switcher=param[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_021=param[2],
            _blo_=0,
            _blp_=function(x_021){return [0,65,x_021]},
            _blq_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_018,x_021),
            _blr_=[0,caml_call2(include$9[32],_blq_,_blp_),_blo_];
           return caml_call1(include$9[66],_blr_);
          case 1:
           var
            x_022=param[2],
            _bls_=0,
            _blt_=function(x_022){return [0,66,x_022]},
            _blu_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_019,x_022),
            _blv_=[0,caml_call2(include$9[32],_blu_,_blt_),_bls_];
           return caml_call1(include$9[66],_blv_);
          default:
           var
            x_023=param[2],
            _blw_=0,
            _blx_=function(x_023){return [0,67,x_023]},
            _bly_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_020,x_023),
            _blz_=[0,caml_call2(include$9[32],_bly_,_blx_),_blw_];
           return caml_call1(include$9[66],_blz_)}}
      return caml_call1(Base_quickcheck_Shrinker[25],_bln_)}
    function variant4(generator_061,generator_062,generator_063,generator_064)
     {var _ble_=0;
      function _blf_(size_071,random_072)
       {return [0,
                68,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_064,
                  size_071,
                  random_072)]}
      var
       _blg_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_blf_)],_ble_];
      function _blh_(size_069,random_070)
       {return [0,
                67,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_063,
                  size_069,
                  random_070)]}
      var
       _bli_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_blh_)],_blg_];
      function _blj_(size_067,random_068)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_062,
                  size_067,
                  random_068)]}
      var
       _blk_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_blj_)],_bli_];
      function _bll_(size_065,random_066)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_061,
                  size_065,
                  random_066)]}
      var
       _blm_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_bll_)],_blk_];
      return caml_call1(Base_quickcheck_Generator[51],_blm_)}
    function variant4$0(observer_050,observer_051,observer_052,observer_053)
     {function _bld_(x_054,size_055,hash_056)
       {var switcher=x_054[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_057=x_054[2],
            hash_056$0=caml_call2(Base[112],hash_056,65),
            hash_056$1=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_050,
               x_057,
               size_055,
               hash_056$0);
           return hash_056$1;
          case 1:
           var
            x_058=x_054[2],
            hash_056$2=caml_call2(Base[112],hash_056,66),
            hash_056$3=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_051,
               x_058,
               size_055,
               hash_056$2);
           return hash_056$3;
          case 2:
           var
            x_059=x_054[2],
            hash_056$4=caml_call2(Base[112],hash_056,67),
            hash_056$5=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_052,
               x_059,
               size_055,
               hash_056$4);
           return hash_056$5;
          default:
           var
            x_060=x_054[2],
            hash_056$6=caml_call2(Base[112],hash_056,68),
            hash_056$7=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_053,
               x_060,
               size_055,
               hash_056$6);
           return hash_056$7}}
      return caml_call1(Base_quickcheck_Observer[27],_bld_)}
    function variant4$1(shrinker_042,shrinker_043,shrinker_044,shrinker_045)
     {function _bkY_(param)
       {var switcher=param[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_046=param[2],
            _bkZ_=0,
            _bk0_=function(x_046){return [0,65,x_046]},
            _bk1_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_042,x_046),
            _bk2_=[0,caml_call2(include$9[32],_bk1_,_bk0_),_bkZ_];
           return caml_call1(include$9[66],_bk2_);
          case 1:
           var
            x_047=param[2],
            _bk3_=0,
            _bk4_=function(x_047){return [0,66,x_047]},
            _bk5_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_043,x_047),
            _bk6_=[0,caml_call2(include$9[32],_bk5_,_bk4_),_bk3_];
           return caml_call1(include$9[66],_bk6_);
          case 2:
           var
            x_048=param[2],
            _bk7_=0,
            _bk8_=function(x_048){return [0,67,x_048]},
            _bk9_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_044,x_048),
            _bk__=[0,caml_call2(include$9[32],_bk9_,_bk8_),_bk7_];
           return caml_call1(include$9[66],_bk__);
          default:
           var
            x_049=param[2],
            _bk$_=0,
            _bla_=function(x_049){return [0,68,x_049]},
            _blb_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_045,x_049),
            _blc_=[0,caml_call2(include$9[32],_blb_,_bla_),_bk$_];
           return caml_call1(include$9[66],_blc_)}}
      return caml_call1(Base_quickcheck_Shrinker[25],_bkY_)}
    function variant5
     (generator_096,generator_097,generator_098,generator_099,generator_100)
     {var _bkN_=0;
      function _bkO_(size_109,random_110)
       {return [0,
                69,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_100,
                  size_109,
                  random_110)]}
      var
       _bkP_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_bkO_)],_bkN_];
      function _bkQ_(size_107,random_108)
       {return [0,
                68,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_099,
                  size_107,
                  random_108)]}
      var
       _bkR_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_bkQ_)],_bkP_];
      function _bkS_(size_105,random_106)
       {return [0,
                67,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_098,
                  size_105,
                  random_106)]}
      var
       _bkT_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_bkS_)],_bkR_];
      function _bkU_(size_103,random_104)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_097,
                  size_103,
                  random_104)]}
      var
       _bkV_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_bkU_)],_bkT_];
      function _bkW_(size_101,random_102)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_096,
                  size_101,
                  random_102)]}
      var
       _bkX_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_bkW_)],_bkV_];
      return caml_call1(Base_quickcheck_Generator[51],_bkX_)}
    function variant5$0
     (observer_083,observer_084,observer_085,observer_086,observer_087)
     {function _bkM_(x_088,size_089,hash_090)
       {var switcher=x_088[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_091=x_088[2],
            hash_090$0=caml_call2(Base[112],hash_090,65),
            hash_090$1=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_083,
               x_091,
               size_089,
               hash_090$0);
           return hash_090$1;
          case 1:
           var
            x_092=x_088[2],
            hash_090$2=caml_call2(Base[112],hash_090,66),
            hash_090$3=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_084,
               x_092,
               size_089,
               hash_090$2);
           return hash_090$3;
          case 2:
           var
            x_093=x_088[2],
            hash_090$4=caml_call2(Base[112],hash_090,67),
            hash_090$5=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_085,
               x_093,
               size_089,
               hash_090$4);
           return hash_090$5;
          case 3:
           var
            x_094=x_088[2],
            hash_090$6=caml_call2(Base[112],hash_090,68),
            hash_090$7=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_086,
               x_094,
               size_089,
               hash_090$6);
           return hash_090$7;
          default:
           var
            x_095=x_088[2],
            hash_090$8=caml_call2(Base[112],hash_090,69),
            hash_090$9=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_087,
               x_095,
               size_089,
               hash_090$8);
           return hash_090$9}}
      return caml_call1(Base_quickcheck_Observer[27],_bkM_)}
    function variant5$1
     (shrinker_073,shrinker_074,shrinker_075,shrinker_076,shrinker_077)
     {function _bkr_(param)
       {var switcher=param[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_078=param[2],
            _bks_=0,
            _bkt_=function(x_078){return [0,65,x_078]},
            _bku_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_073,x_078),
            _bkv_=[0,caml_call2(include$9[32],_bku_,_bkt_),_bks_];
           return caml_call1(include$9[66],_bkv_);
          case 1:
           var
            x_079=param[2],
            _bkw_=0,
            _bkx_=function(x_079){return [0,66,x_079]},
            _bky_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_074,x_079),
            _bkz_=[0,caml_call2(include$9[32],_bky_,_bkx_),_bkw_];
           return caml_call1(include$9[66],_bkz_);
          case 2:
           var
            x_080=param[2],
            _bkA_=0,
            _bkB_=function(x_080){return [0,67,x_080]},
            _bkC_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_075,x_080),
            _bkD_=[0,caml_call2(include$9[32],_bkC_,_bkB_),_bkA_];
           return caml_call1(include$9[66],_bkD_);
          case 3:
           var
            x_081=param[2],
            _bkE_=0,
            _bkF_=function(x_081){return [0,68,x_081]},
            _bkG_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_076,x_081),
            _bkH_=[0,caml_call2(include$9[32],_bkG_,_bkF_),_bkE_];
           return caml_call1(include$9[66],_bkH_);
          default:
           var
            x_082=param[2],
            _bkI_=0,
            _bkJ_=function(x_082){return [0,69,x_082]},
            _bkK_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_077,x_082),
            _bkL_=[0,caml_call2(include$9[32],_bkK_,_bkJ_),_bkI_];
           return caml_call1(include$9[66],_bkL_)}}
      return caml_call1(Base_quickcheck_Shrinker[25],_bkr_)}
    function variant6
     (generator_138,
      generator_139,
      generator_140,
      generator_141,
      generator_142,
      generator_143)
     {var _bke_=0;
      function _bkf_(size_154,random_155)
       {return [0,
                70,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_143,
                  size_154,
                  random_155)]}
      var
       _bkg_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_bkf_)],_bke_];
      function _bkh_(size_152,random_153)
       {return [0,
                69,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_142,
                  size_152,
                  random_153)]}
      var
       _bki_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_bkh_)],_bkg_];
      function _bkj_(size_150,random_151)
       {return [0,
                68,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_141,
                  size_150,
                  random_151)]}
      var
       _bkk_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_bkj_)],_bki_];
      function _bkl_(size_148,random_149)
       {return [0,
                67,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_140,
                  size_148,
                  random_149)]}
      var
       _bkm_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_bkl_)],_bkk_];
      function _bkn_(size_146,random_147)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_139,
                  size_146,
                  random_147)]}
      var
       _bko_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_bkn_)],_bkm_];
      function _bkp_(size_144,random_145)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_138,
                  size_144,
                  random_145)]}
      var
       _bkq_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_bkp_)],_bko_];
      return caml_call1(Base_quickcheck_Generator[51],_bkq_)}
    function variant6$0
     (observer_123,
      observer_124,
      observer_125,
      observer_126,
      observer_127,
      observer_128)
     {function _bkd_(x_129,size_130,hash_131)
       {var switcher=x_129[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_132=x_129[2],
            hash_131$0=caml_call2(Base[112],hash_131,65),
            hash_131$1=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_123,
               x_132,
               size_130,
               hash_131$0);
           return hash_131$1;
          case 1:
           var
            x_133=x_129[2],
            hash_131$2=caml_call2(Base[112],hash_131,66),
            hash_131$3=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_124,
               x_133,
               size_130,
               hash_131$2);
           return hash_131$3;
          case 2:
           var
            x_134=x_129[2],
            hash_131$4=caml_call2(Base[112],hash_131,67),
            hash_131$5=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_125,
               x_134,
               size_130,
               hash_131$4);
           return hash_131$5;
          case 3:
           var
            x_135=x_129[2],
            hash_131$6=caml_call2(Base[112],hash_131,68),
            hash_131$7=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_126,
               x_135,
               size_130,
               hash_131$6);
           return hash_131$7;
          case 4:
           var
            x_136=x_129[2],
            hash_131$8=caml_call2(Base[112],hash_131,69),
            hash_131$9=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_127,
               x_136,
               size_130,
               hash_131$8);
           return hash_131$9;
          default:
           var
            x_137=x_129[2],
            hash_131$10=caml_call2(Base[112],hash_131,70),
            hash_131$11=
             caml_call4
              (Base_quickcheck_Observer[28],
               observer_128,
               x_137,
               size_130,
               hash_131$10);
           return hash_131$11}}
      return caml_call1(Base_quickcheck_Observer[27],_bkd_)}
    function variant6$1
     (shrinker_111,
      shrinker_112,
      shrinker_113,
      shrinker_114,
      shrinker_115,
      shrinker_116)
     {function _bjQ_(param)
       {var switcher=param[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_117=param[2],
            _bjR_=0,
            _bjS_=function(x_117){return [0,65,x_117]},
            _bjT_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_111,x_117),
            _bjU_=[0,caml_call2(include$9[32],_bjT_,_bjS_),_bjR_];
           return caml_call1(include$9[66],_bjU_);
          case 1:
           var
            x_118=param[2],
            _bjV_=0,
            _bjW_=function(x_118){return [0,66,x_118]},
            _bjX_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_112,x_118),
            _bjY_=[0,caml_call2(include$9[32],_bjX_,_bjW_),_bjV_];
           return caml_call1(include$9[66],_bjY_);
          case 2:
           var
            x_119=param[2],
            _bjZ_=0,
            _bj0_=function(x_119){return [0,67,x_119]},
            _bj1_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_113,x_119),
            _bj2_=[0,caml_call2(include$9[32],_bj1_,_bj0_),_bjZ_];
           return caml_call1(include$9[66],_bj2_);
          case 3:
           var
            x_120=param[2],
            _bj3_=0,
            _bj4_=function(x_120){return [0,68,x_120]},
            _bj5_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_114,x_120),
            _bj6_=[0,caml_call2(include$9[32],_bj5_,_bj4_),_bj3_];
           return caml_call1(include$9[66],_bj6_);
          case 4:
           var
            x_121=param[2],
            _bj7_=0,
            _bj8_=function(x_121){return [0,69,x_121]},
            _bj9_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_115,x_121),
            _bj__=[0,caml_call2(include$9[32],_bj9_,_bj8_),_bj7_];
           return caml_call1(include$9[66],_bj__);
          default:
           var
            x_122=param[2],
            _bj$_=0,
            _bka_=function(x_122){return [0,70,x_122]},
            _bkb_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_116,x_122),
            _bkc_=[0,caml_call2(include$9[32],_bkb_,_bka_),_bj$_];
           return caml_call1(include$9[66],_bkc_)}}
      return caml_call1(Base_quickcheck_Shrinker[25],_bjQ_)}
    function tuple2(generator_166,generator_167)
     {function _bjO_(size_168,random_169)
       {var
         _bjP_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_167,size_168,random_169);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_166,
                  size_168,
                  random_169),
                _bjP_]}
      return caml_call1(Base_quickcheck_Generator[108],_bjO_)}
    function tuple2$0(observer_160,observer_161)
     {function _bjN_(param,size_164,hash_165)
       {var
         x_163=param[2],
         x_162=param[1],
         hash_165$0=
          caml_call4
           (Base_quickcheck_Observer[28],observer_160,x_162,size_164,hash_165),
         hash_165$1=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_161,
            x_163,
            size_164,
            hash_165$0);
        return hash_165$1}
      return caml_call1(Base_quickcheck_Observer[27],_bjN_)}
    function tuple2$1(shrinker_156,shrinker_157)
     {function _bjF_(param)
       {var x_159=param[2],x_158=param[1],_bjG_=0;
        function _bjH_(x_159){return [0,x_158,x_159]}
        var
         _bjI_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_157,x_159),
         _bjJ_=[0,caml_call2(include$9[32],_bjI_,_bjH_),_bjG_];
        function _bjK_(x_158){return [0,x_158,x_159]}
        var
         _bjL_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_156,x_158),
         _bjM_=[0,caml_call2(include$9[32],_bjL_,_bjK_),_bjJ_];
        return caml_call1(include$9[66],_bjM_)}
      return caml_call1(Base_quickcheck_Shrinker[25],_bjF_)}
    function tuple3(generator_184,generator_185,generator_186)
     {function _bjC_(size_187,random_188)
       {var
         _bjD_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_186,size_187,random_188),
         _bjE_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_185,size_187,random_188);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_184,
                  size_187,
                  random_188),
                _bjE_,
                _bjD_]}
      return caml_call1(Base_quickcheck_Generator[108],_bjC_)}
    function tuple3$0(observer_176,observer_177,observer_178)
     {function _bjB_(param,size_182,hash_183)
       {var
         x_181=param[3],
         x_180=param[2],
         x_179=param[1],
         hash_183$0=
          caml_call4
           (Base_quickcheck_Observer[28],observer_176,x_179,size_182,hash_183),
         hash_183$1=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_177,
            x_180,
            size_182,
            hash_183$0),
         hash_183$2=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_178,
            x_181,
            size_182,
            hash_183$1);
        return hash_183$2}
      return caml_call1(Base_quickcheck_Observer[27],_bjB_)}
    function tuple3$1(shrinker_170,shrinker_171,shrinker_172)
     {function _bjq_(param)
       {var x_175=param[3],x_174=param[2],x_173=param[1],_bjr_=0;
        function _bjs_(x_175){return [0,x_173,x_174,x_175]}
        var
         _bjt_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_172,x_175),
         _bju_=[0,caml_call2(include$9[32],_bjt_,_bjs_),_bjr_];
        function _bjv_(x_174){return [0,x_173,x_174,x_175]}
        var
         _bjw_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_171,x_174),
         _bjx_=[0,caml_call2(include$9[32],_bjw_,_bjv_),_bju_];
        function _bjy_(x_173){return [0,x_173,x_174,x_175]}
        var
         _bjz_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_170,x_173),
         _bjA_=[0,caml_call2(include$9[32],_bjz_,_bjy_),_bjx_];
        return caml_call1(include$9[66],_bjA_)}
      return caml_call1(Base_quickcheck_Shrinker[25],_bjq_)}
    function tuple4(generator_207,generator_208,generator_209,generator_210)
     {function _bjm_(size_211,random_212)
       {var
         _bjn_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_210,size_211,random_212),
         _bjo_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_209,size_211,random_212),
         _bjp_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_208,size_211,random_212);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_207,
                  size_211,
                  random_212),
                _bjp_,
                _bjo_,
                _bjn_]}
      return caml_call1(Base_quickcheck_Generator[108],_bjm_)}
    function tuple4$0(observer_197,observer_198,observer_199,observer_200)
     {function _bjl_(param,size_205,hash_206)
       {var
         x_204=param[4],
         x_203=param[3],
         x_202=param[2],
         x_201=param[1],
         hash_206$0=
          caml_call4
           (Base_quickcheck_Observer[28],observer_197,x_201,size_205,hash_206),
         hash_206$1=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_198,
            x_202,
            size_205,
            hash_206$0),
         hash_206$2=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_199,
            x_203,
            size_205,
            hash_206$1),
         hash_206$3=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_200,
            x_204,
            size_205,
            hash_206$2);
        return hash_206$3}
      return caml_call1(Base_quickcheck_Observer[27],_bjl_)}
    function tuple4$1(shrinker_189,shrinker_190,shrinker_191,shrinker_192)
     {function _bi9_(param)
       {var
         x_196=param[4],
         x_195=param[3],
         x_194=param[2],
         x_193=param[1],
         _bi__=0;
        function _bi$_(x_196){return [0,x_193,x_194,x_195,x_196]}
        var
         _bja_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_192,x_196),
         _bjb_=[0,caml_call2(include$9[32],_bja_,_bi$_),_bi__];
        function _bjc_(x_195){return [0,x_193,x_194,x_195,x_196]}
        var
         _bjd_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_191,x_195),
         _bje_=[0,caml_call2(include$9[32],_bjd_,_bjc_),_bjb_];
        function _bjf_(x_194){return [0,x_193,x_194,x_195,x_196]}
        var
         _bjg_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_190,x_194),
         _bjh_=[0,caml_call2(include$9[32],_bjg_,_bjf_),_bje_];
        function _bji_(x_193){return [0,x_193,x_194,x_195,x_196]}
        var
         _bjj_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_189,x_193),
         _bjk_=[0,caml_call2(include$9[32],_bjj_,_bji_),_bjh_];
        return caml_call1(include$9[66],_bjk_)}
      return caml_call1(Base_quickcheck_Shrinker[25],_bi9_)}
    function tuple5
     (generator_235,generator_236,generator_237,generator_238,generator_239)
     {function _bi4_(size_240,random_241)
       {var
         _bi5_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_239,size_240,random_241),
         _bi6_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_238,size_240,random_241),
         _bi7_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_237,size_240,random_241),
         _bi8_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_236,size_240,random_241);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_235,
                  size_240,
                  random_241),
                _bi8_,
                _bi7_,
                _bi6_,
                _bi5_]}
      return caml_call1(Base_quickcheck_Generator[108],_bi4_)}
    function tuple5$0
     (observer_223,observer_224,observer_225,observer_226,observer_227)
     {function _bi3_(param,size_233,hash_234)
       {var
         x_232=param[5],
         x_231=param[4],
         x_230=param[3],
         x_229=param[2],
         x_228=param[1],
         hash_234$0=
          caml_call4
           (Base_quickcheck_Observer[28],observer_223,x_228,size_233,hash_234),
         hash_234$1=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_224,
            x_229,
            size_233,
            hash_234$0),
         hash_234$2=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_225,
            x_230,
            size_233,
            hash_234$1),
         hash_234$3=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_226,
            x_231,
            size_233,
            hash_234$2),
         hash_234$4=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_227,
            x_232,
            size_233,
            hash_234$3);
        return hash_234$4}
      return caml_call1(Base_quickcheck_Observer[27],_bi3_)}
    function tuple5$1
     (shrinker_213,shrinker_214,shrinker_215,shrinker_216,shrinker_217)
     {function _biM_(param)
       {var
         x_222=param[5],
         x_221=param[4],
         x_220=param[3],
         x_219=param[2],
         x_218=param[1],
         _biN_=0;
        function _biO_(x_222){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _biP_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_217,x_222),
         _biQ_=[0,caml_call2(include$9[32],_biP_,_biO_),_biN_];
        function _biR_(x_221){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _biS_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_216,x_221),
         _biT_=[0,caml_call2(include$9[32],_biS_,_biR_),_biQ_];
        function _biU_(x_220){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _biV_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_215,x_220),
         _biW_=[0,caml_call2(include$9[32],_biV_,_biU_),_biT_];
        function _biX_(x_219){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _biY_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_214,x_219),
         _biZ_=[0,caml_call2(include$9[32],_biY_,_biX_),_biW_];
        function _bi0_(x_218){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _bi1_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_213,x_218),
         _bi2_=[0,caml_call2(include$9[32],_bi1_,_bi0_),_biZ_];
        return caml_call1(include$9[66],_bi2_)}
      return caml_call1(Base_quickcheck_Shrinker[25],_biM_)}
    function tuple6
     (generator_268,
      generator_269,
      generator_270,
      generator_271,
      generator_272,
      generator_273)
     {function _biG_(size_274,random_275)
       {var
         _biH_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_273,size_274,random_275),
         _biI_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_272,size_274,random_275),
         _biJ_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_271,size_274,random_275),
         _biK_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_270,size_274,random_275),
         _biL_=
          caml_call3
           (Base_quickcheck_Generator[109],generator_269,size_274,random_275);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[109],
                  generator_268,
                  size_274,
                  random_275),
                _biL_,
                _biK_,
                _biJ_,
                _biI_,
                _biH_]}
      return caml_call1(Base_quickcheck_Generator[108],_biG_)}
    function tuple6$0
     (observer_254,
      observer_255,
      observer_256,
      observer_257,
      observer_258,
      observer_259)
     {function _biF_(param,size_266,hash_267)
       {var
         x_265=param[6],
         x_264=param[5],
         x_263=param[4],
         x_262=param[3],
         x_261=param[2],
         x_260=param[1],
         hash_267$0=
          caml_call4
           (Base_quickcheck_Observer[28],observer_254,x_260,size_266,hash_267),
         hash_267$1=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_255,
            x_261,
            size_266,
            hash_267$0),
         hash_267$2=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_256,
            x_262,
            size_266,
            hash_267$1),
         hash_267$3=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_257,
            x_263,
            size_266,
            hash_267$2),
         hash_267$4=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_258,
            x_264,
            size_266,
            hash_267$3),
         hash_267$5=
          caml_call4
           (Base_quickcheck_Observer[28],
            observer_259,
            x_265,
            size_266,
            hash_267$4);
        return hash_267$5}
      return caml_call1(Base_quickcheck_Observer[27],_biF_)}
    function tuple6$1
     (shrinker_242,
      shrinker_243,
      shrinker_244,
      shrinker_245,
      shrinker_246,
      shrinker_247)
     {function _bil_(param)
       {var
         x_253=param[6],
         x_252=param[5],
         x_251=param[4],
         x_250=param[3],
         x_249=param[2],
         x_248=param[1],
         _bim_=0;
        function _bin_(x_253){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bio_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_247,x_253),
         _bip_=[0,caml_call2(include$9[32],_bio_,_bin_),_bim_];
        function _biq_(x_252){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bir_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_246,x_252),
         _bis_=[0,caml_call2(include$9[32],_bir_,_biq_),_bip_];
        function _bit_(x_251){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _biu_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_245,x_251),
         _biv_=[0,caml_call2(include$9[32],_biu_,_bit_),_bis_];
        function _biw_(x_250){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bix_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_244,x_250),
         _biy_=[0,caml_call2(include$9[32],_bix_,_biw_),_biv_];
        function _biz_(x_249){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _biA_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_243,x_249),
         _biB_=[0,caml_call2(include$9[32],_biA_,_biz_),_biy_];
        function _biC_(x_248){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _biD_=caml_call2(Base_quickcheck_Shrinker[26],shrinker_242,x_248),
         _biE_=[0,caml_call2(include$9[32],_biD_,_biC_),_biB_];
        return caml_call1(include$9[66],_biE_)}
      return caml_call1(Base_quickcheck_Shrinker[25],_bil_)}
    function fn2(observer_282,observer_283,generator_284)
     {var
       _bik_=
        caml_call2(Base_quickcheck_Generator[16],observer_283,generator_284);
      return caml_call2(Base_quickcheck_Generator[16],observer_282,_bik_)}
    function fn3(observer_293,observer_294,observer_295,generator_296)
     {var
       _bii_=
        caml_call2(Base_quickcheck_Generator[16],observer_295,generator_296),
       _bij_=caml_call2(Base_quickcheck_Generator[16],observer_294,_bii_);
      return caml_call2(Base_quickcheck_Generator[16],observer_293,_bij_)}
    function fn4
     (observer_307,observer_308,observer_309,observer_310,generator_311)
     {var
       _bif_=
        caml_call2(Base_quickcheck_Generator[16],observer_310,generator_311),
       _big_=caml_call2(Base_quickcheck_Generator[16],observer_309,_bif_),
       _bih_=caml_call2(Base_quickcheck_Generator[16],observer_308,_big_);
      return caml_call2(Base_quickcheck_Generator[16],observer_307,_bih_)}
    function fn5
     (observer_324,
      observer_325,
      observer_326,
      observer_327,
      observer_328,
      generator_329)
     {var
       _bib_=
        caml_call2(Base_quickcheck_Generator[16],observer_328,generator_329),
       _bic_=caml_call2(Base_quickcheck_Generator[16],observer_327,_bib_),
       _bid_=caml_call2(Base_quickcheck_Generator[16],observer_326,_bic_),
       _bie_=caml_call2(Base_quickcheck_Generator[16],observer_325,_bid_);
      return caml_call2(Base_quickcheck_Generator[16],observer_324,_bie_)}
    function fn6
     (observer_344,
      observer_345,
      observer_346,
      observer_347,
      observer_348,
      observer_349,
      generator_350)
     {var
       _bh8_=
        caml_call2(Base_quickcheck_Generator[16],observer_349,generator_350),
       _bh9_=caml_call2(Base_quickcheck_Generator[16],observer_348,_bh8_),
       _bh__=caml_call2(Base_quickcheck_Generator[16],observer_347,_bh9_),
       _bh$_=caml_call2(Base_quickcheck_Generator[16],observer_346,_bh__),
       _bia_=caml_call2(Base_quickcheck_Generator[16],observer_345,_bh$_);
      return caml_call2(Base_quickcheck_Generator[16],observer_344,_bia_)}
    var
     opaque=Base_quickcheck_Observer[1],
     bool=Base_quickcheck_Observer[3],
     char$0=Base_quickcheck_Observer[4],
     int$0=Base_quickcheck_Observer[6],
     fn=Base_quickcheck_Observer[18],
     of_hash_fold=Base_quickcheck_Observer[23],
     unmap=Base_quickcheck_Observer[24],
     fixed_point=Base_quickcheck_Observer[25],
     create$5=Base_quickcheck_Observer[27],
     observe=Base_quickcheck_Observer[28];
    function of_hash(M){return caml_call1(of_hash_fold,M[1])}
    function of_predicate(a,b,f)
     {function _bh7_(x){return caml_call1(f,x)?[0,65,x]:[0,66,x]}
      return caml_call2(unmap,variant2$0(a,b),_bh7_)}
    function singleton(param){return opaque}
    function doubleton(f)
     {var _bh6_=singleton(0);return of_predicate(singleton(0),_bh6_,f)}
    function enum$0(param,f){return caml_call2(unmap,int$0,f)}
    function of_list$1(list,equal)
     {function f(x)
       {function _bh5_(param,y){return caml_call2(equal,x,y)}
        var match=caml_call2(include$23[66],list,_bh5_);
        if(match){var match$0=match[1],i=match$0[1];return i}
        return caml_call1
                (_a__,cst_Quickcheck_Observer_of_list_value_not_found)}
      return enum$0(caml_call1(include$23[6],list),f)}
    function of_fun(f)
     {return caml_call1
              (create$5,
               function(x,size,hash)
                {return caml_call4(observe,caml_call1(f,0),x,size,hash)})}
    function comparison(compare,eq,lt,gt)
     {function _bh4_(x)
       {var c=caml_call2(compare,x,eq);
        return caml_call2(_aP_,c,0)
                ?[0,65,x]
                :caml_call2(_aT_,c,0)?[0,67,x]:[0,66,x]}
      return caml_call2(unmap,variant3$0(lt,singleton(0),gt),_bh4_)}
    var
     bool$0=Base_quickcheck_Generator[2],
     char$1=Base_quickcheck_Generator[3],
     int$1=Base_quickcheck_Generator[5],
     list=Base_quickcheck_Generator[13],
     fn$0=Base_quickcheck_Generator[16],
     of_list$2=Base_quickcheck_Generator[21],
     union$0=Base_quickcheck_Generator[22],
     both=Base_quickcheck_Generator[23],
     symbol$0=Base_quickcheck_Generator[24],
     symbol$1=Base_quickcheck_Generator[25],
     symbol$2=Base_quickcheck_Generator[26],
     apply=Base_quickcheck_Generator[27],
     map2=Base_quickcheck_Generator[28],
     map3=Base_quickcheck_Generator[29],
     Applicative_infix=Base_quickcheck_Generator[30],
     symbol_bind=Base_quickcheck_Generator[31],
     symbol_map=Base_quickcheck_Generator[32],
     include$28=Base_quickcheck_Generator[33],
     bind$0=Base_quickcheck_Generator[34],
     return$1=Base_quickcheck_Generator[35],
     map$6=Base_quickcheck_Generator[36],
     join=Base_quickcheck_Generator[37],
     ignore_m=Base_quickcheck_Generator[38],
     all=Base_quickcheck_Generator[39],
     all_unit=Base_quickcheck_Generator[40],
     Let_syntax=Base_quickcheck_Generator[41],
     size=Base_quickcheck_Generator[42],
     with_size=Base_quickcheck_Generator[43],
     filter$2=Base_quickcheck_Generator[45],
     filter_map$1=Base_quickcheck_Generator[46],
     recursive_union=Base_quickcheck_Generator[47],
     fixed_point$0=Base_quickcheck_Generator[48],
     weighted_union=Base_quickcheck_Generator[51],
     weighted_recursive_union=Base_quickcheck_Generator[52],
     small_non_negative_int=Base_quickcheck_Generator[53],
     small_positive_int=Base_quickcheck_Generator[54],
     char_lowercase=Base_quickcheck_Generator[89],
     char_uppercase=Base_quickcheck_Generator[90],
     char_digit=Base_quickcheck_Generator[91],
     char_alpha=Base_quickcheck_Generator[92],
     char_alphanum=Base_quickcheck_Generator[93],
     char_whitespace=Base_quickcheck_Generator[94],
     char_print=Base_quickcheck_Generator[95],
     list_non_empty=Base_quickcheck_Generator[103],
     create$6=Base_quickcheck_Generator[108],
     generate=Base_quickcheck_Generator[109],
     singleton$0=Let_syntax[1],
     _uO_=Base_quickcheck_Generator[104];
    function doubleton$0(x,y)
     {return caml_call1
              (create$6,
               function(param,random)
                {return caml_call1(Splittable_random[2],random)?x:y})}
    function of_fun$0(f)
     {return caml_call1
              (create$6,
               function(size,random)
                {return caml_call3(generate,caml_call1(f,0),size,random)})}
    function of_sequence(p,seq)
     {var
       _bhZ_=caml_call2(include$13[9],p,0.),
       _bh0_=_bhZ_ || caml_call2(include$13[11],p,1.);
      if(_bh0_)caml_call1(_a__,caml_call2(_fE_,_uP_,p));
      function _bh1_(param)
       {return caml_call1(_a__,cst_Generator_of_sequence_ran_out_of_values)}
      return caml_call4
              (_ke_,
               seq,
               0,
               function(param,x,k)
                {var
                  _bh2_=of_fun$0(k),
                  _bh3_=[0,[0,caml_call2(_a2_,1.,p),_bh2_],0];
                 return caml_call1
                         (weighted_union,[0,[0,p,caml_call1(singleton$0,x)],_bh3_])},
               _bh1_)}
    function bounded_geometric(p,maximum,init)
     {if(caml_call2(_aS_,init,maximum))return caml_call1(singleton$0,maximum);
      var
       _bhW_=0,
       _bhX_=
        of_fun$0
         (function(param)
           {return bounded_geometric(p,maximum,caml_call2(_aw_,init,1))}),
       _bhY_=[0,[0,caml_call2(_a2_,1.,p),_bhX_],_bhW_];
      return caml_call1
              (weighted_union,[0,[0,p,caml_call1(singleton$0,init)],_bhY_])}
    function geometric(p,init)
     {return bounded_geometric(p,include$29[88],init)}
    function list_with_length(length,t){return caml_call2(_uO_,t,length)}
    function compare_fn(dom)
     {function _bhT_(get_index,x,y)
       {var _bhV_=caml_call1(get_index,y);
        return caml_call2(_x_,caml_call1(get_index,x),_bhV_)}
      var _bhU_=caml_call2(fn$0,dom,int$1);
      return caml_call2(Let_syntax[3],_bhU_,_bhT_)}
    function equal_fn(dom)
     {function _bhQ_(cmp,x,y)
       {var _bhS_=caml_call2(cmp,x,y);
        return caml_call2(include$29[13],_bhS_,0)}
      var _bhR_=compare_fn(dom);
      return caml_call2(Let_syntax[3],_bhR_,_bhQ_)}
    var
     atomic=Base_quickcheck_Shrinker[1],
     bool$1=Base_quickcheck_Shrinker[3],
     char$2=Base_quickcheck_Shrinker[4],
     map$7=Base_quickcheck_Shrinker[22],
     fixed_point$1=Base_quickcheck_Shrinker[23],
     create$7=Base_quickcheck_Shrinker[25],
     shrink=Base_quickcheck_Shrinker[26];
    function empty(param){return atomic}
    var symbol_bind$0=include$28[1],symbol_map$0=include$28[2];
    function Configure(Config)
     {var
       default_seed=Config[1],
       default_sizes=Config[2],
       default_trial_count=Config[3],
       default_can_generate_trial_count=Config[4],
       default_shrink_attempts=Config[5],
       nondeterministic_state=
        [246,function(_bhP_){return caml_call2(Base_Random[18][3],0,0)}];
      function random_state_of_seed(seed)
       {if(typeof seed === "number")
         {var
           _bhM_=caml_obj_tag(nondeterministic_state),
           _bhN_=
            250 === _bhM_
             ?nondeterministic_state[1]
             :246 === _bhM_
               ?caml_call1(CamlinternalLazy[2],nondeterministic_state)
               :nondeterministic_state;
          return caml_call1(Splittable_random[1][1],_bhN_)}
        var str=seed[2],_bhO_=caml_call1(_ai_,str);
        return caml_call1(Splittable_random[1][2],_bhO_)}
      function make_seed(seed)
       {if(typeof seed === "number")return 0;
        var string=seed[2];
        return [0,string]}
      function make_shrink_count(param)
       {if(typeof param === "number")return include$29[88];
        var n=param[2];
        return n}
      function make_config(seed,sizes,trials,shrink_attempts)
       {var
         _bhJ_=caml_call2(include$30[40],sizes,default_sizes),
         _bhK_=
          make_shrink_count
           (caml_call2(include$30[40],shrink_attempts,default_shrink_attempts)),
         _bhL_=caml_call2(include$30[40],trials,default_trial_count);
        return [0,
                make_seed(caml_call2(include$30[40],seed,default_seed)),
                _bhL_,
                _bhK_,
                _bhJ_]}
      function make_test_m(quickcheck_generator,shrinker,sexp_of)
       {var quickcheck_shrinker=caml_call2(include$30[40],shrinker,atomic);
        function _bhI_(param){return _uQ_}
        var sexp_of_t=caml_call2(include$30[40],sexp_of,_bhI_);
        return [0,sexp_of_t,quickcheck_generator,quickcheck_shrinker]}
      function random_value(opt,_bhH_,gen)
       {if(opt)var sth=opt[1],seed=sth;else var seed=default_seed;
        if(_bhH_)var sth$0=_bhH_[1],size=sth$0;else var size=30;
        var random=random_state_of_seed(seed);
        return caml_call3(generate,gen,size,random)}
      function random_sequence(seed,sizes,gen)
       {var
         config=make_config(seed,sizes,[0,include$29[88]],0),
         return$0=[0,_jj_],
         _bhE_=0,
         _bhF_=[0,config];
        function _bhG_(sequence){return$0[1] = sequence;return 0}
        caml_call4(Base_quickcheck_Test[6],_bhG_,_bhF_,_bhE_,gen);
        return return$0[1]}
      function iter(seed,sizes,trials,gen,f)
       {var config=make_config(seed,sizes,trials,0),_bhB_=0,_bhC_=[0,config];
        function _bhD_(sequence){return caml_call2(_iS_,sequence,f)}
        return caml_call4(Base_quickcheck_Test[6],_bhD_,_bhC_,_bhB_,gen)}
      function test
       (seed,sizes,trials,shrinker,shrink_attempts,sexp_of,examples,gen,f)
       {var
         config=make_config(seed,sizes,trials,shrink_attempts),
         test_m=make_test_m(gen,shrinker,sexp_of);
        return caml_call4
                (Base_quickcheck_Test[4],f,[0,config],examples,test_m)}
      function test_or_error
       (seed,sizes,trials,shrinker,shrink_attempts,sexp_of,examples,gen,f)
       {var
         config=make_config(seed,sizes,trials,shrink_attempts),
         test_m=make_test_m(gen,shrinker,sexp_of);
        return caml_call4
                (Base_quickcheck_Test[3],f,[0,config],examples,test_m)}
      function test_distinct_values
       (seed,sizes,sexp_of,gen,trials,distinct_values,compare)
       {var S=caml_call1(Stdlib_set[1],[0,compare]);
        return caml_call1
                (_ft_,
                 function(r)
                  {var set=[0,S[1]];
                   iter
                    (seed,
                     sizes,
                     [0,trials],
                     gen,
                     function(elt)
                      {set[1] = caml_call2(S[4],elt,set[1]);
                       var
                        _bhA_=
                         caml_call2(_aU_,caml_call1(S[21],set[1]),distinct_values);
                       return _bhA_?caml_call1(r,0):_bhA_});
                   var _bhz_=set[1],actual_count=caml_call1(S[21],_bhz_);
                   if(sexp_of)
                    var
                     sexp_of_elt=sexp_of[1],
                     values=
                      [0,caml_call2(_R_,sexp_of_elt,caml_call1(S[22],_bhz_))];
                   else
                    var values=0;
                   var match=0;
                   if(values)
                    var
                     v=values[1],
                     _bhu_=[0,[1,[0,_uR_,[0,caml_call1(Base[84][4],v),0]]],match];
                   else
                    var _bhu_=match;
                   var
                    _bhv_=
                     [0,
                      [1,[0,_uS_,[0,caml_call1(sexp_of_t$0,actual_count),0]]],
                      _bhu_],
                    _bhw_=
                     [0,
                      [1,[0,_uT_,[0,caml_call1(sexp_of_t$0,distinct_values),0]]],
                      _bhv_],
                    _bhx_=
                     [0,[1,[0,_uU_,[0,caml_call1(sexp_of_t$0,trials),0]]],_bhw_],
                    res=
                     [0,
                      caml_call1
                       (Sexplib0_Sexp_conv[7],cst_insufficient_distinct_values),
                      _bhx_];
                   if(res)
                    if(res[2])
                     var switch$0=0;
                    else
                     var h=res[1],_bhy_=h,switch$0=1;
                   else
                    var switch$0=0;
                   if(! switch$0)var _bhy_=[1,res];
                   return caml_call1(_ba_,_bhy_)})}
      function test_can_generate(seed,sizes,opt,sexp_of,gen,f)
       {if(opt)
         var sth=opt[1],trials=sth;
        else
         var trials=default_can_generate_trial_count;
        var r=[0,0];
        function _bhs_(return$0)
         {iter
           (seed,
            sizes,
            [0,trials],
            gen,
            function(x)
             {return caml_call1(f,x)
                      ?caml_call1(return$0,-895996764)
                      :(r[1] = [0,x,r[1]],0)});
          return 501585681}
        var match=caml_call1(Base_With_return[1],_bhs_);
        if(501585681 <= match)
         {if(sexp_of)
           {var
             sexp_of_value=sexp_of[1],
             _bht_=[0,[1,[0,_uV_,[0,caml_call2(_R_,sexp_of_value,r[1]),0]]],0];
            return caml_call1
                    (_on_,
                     [1,
                      [0,
                       caml_call1(Sexplib0_Sexp_conv[7],cst_cannot_generate),
                       _bht_]])}
          return caml_call1(_a__,cst_cannot_generate$0)}
        return 0}
      return [0,
              default_seed,
              default_sizes,
              default_trial_count,
              default_can_generate_trial_count,
              default_shrink_attempts,
              nondeterministic_state,
              random_state_of_seed,
              make_seed,
              make_shrink_count,
              make_config,
              make_test_m,
              random_value,
              random_sequence,
              iter,
              test,
              test_or_error,
              test_distinct_values,
              test_can_generate]}
    var
     _uW_=0 === Base_Word_size[3]?1000:10000,
     default_sizes=caml_call1(_kb_,caml_call5(include$23[114],0,0,_uX_,0,30)),
     include$31=
      Configure
       ([0,default_seed,default_sizes,_uW_,10000,default_shrink_attempts]),
     _u6_=include$31[15],
     _uY_=include$31[1],
     _uZ_=include$31[2],
     _u0_=include$31[3],
     _u1_=include$31[4],
     _u2_=include$31[5],
     _u3_=include$31[12],
     _u4_=include$31[13],
     _u5_=include$31[14],
     _u7_=include$31[16],
     _u8_=include$31[17],
     _u9_=include$31[18];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$100);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _u__=
      [0,
       return$1,
       symbol_bind$0,
       symbol_map$0,
       [0,
        return$1,
        bind$0,
        map$6,
        both,
        [0,
         create$6,
         generate,
         symbol_bind,
         include$28,
         bind$0,
         join,
         ignore_m,
         return$1,
         map$6,
         both,
         symbol$0,
         symbol$1,
         symbol$2,
         symbol_map,
         apply,
         map2,
         map3,
         all,
         all_unit,
         Applicative_infix,
         size,
         with_size,
         bool$0,
         char$1,
         char_digit,
         char_lowercase,
         char_uppercase,
         char_alpha,
         char_alphanum,
         char_print,
         char_whitespace,
         singleton$0,
         doubleton$0,
         of_list$2,
         union$0,
         of_sequence,
         tuple2,
         tuple3,
         tuple4,
         tuple5,
         tuple6,
         variant2,
         variant3,
         variant4,
         variant5,
         variant6,
         geometric,
         small_non_negative_int,
         small_positive_int,
         fn$0,
         fn2,
         fn3,
         fn4,
         fn5,
         fn6,
         compare_fn,
         equal_fn,
         filter_map$1,
         filter$2,
         recursive_union,
         weighted_recursive_union,
         fixed_point$0,
         weighted_union,
         of_fun$0,
         list,
         list_non_empty,
         list_with_length]]],
     _u$_=
      [0,
       shrink,
       create$7,
       empty,
       bool$1,
       char$2,
       map$7,
       tuple2$1,
       tuple3$1,
       tuple4$1,
       tuple5$1,
       tuple6$1,
       variant2$1,
       variant3$1,
       variant4$1,
       variant5$1,
       variant6$1,
       fixed_point$1],
     _va_=
      [0,
       create$5,
       observe,
       of_hash,
       bool,
       char$0,
       doubleton,
       enum$0,
       of_list$1,
       fixed_point,
       variant2$0,
       variant3$0,
       variant4$0,
       variant5$0,
       variant6$0,
       of_predicate,
       comparison,
       singleton,
       unmap,
       tuple2$0,
       tuple3$0,
       tuple4$0,
       tuple5$0,
       tuple6$0,
       fn,
       of_fun],
     _vb_=
      [0,
       create$6,
       generate,
       symbol_bind,
       include$28,
       bind$0,
       join,
       ignore_m,
       Let_syntax,
       return$1,
       map$6,
       both,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol_map,
       apply,
       map2,
       map3,
       all,
       all_unit,
       Applicative_infix,
       size,
       with_size,
       bool$0,
       char$1,
       char_digit,
       char_lowercase,
       char_uppercase,
       char_alpha,
       char_alphanum,
       char_print,
       char_whitespace,
       singleton$0,
       doubleton$0,
       of_list$2,
       union$0,
       of_sequence,
       tuple2,
       tuple3,
       tuple4,
       tuple5,
       tuple6,
       variant2,
       variant3,
       variant4,
       variant5,
       variant6,
       geometric,
       small_non_negative_int,
       small_positive_int,
       fn$0,
       fn2,
       fn3,
       fn4,
       fn5,
       fn6,
       compare_fn,
       equal_fn,
       filter_map$1,
       filter$2,
       recursive_union,
       weighted_recursive_union,
       fixed_point$0,
       weighted_union,
       of_fun$0,
       list,
       list_non_empty,
       list_with_length],
     Core_kernel_Quickcheck=
      [0,
       _vb_,
       _va_,
       _u$_,
       _u__,
       _uY_,
       _uZ_,
       _u0_,
       _u1_,
       _u2_,
       _u3_,
       _u5_,
       _u6_,
       _u7_,
       _u9_,
       _u8_,
       _u4_,
       function(_bhq_)
        {var _bhr_=Configure(_bhq_);
         return [0,
                 _bhr_[1],
                 _bhr_[2],
                 _bhr_[3],
                 _bhr_[4],
                 _bhr_[5],
                 _bhr_[12],
                 _bhr_[14],
                 _bhr_[15],
                 _bhr_[16],
                 _bhr_[18],
                 _bhr_[17],
                 _bhr_[13]]}];
    caml_register_global
     (4331,Core_kernel_Quickcheck,"Core_kernel__Quickcheck");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$101);
    caml_call1(Expect_test_collector[4][1],cst_src_map_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$102,cst$33);
    var Key_bin_io=[0];
    function Check_accessors(T,Tree,Key,Cmp,Options,M){return [0]}
    function Check_accessors1(M){return [0]}
    function Check_accessors2(M){return [0]}
    function Check_accessors3(M){return [0]}
    function Check_accessors3_with_comparator(M){return [0]}
    function Check_creators(T,Tree,Key,Cmp,Options,M){return [0]}
    function Check_creators1(M){return [0]}
    function Check_creators2(M){return [0]}
    function Check_creators3_with_comparator(M){return [0]}
    function Make_S_plain_tree(Key){return [0]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$103);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Map_intf=
      [0,
       Key_bin_io,
       Check_accessors,
       Check_accessors1,
       Check_accessors2,
       Check_accessors3,
       Check_accessors3_with_comparator,
       Check_creators,
       Check_creators1,
       Check_creators2,
       Check_creators3_with_comparator,
       Make_S_plain_tree];
    caml_register_global(4333,Core_kernel_Map_intf,"Core_kernel__Map_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$104);
    caml_call1(Expect_test_collector[4][1],cst_src_map_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$105,cst$34);
    var
     _vc_=caml_call1(Bin_prot_Shape[3][1],cst_v),
     _vd_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_77),
     _ve_=[0,caml_call2(Bin_prot_Shape[15],_vd_,_vc_),0],
     _vf_=caml_call1(Bin_prot_Shape[3][1],cst_v$0),
     _vg_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_72),
     _vh_=[0,caml_call2(Bin_prot_Shape[15],_vg_,_vf_),_ve_],
     _vi_=[0,caml_call1(Bin_prot_Shape[7],_vh_)],
     _vj_=[0,caml_call2(Bin_prot_Shape[10],cst_Unequal,_vi_),0],
     _vk_=caml_call1(Bin_prot_Shape[3][1],cst_v$1),
     _vl_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_55),
     _vm_=[0,caml_call2(Bin_prot_Shape[15],_vl_,_vk_)],
     _vn_=[0,caml_call2(Bin_prot_Shape[10],cst_Right$0,_vm_),_vj_],
     _vo_=caml_call1(Bin_prot_Shape[3][1],cst_v$2),
     _vp_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_40),
     _vq_=[0,caml_call2(Bin_prot_Shape[15],_vp_,_vo_)],
     _vr_=[0,caml_call2(Bin_prot_Shape[10],cst_Left$0,_vq_),_vn_],
     _vs_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_29),
     _vt_=[0,caml_call2(Bin_prot_Shape[12],_vs_,_vr_),0],
     _vu_=caml_call1(Bin_prot_Shape[3][1],cst_k),
     _vv_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_24),
     _vw_=[0,caml_call2(Bin_prot_Shape[15],_vv_,_vu_),_vt_],
     _vx_=caml_call1(Bin_prot_Shape[7],_vw_),
     _vy_=[0,caml_call1(Bin_prot_Shape[3][1],cst_v$3),0],
     _vz_=[0,caml_call1(Bin_prot_Shape[3][1],cst_k$0),_vy_],
     _vA_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$81),_vz_,_vx_],0],
     _vB_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_6),
     group$37=caml_call2(Bin_prot_Shape[6],_vB_,_vA_);
    function bin_shape_t$30(k,v)
     {var _bhp_=caml_call1(Bin_prot_Shape[2][1],cst_t$82);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$37,_bhp_),[0,k,[0,v,0]])}
    function bin_size_t$32(size_of_k,size_of_v,param)
     {var
       v2=param[2],
       v1=param[1],
       _bhk_=caml_call1(size_of_k,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bhk_),
       _bhl_=v2[1];
      if(847852583 === _bhl_)
       var
        args=v2[2],
        size_args=caml_call1(size_of_v,args),
        _bhm_=caml_call2(Bin_prot_Common[23],size_args,4);
      else
       if(1013247643 <= _bhl_)
        var
         args$0=v2[2],
         v2$0=args$0[2],
         v1$0=args$0[1],
         _bhn_=caml_call1(size_of_v,v1$0),
         size$0=caml_call2(Bin_prot_Common[23],0,_bhn_),
         _bho_=caml_call1(size_of_v,v2$0),
         size_args$0=caml_call2(Bin_prot_Common[23],size$0,_bho_),
         _bhm_=caml_call2(Bin_prot_Common[23],size_args$0,4);
       else
        var
         args$1=v2[2],
         size_args$1=caml_call1(size_of_v,args$1),
         _bhm_=caml_call2(Bin_prot_Common[23],size_args$1,4);
      return caml_call2(Bin_prot_Common[23],size,_bhm_)}
    function bin_write_t$32(write_k,write_v,buf,pos,param)
     {var
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(write_k,buf,pos,v1),
       _bhj_=v2[1];
      if(847852583 === _bhj_)
       {var
         args=v2[2],
         pos$1=caml_call3(Bin_prot_Write[29],buf,pos$0,847852583);
        return caml_call3(write_v,buf,pos$1,args)}
      if(1013247643 <= _bhj_)
       {var
         args$0=v2[2],
         pos$2=caml_call3(Bin_prot_Write[29],buf,pos$0,1013247643),
         v2$0=args$0[2],
         v1$0=args$0[1],
         pos$3=caml_call3(write_v,buf,pos$2,v1$0);
        return caml_call3(write_v,buf,pos$3,v2$0)}
      var
       args$1=v2[2],
       pos$4=caml_call3(Bin_prot_Write[29],buf,pos$0,-57574468);
      return caml_call3(write_v,buf,pos$4,args$1)}
    function bin_writer_t$24(bin_writer_k,bin_writer_v)
     {function _bhe_(v)
       {var _bhf_=bin_writer_v[2],_bhg_=bin_writer_k[2];
        return function(_bhh_,_bhi_)
         {return bin_write_t$32(_bhg_,_bhf_,v,_bhh_,_bhi_)}}
      return [0,
              function(v)
               {return bin_size_t$32(bin_writer_k[1],bin_writer_v[1],v)},
              _bhe_]}
    function bin_read_t$66(of_k,of_v,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_map_ml_Symmetric_diff_element_Stable_V1_t,
               pos_ref[1])}
    function bin_read_t$67(of_k,of_v,buf,pos_ref)
     {var
       v1=caml_call2(of_k,buf,pos_ref),
       vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {if(-57574468 === vint)
         var arg_1=caml_call2(of_v,buf,pos_ref),_bhc_=[0,-57574468,arg_1];
        else
         if(847852583 === vint)
          var
           arg_1$0=caml_call2(of_v,buf,pos_ref),
           _bhc_=[0,847852583,arg_1$0];
         else
          {if(1013247643 !== vint)throw Bin_prot_Common[13];
           var
            v1$0=caml_call2(of_v,buf,pos_ref),
            v2$0=caml_call2(of_v,buf,pos_ref),
            arg_1$1=[0,v1$0,v2$0],
            _bhc_=[0,1013247643,arg_1$1]}
        var v2=_bhc_}
      catch(_bhd_)
       {_bhd_ = caml_wrap_exception(_bhd_);
        if(_bhd_ !== Bin_prot_Common[13])throw _bhd_;
        var
         v2=
          caml_call2
           (Bin_prot_Common[19],
            cst_src_map_ml_Symmetric_diff_element_Stable_V1_t$0,
            pos_ref[1])}
      return [0,v1,v2]}
    function bin_reader_t$24(bin_reader_k,bin_reader_v)
     {function _bhb_(buf,pos_ref,vtag)
       {return bin_read_t$66(bin_reader_k[1],bin_reader_v[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$67
                        (bin_reader_k[1],bin_reader_v[1],buf,pos_ref)},
              _bhb_]}
    function bin_t$24(bin_k,bin_v)
     {var
       _bg$_=bin_reader_t$24(bin_k[3],bin_v[3]),
       _bha_=bin_writer_t$24(bin_k[2],bin_v[2]);
      return [0,bin_shape_t$30(bin_k[1],bin_v[1]),_bha_,_bg$_]}
    function compare$15(cmp_k,cmp_v,a_001,b_002)
     {var
       t_004=a_001[2],
       t_003=a_001[1],
       t_006=b_002[2],
       t_005=b_002[1],
       n=caml_call2(cmp_k,t_003,t_005);
      if(0 === n)
       {if(caml_call2(Ppx_compare_lib[1],t_004,t_006))return 0;
        var _bg__=t_004[1];
        if(847852583 === _bg__)
         {if(typeof t_006 !== "number")
           if(847852583 === t_006[1])
            {var right_008=t_006[2],left_007=t_004[2];
             return caml_call2(cmp_v,left_007,right_008)}}
        else
         if(1013247643 <= _bg__)
          {if(typeof t_006 !== "number")
            if(1013247643 === t_006[1])
             {var
               right_012=t_006[2],
               left_011=t_004[2],
               t_014=left_011[2],
               t_013=left_011[1],
               t_016=right_012[2],
               t_015=right_012[1],
               n$0=caml_call2(cmp_v,t_013,t_015);
              return 0 === n$0?caml_call2(cmp_v,t_014,t_016):n$0}}
         else
          if(typeof t_006 !== "number")
           if(-57574468 === t_006[1])
            {var right_010=t_006[2],left_009=t_004[2];
             return caml_call2(cmp_v,left_009,right_010)}
        return caml_compare(t_004,t_006)}
      return n}
    function t_of_sexp$20(of_k,of_v,sexp)
     {if(1 === sexp[0])
       {var _bgV_=sexp[1];
        if(_bgV_)
         {var _bgW_=_bgV_[2];
          if(_bgW_)
           if(! _bgW_[2])
            {var
              v1=_bgW_[1],
              v0=_bgV_[1],
              v0$0=caml_call1(of_k,v0),
              v1$0=
               function(sexp)
                 {try
                   {if(0 === sexp[0])
                     var
                      atom=sexp[1],
                      _bgX_=
                       caml_string_notequal(atom,cst_Left$1)
                        ?caml_string_notequal(atom,cst_Right$1)
                          ?caml_string_notequal(atom,cst_Unequal$0)
                            ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                            :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$13,sexp)
                          :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$13,sexp)
                        :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$13,sexp),
                      _bgY_=_bgX_;
                    else
                     {var _bgZ_=sexp[1];
                      if(_bgZ_)
                       {var _bg0_=_bgZ_[1];
                        if(0 === _bg0_[0])
                         {var sexp_args=_bgZ_[2],atom$0=_bg0_[1];
                          if(caml_string_notequal(atom$0,cst_Left$2))
                           if(caml_string_notequal(atom$0,cst_Right$2))
                            if(caml_string_notequal(atom$0,cst_Unequal$1))
                             var _bg1_=caml_call1(Sexplib0_Sexp_conv_error[18],0);
                            else
                             {if(sexp_args)
                               if(sexp_args[2])
                                var switch$0=0;
                               else
                                {var v0=sexp_args[1];
                                 if(1 === v0[0])
                                  {var _bg5_=v0[1];
                                   if(_bg5_)
                                    {var _bg6_=_bg5_[2];
                                     if(_bg6_)
                                      if(_bg6_[2])
                                       var switch$1=0;
                                      else
                                       var
                                        v1=_bg6_[1],
                                        v0$1=_bg5_[1],
                                        v0$2=caml_call1(of_v,v0$1),
                                        v1$0=caml_call1(of_v,v1),
                                        v0$0=[0,v0$2,v1$0],
                                        switch$1=1;
                                     else
                                      var switch$1=0}
                                   else
                                    var switch$1=0}
                                 else
                                  var switch$1=0;
                                 if(! switch$1)
                                  var
                                   v0$0=
                                    caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$13,2,v0);
                                 var _bg4_=[0,1013247643,v0$0],switch$0=1}
                              else
                               var switch$0=0;
                              if(! switch$0)
                               var
                                _bg4_=
                                 caml_call3
                                  (Sexplib0_Sexp_conv_error[21],tp_loc$13,atom$0,sexp);
                              var _bg1_=_bg4_}
                           else
                            {if(sexp_args)
                              if(sexp_args[2])
                               var switch$2=0;
                              else
                               var
                                v0$3=sexp_args[1],
                                v0$4=caml_call1(of_v,v0$3),
                                _bg7_=[0,-57574468,v0$4],
                                switch$2=1;
                             else
                              var switch$2=0;
                             if(! switch$2)
                              var
                               _bg7_=
                                caml_call3
                                 (Sexplib0_Sexp_conv_error[21],tp_loc$13,atom$0,sexp);
                             var _bg1_=_bg7_}
                          else
                           {if(sexp_args)
                             if(sexp_args[2])
                              var switch$3=0;
                             else
                              var
                               v0$5=sexp_args[1],
                               v0$6=caml_call1(of_v,v0$5),
                               _bg8_=[0,847852583,v0$6],
                               switch$3=1;
                            else
                             var switch$3=0;
                            if(! switch$3)
                             var
                              _bg8_=
                               caml_call3
                                (Sexplib0_Sexp_conv_error[21],tp_loc$13,atom$0,sexp);
                            var _bg1_=_bg8_}
                          var _bg2_=_bg1_}
                        else
                         var
                          _bg2_=
                           caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$13,sexp);
                        var _bg3_=_bg2_}
                      else
                       var
                        _bg3_=
                         caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$13,sexp);
                      var _bgY_=_bg3_}
                    return _bgY_}
                  catch(_bg9_)
                   {_bg9_ = caml_wrap_exception(_bg9_);
                    if(_bg9_ === Sexplib0_Sexp_conv_error[17])
                     return caml_call2
                             (Sexplib0_Sexp_conv_error[19],tp_loc$13,sexp);
                    throw _bg9_}}
                (v1);
             return [0,v0$0,v1$0]}}}
      return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$13,2,sexp)}
    function sexp_of_t$21(of_k,of_v,param)
     {var v1=param[2],v0=param[1],v0$0=caml_call1(of_k,v0),_bgU_=v1[1];
      if(847852583 === _bgU_)
       var v0$1=v1[2],v1$0=[1,[0,_vC_,[0,caml_call1(of_v,v0$1),0]]];
      else
       if(1013247643 <= _bgU_)
        var
         v0$2=v1[2],
         v1$1=v0$2[2],
         v0$3=v0$2[1],
         v0$4=caml_call1(of_v,v0$3),
         v1$2=caml_call1(of_v,v1$1),
         v1$0=[1,[0,_vD_,[0,[1,[0,v0$4,[0,v1$2,0]]],0]]];
       else
        var v0$5=v1[2],v1$0=[1,[0,_vE_,[0,caml_call1(of_v,v0$5),0]]];
      return [1,[0,v0$0,[0,v1$0,0]]]}
    var
     Expect_test_collector$0=
      caml_call1
       (Expect_test_collector[2],
        [0,
         Expect_test_config[2],
         Expect_test_config[3],
         Expect_test_config[4],
         Expect_test_config[5],
         Expect_test_config[6],
         Expect_test_config[7]]);
    function _vF_(param)
     {var
       _bgT_=bin_shape_t$30(_cq_,_cb_),
       _bgR_=caml_call1(Bin_prot_Shape[21],_bgT_);
      caml_call1(_bk_,caml_call1(Bin_prot_Shape[18][4],_bgR_));
      var
       _bgS_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_map_ml$0),
         13,
         339,
         349,
         355];
      return caml_call1(Expect_test_collector$0[1],_bgS_)}
    var
     _vG_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_map_ml$1),
       13,
       339,
       356,
       394],
     _vJ_=
      [0,
       [0,
        _vI_,
        _vH_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_map_ml$2),
         13,
         339,
         349,
         355],
        _vG_],
       0],
     _vK_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_map_ml$4),
       11,
       259,
       265,
       395],
     _vL_=
      caml_call1
       (Expect_test_common_File[4][3],cst_1a342280db928f54d4b7753fac950431);
    caml_call9
     (Expect_test_collector$0[3],
      _vL_,
      _vK_,
      cst_src_map_ml$3,
      0,
      0,
      _vJ_,
      0,
      Inline_test_config,
      _vF_);
    function map$8(param,f1,f2)
     {var diff=param[2],k=param[1],k$0=caml_call1(f1,k),_bgP_=diff[1];
      if(847852583 === _bgP_)
       var v=diff[2],diff$0=[0,847852583,caml_call1(f2,v)];
      else
       if(1013247643 <= _bgP_)
        var
         match=diff[2],
         v2=match[2],
         v1=match[1],
         _bgQ_=caml_call1(f2,v2),
         diff$0=[0,1013247643,[0,caml_call1(f2,v1),_bgQ_]];
       else
        var v$0=diff[2],diff$0=[0,-57574468,caml_call1(f2,v$0)];
      return [0,k$0,diff$0]}
    function map_data(t,f){return map$8(t,function(_bgO_){return _bgO_},f)}
    function left(param)
     {var diff=param[2],_bgN_=diff[1];
      if(847852583 === _bgN_)
       var x=diff[2];
      else
       {if(! (1013247643 <= _bgN_))return 0;var x=diff[2][1]}
      return [0,x]}
    function right(param)
     {var diff=param[2],_bgM_=diff[1];
      if(847852583 === _bgM_)return 0;
      var x=1013247643 <= _bgM_?diff[2][2]:diff[2];
      return [0,x]}
    function gen_tree(comparator,k_gen,v_gen)
     {return caml_call3(Base_quickcheck_Generator[19],comparator,k_gen,v_gen)}
    function quickcheck_generator(comparator,k_gen,v_gen)
     {return caml_call3
              (Base_quickcheck_Generator[17],[0,comparator],k_gen,v_gen)}
    function obs_tree(k_obs,v_obs)
     {return caml_call2(Base_quickcheck_Observer[21],k_obs,v_obs)}
    function shr_tree(comparator,k_shr,v_shr)
     {return caml_call3(Base_quickcheck_Shrinker[20],comparator,k_shr,v_shr)}
    var
     quickcheck_generator$0=Base_quickcheck_Generator[17],
     quickcheck_observer=Base_quickcheck_Observer[19],
     quickcheck_shrinker=Base_quickcheck_Shrinker[18],
     _vM_=Base_Map[98],
     sexp_of_t$22=_vM_[1],
     t_of_sexp_direct=_vM_[2],
     keys$0=_vM_[40],
     to_tree=_vM_[66],
     empty$0=_vM_[70],
     singleton$1=_vM_[71],
     of_alist$0=_vM_[72],
     of_alist_or_error$0=_vM_[73],
     of_alist_exn$0=_vM_[74],
     of_alist_multi$0=_vM_[75],
     of_alist_fold=_vM_[76],
     of_alist_reduce=_vM_[77],
     of_sorted_array=_vM_[78],
     of_sorted_array_unchecked=_vM_[79],
     of_increasing_iterator_unchecked=_vM_[80],
     of_increasing_sequence=_vM_[81],
     of_sequence$0=_vM_[82],
     of_sequence_or_error=_vM_[83],
     of_sequence_exn=_vM_[84],
     of_sequence_multi=_vM_[85],
     of_sequence_fold=_vM_[86],
     of_sequence_reduce=_vM_[87],
     of_iteri=_vM_[88],
     of_tree=_vM_[89],
     comparator=_vM_[90],
     hash_fold_direct=_vM_[91],
     Empty_without_value_restriction=_vM_[92];
    function of_hashtbl_exn(comparator,hashtbl)
     {var
       match=
        caml_call2
         (of_iteri,comparator,caml_call1(Core_kernel_Hashtbl[21],hashtbl));
      if(17724 <= match[1]){var map=match[2];return map}
      var key=match[2];
      return failwiths
              (0,0,cst_Map_of_hashtbl_exn_duplicate_key,key,comparator[2])}
    function of_hashtbl_exn$0(comparator,hashtbl)
     {return caml_call1(to_tree,of_hashtbl_exn(comparator,hashtbl))}
    function key_set(comparator,t)
     {var _bgL_=caml_call1(_pr_,caml_call1(keys$0,t));
      return caml_call2(Base_Set[71][57],comparator,_bgL_)}
    function key_set$0(comparator,t)
     {return key_set(comparator,caml_call2(of_tree,comparator,t))}
    function to_map(key_set,f)
     {function _bgJ_(key){return [0,key,caml_call1(f,key)]}
      var _bgK_=caml_call2(map$0,caml_call1(Base_Set[34],key_set),_bgJ_);
      return caml_call2
              (of_sorted_array_unchecked,
               caml_call1(Base_Set[4],key_set),
               _bgK_)}
    function of_key_set(key_set,f)
     {return caml_call1(to_tree,to_map(key_set,f))}
    var
     _vN_=Base_Map[98],
     binary_search_segmented$0=_vN_[69],
     binary_search$0=_vN_[68],
     to_sequence$0=_vN_[67],
     to_tree$0=_vN_[66],
     rank=_vN_[65],
     nth_exn=_vN_[64],
     nth=_vN_[63],
     closest_key=_vN_[62],
     range_to_alist=_vN_[61],
     fold_range_inclusive=_vN_[60],
     subrange=_vN_[59],
     append$0=_vN_[58],
     split=_vN_[57],
     counti$1=_vN_[56],
     count$2=_vN_[55],
     existsi$1=_vN_[54],
     exists$2=_vN_[53],
     for_alli$1=_vN_[52],
     for_all$2=_vN_[51],
     max_elt_exn=_vN_[50],
     max_elt$1=_vN_[49],
     min_elt_exn=_vN_[48],
     min_elt$1=_vN_[47],
     fold_symmetric_diff=_vN_[46],
     symmetric_diff=_vN_[45],
     merge$0=_vN_[44],
     validate$0=_vN_[43],
     to_alist$0=_vN_[42],
     data$0=_vN_[41],
     keys$1=_vN_[40],
     equal$5=_vN_[39],
     compare_direct=_vN_[38],
     partition_tf$1=_vN_[37],
     partitioni_tf$1=_vN_[36],
     partition_map$0=_vN_[35],
     partition_mapi$0=_vN_[34],
     filter_mapi$1=_vN_[33],
     filter_map$2=_vN_[32],
     filteri$1=_vN_[31],
     filter$3=_vN_[30],
     filter_keys$0=_vN_[29],
     fold2=_vN_[28],
     fold_right$0=_vN_[27],
     fold$2=_vN_[26],
     mapi$1=_vN_[25],
     map$9=_vN_[24],
     iter2=_vN_[23],
     iteri_until=_vN_[22],
     iteri$1=_vN_[21],
     iter$4=_vN_[20],
     iter_keys$0=_vN_[19],
     mem$2=_vN_[18],
     remove$1=_vN_[17],
     find_exn$1=_vN_[16],
     find$2=_vN_[15],
     update$0=_vN_[14],
     change$0=_vN_[13],
     find_multi$0=_vN_[12],
     remove_multi$0=_vN_[11],
     add_multi$0=_vN_[10],
     set$1=_vN_[9],
     add_exn$0=_vN_[8],
     add$1=_vN_[7],
     length$4=_vN_[6],
     is_empty$3=_vN_[5],
     invariants=_vN_[4];
    function quickcheck_observer$0(k,v)
     {return caml_call2(quickcheck_observer,k,v)}
    function quickcheck_shrinker$0(k,v)
     {return caml_call2(quickcheck_shrinker,k,v)}
    function key_set$1(t){return key_set(caml_call1(comparator,t),t)}
    function of_map_keys(t){return key_set(caml_call1(comparator,t),t)}
    var
     comparator_s=Base_Map[3],
     invariants$0=Base_Map[2],
     empty$1=Base_Map[5],
     singleton$2=Base_Map[6],
     of_alist$1=Base_Map[7],
     of_alist_or_error$1=Base_Map[8],
     of_alist_exn$1=Base_Map[9],
     of_alist_multi$1=Base_Map[10],
     of_alist_fold$0=Base_Map[11],
     of_alist_reduce$0=Base_Map[12],
     of_iteri$0=Base_Map[13],
     of_sorted_array$0=Base_Map[14],
     of_sorted_array_unchecked$0=Base_Map[15],
     of_increasing_iterator_unchecked$0=Base_Map[16],
     of_increasing_sequence$0=Base_Map[17],
     of_sequence$1=Base_Map[18],
     of_sequence_or_error$0=Base_Map[19],
     of_sequence_exn$0=Base_Map[20],
     of_sequence_multi$0=Base_Map[21],
     of_sequence_fold$0=Base_Map[22],
     of_sequence_reduce$0=Base_Map[23],
     is_empty$4=Base_Map[24],
     length$5=Base_Map[25],
     set$2=Base_Map[26],
     add$2=Base_Map[27],
     add_exn$1=Base_Map[28],
     add_multi$1=Base_Map[29],
     remove_multi$1=Base_Map[30],
     find_multi$1=Base_Map[31],
     change$1=Base_Map[32],
     update$1=Base_Map[33],
     find$3=Base_Map[34],
     find_exn$2=Base_Map[35],
     remove$2=Base_Map[36],
     mem$3=Base_Map[37],
     iter_keys$1=Base_Map[38],
     iter$5=Base_Map[39],
     iteri$2=Base_Map[40],
     iteri_until$0=Base_Map[41],
     iter2$0=Base_Map[42],
     map$10=Base_Map[43],
     mapi$2=Base_Map[44],
     fold$3=Base_Map[45],
     fold_right$1=Base_Map[46],
     fold2$0=Base_Map[47],
     filter_keys$1=Base_Map[48],
     filter$4=Base_Map[49],
     filteri$2=Base_Map[50],
     filter_map$3=Base_Map[51],
     filter_mapi$2=Base_Map[52],
     partition_mapi$1=Base_Map[53],
     partition_map$1=Base_Map[54],
     partitioni_tf$2=Base_Map[55],
     partition_tf$2=Base_Map[56],
     compare_direct$0=Base_Map[57],
     equal$6=Base_Map[59],
     keys$2=Base_Map[60],
     data$1=Base_Map[61],
     to_alist$1=Base_Map[62],
     validate$1=Base_Map[63],
     merge$1=Base_Map[64],
     symmetric_diff$0=Base_Map[67],
     fold_symmetric_diff$0=Base_Map[68],
     min_elt$2=Base_Map[69],
     min_elt_exn$0=Base_Map[70],
     max_elt$2=Base_Map[71],
     max_elt_exn$0=Base_Map[72],
     for_all$3=Base_Map[73],
     for_alli$2=Base_Map[74],
     exists$3=Base_Map[75],
     existsi$2=Base_Map[76],
     count$3=Base_Map[77],
     counti$2=Base_Map[78],
     split$0=Base_Map[79],
     append$1=Base_Map[80],
     subrange$0=Base_Map[81],
     fold_range_inclusive$0=Base_Map[82],
     range_to_alist$0=Base_Map[83],
     closest_key$0=Base_Map[84],
     nth$0=Base_Map[85],
     nth_exn$0=Base_Map[86],
     rank$0=Base_Map[87],
     to_sequence$1=Base_Map[88],
     binary_search$1=Base_Map[89],
     binary_search_segmented$1=Base_Map[90];
    function of_tree$0(m){return caml_call1(Base_Map[98][89],m[1])}
    var to_tree$1=Base_Map[98][66];
    function find_or_error(t,key)
     {var
       comparator$0=caml_call1(comparator,t),
       match=caml_call2(find$3,t,key);
      if(match){var data=match[1];return [0,data]}
      var sexp_of_key=comparator$0[2],_bgI_=[0,caml_call1(sexp_of_key,key),0];
      return caml_call1
              (_ub_,
               [1,
                [0,caml_call1(Sexplib0_Sexp_conv[7],cst_key_not_found),_bgI_]])}
    var _vO_=Base_Map[65];
    function of_hashtbl_exn$1(m,t){return of_hashtbl_exn(m[1],t)}
    function Creators$0(Key)
     {var
       comparator=Key[1],
       M_empty=caml_call1(Empty_without_value_restriction,Key),
       empty=M_empty[1];
      function of_tree$0(tree){return caml_call2(of_tree,comparator,tree)}
      function singleton(k,v){return caml_call3(singleton$1,comparator,k,v)}
      function of_sorted_array_unchecked$0(array)
       {return caml_call2(of_sorted_array_unchecked,comparator,array)}
      function of_sorted_array$0(array)
       {return caml_call2(of_sorted_array,comparator,array)}
      function of_increasing_iterator_unchecked$0(len,f)
       {return caml_call3(of_increasing_iterator_unchecked,comparator,len,f)}
      function of_increasing_sequence$0(seq)
       {return caml_call2(of_increasing_sequence,comparator,seq)}
      function of_sequence(seq)
       {return caml_call2(of_sequence$0,comparator,seq)}
      function of_sequence_or_error$0(seq)
       {return caml_call2(of_sequence_or_error,comparator,seq)}
      function of_sequence_exn$0(seq)
       {return caml_call2(of_sequence_exn,comparator,seq)}
      function of_sequence_multi$0(seq)
       {return caml_call2(of_sequence_multi,comparator,seq)}
      function of_sequence_fold$0(seq,init,f)
       {return caml_call4(of_sequence_fold,comparator,seq,init,f)}
      function of_sequence_reduce$0(seq,f)
       {return caml_call3(of_sequence_reduce,comparator,seq,f)}
      function of_alist(alist){return caml_call2(of_alist$0,comparator,alist)}
      function of_alist_or_error(alist)
       {return caml_call2(of_alist_or_error$0,comparator,alist)}
      function of_alist_exn(alist)
       {return caml_call2(of_alist_exn$0,comparator,alist)}
      function of_hashtbl_exn$0(hashtbl)
       {return of_hashtbl_exn(comparator,hashtbl)}
      function of_alist_multi(alist)
       {return caml_call2(of_alist_multi$0,comparator,alist)}
      function of_alist_fold$0(alist,init,f)
       {return caml_call4(of_alist_fold,comparator,alist,init,f)}
      function of_alist_reduce$0(alist,f)
       {return caml_call3(of_alist_reduce,comparator,alist,f)}
      function of_iteri$0(iteri){return caml_call2(of_iteri,comparator,iteri)}
      function t_of_sexp(k_of_sexp,v_of_sexp,sexp)
       {return caml_call4
                (t_of_sexp_direct,comparator,k_of_sexp,v_of_sexp,sexp)}
      function of_key_set(key_set,f){return to_map(key_set,f)}
      function quickcheck_generator$0(gen_k,gen_v)
       {return quickcheck_generator(comparator,gen_k,gen_v)}
      return [0,
              t_of_sexp,
              empty,
              singleton,
              of_sorted_array$0,
              of_sorted_array_unchecked$0,
              of_increasing_iterator_unchecked$0,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold$0,
              of_alist_reduce$0,
              of_increasing_sequence$0,
              of_sequence,
              of_sequence_or_error$0,
              of_sequence_exn$0,
              of_sequence_multi$0,
              of_sequence_fold$0,
              of_sequence_reduce$0,
              of_iteri$0,
              of_tree$0,
              of_hashtbl_exn$0,
              of_key_set,
              quickcheck_generator$0]}
    function Make_tree(Key)
     {var comparator=Key[1],sexp_of_t=Base_Map[98][3][1];
      function t_of_sexp(a,b,c)
       {return caml_call4(Base_Map[98][3][2],comparator,a,b,c)}
      var empty=Base_Map[98][3][89];
      function of_tree(tree){return tree}
      function singleton(a)
       {return caml_call2(Base_Map[98][3][4],comparator,a)}
      function of_sorted_array_unchecked(a)
       {return caml_call2(Base_Map[98][3][12],comparator,a)}
      function of_sorted_array(a)
       {return caml_call2(Base_Map[98][3][11],comparator,a)}
      function of_increasing_iterator_unchecked(len,f)
       {return caml_call3(Base_Map[98][3][13],comparator,len,f)}
      function of_increasing_sequence(seq)
       {return caml_call2(Base_Map[98][3][14],comparator,seq)}
      function of_sequence(s)
       {return caml_call2(Base_Map[98][3][15],comparator,s)}
      function of_sequence_or_error(s)
       {return caml_call2(Base_Map[98][3][16],comparator,s)}
      function of_sequence_exn(s)
       {return caml_call2(Base_Map[98][3][17],comparator,s)}
      function of_sequence_multi(s)
       {return caml_call2(Base_Map[98][3][18],comparator,s)}
      function of_sequence_fold(s,init,f)
       {return caml_call4(Base_Map[98][3][19],comparator,s,init,f)}
      function of_sequence_reduce(s,f)
       {return caml_call3(Base_Map[98][3][20],comparator,s,f)}
      function of_alist(a){return caml_call2(Base_Map[98][3][5],comparator,a)}
      function of_alist_or_error(a)
       {return caml_call2(Base_Map[98][3][6],comparator,a)}
      function of_alist_exn(a)
       {return caml_call2(Base_Map[98][3][7],comparator,a)}
      function of_hashtbl_exn(a){return of_hashtbl_exn$0(comparator,a)}
      function of_alist_multi(a)
       {return caml_call2(Base_Map[98][3][8],comparator,a)}
      function of_alist_fold(a,init,f)
       {return caml_call4(Base_Map[98][3][9],comparator,a,init,f)}
      function of_alist_reduce(a,f)
       {return caml_call3(Base_Map[98][3][10],comparator,a,f)}
      function of_iteri(iteri)
       {return caml_call2(Base_Map[98][3][21],comparator,iteri)}
      function to_tree(t){return t}
      function invariants(a)
       {return caml_call2(Base_Map[98][3][23],comparator,a)}
      function is_empty(a){return caml_call1(Base_Map[98][3][24],a)}
      function length(a){return caml_call1(Base_Map[98][3][25],a)}
      function set(a,key,data)
       {return caml_call4(Base_Map[98][3][28],comparator,a,key,data)}
      function add(a,key,data)
       {return caml_call4(Base_Map[98][3][26],comparator,a,key,data)}
      function add_exn(a,key,data)
       {return caml_call4(Base_Map[98][3][27],comparator,a,key,data)}
      function add_multi(a,key,data)
       {return caml_call4(Base_Map[98][3][29],comparator,a,key,data)}
      function remove_multi(a,b)
       {return caml_call3(Base_Map[98][3][30],comparator,a,b)}
      function find_multi(a,b)
       {return caml_call3(Base_Map[98][3][31],comparator,a,b)}
      function change(a,b,f)
       {return caml_call4(Base_Map[98][3][32],comparator,a,b,f)}
      function update(a,b,f)
       {return caml_call4(Base_Map[98][3][33],comparator,a,b,f)}
      function find_exn(a,b)
       {return caml_call3(Base_Map[98][3][35],comparator,a,b)}
      function find(a,b)
       {return caml_call3(Base_Map[98][3][34],comparator,a,b)}
      function remove(a,b)
       {return caml_call3(Base_Map[98][3][36],comparator,a,b)}
      function mem(a,b){return caml_call3(Base_Map[98][3][37],comparator,a,b)}
      var
       iter_keys=Base_Map[98][3][38],
       iter=Base_Map[98][3][39],
       iteri=Base_Map[98][3][40],
       iteri_until=Base_Map[98][3][41];
      function iter2(a,b,f)
       {return caml_call4(Base_Map[98][3][42],comparator,a,b,f)}
      var
       map=Base_Map[98][3][43],
       mapi=Base_Map[98][3][44],
       fold=Base_Map[98][3][45],
       fold_right=Base_Map[98][3][46];
      function fold2(a,b,init,f)
       {return caml_call5(Base_Map[98][3][47],comparator,a,b,init,f)}
      function filter_keys(a,f)
       {return caml_call3(Base_Map[98][3][48],comparator,a,f)}
      function filter(a,f)
       {return caml_call3(Base_Map[98][3][49],comparator,a,f)}
      function filteri(a,f)
       {return caml_call3(Base_Map[98][3][50],comparator,a,f)}
      function filter_map(a,f)
       {return caml_call3(Base_Map[98][3][51],comparator,a,f)}
      function filter_mapi(a,f)
       {return caml_call3(Base_Map[98][3][52],comparator,a,f)}
      function partition_mapi(t,f)
       {return caml_call3(Base_Map[98][3][53],comparator,t,f)}
      function partition_map(t,f)
       {return caml_call3(Base_Map[98][3][54],comparator,t,f)}
      function partitioni_tf(t,f)
       {return caml_call3(Base_Map[98][3][55],comparator,t,f)}
      function partition_tf(t,f)
       {return caml_call3(Base_Map[98][3][56],comparator,t,f)}
      function compare_direct(a,b,c)
       {return caml_call4(Base_Map[98][3][57],comparator,a,b,c)}
      function equal(a,b,c)
       {return caml_call4(Base_Map[98][3][58],comparator,a,b,c)}
      var
       keys=Base_Map[98][3][59],
       data=Base_Map[98][3][60],
       to_alist=Base_Map[98][3][61],
       validate=Base_Map[98][3][62];
      function symmetric_diff(a,b,data_equal)
       {return caml_call4(Base_Map[98][3][64],comparator,a,b,data_equal)}
      function fold_symmetric_diff(a,b,data_equal,init,f)
       {return caml_call6
                (Base_Map[98][3][65],comparator,a,b,data_equal,init,f)}
      function merge(a,b,f)
       {return caml_call4(Base_Map[98][3][63],comparator,a,b,f)}
      var
       min_elt=Base_Map[98][3][66],
       min_elt_exn=Base_Map[98][3][67],
       max_elt=Base_Map[98][3][68],
       max_elt_exn=Base_Map[98][3][69],
       for_all=Base_Map[98][3][70],
       for_alli=Base_Map[98][3][71],
       exists=Base_Map[98][3][72],
       existsi=Base_Map[98][3][73],
       count=Base_Map[98][3][74],
       counti=Base_Map[98][3][75];
      function split(a,b)
       {return caml_call3(Base_Map[98][3][76],comparator,a,b)}
      function append(lower_part,upper_part)
       {return caml_call3
                (Base_Map[98][3][77],comparator,lower_part,upper_part)}
      function subrange(t,lower_bound,upper_bound)
       {return caml_call4
                (Base_Map[98][3][78],comparator,t,lower_bound,upper_bound)}
      function fold_range_inclusive(t,min,max,init,f)
       {return caml_call6(Base_Map[98][3][79],comparator,t,min,max,init,f)}
      function range_to_alist(t,min,max)
       {return caml_call4(Base_Map[98][3][80],comparator,t,min,max)}
      function closest_key(a,b,c)
       {return caml_call4(Base_Map[98][3][81],comparator,a,b,c)}
      function nth(a){return caml_call2(Base_Map[98][3][82],comparator,a)}
      function nth_exn(a){return caml_call2(Base_Map[98][3][83],comparator,a)}
      function rank(a,b)
       {return caml_call3(Base_Map[98][3][84],comparator,a,b)}
      function to_sequence
       (order,keys_greater_or_equal_to,keys_less_or_equal_to,t)
       {return caml_call5
                (Base_Map[98][3][86],
                 comparator,
                 order,
                 keys_greater_or_equal_to,
                 keys_less_or_equal_to,
                 t)}
      function binary_search(t,compare,how,v)
       {return caml_call5(Base_Map[98][3][87],comparator,t,compare,how,v)}
      function binary_search_segmented(t,segment_of,how)
       {return caml_call4(Base_Map[98][3][88],comparator,t,segment_of,how)}
      function key_set(t){return key_set$0(comparator,t)}
      function quickcheck_generator(k,v){return gen_tree(comparator,k,v)}
      function quickcheck_observer(k,v){return obs_tree(k,v)}
      function quickcheck_shrinker(k,v){return shr_tree(comparator,k,v)}
      return [0,
              comparator,
              sexp_of_t,
              t_of_sexp,
              empty,
              of_tree,
              singleton,
              of_sorted_array_unchecked,
              of_sorted_array,
              of_increasing_iterator_unchecked,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_hashtbl_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_iteri,
              of_key_set,
              to_tree,
              invariants,
              is_empty,
              length,
              set,
              add,
              add_exn,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find_exn,
              find,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iteri_until,
              iter2,
              map,
              mapi,
              fold,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              validate,
              symmetric_diff,
              fold_symmetric_diff,
              merge,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_sequence,
              binary_search,
              binary_search_segmented,
              key_set,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker]}
    function init_for_bin_prot(len,f,comparator)
     {var map=caml_call3(of_increasing_iterator_unchecked,comparator,len,f);
      if(caml_call1(invariants$0,map))return map;
      var match=caml_call2(of_iteri,comparator,caml_call1(iteri$2,map));
      if(17724 <= match[1]){var map$0=match[2];return map$0}
      return caml_call1(_a__,cst_Map_bin_read_t_duplicate_element_in_map)}
    var
     _vP_=Creators$0(Poly),
     _vQ_=_vP_[1],
     _vR_=_vP_[2],
     _vS_=_vP_[3],
     _vT_=_vP_[4],
     _vU_=_vP_[5],
     _vV_=_vP_[6],
     _vW_=_vP_[7],
     _vX_=_vP_[8],
     _vY_=_vP_[9],
     _vZ_=_vP_[10],
     _v0_=_vP_[11],
     _v1_=_vP_[12],
     _v2_=_vP_[13],
     _v3_=_vP_[14],
     _v4_=_vP_[15],
     _v5_=_vP_[16],
     _v6_=_vP_[17],
     _v7_=_vP_[18],
     _v8_=_vP_[19],
     _v9_=_vP_[20],
     _v__=_vP_[21],
     _v$_=_vP_[22],
     _wa_=_vP_[23],
     _wb_=_vP_[24];
    function compare$16(param,cmpv,t1,t2)
     {return caml_call3(compare_direct,cmpv,t1,t2)}
    function sexp_of_t$23(sexp_of_k,sexp_of_v,t)
     {return caml_call4
              (sexp_of_t$22,
               sexp_of_k,
               sexp_of_v,
               function(param){return _wc_},
               t)}
    var
     _wd_=caml_call1(Bin_prot_Shape[3][1],cst_b$8),
     _we_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_406_30),
     _wf_=[0,caml_call2(Bin_prot_Shape[15],_we_,_wd_),0],
     _wg_=caml_call1(Bin_prot_Shape[3][1],cst_a$36),
     _wh_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_406_25),
     _wi_=[0,caml_call2(Bin_prot_Shape[15],_wh_,_wg_),_wf_],
     _wj_=caml_call1(Bin_prot_Shape[7],_wi_),
     _wk_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$9),0],
     _wl_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$37),_wk_],
     _wm_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$5),_wl_,_wj_],0],
     _wn_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_406_6),
     group$38=caml_call2(Bin_prot_Shape[6],_wn_,_wm_);
    function bin_shape_el$0(a,b)
     {var _bgH_=caml_call1(Bin_prot_Shape[2][1],cst_el$6);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$38,_bgH_),[0,a,[0,b,0]])}
    function bin_size_el$0(size_of_a,size_of_b,param)
     {var
       v2=param[2],
       v1=param[1],
       _bgF_=caml_call1(size_of_a,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bgF_),
       _bgG_=caml_call1(size_of_b,v2);
      return caml_call2(Bin_prot_Common[23],size,_bgG_)}
    function bin_write_el$0(write_a,write_b,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(write_a,buf,pos,v1);
      return caml_call3(write_b,buf,pos$0,v2)}
    function bin_read_el$0(of_a,of_b,buf,pos_ref)
     {var v1=caml_call2(of_a,buf,pos_ref),v2=caml_call2(of_b,buf,pos_ref);
      return [0,v1,v2]}
    var
     caller_identity$0=
      caml_call1
       (Bin_prot_Shape[5][1],cst_b7d7b1a0_4992_11e6_8a32_bbb221fa025c);
    function iter$6(t,f)
     {return caml_call2
              (iteri$1,
               t,
               function(key,data){return caml_call1(f,[0,key,data])})}
    function init$1(len,next)
     {var _bgE_=Poly[1];
      return init_for_bin_prot
              (len,function(param){return caml_call1(next,0)},_bgE_)}
    var
     include$32=
      caml_call1
       (Bin_prot_Utils[13],
        [0,
         caller_identity$0,
         module_name$2,
         length$4,
         iter$6,
         init$1,
         bin_size_el$0,
         bin_write_el$0,
         bin_read_el$0,
         bin_shape_el$0]),
     bin_shape_t$31=include$32[1],
     bin_size_t$33=include$32[2],
     bin_write_t$33=include$32[3],
     bin_read_t$68=include$32[4],
     bin_read_t$69=include$32[5],
     bin_writer_t$25=include$32[6],
     bin_reader_t$25=include$32[7],
     bin_t$25=include$32[8],
     include$33=Make_tree(Poly),
     t_of_sexp$21=include$33[3],
     empty$2=include$33[4],
     of_tree$1=include$33[5],
     singleton$3=include$33[6],
     of_sorted_array_unchecked$1=include$33[7],
     of_sorted_array$1=include$33[8],
     of_increasing_iterator_unchecked$1=include$33[9],
     of_increasing_sequence$1=include$33[10],
     of_sequence$2=include$33[11],
     of_sequence_or_error$1=include$33[12],
     of_sequence_exn$1=include$33[13],
     of_sequence_multi$1=include$33[14],
     of_sequence_fold$1=include$33[15],
     of_sequence_reduce$1=include$33[16],
     of_alist$2=include$33[17],
     of_alist_or_error$2=include$33[18],
     of_alist_exn$2=include$33[19],
     of_hashtbl_exn$2=include$33[20],
     of_alist_multi$2=include$33[21],
     of_alist_fold$1=include$33[22],
     of_alist_reduce$1=include$33[23],
     of_iteri$1=include$33[24],
     of_key_set$0=include$33[25],
     to_tree$2=include$33[26],
     invariants$1=include$33[27],
     is_empty$5=include$33[28],
     length$6=include$33[29],
     set$3=include$33[30],
     add$3=include$33[31],
     add_exn$2=include$33[32],
     add_multi$2=include$33[33],
     remove_multi$2=include$33[34],
     find_multi$2=include$33[35],
     change$2=include$33[36],
     update$2=include$33[37],
     find_exn$3=include$33[38],
     find$4=include$33[39],
     remove$3=include$33[40],
     mem$4=include$33[41],
     iter_keys$2=include$33[42],
     iter$7=include$33[43],
     iteri$3=include$33[44],
     iteri_until$1=include$33[45],
     iter2$1=include$33[46],
     map$11=include$33[47],
     mapi$3=include$33[48],
     fold$4=include$33[49],
     fold_right$2=include$33[50],
     fold2$1=include$33[51],
     filter_keys$2=include$33[52],
     filter$5=include$33[53],
     filteri$3=include$33[54],
     filter_map$4=include$33[55],
     filter_mapi$3=include$33[56],
     partition_mapi$2=include$33[57],
     partition_map$2=include$33[58],
     partitioni_tf$3=include$33[59],
     partition_tf$3=include$33[60],
     compare_direct$1=include$33[61],
     equal$7=include$33[62],
     keys$3=include$33[63],
     data$2=include$33[64],
     to_alist$2=include$33[65],
     validate$2=include$33[66],
     symmetric_diff$1=include$33[67],
     fold_symmetric_diff$1=include$33[68],
     merge$2=include$33[69],
     min_elt$3=include$33[70],
     min_elt_exn$1=include$33[71],
     max_elt$3=include$33[72],
     max_elt_exn$1=include$33[73],
     for_all$4=include$33[74],
     for_alli$3=include$33[75],
     exists$4=include$33[76],
     existsi$3=include$33[77],
     count$4=include$33[78],
     counti$3=include$33[79],
     split$1=include$33[80],
     append$2=include$33[81],
     subrange$1=include$33[82],
     fold_range_inclusive$1=include$33[83],
     range_to_alist$1=include$33[84],
     closest_key$1=include$33[85],
     nth$1=include$33[86],
     nth_exn$1=include$33[87],
     rank$1=include$33[88],
     to_sequence$2=include$33[89],
     binary_search$2=include$33[90],
     binary_search_segmented$2=include$33[91],
     key_set$2=include$33[92],
     quickcheck_generator$1=include$33[93],
     quickcheck_observer$1=include$33[94],
     quickcheck_shrinker$1=include$33[95],
     _wo_=include$33[2];
    function sexp_of_t$24(sexp_of_k,sexp_of_v,t)
     {return caml_call4
              (_wo_,sexp_of_k,sexp_of_v,function(param){return _wp_},t)}
    function Provide_bin_io(Key)
     {var
       _bgt_=caml_call1(Bin_prot_Shape[3][1],cst_v$4),
       _bgu_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_449_25),
       _bgv_=[0,caml_call2(Bin_prot_Shape[15],_bgu_,_bgt_),0],
       _bgw_=caml_call1(Bin_prot_Shape[7],[0,Key[5],_bgv_]),
       _bgx_=[0,caml_call1(Bin_prot_Shape[3][1],cst_v$5),0],
       _bgy_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$7),_bgx_,_bgw_],0],
       _bgz_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_449_4),
       group=caml_call2(Bin_prot_Shape[6],_bgz_,_bgy_);
      function bin_shape_el(v)
       {var _bgD_=caml_call1(Bin_prot_Shape[2][1],cst_el$8);
        return caml_call1(caml_call2(Bin_prot_Shape[14],group,_bgD_),[0,v,0])}
      function bin_size_el(size_of_v,param)
       {var
         v2=param[2],
         v1=param[1],
         _bgB_=caml_call1(Key[1],v1),
         size=caml_call2(Bin_prot_Common[23],0,_bgB_),
         _bgC_=caml_call1(size_of_v,v2);
        return caml_call2(Bin_prot_Common[23],size,_bgC_)}
      function bin_write_el(write_v,buf,pos,param)
       {var v2=param[2],v1=param[1],pos$0=caml_call3(Key[2],buf,pos,v1);
        return caml_call3(write_v,buf,pos$0,v2)}
      function bin_read_el(of_v,buf,pos_ref)
       {var v1=caml_call2(Key[3],buf,pos_ref),v2=caml_call2(of_v,buf,pos_ref);
        return [0,v1,v2]}
      var
       caller_identity=
        caml_call1
         (Bin_prot_Shape[5][1],cst_dfb300f8_4992_11e6_9c15_73a2ac6b815c);
      function iter(t,f)
       {return caml_call2
                (iteri$2,
                 t,
                 function(key,data){return caml_call1(f,[0,key,data])})}
      function init(len,next)
       {var _bgA_=Key[9];
        return init_for_bin_prot
                (len,function(param){return caml_call1(next,0)},_bgA_)}
      return caml_call1
              (Bin_prot_Utils[12],
               [0,
                caller_identity,
                module_name$3,
                length$5,
                iter,
                init,
                bin_size_el,
                bin_write_el,
                bin_read_el,
                bin_shape_el])}
    function Make_plain_using_comparator(Key)
     {var
       Key_S1=caml_call1(S_to_S1,[0,Key[2]]),
       _bgp_=Creators$0(Key_S1),
       t_of_sexp=_bgp_[1],
       empty=_bgp_[2],
       singleton=_bgp_[3],
       of_sorted_array=_bgp_[4],
       of_sorted_array_unchecked=_bgp_[5],
       of_increasing_iterator_unchecked=_bgp_[6],
       of_alist=_bgp_[7],
       of_alist_or_error=_bgp_[8],
       of_alist_exn=_bgp_[9],
       of_alist_multi=_bgp_[10],
       of_alist_fold=_bgp_[11],
       of_alist_reduce=_bgp_[12],
       of_increasing_sequence=_bgp_[13],
       of_sequence=_bgp_[14],
       of_sequence_or_error=_bgp_[15],
       of_sequence_exn=_bgp_[16],
       of_sequence_multi=_bgp_[17],
       of_sequence_fold=_bgp_[18],
       of_sequence_reduce=_bgp_[19],
       of_iteri=_bgp_[20],
       of_tree=_bgp_[21],
       of_hashtbl_exn=_bgp_[22],
       of_key_set=_bgp_[23],
       quickcheck_generator=_bgp_[24];
      function compare(cmpv,t1,t2)
       {return caml_call3(compare_direct,cmpv,t1,t2)}
      function sexp_of_t(sexp_of_v,t)
       {function _bgs_(param){return _wq_}
        return caml_call4(sexp_of_t$22,Key[1],sexp_of_v,_bgs_,t)}
      function Provide_of_sexp(Key)
       {function t_of_sexp$0(v_of_sexp,sexp)
         {return caml_call3(t_of_sexp,Key[1],v_of_sexp,sexp)}
        return [0,t_of_sexp$0]}
      function Provide_hash(Key)
       {function hash_fold_t(hash_fold_data,state,t)
         {return caml_call4(hash_fold_direct,Key[1],hash_fold_data,state,t)}
        return [0,hash_fold_t]}
      function Provide_bin_io$0(Key$0)
       {var
         comparator=Key[2],
         bin_size_t=Key$0[1],
         bin_write_t=Key$0[2],
         bin_read_t=Key$0[3],
         bin_read_t$0=Key$0[4],
         bin_shape_t=Key$0[5],
         bin_writer_t=Key$0[6],
         bin_reader_t=Key$0[7],
         bin_t=Key$0[8];
        return Provide_bin_io
                ([0,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t,
                  bin_read_t$0,
                  bin_shape_t,
                  bin_writer_t,
                  bin_reader_t,
                  bin_t,
                  comparator])}
      var
       include=Make_tree(Key_S1),
       comparator=include[1],
       t_of_sexp$0=include[3],
       empty$0=include[4],
       of_tree$0=include[5],
       singleton$0=include[6],
       of_sorted_array_unchecked$0=include[7],
       of_sorted_array$0=include[8],
       of_increasing_iterator_unchecked$0=include[9],
       of_increasing_sequence$0=include[10],
       of_sequence$0=include[11],
       of_sequence_or_error$0=include[12],
       of_sequence_exn$0=include[13],
       of_sequence_multi$0=include[14],
       of_sequence_fold$0=include[15],
       of_sequence_reduce$0=include[16],
       of_alist$0=include[17],
       of_alist_or_error$0=include[18],
       of_alist_exn$0=include[19],
       of_hashtbl_exn$0=include[20],
       of_alist_multi$0=include[21],
       of_alist_fold$0=include[22],
       of_alist_reduce$0=include[23],
       of_iteri$0=include[24],
       of_key_set$0=include[25],
       to_tree=include[26],
       invariants$0=include[27],
       is_empty=include[28],
       length=include[29],
       set=include[30],
       add=include[31],
       add_exn=include[32],
       add_multi=include[33],
       remove_multi=include[34],
       find_multi=include[35],
       change=include[36],
       update=include[37],
       find_exn=include[38],
       find=include[39],
       remove=include[40],
       mem=include[41],
       iter_keys=include[42],
       iter=include[43],
       iteri=include[44],
       iteri_until$0=include[45],
       iter2$0=include[46],
       map=include[47],
       mapi=include[48],
       fold=include[49],
       fold_right=include[50],
       fold2$0=include[51],
       filter_keys=include[52],
       filter=include[53],
       filteri=include[54],
       filter_map=include[55],
       filter_mapi=include[56],
       partition_mapi=include[57],
       partition_map=include[58],
       partitioni_tf=include[59],
       partition_tf=include[60],
       compare_direct$0=include[61],
       equal=include[62],
       keys=include[63],
       data=include[64],
       to_alist=include[65],
       validate=include[66],
       symmetric_diff$0=include[67],
       fold_symmetric_diff$0=include[68],
       merge=include[69],
       min_elt=include[70],
       min_elt_exn$0=include[71],
       max_elt=include[72],
       max_elt_exn$0=include[73],
       for_all=include[74],
       for_alli=include[75],
       exists=include[76],
       existsi=include[77],
       count=include[78],
       counti=include[79],
       split$0=include[80],
       append=include[81],
       subrange$0=include[82],
       fold_range_inclusive$0=include[83],
       range_to_alist$0=include[84],
       closest_key$0=include[85],
       nth$0=include[86],
       nth_exn$0=include[87],
       rank$0=include[88],
       to_sequence=include[89],
       binary_search=include[90],
       binary_search_segmented=include[91],
       key_set=include[92],
       quickcheck_generator$0=include[93],
       quickcheck_observer=include[94],
       quickcheck_shrinker=include[95],
       _bgq_=include[2];
      function sexp_of_t$0(sexp_of_v,t)
       {function _bgr_(param){return _wr_}
        return caml_call4(_bgq_,Key[1],sexp_of_v,_bgr_,t)}
      function Provide_of_sexp$0(X)
       {function t_of_sexp(v_of_sexp,sexp)
         {return caml_call3(t_of_sexp$0,X[1],v_of_sexp,sexp)}
        return [0,t_of_sexp]}
      var
       Tree=
        [0,
         comparator,
         t_of_sexp$0,
         empty$0,
         of_tree$0,
         singleton$0,
         of_sorted_array_unchecked$0,
         of_sorted_array$0,
         of_increasing_iterator_unchecked$0,
         of_increasing_sequence$0,
         of_sequence$0,
         of_sequence_or_error$0,
         of_sequence_exn$0,
         of_sequence_multi$0,
         of_sequence_fold$0,
         of_sequence_reduce$0,
         of_alist$0,
         of_alist_or_error$0,
         of_alist_exn$0,
         of_hashtbl_exn$0,
         of_alist_multi$0,
         of_alist_fold$0,
         of_alist_reduce$0,
         of_iteri$0,
         of_key_set$0,
         to_tree,
         invariants$0,
         is_empty,
         length,
         set,
         add,
         add_exn,
         add_multi,
         remove_multi,
         find_multi,
         change,
         update,
         find_exn,
         find,
         remove,
         mem,
         iter_keys,
         iter,
         iteri,
         iteri_until$0,
         iter2$0,
         map,
         mapi,
         fold,
         fold_right,
         fold2$0,
         filter_keys,
         filter,
         filteri,
         filter_map,
         filter_mapi,
         partition_mapi,
         partition_map,
         partitioni_tf,
         partition_tf,
         compare_direct$0,
         equal,
         keys,
         data,
         to_alist,
         validate,
         symmetric_diff$0,
         fold_symmetric_diff$0,
         merge,
         min_elt,
         min_elt_exn$0,
         max_elt,
         max_elt_exn$0,
         for_all,
         for_alli,
         exists,
         existsi,
         count,
         counti,
         split$0,
         append,
         subrange$0,
         fold_range_inclusive$0,
         range_to_alist$0,
         closest_key$0,
         nth$0,
         nth_exn$0,
         rank$0,
         to_sequence,
         binary_search,
         binary_search_segmented,
         key_set,
         quickcheck_generator$0,
         quickcheck_observer,
         quickcheck_shrinker,
         sexp_of_t$0,
         Provide_of_sexp$0];
      return [0,
              Key,
              Key_S1,
              t_of_sexp,
              empty,
              singleton,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_iteri,
              of_tree,
              of_hashtbl_exn,
              of_key_set,
              quickcheck_generator,
              invariants,
              is_empty$3,
              length$4,
              add$1,
              add_exn$0,
              set$1,
              add_multi$0,
              remove_multi$0,
              find_multi$0,
              change$0,
              update$0,
              find$2,
              find_exn$1,
              remove$1,
              mem$2,
              iter_keys$0,
              iter$4,
              iteri$1,
              iteri_until,
              iter2,
              map$9,
              mapi$1,
              fold$2,
              fold_right$0,
              fold2,
              filter_keys$0,
              filter$3,
              filteri$1,
              filter_map$2,
              filter_mapi$1,
              partition_mapi$0,
              partition_map$0,
              partitioni_tf$1,
              partition_tf$1,
              compare_direct,
              equal$5,
              keys$1,
              data$0,
              to_alist$0,
              validate$0,
              merge$0,
              symmetric_diff,
              fold_symmetric_diff,
              min_elt$1,
              min_elt_exn,
              max_elt$1,
              max_elt_exn,
              for_all$2,
              for_alli$1,
              exists$2,
              existsi$1,
              count$2,
              counti$1,
              split,
              append$0,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_tree$0,
              to_sequence$0,
              binary_search$0,
              binary_search_segmented$0,
              quickcheck_observer$0,
              quickcheck_shrinker$0,
              key_set$1,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io$0,
              Tree]}
    function Make_using_comparator(Key_sexp)
     {var
       _bgo_=Make_plain_using_comparator([0,Key_sexp[2],Key_sexp[3]]),
       Key_S1=_bgo_[2],
       empty=_bgo_[4],
       singleton=_bgo_[5],
       of_sorted_array=_bgo_[6],
       of_sorted_array_unchecked=_bgo_[7],
       of_increasing_iterator_unchecked=_bgo_[8],
       of_alist=_bgo_[9],
       of_alist_or_error=_bgo_[10],
       of_alist_exn=_bgo_[11],
       of_alist_multi=_bgo_[12],
       of_alist_fold=_bgo_[13],
       of_alist_reduce=_bgo_[14],
       of_increasing_sequence=_bgo_[15],
       of_sequence=_bgo_[16],
       of_sequence_or_error=_bgo_[17],
       of_sequence_exn=_bgo_[18],
       of_sequence_multi=_bgo_[19],
       of_sequence_fold=_bgo_[20],
       of_sequence_reduce=_bgo_[21],
       of_iteri=_bgo_[22],
       of_tree=_bgo_[23],
       of_hashtbl_exn=_bgo_[24],
       of_key_set=_bgo_[25],
       quickcheck_generator=_bgo_[26],
       invariants=_bgo_[27],
       is_empty=_bgo_[28],
       length=_bgo_[29],
       add=_bgo_[30],
       add_exn=_bgo_[31],
       set=_bgo_[32],
       add_multi=_bgo_[33],
       remove_multi=_bgo_[34],
       find_multi=_bgo_[35],
       change=_bgo_[36],
       update=_bgo_[37],
       find=_bgo_[38],
       find_exn=_bgo_[39],
       remove=_bgo_[40],
       mem=_bgo_[41],
       iter_keys=_bgo_[42],
       iter=_bgo_[43],
       iteri=_bgo_[44],
       iteri_until=_bgo_[45],
       iter2=_bgo_[46],
       map=_bgo_[47],
       mapi=_bgo_[48],
       fold=_bgo_[49],
       fold_right=_bgo_[50],
       fold2=_bgo_[51],
       filter_keys=_bgo_[52],
       filter=_bgo_[53],
       filteri=_bgo_[54],
       filter_map=_bgo_[55],
       filter_mapi=_bgo_[56],
       partition_mapi=_bgo_[57],
       partition_map=_bgo_[58],
       partitioni_tf=_bgo_[59],
       partition_tf=_bgo_[60],
       compare_direct=_bgo_[61],
       equal=_bgo_[62],
       keys=_bgo_[63],
       data=_bgo_[64],
       to_alist=_bgo_[65],
       validate=_bgo_[66],
       merge=_bgo_[67],
       symmetric_diff=_bgo_[68],
       fold_symmetric_diff=_bgo_[69],
       min_elt=_bgo_[70],
       min_elt_exn=_bgo_[71],
       max_elt=_bgo_[72],
       max_elt_exn=_bgo_[73],
       for_all=_bgo_[74],
       for_alli=_bgo_[75],
       exists=_bgo_[76],
       existsi=_bgo_[77],
       count=_bgo_[78],
       counti=_bgo_[79],
       split=_bgo_[80],
       append=_bgo_[81],
       subrange=_bgo_[82],
       fold_range_inclusive=_bgo_[83],
       range_to_alist=_bgo_[84],
       closest_key=_bgo_[85],
       nth=_bgo_[86],
       nth_exn=_bgo_[87],
       rank=_bgo_[88],
       to_tree=_bgo_[89],
       to_sequence=_bgo_[90],
       binary_search=_bgo_[91],
       binary_search_segmented=_bgo_[92],
       quickcheck_observer=_bgo_[93],
       quickcheck_shrinker=_bgo_[94],
       key_set=_bgo_[95],
       compare=_bgo_[96],
       sexp_of_t=_bgo_[97],
       Provide_of_sexp=_bgo_[98],
       Provide_hash=_bgo_[99],
       Provide_bin_io=_bgo_[100],
       Tree=_bgo_[101],
       include=caml_call1(Provide_of_sexp,[0,Key_sexp[1]]),
       t_of_sexp=include[1],
       comparator=Tree[1],
       empty$0=Tree[3],
       of_tree$0=Tree[4],
       singleton$0=Tree[5],
       of_sorted_array_unchecked$0=Tree[6],
       of_sorted_array$0=Tree[7],
       of_increasing_iterator_unchecked$0=Tree[8],
       of_increasing_sequence$0=Tree[9],
       of_sequence$0=Tree[10],
       of_sequence_or_error$0=Tree[11],
       of_sequence_exn$0=Tree[12],
       of_sequence_multi$0=Tree[13],
       of_sequence_fold$0=Tree[14],
       of_sequence_reduce$0=Tree[15],
       of_alist$0=Tree[16],
       of_alist_or_error$0=Tree[17],
       of_alist_exn$0=Tree[18],
       of_hashtbl_exn$0=Tree[19],
       of_alist_multi$0=Tree[20],
       of_alist_fold$0=Tree[21],
       of_alist_reduce$0=Tree[22],
       of_iteri$0=Tree[23],
       of_key_set$0=Tree[24],
       to_tree$0=Tree[25],
       invariants$0=Tree[26],
       is_empty$0=Tree[27],
       length$0=Tree[28],
       set$0=Tree[29],
       add$0=Tree[30],
       add_exn$0=Tree[31],
       add_multi$0=Tree[32],
       remove_multi$0=Tree[33],
       find_multi$0=Tree[34],
       change$0=Tree[35],
       update$0=Tree[36],
       find_exn$0=Tree[37],
       find$0=Tree[38],
       remove$0=Tree[39],
       mem$0=Tree[40],
       iter_keys$0=Tree[41],
       iter$0=Tree[42],
       iteri$0=Tree[43],
       iteri_until$0=Tree[44],
       iter2$0=Tree[45],
       map$0=Tree[46],
       mapi$0=Tree[47],
       fold$0=Tree[48],
       fold_right$0=Tree[49],
       fold2$0=Tree[50],
       filter_keys$0=Tree[51],
       filter$0=Tree[52],
       filteri$0=Tree[53],
       filter_map$0=Tree[54],
       filter_mapi$0=Tree[55],
       partition_mapi$0=Tree[56],
       partition_map$0=Tree[57],
       partitioni_tf$0=Tree[58],
       partition_tf$0=Tree[59],
       compare_direct$0=Tree[60],
       equal$0=Tree[61],
       keys$0=Tree[62],
       data$0=Tree[63],
       to_alist$0=Tree[64],
       validate$0=Tree[65],
       symmetric_diff$0=Tree[66],
       fold_symmetric_diff$0=Tree[67],
       merge$0=Tree[68],
       min_elt$0=Tree[69],
       min_elt_exn$0=Tree[70],
       max_elt$0=Tree[71],
       max_elt_exn$0=Tree[72],
       for_all$0=Tree[73],
       for_alli$0=Tree[74],
       exists$0=Tree[75],
       existsi$0=Tree[76],
       count$0=Tree[77],
       counti$0=Tree[78],
       split$0=Tree[79],
       append$0=Tree[80],
       subrange$0=Tree[81],
       fold_range_inclusive$0=Tree[82],
       range_to_alist$0=Tree[83],
       closest_key$0=Tree[84],
       nth$0=Tree[85],
       nth_exn$0=Tree[86],
       rank$0=Tree[87],
       to_sequence$0=Tree[88],
       binary_search$0=Tree[89],
       binary_search_segmented$0=Tree[90],
       key_set$0=Tree[91],
       quickcheck_generator$0=Tree[92],
       quickcheck_observer$0=Tree[93],
       quickcheck_shrinker$0=Tree[94],
       sexp_of_t$0=Tree[95],
       Provide_of_sexp$0=Tree[96],
       include$0=caml_call1(Provide_of_sexp$0,[0,Key_sexp[1]]),
       t_of_sexp$0=include$0[1],
       Tree$0=
        [0,
         comparator,
         empty$0,
         of_tree$0,
         singleton$0,
         of_sorted_array_unchecked$0,
         of_sorted_array$0,
         of_increasing_iterator_unchecked$0,
         of_increasing_sequence$0,
         of_sequence$0,
         of_sequence_or_error$0,
         of_sequence_exn$0,
         of_sequence_multi$0,
         of_sequence_fold$0,
         of_sequence_reduce$0,
         of_alist$0,
         of_alist_or_error$0,
         of_alist_exn$0,
         of_hashtbl_exn$0,
         of_alist_multi$0,
         of_alist_fold$0,
         of_alist_reduce$0,
         of_iteri$0,
         of_key_set$0,
         to_tree$0,
         invariants$0,
         is_empty$0,
         length$0,
         set$0,
         add$0,
         add_exn$0,
         add_multi$0,
         remove_multi$0,
         find_multi$0,
         change$0,
         update$0,
         find_exn$0,
         find$0,
         remove$0,
         mem$0,
         iter_keys$0,
         iter$0,
         iteri$0,
         iteri_until$0,
         iter2$0,
         map$0,
         mapi$0,
         fold$0,
         fold_right$0,
         fold2$0,
         filter_keys$0,
         filter$0,
         filteri$0,
         filter_map$0,
         filter_mapi$0,
         partition_mapi$0,
         partition_map$0,
         partitioni_tf$0,
         partition_tf$0,
         compare_direct$0,
         equal$0,
         keys$0,
         data$0,
         to_alist$0,
         validate$0,
         symmetric_diff$0,
         fold_symmetric_diff$0,
         merge$0,
         min_elt$0,
         min_elt_exn$0,
         max_elt$0,
         max_elt_exn$0,
         for_all$0,
         for_alli$0,
         exists$0,
         existsi$0,
         count$0,
         counti$0,
         split$0,
         append$0,
         subrange$0,
         fold_range_inclusive$0,
         range_to_alist$0,
         closest_key$0,
         nth$0,
         nth_exn$0,
         rank$0,
         to_sequence$0,
         binary_search$0,
         binary_search_segmented$0,
         key_set$0,
         quickcheck_generator$0,
         quickcheck_observer$0,
         quickcheck_shrinker$0,
         sexp_of_t$0,
         Provide_of_sexp$0,
         t_of_sexp$0];
      return [0,
              Key_S1,
              empty,
              singleton,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_iteri,
              of_tree,
              of_hashtbl_exn,
              of_key_set,
              quickcheck_generator,
              invariants,
              is_empty,
              length,
              add,
              add_exn,
              set,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find,
              find_exn,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iteri_until,
              iter2,
              map,
              mapi,
              fold,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              validate,
              merge,
              symmetric_diff,
              fold_symmetric_diff,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              quickcheck_observer,
              quickcheck_shrinker,
              key_set,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              Key_sexp,
              t_of_sexp,
              Tree$0]}
    function Make_binable_using_comparator(Key_bin_sexp)
     {var
       _bgn_=
        Make_using_comparator
         ([0,Key_bin_sexp[9],Key_bin_sexp[10],Key_bin_sexp[11]]),
       Key_S1=_bgn_[1],
       empty=_bgn_[2],
       singleton=_bgn_[3],
       of_sorted_array=_bgn_[4],
       of_sorted_array_unchecked=_bgn_[5],
       of_increasing_iterator_unchecked=_bgn_[6],
       of_alist=_bgn_[7],
       of_alist_or_error=_bgn_[8],
       of_alist_exn=_bgn_[9],
       of_alist_multi=_bgn_[10],
       of_alist_fold=_bgn_[11],
       of_alist_reduce=_bgn_[12],
       of_increasing_sequence=_bgn_[13],
       of_sequence=_bgn_[14],
       of_sequence_or_error=_bgn_[15],
       of_sequence_exn=_bgn_[16],
       of_sequence_multi=_bgn_[17],
       of_sequence_fold=_bgn_[18],
       of_sequence_reduce=_bgn_[19],
       of_iteri=_bgn_[20],
       of_tree=_bgn_[21],
       of_hashtbl_exn=_bgn_[22],
       of_key_set=_bgn_[23],
       quickcheck_generator=_bgn_[24],
       invariants=_bgn_[25],
       is_empty=_bgn_[26],
       length=_bgn_[27],
       add=_bgn_[28],
       add_exn=_bgn_[29],
       set=_bgn_[30],
       add_multi=_bgn_[31],
       remove_multi=_bgn_[32],
       find_multi=_bgn_[33],
       change=_bgn_[34],
       update=_bgn_[35],
       find=_bgn_[36],
       find_exn=_bgn_[37],
       remove=_bgn_[38],
       mem=_bgn_[39],
       iter_keys=_bgn_[40],
       iter=_bgn_[41],
       iteri=_bgn_[42],
       iteri_until=_bgn_[43],
       iter2=_bgn_[44],
       map=_bgn_[45],
       mapi=_bgn_[46],
       fold=_bgn_[47],
       fold_right=_bgn_[48],
       fold2=_bgn_[49],
       filter_keys=_bgn_[50],
       filter=_bgn_[51],
       filteri=_bgn_[52],
       filter_map=_bgn_[53],
       filter_mapi=_bgn_[54],
       partition_mapi=_bgn_[55],
       partition_map=_bgn_[56],
       partitioni_tf=_bgn_[57],
       partition_tf=_bgn_[58],
       compare_direct=_bgn_[59],
       equal=_bgn_[60],
       keys=_bgn_[61],
       data=_bgn_[62],
       to_alist=_bgn_[63],
       validate=_bgn_[64],
       merge=_bgn_[65],
       symmetric_diff=_bgn_[66],
       fold_symmetric_diff=_bgn_[67],
       min_elt=_bgn_[68],
       min_elt_exn=_bgn_[69],
       max_elt=_bgn_[70],
       max_elt_exn=_bgn_[71],
       for_all=_bgn_[72],
       for_alli=_bgn_[73],
       exists=_bgn_[74],
       existsi=_bgn_[75],
       count=_bgn_[76],
       counti=_bgn_[77],
       split=_bgn_[78],
       append=_bgn_[79],
       subrange=_bgn_[80],
       fold_range_inclusive=_bgn_[81],
       range_to_alist=_bgn_[82],
       closest_key=_bgn_[83],
       nth=_bgn_[84],
       nth_exn=_bgn_[85],
       rank=_bgn_[86],
       to_tree=_bgn_[87],
       to_sequence=_bgn_[88],
       binary_search=_bgn_[89],
       binary_search_segmented=_bgn_[90],
       quickcheck_observer=_bgn_[91],
       quickcheck_shrinker=_bgn_[92],
       key_set=_bgn_[93],
       compare=_bgn_[94],
       sexp_of_t=_bgn_[95],
       Provide_of_sexp=_bgn_[96],
       Provide_hash=_bgn_[97],
       Provide_bin_io=_bgn_[98],
       t_of_sexp=_bgn_[100],
       Tree=_bgn_[101],
       include=
        caml_call1
         (Provide_bin_io,
          [0,
           Key_bin_sexp[1],
           Key_bin_sexp[2],
           Key_bin_sexp[3],
           Key_bin_sexp[4],
           Key_bin_sexp[5],
           Key_bin_sexp[6],
           Key_bin_sexp[7],
           Key_bin_sexp[8]]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              Key_S1,
              empty,
              singleton,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_iteri,
              of_tree,
              of_hashtbl_exn,
              of_key_set,
              quickcheck_generator,
              invariants,
              is_empty,
              length,
              add,
              add_exn,
              set,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find,
              find_exn,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iteri_until,
              iter2,
              map,
              mapi,
              fold,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              validate,
              merge,
              symmetric_diff,
              fold_symmetric_diff,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              quickcheck_observer,
              quickcheck_shrinker,
              key_set,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              t_of_sexp,
              Tree,
              Key_bin_sexp,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function bin_shape_m_t(m){return Provide_bin_io(m)[1]}
    function bin_size_m_t(m){return Provide_bin_io(m)[2]}
    function bin_write_m_t(m){return Provide_bin_io(m)[3]}
    function bin_read_m_t(m){return Provide_bin_io(m)[4]}
    function bin_read_m_t$0(m){return Provide_bin_io(m)[5]}
    var
     hash_fold_m_t=Base_Map[96],
     equal_m_t=Base_Map[95],
     compare_m_t=Base_Map[94],
     m_t_of_sexp$0=Base_Map[93],
     sexp_of_m_t$0=Base_Map[92],
     include$34=Base_Map[98][3],
     sexp_of_t$25=include$34[1],
     empty$3=include$34[3],
     singleton$4=include$34[4],
     of_alist$3=include$34[5],
     of_alist_or_error$3=include$34[6],
     of_alist_exn$3=include$34[7],
     of_alist_multi$3=include$34[8],
     of_alist_fold$2=include$34[9],
     of_alist_reduce$2=include$34[10],
     of_sorted_array$2=include$34[11],
     of_sorted_array_unchecked$2=include$34[12],
     of_increasing_iterator_unchecked$2=include$34[13],
     of_increasing_sequence$2=include$34[14],
     of_sequence$3=include$34[15],
     of_sequence_or_error$2=include$34[16],
     of_sequence_exn$2=include$34[17],
     of_sequence_multi$2=include$34[18],
     of_sequence_fold$2=include$34[19],
     of_sequence_reduce$2=include$34[20],
     of_iteri$2=include$34[21],
     of_tree$2=include$34[22],
     invariants$2=include$34[23],
     is_empty$6=include$34[24],
     length$7=include$34[25],
     add$4=include$34[26],
     add_exn$3=include$34[27],
     set$4=include$34[28],
     add_multi$3=include$34[29],
     remove_multi$3=include$34[30],
     find_multi$3=include$34[31],
     change$3=include$34[32],
     update$3=include$34[33],
     find$5=include$34[34],
     find_exn$4=include$34[35],
     remove$4=include$34[36],
     mem$5=include$34[37],
     iter_keys$3=include$34[38],
     iter$8=include$34[39],
     iteri$4=include$34[40],
     iteri_until$2=include$34[41],
     iter2$2=include$34[42],
     map$12=include$34[43],
     mapi$4=include$34[44],
     fold$5=include$34[45],
     fold_right$3=include$34[46],
     fold2$2=include$34[47],
     filter_keys$3=include$34[48],
     filter$6=include$34[49],
     filteri$4=include$34[50],
     filter_map$5=include$34[51],
     filter_mapi$4=include$34[52],
     partition_mapi$3=include$34[53],
     partition_map$3=include$34[54],
     partitioni_tf$4=include$34[55],
     partition_tf$4=include$34[56],
     compare_direct$2=include$34[57],
     equal$8=include$34[58],
     keys$4=include$34[59],
     data$3=include$34[60],
     to_alist$3=include$34[61],
     validate$3=include$34[62],
     merge$3=include$34[63],
     symmetric_diff$2=include$34[64],
     fold_symmetric_diff$2=include$34[65],
     min_elt$4=include$34[66],
     min_elt_exn$2=include$34[67],
     max_elt$4=include$34[68],
     max_elt_exn$2=include$34[69],
     for_all$5=include$34[70],
     for_alli$4=include$34[71],
     exists$5=include$34[72],
     existsi$4=include$34[73],
     count$5=include$34[74],
     counti$4=include$34[75],
     split$2=include$34[76],
     append$3=include$34[77],
     subrange$2=include$34[78],
     fold_range_inclusive$2=include$34[79],
     range_to_alist$2=include$34[80],
     closest_key$2=include$34[81],
     nth$2=include$34[82],
     nth_exn$2=include$34[83],
     rank$2=include$34[84],
     to_tree$3=include$34[85],
     to_sequence$3=include$34[86],
     binary_search$3=include$34[87],
     binary_search_segmented$3=include$34[88];
    function quickcheck_generator$2(comparator,k,v)
     {return gen_tree(comparator,k,v)}
    function quickcheck_observer$2(k,v){return obs_tree(k,v)}
    function quickcheck_shrinker$2(comparator,k,v)
     {return shr_tree(comparator,k,v)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$106);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _ws_=
      [0,
       [0,
        bin_shape_t$30,
        bin_size_t$32,
        bin_write_t$32,
        bin_read_t$67,
        bin_read_t$66,
        bin_writer_t$24,
        bin_reader_t$24,
        bin_t$24,
        compare$15,
        t_of_sexp$20,
        sexp_of_t$21,
        map$8]],
     _wt_=
      [0,
       [0,
        function(_bgm_)
         {var
           _bgl_=
            Make_binable_using_comparator
             ([0,
               _bgm_[1],
               _bgm_[2],
               _bgm_[3],
               _bgm_[4],
               _bgm_[5],
               _bgm_[6],
               _bgm_[7],
               _bgm_[8],
               _bgm_[10],
               _bgm_[11],
               _bgm_[12]]);
          return [0,
                  _bgl_[102],
                  _bgl_[103],
                  _bgl_[104],
                  _bgl_[105],
                  _bgl_[106],
                  _bgl_[107],
                  _bgl_[108],
                  _bgl_[109],
                  _bgl_[94],
                  _bgl_[99],
                  _bgl_[95],
                  _bgl_[45]]}],
       _ws_],
     _wu_=Base_Map[91];
    function _wv_(_bgi_)
     {var _bgj_=Make_binable_using_comparator(_bgi_),_bgk_=_bgj_[100];
      return [0,
              _bgj_[101],
              [0,
               _bgk_[2],
               _bgk_[4],
               _bgk_[15],
               _bgk_[16],
               _bgk_[17],
               _bgk_[19],
               _bgk_[20],
               _bgk_[21],
               _bgk_[6],
               _bgk_[5],
               _bgk_[7],
               _bgk_[8],
               _bgk_[9],
               _bgk_[10],
               _bgk_[11],
               _bgk_[12],
               _bgk_[13],
               _bgk_[14],
               _bgk_[22],
               _bgk_[3],
               _bgk_[18],
               _bgk_[23],
               _bgk_[91],
               _bgk_[25],
               _bgk_[26],
               _bgk_[27],
               _bgk_[29],
               _bgk_[30],
               _bgk_[28],
               _bgk_[31],
               _bgk_[32],
               _bgk_[33],
               _bgk_[34],
               _bgk_[35],
               _bgk_[37],
               _bgk_[36],
               _bgk_[38],
               _bgk_[39],
               _bgk_[40],
               _bgk_[41],
               _bgk_[42],
               _bgk_[43],
               _bgk_[44],
               _bgk_[45],
               _bgk_[46],
               _bgk_[47],
               _bgk_[48],
               _bgk_[49],
               _bgk_[50],
               _bgk_[51],
               _bgk_[52],
               _bgk_[53],
               _bgk_[54],
               _bgk_[55],
               _bgk_[56],
               _bgk_[57],
               _bgk_[58],
               _bgk_[59],
               _bgk_[60],
               _bgk_[61],
               _bgk_[62],
               _bgk_[63],
               _bgk_[64],
               _bgk_[67],
               _bgk_[65],
               _bgk_[66],
               _bgk_[68],
               _bgk_[69],
               _bgk_[70],
               _bgk_[71],
               _bgk_[72],
               _bgk_[73],
               _bgk_[74],
               _bgk_[75],
               _bgk_[76],
               _bgk_[77],
               _bgk_[78],
               _bgk_[79],
               _bgk_[80],
               _bgk_[81],
               _bgk_[82],
               _bgk_[83],
               _bgk_[84],
               _bgk_[85],
               _bgk_[86],
               _bgk_[24],
               _bgk_[87],
               _bgk_[88],
               _bgk_[89],
               _bgk_[90],
               _bgk_[92],
               _bgk_[93],
               _bgk_[95],
               _bgk_[96],
               _bgk_[94]],
              _bgj_[94],
              _bgj_[2],
              _bgj_[3],
              _bgj_[7],
              _bgj_[8],
              _bgj_[9],
              _bgj_[10],
              _bgj_[11],
              _bgj_[12],
              _bgj_[4],
              _bgj_[5],
              _bgj_[6],
              _bgj_[13],
              _bgj_[14],
              _bgj_[15],
              _bgj_[16],
              _bgj_[17],
              _bgj_[18],
              _bgj_[19],
              _bgj_[20],
              _bgj_[21],
              _bgj_[22],
              _bgj_[23],
              _bgj_[24],
              _bgj_[25],
              _bgj_[26],
              _bgj_[27],
              _bgj_[28],
              _bgj_[29],
              _bgj_[30],
              _bgj_[31],
              _bgj_[32],
              _bgj_[33],
              _bgj_[34],
              _bgj_[35],
              _bgj_[36],
              _bgj_[37],
              _bgj_[38],
              _bgj_[39],
              _bgj_[40],
              _bgj_[41],
              _bgj_[42],
              _bgj_[43],
              _bgj_[44],
              _bgj_[45],
              _bgj_[46],
              _bgj_[47],
              _bgj_[48],
              _bgj_[49],
              _bgj_[50],
              _bgj_[51],
              _bgj_[52],
              _bgj_[53],
              _bgj_[54],
              _bgj_[55],
              _bgj_[56],
              _bgj_[57],
              _bgj_[58],
              _bgj_[59],
              _bgj_[60],
              _bgj_[61],
              _bgj_[62],
              _bgj_[63],
              _bgj_[64],
              _bgj_[65],
              _bgj_[66],
              _bgj_[67],
              _bgj_[68],
              _bgj_[69],
              _bgj_[70],
              _bgj_[71],
              _bgj_[72],
              _bgj_[73],
              _bgj_[74],
              _bgj_[75],
              _bgj_[76],
              _bgj_[77],
              _bgj_[78],
              _bgj_[79],
              _bgj_[80],
              _bgj_[81],
              _bgj_[82],
              _bgj_[83],
              _bgj_[84],
              _bgj_[85],
              _bgj_[86],
              _bgj_[87],
              _bgj_[88],
              _bgj_[89],
              _bgj_[90],
              _bgj_[93],
              _bgj_[91],
              _bgj_[92],
              _bgj_[96],
              _bgj_[98],
              _bgj_[97],
              _bgj_[99],
              _bgj_[95],
              _bgj_[102],
              _bgj_[103],
              _bgj_[104],
              _bgj_[105],
              _bgj_[106],
              _bgj_[107],
              _bgj_[108],
              _bgj_[109]]}
    function _ww_(Key)
     {var
       bin_size_t=Key[1],
       bin_write_t=Key[2],
       bin_read_t=Key[3],
       bin_read_t$0=Key[4],
       bin_shape_t=Key[5],
       bin_writer_t=Key[6],
       bin_reader_t=Key[7],
       bin_t=Key[8],
       t_of_sexp=Key[10],
       sexp_of_t=Key[11],
       include=caml_call1(Make,[0,Key[9],Key[11]]),
       comparator=include[1],
       _bgg_=
        Make_binable_using_comparator
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]),
       _bgh_=_bgg_[100];
      return [0,
              _bgg_[101],
              [0,
               _bgh_[2],
               _bgh_[4],
               _bgh_[15],
               _bgh_[16],
               _bgh_[17],
               _bgh_[19],
               _bgh_[20],
               _bgh_[21],
               _bgh_[6],
               _bgh_[5],
               _bgh_[7],
               _bgh_[8],
               _bgh_[9],
               _bgh_[10],
               _bgh_[11],
               _bgh_[12],
               _bgh_[13],
               _bgh_[14],
               _bgh_[22],
               _bgh_[3],
               _bgh_[18],
               _bgh_[23],
               _bgh_[91],
               _bgh_[25],
               _bgh_[26],
               _bgh_[27],
               _bgh_[29],
               _bgh_[30],
               _bgh_[28],
               _bgh_[31],
               _bgh_[32],
               _bgh_[33],
               _bgh_[34],
               _bgh_[35],
               _bgh_[37],
               _bgh_[36],
               _bgh_[38],
               _bgh_[39],
               _bgh_[40],
               _bgh_[41],
               _bgh_[42],
               _bgh_[43],
               _bgh_[44],
               _bgh_[45],
               _bgh_[46],
               _bgh_[47],
               _bgh_[48],
               _bgh_[49],
               _bgh_[50],
               _bgh_[51],
               _bgh_[52],
               _bgh_[53],
               _bgh_[54],
               _bgh_[55],
               _bgh_[56],
               _bgh_[57],
               _bgh_[58],
               _bgh_[59],
               _bgh_[60],
               _bgh_[61],
               _bgh_[62],
               _bgh_[63],
               _bgh_[64],
               _bgh_[67],
               _bgh_[65],
               _bgh_[66],
               _bgh_[68],
               _bgh_[69],
               _bgh_[70],
               _bgh_[71],
               _bgh_[72],
               _bgh_[73],
               _bgh_[74],
               _bgh_[75],
               _bgh_[76],
               _bgh_[77],
               _bgh_[78],
               _bgh_[79],
               _bgh_[80],
               _bgh_[81],
               _bgh_[82],
               _bgh_[83],
               _bgh_[84],
               _bgh_[85],
               _bgh_[86],
               _bgh_[24],
               _bgh_[87],
               _bgh_[88],
               _bgh_[89],
               _bgh_[90],
               _bgh_[92],
               _bgh_[93],
               _bgh_[95],
               _bgh_[96],
               _bgh_[94]],
              _bgg_[94],
              _bgg_[2],
              _bgg_[3],
              _bgg_[7],
              _bgg_[8],
              _bgg_[9],
              _bgg_[10],
              _bgg_[11],
              _bgg_[12],
              _bgg_[4],
              _bgg_[5],
              _bgg_[6],
              _bgg_[13],
              _bgg_[14],
              _bgg_[15],
              _bgg_[16],
              _bgg_[17],
              _bgg_[18],
              _bgg_[19],
              _bgg_[20],
              _bgg_[21],
              _bgg_[22],
              _bgg_[23],
              _bgg_[24],
              _bgg_[25],
              _bgg_[26],
              _bgg_[27],
              _bgg_[28],
              _bgg_[29],
              _bgg_[30],
              _bgg_[31],
              _bgg_[32],
              _bgg_[33],
              _bgg_[34],
              _bgg_[35],
              _bgg_[36],
              _bgg_[37],
              _bgg_[38],
              _bgg_[39],
              _bgg_[40],
              _bgg_[41],
              _bgg_[42],
              _bgg_[43],
              _bgg_[44],
              _bgg_[45],
              _bgg_[46],
              _bgg_[47],
              _bgg_[48],
              _bgg_[49],
              _bgg_[50],
              _bgg_[51],
              _bgg_[52],
              _bgg_[53],
              _bgg_[54],
              _bgg_[55],
              _bgg_[56],
              _bgg_[57],
              _bgg_[58],
              _bgg_[59],
              _bgg_[60],
              _bgg_[61],
              _bgg_[62],
              _bgg_[63],
              _bgg_[64],
              _bgg_[65],
              _bgg_[66],
              _bgg_[67],
              _bgg_[68],
              _bgg_[69],
              _bgg_[70],
              _bgg_[71],
              _bgg_[72],
              _bgg_[73],
              _bgg_[74],
              _bgg_[75],
              _bgg_[76],
              _bgg_[77],
              _bgg_[78],
              _bgg_[79],
              _bgg_[80],
              _bgg_[81],
              _bgg_[82],
              _bgg_[83],
              _bgg_[84],
              _bgg_[85],
              _bgg_[86],
              _bgg_[87],
              _bgg_[88],
              _bgg_[89],
              _bgg_[90],
              _bgg_[93],
              _bgg_[91],
              _bgg_[92],
              _bgg_[96],
              _bgg_[98],
              _bgg_[97],
              _bgg_[99],
              _bgg_[95],
              _bgg_[102],
              _bgg_[103],
              _bgg_[104],
              _bgg_[105],
              _bgg_[106],
              _bgg_[107],
              _bgg_[108],
              _bgg_[109]]}
    function _wx_(_bgd_)
     {var _bge_=Make_using_comparator(_bgd_),_bgf_=_bge_[101];
      return [0,
              _bge_[99],
              [0,
               _bgf_[2],
               _bgf_[4],
               _bgf_[15],
               _bgf_[16],
               _bgf_[17],
               _bgf_[19],
               _bgf_[20],
               _bgf_[21],
               _bgf_[6],
               _bgf_[5],
               _bgf_[7],
               _bgf_[8],
               _bgf_[9],
               _bgf_[10],
               _bgf_[11],
               _bgf_[12],
               _bgf_[13],
               _bgf_[14],
               _bgf_[22],
               _bgf_[3],
               _bgf_[18],
               _bgf_[23],
               _bgf_[91],
               _bgf_[25],
               _bgf_[26],
               _bgf_[27],
               _bgf_[29],
               _bgf_[30],
               _bgf_[28],
               _bgf_[31],
               _bgf_[32],
               _bgf_[33],
               _bgf_[34],
               _bgf_[35],
               _bgf_[37],
               _bgf_[36],
               _bgf_[38],
               _bgf_[39],
               _bgf_[40],
               _bgf_[41],
               _bgf_[42],
               _bgf_[43],
               _bgf_[44],
               _bgf_[45],
               _bgf_[46],
               _bgf_[47],
               _bgf_[48],
               _bgf_[49],
               _bgf_[50],
               _bgf_[51],
               _bgf_[52],
               _bgf_[53],
               _bgf_[54],
               _bgf_[55],
               _bgf_[56],
               _bgf_[57],
               _bgf_[58],
               _bgf_[59],
               _bgf_[60],
               _bgf_[61],
               _bgf_[62],
               _bgf_[63],
               _bgf_[64],
               _bgf_[67],
               _bgf_[65],
               _bgf_[66],
               _bgf_[68],
               _bgf_[69],
               _bgf_[70],
               _bgf_[71],
               _bgf_[72],
               _bgf_[73],
               _bgf_[74],
               _bgf_[75],
               _bgf_[76],
               _bgf_[77],
               _bgf_[78],
               _bgf_[79],
               _bgf_[80],
               _bgf_[81],
               _bgf_[82],
               _bgf_[83],
               _bgf_[84],
               _bgf_[85],
               _bgf_[86],
               _bgf_[24],
               _bgf_[87],
               _bgf_[88],
               _bgf_[89],
               _bgf_[90],
               _bgf_[92],
               _bgf_[93],
               _bgf_[95],
               _bgf_[96],
               _bgf_[94]],
              _bge_[94],
              _bge_[2],
              _bge_[3],
              _bge_[7],
              _bge_[8],
              _bge_[9],
              _bge_[10],
              _bge_[11],
              _bge_[12],
              _bge_[4],
              _bge_[5],
              _bge_[6],
              _bge_[13],
              _bge_[14],
              _bge_[15],
              _bge_[16],
              _bge_[17],
              _bge_[18],
              _bge_[19],
              _bge_[20],
              _bge_[21],
              _bge_[22],
              _bge_[23],
              _bge_[24],
              _bge_[25],
              _bge_[26],
              _bge_[27],
              _bge_[28],
              _bge_[29],
              _bge_[30],
              _bge_[31],
              _bge_[32],
              _bge_[33],
              _bge_[34],
              _bge_[35],
              _bge_[36],
              _bge_[37],
              _bge_[38],
              _bge_[39],
              _bge_[40],
              _bge_[41],
              _bge_[42],
              _bge_[43],
              _bge_[44],
              _bge_[45],
              _bge_[46],
              _bge_[47],
              _bge_[48],
              _bge_[49],
              _bge_[50],
              _bge_[51],
              _bge_[52],
              _bge_[53],
              _bge_[54],
              _bge_[55],
              _bge_[56],
              _bge_[57],
              _bge_[58],
              _bge_[59],
              _bge_[60],
              _bge_[61],
              _bge_[62],
              _bge_[63],
              _bge_[64],
              _bge_[65],
              _bge_[66],
              _bge_[67],
              _bge_[68],
              _bge_[69],
              _bge_[70],
              _bge_[71],
              _bge_[72],
              _bge_[73],
              _bge_[74],
              _bge_[75],
              _bge_[76],
              _bge_[77],
              _bge_[78],
              _bge_[79],
              _bge_[80],
              _bge_[81],
              _bge_[82],
              _bge_[83],
              _bge_[84],
              _bge_[85],
              _bge_[86],
              _bge_[87],
              _bge_[88],
              _bge_[89],
              _bge_[90],
              _bge_[93],
              _bge_[91],
              _bge_[92],
              _bge_[96],
              _bge_[98],
              _bge_[97],
              _bge_[100],
              _bge_[95]]}
    function _wy_(Key)
     {var
       t_of_sexp=Key[2],
       sexp_of_t=Key[3],
       include=caml_call1(Make,[0,Key[1],Key[3]]),
       comparator=include[1],
       _bgb_=Make_using_comparator([0,t_of_sexp,sexp_of_t,comparator]),
       _bgc_=_bgb_[101];
      return [0,
              _bgb_[99],
              [0,
               _bgc_[2],
               _bgc_[4],
               _bgc_[15],
               _bgc_[16],
               _bgc_[17],
               _bgc_[19],
               _bgc_[20],
               _bgc_[21],
               _bgc_[6],
               _bgc_[5],
               _bgc_[7],
               _bgc_[8],
               _bgc_[9],
               _bgc_[10],
               _bgc_[11],
               _bgc_[12],
               _bgc_[13],
               _bgc_[14],
               _bgc_[22],
               _bgc_[3],
               _bgc_[18],
               _bgc_[23],
               _bgc_[91],
               _bgc_[25],
               _bgc_[26],
               _bgc_[27],
               _bgc_[29],
               _bgc_[30],
               _bgc_[28],
               _bgc_[31],
               _bgc_[32],
               _bgc_[33],
               _bgc_[34],
               _bgc_[35],
               _bgc_[37],
               _bgc_[36],
               _bgc_[38],
               _bgc_[39],
               _bgc_[40],
               _bgc_[41],
               _bgc_[42],
               _bgc_[43],
               _bgc_[44],
               _bgc_[45],
               _bgc_[46],
               _bgc_[47],
               _bgc_[48],
               _bgc_[49],
               _bgc_[50],
               _bgc_[51],
               _bgc_[52],
               _bgc_[53],
               _bgc_[54],
               _bgc_[55],
               _bgc_[56],
               _bgc_[57],
               _bgc_[58],
               _bgc_[59],
               _bgc_[60],
               _bgc_[61],
               _bgc_[62],
               _bgc_[63],
               _bgc_[64],
               _bgc_[67],
               _bgc_[65],
               _bgc_[66],
               _bgc_[68],
               _bgc_[69],
               _bgc_[70],
               _bgc_[71],
               _bgc_[72],
               _bgc_[73],
               _bgc_[74],
               _bgc_[75],
               _bgc_[76],
               _bgc_[77],
               _bgc_[78],
               _bgc_[79],
               _bgc_[80],
               _bgc_[81],
               _bgc_[82],
               _bgc_[83],
               _bgc_[84],
               _bgc_[85],
               _bgc_[86],
               _bgc_[24],
               _bgc_[87],
               _bgc_[88],
               _bgc_[89],
               _bgc_[90],
               _bgc_[92],
               _bgc_[93],
               _bgc_[95],
               _bgc_[96],
               _bgc_[94]],
              _bgb_[94],
              _bgb_[2],
              _bgb_[3],
              _bgb_[7],
              _bgb_[8],
              _bgb_[9],
              _bgb_[10],
              _bgb_[11],
              _bgb_[12],
              _bgb_[4],
              _bgb_[5],
              _bgb_[6],
              _bgb_[13],
              _bgb_[14],
              _bgb_[15],
              _bgb_[16],
              _bgb_[17],
              _bgb_[18],
              _bgb_[19],
              _bgb_[20],
              _bgb_[21],
              _bgb_[22],
              _bgb_[23],
              _bgb_[24],
              _bgb_[25],
              _bgb_[26],
              _bgb_[27],
              _bgb_[28],
              _bgb_[29],
              _bgb_[30],
              _bgb_[31],
              _bgb_[32],
              _bgb_[33],
              _bgb_[34],
              _bgb_[35],
              _bgb_[36],
              _bgb_[37],
              _bgb_[38],
              _bgb_[39],
              _bgb_[40],
              _bgb_[41],
              _bgb_[42],
              _bgb_[43],
              _bgb_[44],
              _bgb_[45],
              _bgb_[46],
              _bgb_[47],
              _bgb_[48],
              _bgb_[49],
              _bgb_[50],
              _bgb_[51],
              _bgb_[52],
              _bgb_[53],
              _bgb_[54],
              _bgb_[55],
              _bgb_[56],
              _bgb_[57],
              _bgb_[58],
              _bgb_[59],
              _bgb_[60],
              _bgb_[61],
              _bgb_[62],
              _bgb_[63],
              _bgb_[64],
              _bgb_[65],
              _bgb_[66],
              _bgb_[67],
              _bgb_[68],
              _bgb_[69],
              _bgb_[70],
              _bgb_[71],
              _bgb_[72],
              _bgb_[73],
              _bgb_[74],
              _bgb_[75],
              _bgb_[76],
              _bgb_[77],
              _bgb_[78],
              _bgb_[79],
              _bgb_[80],
              _bgb_[81],
              _bgb_[82],
              _bgb_[83],
              _bgb_[84],
              _bgb_[85],
              _bgb_[86],
              _bgb_[87],
              _bgb_[88],
              _bgb_[89],
              _bgb_[90],
              _bgb_[93],
              _bgb_[91],
              _bgb_[92],
              _bgb_[96],
              _bgb_[98],
              _bgb_[97],
              _bgb_[100],
              _bgb_[95]]}
    function _wz_(_bf__)
     {var _bf$_=Make_plain_using_comparator(_bf__),_bga_=_bf$_[101];
      return [0,
              _bf$_[1],
              [0,
               _bga_[95],
               _bga_[3],
               _bga_[5],
               _bga_[16],
               _bga_[17],
               _bga_[18],
               _bga_[20],
               _bga_[21],
               _bga_[22],
               _bga_[7],
               _bga_[6],
               _bga_[8],
               _bga_[9],
               _bga_[10],
               _bga_[11],
               _bga_[12],
               _bga_[13],
               _bga_[14],
               _bga_[15],
               _bga_[23],
               _bga_[4],
               _bga_[19],
               _bga_[24],
               _bga_[92],
               _bga_[26],
               _bga_[27],
               _bga_[28],
               _bga_[30],
               _bga_[31],
               _bga_[29],
               _bga_[32],
               _bga_[33],
               _bga_[34],
               _bga_[35],
               _bga_[36],
               _bga_[38],
               _bga_[37],
               _bga_[39],
               _bga_[40],
               _bga_[41],
               _bga_[42],
               _bga_[43],
               _bga_[44],
               _bga_[45],
               _bga_[46],
               _bga_[47],
               _bga_[48],
               _bga_[49],
               _bga_[50],
               _bga_[51],
               _bga_[52],
               _bga_[53],
               _bga_[54],
               _bga_[55],
               _bga_[56],
               _bga_[57],
               _bga_[58],
               _bga_[59],
               _bga_[60],
               _bga_[61],
               _bga_[62],
               _bga_[63],
               _bga_[64],
               _bga_[65],
               _bga_[68],
               _bga_[66],
               _bga_[67],
               _bga_[69],
               _bga_[70],
               _bga_[71],
               _bga_[72],
               _bga_[73],
               _bga_[74],
               _bga_[75],
               _bga_[76],
               _bga_[77],
               _bga_[78],
               _bga_[79],
               _bga_[80],
               _bga_[81],
               _bga_[82],
               _bga_[83],
               _bga_[84],
               _bga_[85],
               _bga_[86],
               _bga_[87],
               _bga_[25],
               _bga_[88],
               _bga_[89],
               _bga_[90],
               _bga_[91],
               _bga_[93],
               _bga_[94],
               _bga_[96]],
              _bf$_[96],
              _bf$_[97],
              _bf$_[4],
              _bf$_[5],
              _bf$_[9],
              _bf$_[10],
              _bf$_[11],
              _bf$_[12],
              _bf$_[13],
              _bf$_[14],
              _bf$_[6],
              _bf$_[7],
              _bf$_[8],
              _bf$_[15],
              _bf$_[16],
              _bf$_[17],
              _bf$_[18],
              _bf$_[19],
              _bf$_[20],
              _bf$_[21],
              _bf$_[22],
              _bf$_[23],
              _bf$_[24],
              _bf$_[25],
              _bf$_[26],
              _bf$_[27],
              _bf$_[28],
              _bf$_[29],
              _bf$_[30],
              _bf$_[31],
              _bf$_[32],
              _bf$_[33],
              _bf$_[34],
              _bf$_[35],
              _bf$_[36],
              _bf$_[37],
              _bf$_[38],
              _bf$_[39],
              _bf$_[40],
              _bf$_[41],
              _bf$_[42],
              _bf$_[43],
              _bf$_[44],
              _bf$_[45],
              _bf$_[46],
              _bf$_[47],
              _bf$_[48],
              _bf$_[49],
              _bf$_[50],
              _bf$_[51],
              _bf$_[52],
              _bf$_[53],
              _bf$_[54],
              _bf$_[55],
              _bf$_[56],
              _bf$_[57],
              _bf$_[58],
              _bf$_[59],
              _bf$_[60],
              _bf$_[61],
              _bf$_[62],
              _bf$_[63],
              _bf$_[64],
              _bf$_[65],
              _bf$_[66],
              _bf$_[67],
              _bf$_[68],
              _bf$_[69],
              _bf$_[70],
              _bf$_[71],
              _bf$_[72],
              _bf$_[73],
              _bf$_[74],
              _bf$_[75],
              _bf$_[76],
              _bf$_[77],
              _bf$_[78],
              _bf$_[79],
              _bf$_[80],
              _bf$_[81],
              _bf$_[82],
              _bf$_[83],
              _bf$_[84],
              _bf$_[85],
              _bf$_[86],
              _bf$_[87],
              _bf$_[88],
              _bf$_[89],
              _bf$_[90],
              _bf$_[91],
              _bf$_[92],
              _bf$_[95],
              _bf$_[93],
              _bf$_[94],
              _bf$_[98],
              _bf$_[100],
              _bf$_[99]]}
    var
     _wB_=
      [0,
       [0,
        t_of_sexp$21,
        sexp_of_t$24,
        empty$2,
        singleton$3,
        of_alist$2,
        of_alist_or_error$2,
        of_alist_exn$2,
        of_alist_multi$2,
        of_alist_fold$1,
        of_alist_reduce$1,
        of_sorted_array$1,
        of_sorted_array_unchecked$1,
        of_increasing_iterator_unchecked$1,
        of_increasing_sequence$1,
        of_sequence$2,
        of_sequence_or_error$1,
        of_sequence_exn$1,
        of_sequence_multi$1,
        of_sequence_fold$1,
        of_sequence_reduce$1,
        of_iteri$1,
        of_tree$1,
        of_hashtbl_exn$2,
        of_key_set$0,
        quickcheck_generator$1,
        invariants$1,
        is_empty$5,
        length$6,
        add$3,
        add_exn$2,
        set$3,
        add_multi$2,
        remove_multi$2,
        find_multi$2,
        change$2,
        update$2,
        find$4,
        find_exn$3,
        remove$3,
        mem$4,
        iter_keys$2,
        iter$7,
        iteri$3,
        iteri_until$1,
        iter2$1,
        map$11,
        mapi$3,
        fold$4,
        fold_right$2,
        fold2$1,
        filter_keys$2,
        filter$5,
        filteri$3,
        filter_map$4,
        filter_mapi$3,
        partition_mapi$2,
        partition_map$2,
        partitioni_tf$3,
        partition_tf$3,
        compare_direct$1,
        equal$7,
        keys$3,
        data$2,
        to_alist$2,
        validate$2,
        merge$2,
        symmetric_diff$1,
        fold_symmetric_diff$1,
        min_elt$3,
        min_elt_exn$1,
        max_elt$3,
        max_elt_exn$1,
        for_all$4,
        for_alli$3,
        exists$4,
        existsi$3,
        count$4,
        counti$3,
        split$1,
        append$2,
        subrange$1,
        fold_range_inclusive$1,
        range_to_alist$1,
        closest_key$1,
        nth$1,
        nth_exn$1,
        rank$1,
        to_tree$2,
        to_sequence$2,
        binary_search$2,
        binary_search_segmented$2,
        key_set$2,
        quickcheck_observer$1,
        quickcheck_shrinker$1],
       bin_shape_t$31,
       bin_size_t$33,
       bin_write_t$33,
       bin_read_t$68,
       bin_read_t$69,
       bin_writer_t$25,
       bin_reader_t$25,
       bin_t$25,
       _vQ_,
       sexp_of_t$23,
       compare$16,
       _vR_,
       _vS_,
       _vW_,
       _vX_,
       _vY_,
       _vZ_,
       _v0_,
       _v1_,
       _vT_,
       _vU_,
       _vV_,
       _v2_,
       _v3_,
       _v4_,
       _v5_,
       _v6_,
       _v7_,
       _v8_,
       _v9_,
       _v__,
       _v$_,
       _wa_,
       _wb_,
       invariants,
       is_empty$3,
       length$4,
       add$1,
       add_exn$0,
       set$1,
       add_multi$0,
       remove_multi$0,
       find_multi$0,
       change$0,
       update$0,
       find$2,
       find_exn$1,
       remove$1,
       mem$2,
       iter_keys$0,
       iter$4,
       iteri$1,
       iteri_until,
       iter2,
       map$9,
       mapi$1,
       fold$2,
       fold_right$0,
       fold2,
       filter_keys$0,
       filter$3,
       filteri$1,
       filter_map$2,
       filter_mapi$1,
       partition_mapi$0,
       partition_map$0,
       partitioni_tf$1,
       partition_tf$1,
       compare_direct,
       equal$5,
       keys$1,
       data$0,
       to_alist$0,
       validate$0,
       merge$0,
       symmetric_diff,
       fold_symmetric_diff,
       min_elt$1,
       min_elt_exn,
       max_elt$1,
       max_elt_exn,
       for_all$2,
       for_alli$1,
       exists$2,
       existsi$1,
       count$2,
       counti$1,
       split,
       append$0,
       subrange,
       fold_range_inclusive,
       range_to_alist,
       closest_key,
       nth,
       nth_exn,
       rank,
       to_tree$0,
       to_sequence$0,
       binary_search$0,
       binary_search_segmented$0,
       key_set$1,
       quickcheck_observer$0,
       quickcheck_shrinker$0];
    function _wA_(Key)
     {var
       sexp_of_t=Key[2],
       include=caml_call1(Make,Key),
       comparator=include[1],
       _bf8_=Make_plain_using_comparator([0,sexp_of_t,comparator]),
       _bf9_=_bf8_[101];
      return [0,
              _bf8_[1],
              [0,
               _bf9_[95],
               _bf9_[3],
               _bf9_[5],
               _bf9_[16],
               _bf9_[17],
               _bf9_[18],
               _bf9_[20],
               _bf9_[21],
               _bf9_[22],
               _bf9_[7],
               _bf9_[6],
               _bf9_[8],
               _bf9_[9],
               _bf9_[10],
               _bf9_[11],
               _bf9_[12],
               _bf9_[13],
               _bf9_[14],
               _bf9_[15],
               _bf9_[23],
               _bf9_[4],
               _bf9_[19],
               _bf9_[24],
               _bf9_[92],
               _bf9_[26],
               _bf9_[27],
               _bf9_[28],
               _bf9_[30],
               _bf9_[31],
               _bf9_[29],
               _bf9_[32],
               _bf9_[33],
               _bf9_[34],
               _bf9_[35],
               _bf9_[36],
               _bf9_[38],
               _bf9_[37],
               _bf9_[39],
               _bf9_[40],
               _bf9_[41],
               _bf9_[42],
               _bf9_[43],
               _bf9_[44],
               _bf9_[45],
               _bf9_[46],
               _bf9_[47],
               _bf9_[48],
               _bf9_[49],
               _bf9_[50],
               _bf9_[51],
               _bf9_[52],
               _bf9_[53],
               _bf9_[54],
               _bf9_[55],
               _bf9_[56],
               _bf9_[57],
               _bf9_[58],
               _bf9_[59],
               _bf9_[60],
               _bf9_[61],
               _bf9_[62],
               _bf9_[63],
               _bf9_[64],
               _bf9_[65],
               _bf9_[68],
               _bf9_[66],
               _bf9_[67],
               _bf9_[69],
               _bf9_[70],
               _bf9_[71],
               _bf9_[72],
               _bf9_[73],
               _bf9_[74],
               _bf9_[75],
               _bf9_[76],
               _bf9_[77],
               _bf9_[78],
               _bf9_[79],
               _bf9_[80],
               _bf9_[81],
               _bf9_[82],
               _bf9_[83],
               _bf9_[84],
               _bf9_[85],
               _bf9_[86],
               _bf9_[87],
               _bf9_[25],
               _bf9_[88],
               _bf9_[89],
               _bf9_[90],
               _bf9_[91],
               _bf9_[93],
               _bf9_[94],
               _bf9_[96]],
              _bf8_[96],
              _bf8_[97],
              _bf8_[4],
              _bf8_[5],
              _bf8_[9],
              _bf8_[10],
              _bf8_[11],
              _bf8_[12],
              _bf8_[13],
              _bf8_[14],
              _bf8_[6],
              _bf8_[7],
              _bf8_[8],
              _bf8_[15],
              _bf8_[16],
              _bf8_[17],
              _bf8_[18],
              _bf8_[19],
              _bf8_[20],
              _bf8_[21],
              _bf8_[22],
              _bf8_[23],
              _bf8_[24],
              _bf8_[25],
              _bf8_[26],
              _bf8_[27],
              _bf8_[28],
              _bf8_[29],
              _bf8_[30],
              _bf8_[31],
              _bf8_[32],
              _bf8_[33],
              _bf8_[34],
              _bf8_[35],
              _bf8_[36],
              _bf8_[37],
              _bf8_[38],
              _bf8_[39],
              _bf8_[40],
              _bf8_[41],
              _bf8_[42],
              _bf8_[43],
              _bf8_[44],
              _bf8_[45],
              _bf8_[46],
              _bf8_[47],
              _bf8_[48],
              _bf8_[49],
              _bf8_[50],
              _bf8_[51],
              _bf8_[52],
              _bf8_[53],
              _bf8_[54],
              _bf8_[55],
              _bf8_[56],
              _bf8_[57],
              _bf8_[58],
              _bf8_[59],
              _bf8_[60],
              _bf8_[61],
              _bf8_[62],
              _bf8_[63],
              _bf8_[64],
              _bf8_[65],
              _bf8_[66],
              _bf8_[67],
              _bf8_[68],
              _bf8_[69],
              _bf8_[70],
              _bf8_[71],
              _bf8_[72],
              _bf8_[73],
              _bf8_[74],
              _bf8_[75],
              _bf8_[76],
              _bf8_[77],
              _bf8_[78],
              _bf8_[79],
              _bf8_[80],
              _bf8_[81],
              _bf8_[82],
              _bf8_[83],
              _bf8_[84],
              _bf8_[85],
              _bf8_[86],
              _bf8_[87],
              _bf8_[88],
              _bf8_[89],
              _bf8_[90],
              _bf8_[91],
              _bf8_[92],
              _bf8_[95],
              _bf8_[93],
              _bf8_[94],
              _bf8_[98],
              _bf8_[100],
              _bf8_[99]]}
    var
     Core_kernel_Map=
      [0,
       invariants$0,
       comparator,
       comparator_s,
       empty$1,
       singleton$2,
       of_alist$1,
       of_alist_or_error$1,
       of_alist_exn$1,
       of_hashtbl_exn$1,
       of_alist_multi$1,
       of_alist_fold$0,
       of_alist_reduce$0,
       of_iteri$0,
       [0,
        sexp_of_t$25,
        empty$3,
        singleton$4,
        of_alist$3,
        of_alist_or_error$3,
        of_alist_exn$3,
        of_alist_multi$3,
        of_alist_fold$2,
        of_alist_reduce$2,
        of_sorted_array$2,
        of_sorted_array_unchecked$2,
        of_increasing_iterator_unchecked$2,
        of_increasing_sequence$2,
        of_sequence$3,
        of_sequence_or_error$2,
        of_sequence_exn$2,
        of_sequence_multi$2,
        of_sequence_fold$2,
        of_sequence_reduce$2,
        of_iteri$2,
        of_tree$2,
        of_hashtbl_exn$0,
        of_key_set,
        quickcheck_generator$2,
        invariants$2,
        is_empty$6,
        length$7,
        add$4,
        add_exn$3,
        set$4,
        add_multi$3,
        remove_multi$3,
        find_multi$3,
        change$3,
        update$3,
        find$5,
        find_exn$4,
        remove$4,
        mem$5,
        iter_keys$3,
        iter$8,
        iteri$4,
        iteri_until$2,
        iter2$2,
        map$12,
        mapi$4,
        fold$5,
        fold_right$3,
        fold2$2,
        filter_keys$3,
        filter$6,
        filteri$4,
        filter_map$5,
        filter_mapi$4,
        partition_mapi$3,
        partition_map$3,
        partitioni_tf$4,
        partition_tf$4,
        compare_direct$2,
        equal$8,
        keys$4,
        data$3,
        to_alist$3,
        validate$3,
        merge$3,
        symmetric_diff$2,
        fold_symmetric_diff$2,
        min_elt$4,
        min_elt_exn$2,
        max_elt$4,
        max_elt_exn$2,
        for_all$5,
        for_alli$4,
        exists$5,
        existsi$4,
        count$5,
        counti$4,
        split$2,
        append$3,
        subrange$2,
        fold_range_inclusive$2,
        range_to_alist$2,
        closest_key$2,
        nth$2,
        nth_exn$2,
        rank$2,
        to_tree$3,
        to_sequence$3,
        binary_search$3,
        binary_search_segmented$3,
        key_set$0,
        quickcheck_observer$2,
        quickcheck_shrinker$2],
       to_tree$1,
       of_tree$0,
       of_sorted_array$0,
       of_sorted_array_unchecked$0,
       of_increasing_iterator_unchecked$0,
       of_increasing_sequence$0,
       of_sequence$1,
       of_sequence_or_error$0,
       of_sequence_exn$0,
       of_sequence_multi$0,
       of_sequence_fold$0,
       of_sequence_reduce$0,
       is_empty$4,
       length$5,
       add$2,
       add_exn$1,
       set$2,
       add_multi$1,
       remove_multi$1,
       find_multi$1,
       change$1,
       update$1,
       find$3,
       find_exn$2,
       find_or_error,
       remove$2,
       mem$3,
       iter_keys$1,
       iter$5,
       iteri$2,
       Base_Map_intf[6],
       Base_Map[1],
       iteri_until$0,
       iter2$0,
       map$10,
       mapi$2,
       fold$3,
       fold_right$1,
       fold2$0,
       filter_keys$1,
       filter$4,
       filteri$2,
       filter_map$3,
       filter_mapi$2,
       partition_mapi$1,
       partition_map$1,
       partitioni_tf$2,
       partition_tf$2,
       compare_direct$0,
       hash_fold_direct,
       equal$6,
       keys$2,
       data$1,
       to_alist$1,
       validate$1,
       merge$1,
       _vO_,
       [0,
        bin_shape_t$30,
        bin_size_t$32,
        bin_write_t$32,
        bin_read_t$67,
        bin_read_t$66,
        bin_writer_t$24,
        bin_reader_t$24,
        bin_t$24,
        compare$15,
        t_of_sexp$20,
        sexp_of_t$21,
        map_data,
        left,
        right],
       symmetric_diff$0,
       fold_symmetric_diff$0,
       min_elt$2,
       min_elt_exn$0,
       max_elt$2,
       max_elt_exn$0,
       for_all$3,
       for_alli$2,
       exists$3,
       existsi$2,
       count$3,
       counti$2,
       split$0,
       append$1,
       subrange$0,
       fold_range_inclusive$0,
       range_to_alist$0,
       closest_key$0,
       nth$0,
       nth_exn$0,
       rank$0,
       to_sequence$1,
       binary_search$1,
       binary_search_segmented$1,
       to_map,
       of_map_keys,
       quickcheck_generator$0,
       quickcheck_observer,
       quickcheck_shrinker,
       [0,
        empty$0,
        singleton$1,
        of_alist$0,
        of_alist_or_error$0,
        of_alist_exn$0,
        of_alist_multi$0,
        of_alist_fold,
        of_alist_reduce,
        of_sorted_array,
        of_sorted_array_unchecked,
        of_increasing_iterator_unchecked,
        of_increasing_sequence,
        of_sequence$0,
        of_sequence_or_error,
        of_sequence_exn,
        of_sequence_multi,
        of_sequence_fold,
        of_sequence_reduce,
        of_iteri,
        of_tree,
        of_hashtbl_exn,
        to_map,
        quickcheck_generator],
       _wB_,
       sexp_of_m_t$0,
       m_t_of_sexp$0,
       compare_m_t,
       equal_m_t,
       hash_fold_m_t,
       _wA_,
       _wz_,
       _wy_,
       _wx_,
       _ww_,
       _wv_,
       _wu_,
       bin_shape_m_t,
       bin_size_m_t,
       bin_write_m_t,
       bin_read_m_t,
       bin_read_m_t$0,
       _wt_];
    caml_register_global(4338,Core_kernel_Map,"Core_kernel__Map");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$107);
    caml_call1(Expect_test_collector[4][1],cst_src_maybe_bound_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$108,cst$35);
    var
     _wD_=caml_call1(Bin_prot_Shape[3][1],cst_a$38),
     _wE_=caml_call1(Bin_prot_Shape[4][1],cst_src_maybe_bound_ml_7_16),
     _wF_=[0,[0,cst_Excl,[0,caml_call2(Bin_prot_Shape[15],_wE_,_wD_),0]],_wC_],
     _wG_=caml_call1(Bin_prot_Shape[3][1],cst_a$39),
     _wH_=caml_call1(Bin_prot_Shape[4][1],cst_src_maybe_bound_ml_6_16),
     _wI_=[0,[0,cst_Incl,[0,caml_call2(Bin_prot_Shape[15],_wH_,_wG_),0]],_wF_],
     _wJ_=caml_call1(Bin_prot_Shape[9],_wI_),
     _wK_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$40),0],
     _wL_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$83),_wK_,_wJ_],0],
     _wM_=caml_call1(Bin_prot_Shape[4][1],cst_src_maybe_bound_ml_5_4),
     group$39=caml_call2(Bin_prot_Shape[6],_wM_,_wL_);
    function bin_shape_t$32(a)
     {var _bf7_=caml_call1(Bin_prot_Shape[2][1],cst_t$84);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$39,_bf7_),[0,a,0])}
    function bin_size_t$34(size_of_a,param)
     {if(typeof param === "number")
       return 1;
      else
       {if(0 === param[0])
         {var v1=param[1],_bf5_=caml_call1(size_of_a,v1);
          return caml_call2(Bin_prot_Common[23],1,_bf5_)}
        var v1$0=param[1],_bf6_=caml_call1(size_of_a,v1$0);
        return caml_call2(Bin_prot_Common[23],1,_bf6_)}}
    function bin_write_t$34(write_a,buf,pos,param)
     {if(typeof param === "number")
       return caml_call3(Bin_prot_Write[30],buf,pos,2);
      else
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
          return caml_call3(write_a,buf,pos$0,v1)}
        var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
        return caml_call3(write_a,buf,pos$1,v1$0)}}
    function bin_writer_t$26(bin_writer_a)
     {function _bf1_(v)
       {var _bf2_=bin_writer_a[2];
        return function(_bf3_,_bf4_)
         {return bin_write_t$34(_bf2_,v,_bf3_,_bf4_)}}
      return [0,function(v){return bin_size_t$34(bin_writer_a[1],v)},_bf1_]}
    function bin_read_t$70(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_maybe_bound_ml_Stable_V1_t,
               pos_ref[1])}
    function bin_read_t$71(of_a,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_wN_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1];
        case 1:var arg_1$0=caml_call2(of_a,buf,pos_ref);return [1,arg_1$0];
        default:return 0}}
    function bin_reader_t$26(bin_reader_a)
     {function _bf0_(buf,pos_ref,vtag)
       {return bin_read_t$70(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$71(bin_reader_a[1],buf,pos_ref)},
              _bf0_]}
    function bin_t$26(bin_a)
     {var _bfY_=bin_reader_t$26(bin_a[3]),_bfZ_=bin_writer_t$26(bin_a[2]);
      return [0,bin_shape_t$32(bin_a[1]),_bfZ_,_bfY_]}
    function compare$17(cmp_a,a_001,match)
     {if(caml_call2(Ppx_compare_lib[1],a_001,match))return 0;
      if(typeof a_001 === "number")
       {if(typeof match === "number")return 0;else if(1 === match[0])return 1}
      else
       {if(0 === a_001[0])
         {var _bfW_=a_001[1];
          if(typeof match !== "number" && 0 === match[0])
           {var b_004=match[1];return caml_call2(cmp_a,_bfW_,b_004)}
          return -1}
        var _bfX_=a_001[1];
        if(typeof match === "number")
         return -1;
        else
         if(0 !== match[0])
          {var b_006=match[1];return caml_call2(cmp_a,_bfX_,b_006)}}
      return 1}
    function t_of_sexp$22(of_a,sexp)
     {if(0 === sexp[0])
       {var _bfS_=sexp[1];
        if(caml_string_notequal(_bfS_,cst_Excl$0))
         {if(caml_string_notequal(_bfS_,cst_Incl$0))
           {if(caml_string_notequal(_bfS_,cst_Unbounded))
             if(caml_string_notequal(_bfS_,cst_excl))
              if(caml_string_notequal(_bfS_,cst_incl))
               if(caml_string_notequal(_bfS_,cst_unbounded))
                var switch$0=1,switch$1=0,switch$2=0;
               else
                var switch$2=1;
              else
               var switch$1=1,switch$2=0;
             else
              var switch$0=0,switch$1=0,switch$2=0;
            else
             var switch$2=1;
            if(switch$2)return 0}
          else
           var switch$1=1;
          if(switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$14,sexp)}
        else
         var switch$0=0;
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$14,sexp)}
      else
       {var _bfT_=sexp[1];
        if(! _bfT_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$14,sexp);
        var _bfU_=_bfT_[1];
        if(0 !== _bfU_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$14,sexp);
        var _bfV_=_bfU_[1];
        if(caml_string_notequal(_bfV_,cst_Excl$1))
         {if(caml_string_notequal(_bfV_,cst_Incl$1))
           {if(caml_string_notequal(_bfV_,cst_Unbounded$0))
             if(caml_string_notequal(_bfV_,cst_excl$0))
              if(caml_string_notequal(_bfV_,cst_incl$0))
               if(caml_string_notequal(_bfV_,cst_unbounded$0))
                var switch$3=1,switch$4=0,switch$5=0;
               else
                var switch$5=1;
              else
               var switch$4=1,switch$5=0;
             else
              var switch$3=0,switch$4=0,switch$5=0;
            else
             var switch$5=1;
            if(switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$14,sexp)}
          else
           var switch$4=1;
          if(switch$4)
           {var sexp_args=_bfT_[2];
            if(sexp_args)
             if(! sexp_args[2])
              {var v0=sexp_args[1],v0$0=caml_call1(of_a,v0);return [0,v0$0]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$14,_bfV_,sexp)}}
        else
         var switch$3=0;
        if(! switch$3)
         {var sexp_args$0=_bfT_[2];
          if(sexp_args$0)
           if(! sexp_args$0[2])
            {var v0$1=sexp_args$0[1],v0$2=caml_call1(of_a,v0$1);
             return [1,v0$2]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$14,_bfV_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$14,sexp)}
    function sexp_of_t$26(of_a,param)
     {if(typeof param === "number")
       return _wO_;
      else
       {if(0 === param[0])
         {var v0=param[1],v0$0=caml_call1(of_a,v0);
          return [1,[0,_wP_,[0,v0$0,0]]]}
        var v0$1=param[1],v0$2=caml_call1(of_a,v0$1);
        return [1,[0,_wQ_,[0,v0$2,0]]]}}
    function map$13(x,f)
     {if(typeof x === "number")
       return 0;
      else
       {if(0 === x[0]){var x$0=x[1];return [0,caml_call1(f,x$0)]}
        var x$1=x[1];
        return [1,caml_call1(f,x$1)]}}
    var
     all$0=include$35[1],
     t_of_sexp$23=include$35[2],
     sexp_of_t$27=include$35[3],
     map$14=include$35[4],
     is_lower_bound=include$35[5],
     is_upper_bound=include$35[6],
     interval_contains_exn=include$35[7],
     bounds_crossed=include$35[8],
     sexp_of_interval_comparison=include$35[9],
     interval_comparison_of_sexp=include$35[10],
     compare_interval_comparison=include$35[11],
     hash_fold_interval_comparison=include$35[12],
     hash_interval_comparison=include$35[13],
     compare_to_interval_exn=include$35[14];
    function compare_one_sided(side,compare_a,t1,match)
     {if(typeof t1 === "number")
       return typeof match === "number"?0:996968770 <= side?1:-1;
      else
       if(0 === t1[0])
        {var _bfQ_=t1[1];
         if(typeof match !== "number")
          {if(0 === match[0])
            {var a2=match[1];return caml_call2(compare_a,_bfQ_,a2)}
           var a2$0=match[1],c=caml_call2(compare_a,_bfQ_,a2$0);
           return caml_call2(_aS_,c,0)?996968770 <= side?1:-1:c}}
       else
        {var _bfR_=t1[1];
         if(typeof match !== "number")
          {if(0 === match[0])
            {var a2$1=match[1],c$0=caml_call2(compare_a,_bfR_,a2$1);
             return caml_call2(_aS_,c$0,0)?996968770 <= side?-1:1:c$0}
           var a2$2=match[1];
           return caml_call2(compare_a,_bfR_,a2$2)}}
      return 996968770 <= side?-1:1}
    function compare$18(compare_a,t1,t2)
     {return compare_one_sided(204302817,compare_a,t1,t2)}
    var As_lower_bound=[0,compare$18];
    function compare$19(compare_a,t1,t2)
     {return compare_one_sided(996968770,compare_a,t1,t2)}
    var As_upper_bound=[0,compare$19];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$109);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Maybe_bound=
      [0,
       bin_shape_t$32,
       bin_size_t$34,
       bin_write_t$34,
       bin_read_t$71,
       bin_read_t$70,
       bin_writer_t$26,
       bin_reader_t$26,
       bin_t$26,
       all$0,
       t_of_sexp$23,
       sexp_of_t$27,
       map$14,
       is_lower_bound,
       is_upper_bound,
       interval_contains_exn,
       bounds_crossed,
       sexp_of_interval_comparison,
       interval_comparison_of_sexp,
       compare_interval_comparison,
       hash_fold_interval_comparison,
       hash_interval_comparison,
       compare_to_interval_exn,
       As_lower_bound,
       As_upper_bound,
       [0,
        [0,
         bin_shape_t$32,
         bin_size_t$34,
         bin_write_t$34,
         bin_read_t$71,
         bin_read_t$70,
         bin_writer_t$26,
         bin_reader_t$26,
         bin_t$26,
         compare$17,
         t_of_sexp$22,
         sexp_of_t$26,
         map$13]]];
    caml_register_global
     (4340,Core_kernel_Maybe_bound,"Core_kernel__Maybe_bound");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$110);
    caml_call1(Expect_test_collector[4][1],cst_src_quickcheckable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$111,cst$36);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$112);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Quickcheckable=[0];
    caml_register_global
     (4341,Core_kernel_Quickcheckable,"Core_kernel__Quickcheckable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$113);
    caml_call1(Expect_test_collector[4][1],cst_src_set_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$114,cst$37);
    var Elt_bin_io=[0];
    function Check_accessors$0(T,Tree,Elt,Named,Cmp,Options,M){return [0]}
    function Check_accessors0(M){return [0]}
    function Check_accessors1$0(M){return [0]}
    function Check_accessors2$0(M){return [0]}
    function Check_accessors2_with_comparator(M){return [0]}
    function Check_creators$0(T,Tree,Elt,Cmp,Options,M){return [0]}
    function Check_creators0(M){return [0]}
    function Check_creators1$0(M){return [0]}
    function Check_creators2$0(M){return [0]}
    function Check_creators2_with_comparator(M){return [0]}
    function Make_S_plain_tree$0(Elt){return [0]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$115);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Set_intf=
      [0,
       Elt_bin_io,
       Check_accessors$0,
       Check_accessors0,
       Check_accessors1$0,
       Check_accessors2$0,
       Check_accessors2_with_comparator,
       Check_creators$0,
       Check_creators0,
       Check_creators1$0,
       Check_creators2$0,
       Check_creators2_with_comparator,
       Make_S_plain_tree$0];
    caml_register_global(4342,Core_kernel_Set_intf,"Core_kernel__Set_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$116);
    caml_call1(Expect_test_collector[4][1],cst_src_set_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$117,cst$38);
    function quickcheck_generator$3(comparator,elt_gen)
     {return caml_call2(Base_quickcheck_Generator[18],[0,comparator],elt_gen)}
    function gen_tree$0(comparator,elt_gen)
     {return caml_call2(Base_quickcheck_Generator[20],comparator,elt_gen)}
    function quickcheck_observer$3(elt_obs)
     {return caml_call1(Base_quickcheck_Observer[20],elt_obs)}
    function obs_tree$0(elt_obs)
     {return caml_call1(Base_quickcheck_Observer[22],elt_obs)}
    function quickcheck_shrinker$3(elt_shr)
     {return caml_call1(Base_quickcheck_Shrinker[19],elt_shr)}
    function shr_tree$0(comparator,elt_shr)
     {return caml_call2(Base_quickcheck_Shrinker[21],comparator,elt_shr)}
    function quickcheck_generator$4(m,elt_gen)
     {return quickcheck_generator$3(m[1],elt_gen)}
    var
     include$36=Base_Set[71][3],
     sexp_of_t$28=include$36[1],
     t_of_sexp_direct$0=include$36[2],
     Named=include$36[3],
     length$8=include$36[4],
     is_empty$7=include$36[5],
     iter$9=include$36[6],
     fold$6=include$36[7],
     fold_result$1=include$36[8],
     exists$6=include$36[9],
     for_all$6=include$36[10],
     count$6=include$36[11],
     sum$1=include$36[12],
     find$6=include$36[13],
     find_map$1=include$36[14],
     to_list$1=include$36[15],
     to_array$1=include$36[16],
     invariants$3=include$36[17],
     mem$6=include$36[18],
     add$5=include$36[19],
     remove$5=include$36[20],
     union$1=include$36[21],
     inter$0=include$36[22],
     diff$0=include$36[23],
     symmetric_diff$3=include$36[24],
     compare_direct$3=include$36[25],
     equal$9=include$36[26],
     is_subset=include$36[27],
     fold_until$1=include$36[28],
     fold_right$4=include$36[29],
     iter2$3=include$36[30],
     filter$7=include$36[31],
     partition_tf$5=include$36[32],
     elements=include$36[33],
     min_elt$5=include$36[34],
     min_elt_exn$3=include$36[35],
     max_elt$5=include$36[36],
     max_elt_exn$3=include$36[37],
     choose$0=include$36[38],
     choose_exn$0=include$36[39],
     split$3=include$36[40],
     group_by=include$36[41],
     find_exn$5=include$36[42],
     nth$3=include$36[43],
     remove_index=include$36[44],
     to_tree$4=include$36[45],
     to_sequence$4=include$36[46],
     binary_search$4=include$36[47],
     binary_search_segmented$4=include$36[48],
     merge_to_sequence=include$36[49],
     empty$4=include$36[50],
     singleton$5=include$36[51],
     union_list=include$36[52],
     of_list$3=include$36[53],
     of_array=include$36[54],
     of_sorted_array$3=include$36[55],
     of_sorted_array_unchecked$3=include$36[56],
     of_increasing_iterator_unchecked$3=include$36[57],
     stable_dedup_list=include$36[58],
     map$15=include$36[59],
     filter_map$6=include$36[60],
     of_tree$3=include$36[61],
     empty$5=include$36[62];
    function to_map$0(comparator,t)
     {var _bfO_=caml_call2(Base_Set[71][62],comparator,t);
      return function(_bfP_){return to_map(_bfO_,_bfP_)}}
    function of_map_keys$0(m)
     {var _bfN_=of_map_keys(m);return caml_call1(Base_Set[71][46],_bfN_)}
    function of_hash_set(comparator,hset)
     {function _bfM_(t,x){return caml_call3(add$5,comparator,t,x)}
      return caml_call3(fold$1,hset,caml_call1(empty$4,comparator),_bfM_)}
    function of_hashtbl_keys$0(comparator,hashtbl)
     {function _bfK_(x,param,t){return caml_call3(add$5,comparator,t,x)}
      var _bfL_=caml_call1(empty$4,comparator);
      return caml_call3(Core_kernel_Hashtbl[18],hashtbl,_bfL_,_bfK_)}
    var
     _wR_=Base_Set[71],
     merge_to_sequence$0=_wR_[50],
     binary_search_segmented$5=_wR_[49],
     binary_search$5=_wR_[48],
     to_sequence$5=_wR_[47],
     to_tree$5=_wR_[46],
     remove_index$0=_wR_[45],
     nth$4=_wR_[44],
     find_exn$6=_wR_[43],
     group_by$0=_wR_[42],
     split$4=_wR_[41],
     choose_exn$1=_wR_[40],
     choose$1=_wR_[39],
     max_elt_exn$4=_wR_[38],
     max_elt$6=_wR_[37],
     min_elt_exn$4=_wR_[36],
     min_elt$6=_wR_[35],
     elements$0=_wR_[34],
     partition_tf$6=_wR_[33],
     filter$8=_wR_[32],
     iter2$4=_wR_[31],
     fold_right$5=_wR_[30],
     fold_until$2=_wR_[29],
     Named$0=_wR_[28],
     is_subset$0=_wR_[27],
     equal$10=_wR_[26],
     compare_direct$4=_wR_[25],
     symmetric_diff$4=_wR_[24],
     diff$1=_wR_[23],
     inter$1=_wR_[22],
     union$2=_wR_[21],
     remove$6=_wR_[20],
     add$6=_wR_[19],
     mem$7=_wR_[18],
     invariants$4=_wR_[17],
     to_array$2=_wR_[16],
     to_list$2=_wR_[15],
     find_map$2=_wR_[14],
     find$7=_wR_[13],
     sum$2=_wR_[12],
     count$7=_wR_[11],
     for_all$7=_wR_[10],
     exists$7=_wR_[9],
     fold_result$2=_wR_[8],
     fold$7=_wR_[7],
     iter$10=_wR_[6],
     is_empty$8=_wR_[5],
     length$9=_wR_[4],
     invariants$5=Base_Set[2],
     empty$6=Base_Set[5],
     singleton$6=Base_Set[6],
     length$10=Base_Set[7],
     is_empty$9=Base_Set[8],
     mem$8=Base_Set[9],
     add$7=Base_Set[10],
     remove$7=Base_Set[11],
     union$3=Base_Set[12],
     union_list$0=Base_Set[13],
     inter$2=Base_Set[14],
     diff$2=Base_Set[15],
     symmetric_diff$5=Base_Set[16],
     compare_direct$5=Base_Set[17],
     equal$11=Base_Set[19],
     exists$8=Base_Set[20],
     for_all$8=Base_Set[21],
     count$8=Base_Set[22],
     sum$3=Base_Set[23],
     find$8=Base_Set[24],
     find_map$3=Base_Set[25],
     find_exn$7=Base_Set[26],
     nth$5=Base_Set[27],
     remove_index$1=Base_Set[28],
     is_subset$1=Base_Set[29],
     of_list$4=Base_Set[31],
     of_array$0=Base_Set[32],
     to_list$3=Base_Set[33],
     to_array$3=Base_Set[34],
     of_sorted_array$4=Base_Set[35],
     of_sorted_array_unchecked$4=Base_Set[36],
     of_increasing_iterator_unchecked$4=Base_Set[37],
     stable_dedup_list$0=Base_Set[38],
     map$16=Base_Set[39],
     filter_map$7=Base_Set[40],
     filter$9=Base_Set[41],
     fold$8=Base_Set[42],
     fold_result$3=Base_Set[43],
     fold_until$3=Base_Set[44],
     fold_right$6=Base_Set[45],
     iter$11=Base_Set[46],
     iter2$5=Base_Set[47],
     partition_tf$7=Base_Set[48],
     elements$1=Base_Set[49],
     min_elt$7=Base_Set[50],
     min_elt_exn$5=Base_Set[51],
     max_elt$7=Base_Set[52],
     max_elt_exn$5=Base_Set[53],
     choose$2=Base_Set[54],
     choose_exn$2=Base_Set[55],
     split$5=Base_Set[56],
     group_by$1=Base_Set[57],
     to_sequence$6=Base_Set[58],
     binary_search$6=Base_Set[59],
     binary_search_segmented$6=Base_Set[60],
     merge_to_sequence$1=Base_Set[62];
    function of_tree$4(m){return caml_call1(Base_Set[71][62],m[1])}
    var to_tree$6=Base_Set[71][46],sexp_of_t$29=Base_Set[71][1];
    function compare$20(param,_bfJ_,t1,t2)
     {return caml_call2(compare_direct$5,t1,t2)}
    var
     _wS_=Base_Set[71],
     hash_fold_direct$0=_wS_[64],
     comparator$0=_wS_[63],
     of_tree$5=_wS_[62],
     filter_map$8=_wS_[61],
     map$17=_wS_[60],
     stable_dedup_list$1=_wS_[59],
     of_increasing_iterator_unchecked$5=_wS_[58],
     of_sorted_array_unchecked$5=_wS_[57],
     of_sorted_array$5=_wS_[56],
     of_array$1=_wS_[55],
     of_list$5=_wS_[54],
     union_list$1=_wS_[53],
     singleton$7=_wS_[52],
     empty$7=_wS_[51];
    function of_hash_set$0(comparator,hset)
     {return caml_call2(of_tree$5,comparator,of_hash_set(comparator,hset))}
    function of_hashtbl_keys$1(comparator,hashtbl)
     {return caml_call2
              (of_tree$5,comparator,of_hashtbl_keys$0(comparator,hashtbl))}
    function of_hash_set$1(m,hset){return of_hash_set$0(m[1],hset)}
    function of_hashtbl_keys$2(m,hashtbl)
     {return of_hashtbl_keys$1(m[1],hashtbl)}
    function Creators$1(Elt)
     {var comparator=Elt[1];
      function of_tree(tree){return caml_call2(of_tree$5,comparator,tree)}
      function of_sorted_array_unchecked(array)
       {return caml_call2(of_sorted_array_unchecked$5,comparator,array)}
      function of_increasing_iterator_unchecked(len,f)
       {return caml_call3(of_increasing_iterator_unchecked$5,comparator,len,f)}
      function of_sorted_array(array)
       {return caml_call2(of_sorted_array$5,comparator,array)}
      var M_empty=caml_call1(Base_Set[71][65],Elt),empty=M_empty[1];
      function singleton(e){return caml_call2(singleton$7,comparator,e)}
      function union_list(l){return caml_call2(union_list$1,comparator,l)}
      function of_list(l){return caml_call2(of_list$5,comparator,l)}
      function of_hash_set(h){return of_hash_set$0(comparator,h)}
      function of_hashtbl_keys(h){return of_hashtbl_keys$1(comparator,h)}
      function of_array(a){return caml_call2(of_array$1,comparator,a)}
      function stable_dedup_list(xs)
       {return caml_call2(stable_dedup_list$1,comparator,xs)}
      function map(t,f){return caml_call3(map$17,comparator,t,f)}
      function filter_map(t,f){return caml_call3(filter_map$8,comparator,t,f)}
      function t_of_sexp(a_of_sexp,sexp)
       {return of_tree
                (caml_call3(t_of_sexp_direct$0,comparator,a_of_sexp,sexp))}
      function quickcheck_generator(elt)
       {return quickcheck_generator$3(comparator,elt)}
      return [0,
              t_of_sexp,
              empty,
              singleton,
              union_list,
              of_list,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              quickcheck_generator]}
    function Make_tree$0(Elt)
     {var comparator=Elt[1],compare_elt=comparator[1];
      function singleton(e){return caml_call2(singleton$5,comparator,e)}
      function invariants(t){return caml_call2(invariants$3,comparator,t)}
      function length(t){return caml_call1(length$8,t)}
      function is_empty(t){return caml_call1(is_empty$7,t)}
      function elements$0(t){return caml_call1(elements,t)}
      function min_elt(t){return caml_call1(min_elt$5,t)}
      function min_elt_exn(t){return caml_call1(min_elt_exn$3,t)}
      function max_elt(t){return caml_call1(max_elt$5,t)}
      function max_elt_exn(t){return caml_call1(max_elt_exn$3,t)}
      function choose(t){return caml_call1(choose$0,t)}
      function choose_exn(t){return caml_call1(choose_exn$0,t)}
      function to_list(t){return caml_call1(to_list$1,t)}
      function to_array(t){return caml_call1(to_array$1,t)}
      function iter(t,f){return caml_call2(iter$9,t,f)}
      function iter2(a,b,f){return caml_call4(iter2$3,comparator,a,b,f)}
      function exists(t,f){return caml_call2(exists$6,t,f)}
      function for_all(t,f){return caml_call2(for_all$6,t,f)}
      function count(t,f){return caml_call2(count$6,t,f)}
      function sum(m,t,f){return caml_call3(sum$1,m,t,f)}
      function find(t,f){return caml_call2(find$6,t,f)}
      function find_exn(t,f){return caml_call2(find_exn$5,t,f)}
      function find_map(t,f){return caml_call2(find_map$1,t,f)}
      function fold(t,init,f){return caml_call3(fold$6,t,init,f)}
      function fold_until(t,init,f){return caml_call3(fold_until$1,t,init,f)}
      function fold_right(t,init,f){return caml_call3(fold_right$4,t,init,f)}
      function fold_result(t,init,f)
       {return caml_call4(include$7[8],fold,init,f,t)}
      function map(t,f){return caml_call3(map$15,comparator,t,f)}
      function filter(t,f){return caml_call3(filter$7,comparator,t,f)}
      function filter_map(t,f){return caml_call3(filter_map$6,comparator,t,f)}
      function partition_tf(t,f)
       {return caml_call3(partition_tf$5,comparator,t,f)}
      function mem(t,a){return caml_call3(mem$6,comparator,t,a)}
      function add(t,a){return caml_call3(add$5,comparator,t,a)}
      function remove(t,a){return caml_call3(remove$5,comparator,t,a)}
      function union(t1,t2){return caml_call3(union$1,comparator,t1,t2)}
      function inter(t1,t2){return caml_call3(inter$0,comparator,t1,t2)}
      function diff(t1,t2){return caml_call3(diff$0,comparator,t1,t2)}
      function symmetric_diff(t1,t2)
       {return caml_call3(symmetric_diff$3,comparator,t1,t2)}
      function compare_direct(t1,t2)
       {return caml_call3(compare_direct$3,comparator,t1,t2)}
      function equal(t1,t2){return caml_call3(equal$9,comparator,t1,t2)}
      function is_subset$0(t,of){return caml_call3(is_subset,comparator,t,of)}
      function subset(t1,t2){return is_subset$0(t1,t2)}
      function of_list(l){return caml_call2(of_list$3,comparator,l)}
      function of_hash_set$0(h){return of_hash_set(comparator,h)}
      function of_hashtbl_keys(h){return of_hashtbl_keys$0(comparator,h)}
      function of_array$0(a){return caml_call2(of_array,comparator,a)}
      function of_sorted_array_unchecked(a)
       {return caml_call2(of_sorted_array_unchecked$3,comparator,a)}
      function of_increasing_iterator_unchecked(len,f)
       {return caml_call3(of_increasing_iterator_unchecked$3,comparator,len,f)}
      function of_sorted_array(a)
       {return caml_call2(of_sorted_array$3,comparator,a)}
      function union_list$0(l){return caml_call2(union_list,comparator,l)}
      function stable_dedup_list$0(xs)
       {return caml_call2(stable_dedup_list,comparator,xs)}
      function group_by$0(t,equiv)
       {return caml_call3(group_by,comparator,t,equiv)}
      function split(t,a){return caml_call3(split$3,comparator,t,a)}
      function nth(t,i){return caml_call2(nth$3,t,i)}
      function remove_index$0(t,i)
       {return caml_call3(remove_index,comparator,t,i)}
      function to_tree(t){return t}
      function of_tree(t){return t}
      function to_sequence(order,greater_or_equal_to,less_or_equal_to,t)
       {return caml_call5
                (to_sequence$4,
                 comparator,
                 order,
                 greater_or_equal_to,
                 less_or_equal_to,
                 t)}
      function binary_search(t,compare,how,v)
       {return caml_call5(binary_search$4,comparator,t,compare,how,v)}
      function binary_search_segmented(t,segment_of,how)
       {return caml_call4
                (binary_search_segmented$4,comparator,t,segment_of,how)}
      function merge_to_sequence$0
       (order,greater_or_equal_to,less_or_equal_to,t$0,t)
       {return caml_call6
                (merge_to_sequence,
                 comparator,
                 order,
                 greater_or_equal_to,
                 less_or_equal_to,
                 t$0,
                 t)}
      function to_map(t,f){return caml_call1(to_map$0(comparator,t),f)}
      function is_subset$1(t,of){return caml_call3(Named[1],comparator,t,of)}
      function equal$0(t1,t2){return caml_call3(Named[2],comparator,t1,t2)}
      var Named$0=[0,is_subset$1,equal$0];
      function quickcheck_generator(elt){return gen_tree$0(comparator,elt)}
      function quickcheck_observer(elt){return obs_tree$0(elt)}
      function quickcheck_shrinker(elt){return shr_tree$0(comparator,elt)}
      return [0,
              comparator,
              compare_elt,
              empty$5,
              singleton,
              invariants,
              length,
              is_empty,
              elements$0,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose,
              choose_exn,
              to_list,
              to_array,
              iter,
              iter2,
              exists,
              for_all,
              count,
              sum,
              find,
              find_exn,
              find_map,
              fold,
              fold_until,
              fold_right,
              fold_result,
              map,
              filter,
              filter_map,
              partition_tf,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset$0,
              subset,
              of_list,
              of_hash_set$0,
              of_hashtbl_keys,
              of_array$0,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              of_sorted_array,
              union_list$0,
              stable_dedup_list$0,
              group_by$0,
              split,
              nth,
              nth,
              remove_index$0,
              to_tree,
              of_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              merge_to_sequence$0,
              of_map_keys$0,
              to_map,
              Named$0,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker]}
    function init_for_bin_prot$0(len,f,comparator)
     {var set=caml_call3(of_increasing_iterator_unchecked$5,comparator,len,f);
      if(caml_call1(invariants$5,set))return set;
      function _bfI_(acc,elt)
       {return caml_call3(mem$6,comparator,acc,elt)
                ?caml_call1(_a__,cst_Set_bin_read_t_duplicate_element_in_map)
                :caml_call3(add$5,comparator,acc,elt)}
      return caml_call2
              (of_tree$5,
               comparator,
               caml_call3(fold$8,set,caml_call1(empty$4,comparator),_bfI_))}
    var
     _wT_=Creators$1(Poly),
     _wU_=_wT_[1],
     _wV_=_wT_[2],
     _wW_=_wT_[3],
     _wX_=_wT_[4],
     _wY_=_wT_[5],
     _wZ_=_wT_[6],
     _w0_=_wT_[7],
     _w1_=_wT_[8],
     _w2_=_wT_[9],
     _w3_=_wT_[10],
     _w4_=_wT_[11],
     _w5_=_wT_[12],
     _w6_=_wT_[13],
     _w7_=_wT_[14],
     _w8_=_wT_[15],
     _w9_=_wT_[16],
     _w__=_wT_[17];
    function compare$21(param,t1,t2)
     {return caml_call2(compare_direct$4,t1,t2)}
    function sexp_of_t$30(sexp_of_k,t)
     {return caml_call3(sexp_of_t$29,sexp_of_k,function(param){return _w$_},t)}
    var
     _xa_=caml_call1(Bin_prot_Shape[3][1],cst_a$41),
     _xb_=caml_call1(Bin_prot_Shape[4][1],cst_src_set_ml_326_19),
     _xc_=caml_call2(Bin_prot_Shape[15],_xb_,_xa_),
     _xd_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$42),0],
     _xe_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$9),_xd_,_xc_],0],
     _xf_=caml_call1(Bin_prot_Shape[4][1],cst_src_set_ml_326_6),
     group$40=caml_call2(Bin_prot_Shape[6],_xf_,_xe_);
    function bin_shape_el$1(a)
     {var _bfH_=caml_call1(Bin_prot_Shape[2][1],cst_el$10);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$40,_bfH_),[0,a,0])}
    function bin_size_el$1(size_of_a){return size_of_a}
    function bin_write_el$1(write_a){return write_a}
    function bin_read_el$1(of_a){return of_a}
    var
     caller_identity$1=
      caml_call1
       (Bin_prot_Shape[5][1],cst_88bcc478_4992_11e6_a95d_ff4831acf410);
    function iter$12(t,f)
     {return caml_call2(iter$10,t,function(key){return caml_call1(f,key)})}
    function init$2(len,next)
     {var _bfG_=Poly[1];
      return init_for_bin_prot$0
              (len,function(param){return caml_call1(next,0)},_bfG_)}
    var
     include$37=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         caller_identity$1,
         module_name$4,
         length$9,
         iter$12,
         init$2,
         bin_size_el$1,
         bin_write_el$1,
         bin_read_el$1,
         bin_shape_el$1]),
     bin_shape_t$33=include$37[1],
     bin_size_t$35=include$37[2],
     bin_write_t$35=include$37[3],
     bin_read_t$72=include$37[4],
     bin_read_t$73=include$37[5],
     bin_writer_t$27=include$37[6],
     bin_reader_t$27=include$37[7],
     bin_t$27=include$37[8],
     include$38=Make_tree$0(Poly),
     empty$8=include$38[3],
     singleton$8=include$38[4],
     invariants$6=include$38[5],
     length$11=include$38[6],
     is_empty$10=include$38[7],
     elements$2=include$38[8],
     min_elt$8=include$38[9],
     min_elt_exn$6=include$38[10],
     max_elt$8=include$38[11],
     max_elt_exn$6=include$38[12],
     choose$3=include$38[13],
     choose_exn$3=include$38[14],
     to_list$4=include$38[15],
     to_array$4=include$38[16],
     iter$13=include$38[17],
     iter2$6=include$38[18],
     exists$9=include$38[19],
     for_all$9=include$38[20],
     count$9=include$38[21],
     sum$4=include$38[22],
     find$9=include$38[23],
     find_exn$8=include$38[24],
     find_map$4=include$38[25],
     fold$9=include$38[26],
     fold_until$4=include$38[27],
     fold_right$7=include$38[28],
     fold_result$4=include$38[29],
     map$18=include$38[30],
     filter$10=include$38[31],
     filter_map$9=include$38[32],
     partition_tf$8=include$38[33],
     mem$9=include$38[34],
     add$8=include$38[35],
     remove$8=include$38[36],
     union$4=include$38[37],
     inter$3=include$38[38],
     diff$3=include$38[39],
     symmetric_diff$6=include$38[40],
     compare_direct$6=include$38[41],
     equal$12=include$38[42],
     is_subset$2=include$38[43],
     of_list$6=include$38[45],
     of_hash_set$2=include$38[46],
     of_hashtbl_keys$3=include$38[47],
     of_array$2=include$38[48],
     of_sorted_array_unchecked$6=include$38[49],
     of_increasing_iterator_unchecked$6=include$38[50],
     of_sorted_array$6=include$38[51],
     union_list$2=include$38[52],
     stable_dedup_list$2=include$38[53],
     group_by$2=include$38[54],
     split$6=include$38[55],
     nth$6=include$38[56],
     remove_index$2=include$38[58],
     to_tree$7=include$38[59],
     of_tree$6=include$38[60],
     to_sequence$7=include$38[61],
     binary_search$7=include$38[62],
     binary_search_segmented$7=include$38[63],
     merge_to_sequence$2=include$38[64],
     of_map_keys$1=include$38[65],
     to_map$1=include$38[66],
     Named$1=include$38[67],
     quickcheck_generator$5=include$38[68],
     quickcheck_observer$4=include$38[69],
     quickcheck_shrinker$4=include$38[70];
    function sexp_of_t$31(sexp_of_elt,t)
     {return caml_call3
              (sexp_of_t$28,sexp_of_elt,function(param){return _xg_},t)}
    function t_of_sexp$24(elt_of_sexp,sexp)
     {return caml_call3(t_of_sexp_direct$0,Poly[1],elt_of_sexp,sexp)}
    function Provide_bin_io$0(Elt)
     {var
       _bfy_=Elt[5],
       _bfz_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$11),0,_bfy_],0],
       _bfA_=caml_call1(Bin_prot_Shape[4][1],cst_src_set_ml_365_4),
       group=caml_call2(Bin_prot_Shape[6],_bfA_,_bfz_),
       _bfB_=caml_call1(Bin_prot_Shape[2][1],cst_el$12),
       bin_shape_el=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bfB_),0),
       _bfC_=Elt[1],
       _bfD_=Elt[2],
       _bfE_=Elt[3],
       caller_identity=
        caml_call1
         (Bin_prot_Shape[5][1],cst_8989278e_4992_11e6_8f4a_6b89776b1e53);
      function iter(t,f)
       {return caml_call2(iter$11,t,function(key){return caml_call1(f,key)})}
      function init(len,next)
       {var _bfF_=Elt[9];
        return init_for_bin_prot$0
                (len,function(param){return caml_call1(next,0)},_bfF_)}
      return caml_call1
              (Bin_prot_Utils[11],
               [0,
                caller_identity,
                module_name$5,
                length$10,
                iter,
                init,
                _bfC_,
                _bfD_,
                _bfE_,
                bin_shape_el])}
    function Make_plain_using_comparator$0(Elt)
     {var
       Elt_S1=caml_call1(S_to_S1,[0,Elt[2]]),
       _bfu_=Creators$1(Elt_S1),
       t_of_sexp=_bfu_[1],
       empty=_bfu_[2],
       singleton=_bfu_[3],
       union_list=_bfu_[4],
       of_list=_bfu_[5],
       of_array=_bfu_[6],
       of_sorted_array=_bfu_[7],
       of_sorted_array_unchecked=_bfu_[8],
       of_increasing_iterator_unchecked=_bfu_[9],
       stable_dedup_list=_bfu_[10],
       map=_bfu_[11],
       filter_map=_bfu_[12],
       of_tree=_bfu_[13],
       of_hash_set=_bfu_[14],
       of_hashtbl_keys=_bfu_[15],
       of_map_keys=_bfu_[16],
       quickcheck_generator=_bfu_[17];
      function compare(t1,t2){return caml_call2(compare_direct$4,t1,t2)}
      function sexp_of_t(t)
       {function _bfx_(param){return _xh_}
        return caml_call3(sexp_of_t$29,Elt[1],_bfx_,t)}
      function Provide_of_sexp(Elt)
       {function t_of_sexp$0(sexp){return caml_call2(t_of_sexp,Elt[1],sexp)}
        return [0,t_of_sexp$0]}
      function Provide_hash(Elt)
       {function hash_fold_t(state,t)
         {return caml_call3(hash_fold_direct$0,Elt[1],state,t)}
        function hash(t)
         {var _bfw_=hash_fold_t(caml_call2(Base_Hash[11],0,0),t);
          return caml_call1(Base_Hash[9],_bfw_)}
        return [0,hash_fold_t,hash]}
      function Provide_bin_io(Elt$0)
       {var
         comparator=Elt[2],
         bin_size_t=Elt$0[1],
         bin_write_t=Elt$0[2],
         bin_read_t=Elt$0[3],
         bin_read_t$0=Elt$0[4],
         bin_shape_t=Elt$0[5],
         bin_writer_t=Elt$0[6],
         bin_reader_t=Elt$0[7],
         bin_t=Elt$0[8];
        return Provide_bin_io$0
                ([0,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t,
                  bin_read_t$0,
                  bin_shape_t,
                  bin_writer_t,
                  bin_reader_t,
                  bin_t,
                  comparator])}
      var
       include=Make_tree$0(Elt_S1),
       comparator=include[1],
       compare_elt=include[2],
       empty$0=include[3],
       singleton$0=include[4],
       invariants=include[5],
       length=include[6],
       is_empty=include[7],
       elements=include[8],
       min_elt=include[9],
       min_elt_exn=include[10],
       max_elt=include[11],
       max_elt_exn=include[12],
       choose=include[13],
       choose_exn=include[14],
       to_list=include[15],
       to_array=include[16],
       iter=include[17],
       iter2=include[18],
       exists=include[19],
       for_all=include[20],
       count=include[21],
       sum=include[22],
       find=include[23],
       find_exn=include[24],
       find_map=include[25],
       fold=include[26],
       fold_until=include[27],
       fold_right=include[28],
       fold_result=include[29],
       map$0=include[30],
       filter=include[31],
       filter_map$0=include[32],
       partition_tf=include[33],
       mem=include[34],
       add=include[35],
       remove=include[36],
       union=include[37],
       inter=include[38],
       diff=include[39],
       symmetric_diff=include[40],
       compare_direct=include[41],
       equal=include[42],
       is_subset=include[43],
       subset=include[44],
       of_list$0=include[45],
       of_hash_set$0=include[46],
       of_hashtbl_keys$0=include[47],
       of_array$0=include[48],
       of_sorted_array_unchecked$0=include[49],
       of_increasing_iterator_unchecked$0=include[50],
       of_sorted_array$0=include[51],
       union_list$0=include[52],
       stable_dedup_list$0=include[53],
       group_by=include[54],
       split=include[55],
       nth=include[56],
       find_index=include[57],
       remove_index=include[58],
       to_tree=include[59],
       of_tree$0=include[60],
       to_sequence=include[61],
       binary_search=include[62],
       binary_search_segmented=include[63],
       merge_to_sequence=include[64],
       of_map_keys$0=include[65],
       to_map$0=include[66],
       Named=include[67],
       quickcheck_generator$0=include[68],
       quickcheck_observer=include[69],
       quickcheck_shrinker=include[70];
      function compare$0(t1,t2){return caml_call2(compare_direct,t1,t2)}
      function sexp_of_t$0(t)
       {function _bfv_(param){return _xi_}
        return caml_call3(sexp_of_t$28,Elt[1],_bfv_,t)}
      function Provide_of_sexp$0(X)
       {function t_of_sexp(sexp)
         {return caml_call3(t_of_sexp_direct$0,Elt_S1[1],X[1],sexp)}
        return [0,t_of_sexp]}
      var
       Tree=
        [0,
         comparator,
         compare_elt,
         empty$0,
         singleton$0,
         invariants,
         length,
         is_empty,
         elements,
         min_elt,
         min_elt_exn,
         max_elt,
         max_elt_exn,
         choose,
         choose_exn,
         to_list,
         to_array,
         iter,
         iter2,
         exists,
         for_all,
         count,
         sum,
         find,
         find_exn,
         find_map,
         fold,
         fold_until,
         fold_right,
         fold_result,
         map$0,
         filter,
         filter_map$0,
         partition_tf,
         mem,
         add,
         remove,
         union,
         inter,
         diff,
         symmetric_diff,
         compare_direct,
         equal,
         is_subset,
         subset,
         of_list$0,
         of_hash_set$0,
         of_hashtbl_keys$0,
         of_array$0,
         of_sorted_array_unchecked$0,
         of_increasing_iterator_unchecked$0,
         of_sorted_array$0,
         union_list$0,
         stable_dedup_list$0,
         group_by,
         split,
         nth,
         find_index,
         remove_index,
         to_tree,
         of_tree$0,
         to_sequence,
         binary_search,
         binary_search_segmented,
         merge_to_sequence,
         of_map_keys$0,
         to_map$0,
         Named,
         quickcheck_generator$0,
         quickcheck_observer,
         quickcheck_shrinker,
         compare$0,
         sexp_of_t$0,
         Provide_of_sexp$0];
      return [0,
              Elt,
              Elt_S1,
              t_of_sexp,
              empty,
              singleton,
              union_list,
              of_list,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              quickcheck_generator,
              length$9,
              is_empty$8,
              iter$10,
              fold$7,
              fold_result$2,
              exists$7,
              for_all$7,
              count$7,
              sum$2,
              find$7,
              find_map$2,
              to_list$2,
              to_array$2,
              invariants$4,
              mem$7,
              add$6,
              remove$6,
              union$2,
              inter$1,
              diff$1,
              symmetric_diff$4,
              compare_direct$4,
              equal$10,
              is_subset$0,
              Named$0,
              fold_until$2,
              fold_right$5,
              iter2$4,
              filter$8,
              partition_tf$6,
              elements$0,
              min_elt$6,
              min_elt_exn$4,
              max_elt$6,
              max_elt_exn$4,
              choose$1,
              choose_exn$1,
              split$4,
              group_by$0,
              find_exn$6,
              nth$4,
              remove_index$0,
              to_tree$5,
              to_sequence$5,
              binary_search$5,
              binary_search_segmented$5,
              merge_to_sequence$0,
              to_map,
              quickcheck_observer$3,
              quickcheck_shrinker$3,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              Tree]}
    function Make_using_comparator$0(Elt_sexp)
     {var
       _bft_=Make_plain_using_comparator$0([0,Elt_sexp[2],Elt_sexp[3]]),
       Elt_S1=_bft_[2],
       empty=_bft_[4],
       singleton=_bft_[5],
       union_list=_bft_[6],
       of_list=_bft_[7],
       of_array=_bft_[8],
       of_sorted_array=_bft_[9],
       of_sorted_array_unchecked=_bft_[10],
       of_increasing_iterator_unchecked=_bft_[11],
       stable_dedup_list=_bft_[12],
       map=_bft_[13],
       filter_map=_bft_[14],
       of_tree=_bft_[15],
       of_hash_set=_bft_[16],
       of_hashtbl_keys=_bft_[17],
       of_map_keys=_bft_[18],
       quickcheck_generator=_bft_[19],
       length=_bft_[20],
       is_empty=_bft_[21],
       iter=_bft_[22],
       fold=_bft_[23],
       fold_result=_bft_[24],
       exists=_bft_[25],
       for_all=_bft_[26],
       count=_bft_[27],
       sum=_bft_[28],
       find=_bft_[29],
       find_map=_bft_[30],
       to_list=_bft_[31],
       to_array=_bft_[32],
       invariants=_bft_[33],
       mem=_bft_[34],
       add=_bft_[35],
       remove=_bft_[36],
       union=_bft_[37],
       inter=_bft_[38],
       diff=_bft_[39],
       symmetric_diff=_bft_[40],
       compare_direct=_bft_[41],
       equal=_bft_[42],
       is_subset=_bft_[43],
       Named=_bft_[44],
       fold_until=_bft_[45],
       fold_right=_bft_[46],
       iter2=_bft_[47],
       filter=_bft_[48],
       partition_tf=_bft_[49],
       elements=_bft_[50],
       min_elt=_bft_[51],
       min_elt_exn=_bft_[52],
       max_elt=_bft_[53],
       max_elt_exn=_bft_[54],
       choose=_bft_[55],
       choose_exn=_bft_[56],
       split=_bft_[57],
       group_by=_bft_[58],
       find_exn=_bft_[59],
       nth=_bft_[60],
       remove_index=_bft_[61],
       to_tree=_bft_[62],
       to_sequence=_bft_[63],
       binary_search=_bft_[64],
       binary_search_segmented=_bft_[65],
       merge_to_sequence=_bft_[66],
       to_map=_bft_[67],
       quickcheck_observer=_bft_[68],
       quickcheck_shrinker=_bft_[69],
       compare=_bft_[70],
       sexp_of_t=_bft_[71],
       Provide_of_sexp=_bft_[72],
       Provide_hash=_bft_[73],
       Provide_bin_io=_bft_[74],
       Tree=_bft_[75],
       include=caml_call1(Provide_of_sexp,[0,Elt_sexp[1]]),
       t_of_sexp=include[1],
       comparator=Tree[1],
       compare_elt=Tree[2],
       empty$0=Tree[3],
       singleton$0=Tree[4],
       invariants$0=Tree[5],
       length$0=Tree[6],
       is_empty$0=Tree[7],
       elements$0=Tree[8],
       min_elt$0=Tree[9],
       min_elt_exn$0=Tree[10],
       max_elt$0=Tree[11],
       max_elt_exn$0=Tree[12],
       choose$0=Tree[13],
       choose_exn$0=Tree[14],
       to_list$0=Tree[15],
       to_array$0=Tree[16],
       iter$0=Tree[17],
       iter2$0=Tree[18],
       exists$0=Tree[19],
       for_all$0=Tree[20],
       count$0=Tree[21],
       sum$0=Tree[22],
       find$0=Tree[23],
       find_exn$0=Tree[24],
       find_map$0=Tree[25],
       fold$0=Tree[26],
       fold_until$0=Tree[27],
       fold_right$0=Tree[28],
       fold_result$0=Tree[29],
       map$0=Tree[30],
       filter$0=Tree[31],
       filter_map$0=Tree[32],
       partition_tf$0=Tree[33],
       mem$0=Tree[34],
       add$0=Tree[35],
       remove$0=Tree[36],
       union$0=Tree[37],
       inter$0=Tree[38],
       diff$0=Tree[39],
       symmetric_diff$0=Tree[40],
       compare_direct$0=Tree[41],
       equal$0=Tree[42],
       is_subset$0=Tree[43],
       subset=Tree[44],
       of_list$0=Tree[45],
       of_hash_set$0=Tree[46],
       of_hashtbl_keys$0=Tree[47],
       of_array$0=Tree[48],
       of_sorted_array_unchecked$0=Tree[49],
       of_increasing_iterator_unchecked$0=Tree[50],
       of_sorted_array$0=Tree[51],
       union_list$0=Tree[52],
       stable_dedup_list$0=Tree[53],
       group_by$0=Tree[54],
       split$0=Tree[55],
       nth$0=Tree[56],
       find_index=Tree[57],
       remove_index$0=Tree[58],
       to_tree$0=Tree[59],
       of_tree$0=Tree[60],
       to_sequence$0=Tree[61],
       binary_search$0=Tree[62],
       binary_search_segmented$0=Tree[63],
       merge_to_sequence$0=Tree[64],
       of_map_keys$0=Tree[65],
       to_map$0=Tree[66],
       Named$0=Tree[67],
       quickcheck_generator$0=Tree[68],
       quickcheck_observer$0=Tree[69],
       quickcheck_shrinker$0=Tree[70],
       compare$0=Tree[71],
       sexp_of_t$0=Tree[72],
       Provide_of_sexp$0=Tree[73],
       include$0=caml_call1(Provide_of_sexp$0,[0,Elt_sexp[1]]),
       t_of_sexp$0=include$0[1],
       Tree$0=
        [0,
         comparator,
         compare_elt,
         empty$0,
         singleton$0,
         invariants$0,
         length$0,
         is_empty$0,
         elements$0,
         min_elt$0,
         min_elt_exn$0,
         max_elt$0,
         max_elt_exn$0,
         choose$0,
         choose_exn$0,
         to_list$0,
         to_array$0,
         iter$0,
         iter2$0,
         exists$0,
         for_all$0,
         count$0,
         sum$0,
         find$0,
         find_exn$0,
         find_map$0,
         fold$0,
         fold_until$0,
         fold_right$0,
         fold_result$0,
         map$0,
         filter$0,
         filter_map$0,
         partition_tf$0,
         mem$0,
         add$0,
         remove$0,
         union$0,
         inter$0,
         diff$0,
         symmetric_diff$0,
         compare_direct$0,
         equal$0,
         is_subset$0,
         subset,
         of_list$0,
         of_hash_set$0,
         of_hashtbl_keys$0,
         of_array$0,
         of_sorted_array_unchecked$0,
         of_increasing_iterator_unchecked$0,
         of_sorted_array$0,
         union_list$0,
         stable_dedup_list$0,
         group_by$0,
         split$0,
         nth$0,
         find_index,
         remove_index$0,
         to_tree$0,
         of_tree$0,
         to_sequence$0,
         binary_search$0,
         binary_search_segmented$0,
         merge_to_sequence$0,
         of_map_keys$0,
         to_map$0,
         Named$0,
         quickcheck_generator$0,
         quickcheck_observer$0,
         quickcheck_shrinker$0,
         compare$0,
         sexp_of_t$0,
         Provide_of_sexp$0,
         t_of_sexp$0];
      return [0,
              Elt_S1,
              empty,
              singleton,
              union_list,
              of_list,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              quickcheck_generator,
              length,
              is_empty,
              iter,
              fold,
              fold_result,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_list,
              to_array,
              invariants,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset,
              Named,
              fold_until,
              fold_right,
              iter2,
              filter,
              partition_tf,
              elements,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose,
              choose_exn,
              split,
              group_by,
              find_exn,
              nth,
              remove_index,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              merge_to_sequence,
              to_map,
              quickcheck_observer,
              quickcheck_shrinker,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              Elt_sexp,
              t_of_sexp,
              Tree$0]}
    function Make_binable_using_comparator$0(Elt_bin_sexp)
     {var
       _bfs_=
        Make_using_comparator$0
         ([0,Elt_bin_sexp[9],Elt_bin_sexp[10],Elt_bin_sexp[11]]),
       Elt_S1=_bfs_[1],
       empty=_bfs_[2],
       singleton=_bfs_[3],
       union_list=_bfs_[4],
       of_list=_bfs_[5],
       of_array=_bfs_[6],
       of_sorted_array=_bfs_[7],
       of_sorted_array_unchecked=_bfs_[8],
       of_increasing_iterator_unchecked=_bfs_[9],
       stable_dedup_list=_bfs_[10],
       map=_bfs_[11],
       filter_map=_bfs_[12],
       of_tree=_bfs_[13],
       of_hash_set=_bfs_[14],
       of_hashtbl_keys=_bfs_[15],
       of_map_keys=_bfs_[16],
       quickcheck_generator=_bfs_[17],
       length=_bfs_[18],
       is_empty=_bfs_[19],
       iter=_bfs_[20],
       fold=_bfs_[21],
       fold_result=_bfs_[22],
       exists=_bfs_[23],
       for_all=_bfs_[24],
       count=_bfs_[25],
       sum=_bfs_[26],
       find=_bfs_[27],
       find_map=_bfs_[28],
       to_list=_bfs_[29],
       to_array=_bfs_[30],
       invariants=_bfs_[31],
       mem=_bfs_[32],
       add=_bfs_[33],
       remove=_bfs_[34],
       union=_bfs_[35],
       inter=_bfs_[36],
       diff=_bfs_[37],
       symmetric_diff=_bfs_[38],
       compare_direct=_bfs_[39],
       equal=_bfs_[40],
       is_subset=_bfs_[41],
       Named=_bfs_[42],
       fold_until=_bfs_[43],
       fold_right=_bfs_[44],
       iter2=_bfs_[45],
       filter=_bfs_[46],
       partition_tf=_bfs_[47],
       elements=_bfs_[48],
       min_elt=_bfs_[49],
       min_elt_exn=_bfs_[50],
       max_elt=_bfs_[51],
       max_elt_exn=_bfs_[52],
       choose=_bfs_[53],
       choose_exn=_bfs_[54],
       split=_bfs_[55],
       group_by=_bfs_[56],
       find_exn=_bfs_[57],
       nth=_bfs_[58],
       remove_index=_bfs_[59],
       to_tree=_bfs_[60],
       to_sequence=_bfs_[61],
       binary_search=_bfs_[62],
       binary_search_segmented=_bfs_[63],
       merge_to_sequence=_bfs_[64],
       to_map=_bfs_[65],
       quickcheck_observer=_bfs_[66],
       quickcheck_shrinker=_bfs_[67],
       compare=_bfs_[68],
       sexp_of_t=_bfs_[69],
       Provide_of_sexp=_bfs_[70],
       Provide_hash=_bfs_[71],
       Provide_bin_io=_bfs_[72],
       t_of_sexp=_bfs_[74],
       Tree=_bfs_[75],
       include=
        caml_call1
         (Provide_bin_io,
          [0,
           Elt_bin_sexp[1],
           Elt_bin_sexp[2],
           Elt_bin_sexp[3],
           Elt_bin_sexp[4],
           Elt_bin_sexp[5],
           Elt_bin_sexp[6],
           Elt_bin_sexp[7],
           Elt_bin_sexp[8]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              Elt_S1,
              empty,
              singleton,
              union_list,
              of_list,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              quickcheck_generator,
              length,
              is_empty,
              iter,
              fold,
              fold_result,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_list,
              to_array,
              invariants,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset,
              Named,
              fold_until,
              fold_right,
              iter2,
              filter,
              partition_tf,
              elements,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose,
              choose_exn,
              split,
              group_by,
              find_exn,
              nth,
              remove_index,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              merge_to_sequence,
              to_map,
              quickcheck_observer,
              quickcheck_shrinker,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              t_of_sexp,
              Tree,
              Elt_bin_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function bin_shape_m_t$0(m){return Provide_bin_io$0(m)[5]}
    function bin_size_m_t$0(m){return Provide_bin_io$0(m)[1]}
    function bin_write_m_t$0(m){return Provide_bin_io$0(m)[2]}
    function bin_read_m_t$1(m){return Provide_bin_io$0(m)[3]}
    function bin_read_m_t$2(m){return Provide_bin_io$0(m)[4]}
    var
     hash_m_t=Base_Set[69],
     hash_fold_m_t$0=Base_Set[68],
     equal_m_t$0=Base_Set[67],
     compare_m_t$0=Base_Set[66],
     m_t_of_sexp$1=Base_Set[65],
     sexp_of_m_t$1=Base_Set[64];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$118);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _xj_=
      [0,
       [0,
        function(_bfr_)
         {var
           _bfq_=
            Make_binable_using_comparator$0
             ([0,
               _bfr_[1],
               _bfr_[2],
               _bfr_[3],
               _bfr_[4],
               _bfr_[5],
               _bfr_[6],
               _bfr_[7],
               _bfr_[8],
               _bfr_[10],
               _bfr_[11],
               _bfr_[12]]);
          return [0,
                  _bfq_[76],
                  _bfq_[77],
                  _bfq_[78],
                  _bfq_[79],
                  _bfq_[80],
                  _bfq_[81],
                  _bfq_[82],
                  _bfq_[83],
                  _bfq_[68],
                  _bfq_[73],
                  _bfq_[69]]}]],
     _xk_=Base_Set[63];
    function _xl_(_bfm_)
     {var
       _bfn_=Make_binable_using_comparator$0(_bfm_),
       _bfo_=_bfn_[74],
       _bfp_=_bfn_[75];
      return [0,
              [0,
               _bfp_[9],
               _bfp_[10],
               _bfp_[1],
               _bfp_[2],
               _bfp_[3],
               _bfp_[4],
               _bfp_[5],
               _bfp_[6],
               _bfp_[7],
               _bfp_[8],
               _bfp_[11]],
              [0,
               _bfo_[71],
               _bfo_[6],
               _bfo_[7],
               _bfo_[17],
               _bfo_[26],
               _bfo_[29],
               _bfo_[19],
               _bfo_[20],
               _bfo_[21],
               _bfo_[22],
               _bfo_[23],
               _bfo_[25],
               _bfo_[15],
               _bfo_[16],
               _bfo_[5],
               _bfo_[34],
               _bfo_[35],
               _bfo_[36],
               _bfo_[37],
               _bfo_[38],
               _bfo_[39],
               _bfo_[40],
               _bfo_[41],
               _bfo_[42],
               _bfo_[43],
               _bfo_[67],
               _bfo_[27],
               _bfo_[28],
               _bfo_[18],
               _bfo_[31],
               _bfo_[33],
               _bfo_[8],
               _bfo_[9],
               _bfo_[10],
               _bfo_[11],
               _bfo_[12],
               _bfo_[13],
               _bfo_[14],
               _bfo_[55],
               _bfo_[54],
               _bfo_[24],
               _bfo_[56],
               _bfo_[58],
               _bfo_[59],
               _bfo_[61],
               _bfo_[62],
               _bfo_[63],
               _bfo_[64],
               _bfo_[66],
               _bfo_[69],
               _bfo_[70],
               _bfo_[3],
               _bfo_[4],
               _bfo_[52],
               _bfo_[45],
               _bfo_[48],
               _bfo_[51],
               _bfo_[49],
               _bfo_[50],
               _bfo_[53],
               _bfo_[30],
               _bfo_[32],
               _bfo_[60],
               _bfo_[46],
               _bfo_[47],
               _bfo_[65],
               _bfo_[68],
               _bfo_[73],
               _bfo_[74],
               _bfo_[72]],
              _bfn_[68],
              _bfn_[18],
              _bfn_[19],
              _bfn_[20],
              _bfn_[21],
              _bfn_[22],
              _bfn_[23],
              _bfn_[24],
              _bfn_[25],
              _bfn_[26],
              _bfn_[27],
              _bfn_[28],
              _bfn_[29],
              _bfn_[30],
              _bfn_[31],
              _bfn_[32],
              _bfn_[33],
              _bfn_[34],
              _bfn_[35],
              _bfn_[36],
              _bfn_[37],
              _bfn_[38],
              _bfn_[39],
              _bfn_[40],
              _bfn_[41],
              _bfn_[42],
              _bfn_[43],
              _bfn_[44],
              _bfn_[45],
              _bfn_[46],
              _bfn_[47],
              _bfn_[48],
              _bfn_[49],
              _bfn_[50],
              _bfn_[51],
              _bfn_[52],
              _bfn_[53],
              _bfn_[54],
              _bfn_[55],
              _bfn_[56],
              _bfn_[57],
              _bfn_[58],
              _bfn_[59],
              _bfn_[60],
              _bfn_[61],
              _bfn_[62],
              _bfn_[63],
              _bfn_[64],
              _bfn_[65],
              _bfn_[66],
              _bfn_[67],
              _bfn_[2],
              _bfn_[3],
              _bfn_[4],
              _bfn_[5],
              _bfn_[6],
              _bfn_[7],
              _bfn_[8],
              _bfn_[9],
              _bfn_[10],
              _bfn_[11],
              _bfn_[12],
              _bfn_[13],
              _bfn_[14],
              _bfn_[15],
              _bfn_[16],
              _bfn_[17],
              _bfn_[70],
              _bfn_[72],
              _bfn_[71],
              _bfn_[73],
              _bfn_[69],
              _bfn_[76],
              _bfn_[77],
              _bfn_[78],
              _bfn_[79],
              _bfn_[80],
              _bfn_[81],
              _bfn_[82],
              _bfn_[83]]}
    function _xm_(_bfj_)
     {var _bfk_=Make_using_comparator$0(_bfj_),_bfl_=_bfk_[75];
      return [0,
              _bfk_[73],
              [0,
               _bfl_[71],
               _bfl_[6],
               _bfl_[7],
               _bfl_[17],
               _bfl_[26],
               _bfl_[29],
               _bfl_[19],
               _bfl_[20],
               _bfl_[21],
               _bfl_[22],
               _bfl_[23],
               _bfl_[25],
               _bfl_[15],
               _bfl_[16],
               _bfl_[5],
               _bfl_[34],
               _bfl_[35],
               _bfl_[36],
               _bfl_[37],
               _bfl_[38],
               _bfl_[39],
               _bfl_[40],
               _bfl_[41],
               _bfl_[42],
               _bfl_[43],
               _bfl_[67],
               _bfl_[27],
               _bfl_[28],
               _bfl_[18],
               _bfl_[31],
               _bfl_[33],
               _bfl_[8],
               _bfl_[9],
               _bfl_[10],
               _bfl_[11],
               _bfl_[12],
               _bfl_[13],
               _bfl_[14],
               _bfl_[55],
               _bfl_[54],
               _bfl_[24],
               _bfl_[56],
               _bfl_[58],
               _bfl_[59],
               _bfl_[61],
               _bfl_[62],
               _bfl_[63],
               _bfl_[64],
               _bfl_[66],
               _bfl_[69],
               _bfl_[70],
               _bfl_[3],
               _bfl_[4],
               _bfl_[52],
               _bfl_[45],
               _bfl_[48],
               _bfl_[51],
               _bfl_[49],
               _bfl_[50],
               _bfl_[53],
               _bfl_[30],
               _bfl_[32],
               _bfl_[60],
               _bfl_[46],
               _bfl_[47],
               _bfl_[65],
               _bfl_[68],
               _bfl_[73],
               _bfl_[74],
               _bfl_[72]],
              _bfk_[68],
              _bfk_[18],
              _bfk_[19],
              _bfk_[20],
              _bfk_[21],
              _bfk_[22],
              _bfk_[23],
              _bfk_[24],
              _bfk_[25],
              _bfk_[26],
              _bfk_[27],
              _bfk_[28],
              _bfk_[29],
              _bfk_[30],
              _bfk_[31],
              _bfk_[32],
              _bfk_[33],
              _bfk_[34],
              _bfk_[35],
              _bfk_[36],
              _bfk_[37],
              _bfk_[38],
              _bfk_[39],
              _bfk_[40],
              _bfk_[41],
              _bfk_[42],
              _bfk_[43],
              _bfk_[44],
              _bfk_[45],
              _bfk_[46],
              _bfk_[47],
              _bfk_[48],
              _bfk_[49],
              _bfk_[50],
              _bfk_[51],
              _bfk_[52],
              _bfk_[53],
              _bfk_[54],
              _bfk_[55],
              _bfk_[56],
              _bfk_[57],
              _bfk_[58],
              _bfk_[59],
              _bfk_[60],
              _bfk_[61],
              _bfk_[62],
              _bfk_[63],
              _bfk_[64],
              _bfk_[65],
              _bfk_[66],
              _bfk_[67],
              _bfk_[2],
              _bfk_[3],
              _bfk_[4],
              _bfk_[5],
              _bfk_[6],
              _bfk_[7],
              _bfk_[8],
              _bfk_[9],
              _bfk_[10],
              _bfk_[11],
              _bfk_[12],
              _bfk_[13],
              _bfk_[14],
              _bfk_[15],
              _bfk_[16],
              _bfk_[17],
              _bfk_[70],
              _bfk_[72],
              _bfk_[71],
              _bfk_[74],
              _bfk_[69]]}
    function _xn_(_bfg_)
     {var _bfh_=Make_plain_using_comparator$0(_bfg_),_bfi_=_bfh_[75];
      return [0,
              _bfh_[1],
              [0,
               _bfi_[71],
               _bfi_[72],
               _bfi_[6],
               _bfi_[7],
               _bfi_[17],
               _bfi_[26],
               _bfi_[29],
               _bfi_[19],
               _bfi_[20],
               _bfi_[21],
               _bfi_[22],
               _bfi_[23],
               _bfi_[25],
               _bfi_[15],
               _bfi_[16],
               _bfi_[5],
               _bfi_[34],
               _bfi_[35],
               _bfi_[36],
               _bfi_[37],
               _bfi_[38],
               _bfi_[39],
               _bfi_[40],
               _bfi_[41],
               _bfi_[42],
               _bfi_[43],
               _bfi_[67],
               _bfi_[27],
               _bfi_[28],
               _bfi_[18],
               _bfi_[31],
               _bfi_[33],
               _bfi_[8],
               _bfi_[9],
               _bfi_[10],
               _bfi_[11],
               _bfi_[12],
               _bfi_[13],
               _bfi_[14],
               _bfi_[55],
               _bfi_[54],
               _bfi_[24],
               _bfi_[56],
               _bfi_[58],
               _bfi_[59],
               _bfi_[61],
               _bfi_[62],
               _bfi_[63],
               _bfi_[64],
               _bfi_[66],
               _bfi_[69],
               _bfi_[70],
               _bfi_[3],
               _bfi_[4],
               _bfi_[52],
               _bfi_[45],
               _bfi_[48],
               _bfi_[51],
               _bfi_[49],
               _bfi_[50],
               _bfi_[53],
               _bfi_[30],
               _bfi_[32],
               _bfi_[60],
               _bfi_[46],
               _bfi_[47],
               _bfi_[65],
               _bfi_[68],
               _bfi_[73]],
              _bfh_[70],
              _bfh_[71],
              _bfh_[20],
              _bfh_[21],
              _bfh_[22],
              _bfh_[23],
              _bfh_[24],
              _bfh_[25],
              _bfh_[26],
              _bfh_[27],
              _bfh_[28],
              _bfh_[29],
              _bfh_[30],
              _bfh_[31],
              _bfh_[32],
              _bfh_[33],
              _bfh_[34],
              _bfh_[35],
              _bfh_[36],
              _bfh_[37],
              _bfh_[38],
              _bfh_[39],
              _bfh_[40],
              _bfh_[41],
              _bfh_[42],
              _bfh_[43],
              _bfh_[44],
              _bfh_[45],
              _bfh_[46],
              _bfh_[47],
              _bfh_[48],
              _bfh_[49],
              _bfh_[50],
              _bfh_[51],
              _bfh_[52],
              _bfh_[53],
              _bfh_[54],
              _bfh_[55],
              _bfh_[56],
              _bfh_[57],
              _bfh_[58],
              _bfh_[59],
              _bfh_[60],
              _bfh_[61],
              _bfh_[62],
              _bfh_[63],
              _bfh_[64],
              _bfh_[65],
              _bfh_[66],
              _bfh_[67],
              _bfh_[68],
              _bfh_[69],
              _bfh_[4],
              _bfh_[5],
              _bfh_[6],
              _bfh_[7],
              _bfh_[8],
              _bfh_[9],
              _bfh_[10],
              _bfh_[11],
              _bfh_[12],
              _bfh_[13],
              _bfh_[14],
              _bfh_[15],
              _bfh_[16],
              _bfh_[17],
              _bfh_[18],
              _bfh_[19],
              _bfh_[72],
              _bfh_[74],
              _bfh_[73]]}
    function _xo_(Elt)
     {var
       bin_size_t=Elt[1],
       bin_write_t=Elt[2],
       bin_read_t=Elt[3],
       bin_read_t$0=Elt[4],
       bin_shape_t=Elt[5],
       bin_writer_t=Elt[6],
       bin_reader_t=Elt[7],
       bin_t=Elt[8],
       t_of_sexp=Elt[10],
       sexp_of_t=Elt[11],
       include=caml_call1(Make,[0,Elt[9],Elt[11]]),
       comparator=include[1],
       _bfd_=
        Make_binable_using_comparator$0
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]),
       _bfe_=_bfd_[74],
       _bff_=_bfd_[75];
      return [0,
              [0,
               _bff_[9],
               _bff_[10],
               _bff_[1],
               _bff_[2],
               _bff_[3],
               _bff_[4],
               _bff_[5],
               _bff_[6],
               _bff_[7],
               _bff_[8],
               _bff_[11]],
              [0,
               _bfe_[71],
               _bfe_[6],
               _bfe_[7],
               _bfe_[17],
               _bfe_[26],
               _bfe_[29],
               _bfe_[19],
               _bfe_[20],
               _bfe_[21],
               _bfe_[22],
               _bfe_[23],
               _bfe_[25],
               _bfe_[15],
               _bfe_[16],
               _bfe_[5],
               _bfe_[34],
               _bfe_[35],
               _bfe_[36],
               _bfe_[37],
               _bfe_[38],
               _bfe_[39],
               _bfe_[40],
               _bfe_[41],
               _bfe_[42],
               _bfe_[43],
               _bfe_[67],
               _bfe_[27],
               _bfe_[28],
               _bfe_[18],
               _bfe_[31],
               _bfe_[33],
               _bfe_[8],
               _bfe_[9],
               _bfe_[10],
               _bfe_[11],
               _bfe_[12],
               _bfe_[13],
               _bfe_[14],
               _bfe_[55],
               _bfe_[54],
               _bfe_[24],
               _bfe_[56],
               _bfe_[58],
               _bfe_[59],
               _bfe_[61],
               _bfe_[62],
               _bfe_[63],
               _bfe_[64],
               _bfe_[66],
               _bfe_[69],
               _bfe_[70],
               _bfe_[3],
               _bfe_[4],
               _bfe_[52],
               _bfe_[45],
               _bfe_[48],
               _bfe_[51],
               _bfe_[49],
               _bfe_[50],
               _bfe_[53],
               _bfe_[30],
               _bfe_[32],
               _bfe_[60],
               _bfe_[46],
               _bfe_[47],
               _bfe_[65],
               _bfe_[68],
               _bfe_[73],
               _bfe_[74],
               _bfe_[72]],
              _bfd_[68],
              _bfd_[18],
              _bfd_[19],
              _bfd_[20],
              _bfd_[21],
              _bfd_[22],
              _bfd_[23],
              _bfd_[24],
              _bfd_[25],
              _bfd_[26],
              _bfd_[27],
              _bfd_[28],
              _bfd_[29],
              _bfd_[30],
              _bfd_[31],
              _bfd_[32],
              _bfd_[33],
              _bfd_[34],
              _bfd_[35],
              _bfd_[36],
              _bfd_[37],
              _bfd_[38],
              _bfd_[39],
              _bfd_[40],
              _bfd_[41],
              _bfd_[42],
              _bfd_[43],
              _bfd_[44],
              _bfd_[45],
              _bfd_[46],
              _bfd_[47],
              _bfd_[48],
              _bfd_[49],
              _bfd_[50],
              _bfd_[51],
              _bfd_[52],
              _bfd_[53],
              _bfd_[54],
              _bfd_[55],
              _bfd_[56],
              _bfd_[57],
              _bfd_[58],
              _bfd_[59],
              _bfd_[60],
              _bfd_[61],
              _bfd_[62],
              _bfd_[63],
              _bfd_[64],
              _bfd_[65],
              _bfd_[66],
              _bfd_[67],
              _bfd_[2],
              _bfd_[3],
              _bfd_[4],
              _bfd_[5],
              _bfd_[6],
              _bfd_[7],
              _bfd_[8],
              _bfd_[9],
              _bfd_[10],
              _bfd_[11],
              _bfd_[12],
              _bfd_[13],
              _bfd_[14],
              _bfd_[15],
              _bfd_[16],
              _bfd_[17],
              _bfd_[70],
              _bfd_[72],
              _bfd_[71],
              _bfd_[73],
              _bfd_[69],
              _bfd_[76],
              _bfd_[77],
              _bfd_[78],
              _bfd_[79],
              _bfd_[80],
              _bfd_[81],
              _bfd_[82],
              _bfd_[83]]}
    function _xp_(Elt)
     {var
       t_of_sexp=Elt[2],
       sexp_of_t=Elt[3],
       include=caml_call1(Make,[0,Elt[1],Elt[3]]),
       comparator=include[1],
       _bfb_=Make_using_comparator$0([0,t_of_sexp,sexp_of_t,comparator]),
       _bfc_=_bfb_[75];
      return [0,
              _bfb_[73],
              [0,
               _bfc_[71],
               _bfc_[6],
               _bfc_[7],
               _bfc_[17],
               _bfc_[26],
               _bfc_[29],
               _bfc_[19],
               _bfc_[20],
               _bfc_[21],
               _bfc_[22],
               _bfc_[23],
               _bfc_[25],
               _bfc_[15],
               _bfc_[16],
               _bfc_[5],
               _bfc_[34],
               _bfc_[35],
               _bfc_[36],
               _bfc_[37],
               _bfc_[38],
               _bfc_[39],
               _bfc_[40],
               _bfc_[41],
               _bfc_[42],
               _bfc_[43],
               _bfc_[67],
               _bfc_[27],
               _bfc_[28],
               _bfc_[18],
               _bfc_[31],
               _bfc_[33],
               _bfc_[8],
               _bfc_[9],
               _bfc_[10],
               _bfc_[11],
               _bfc_[12],
               _bfc_[13],
               _bfc_[14],
               _bfc_[55],
               _bfc_[54],
               _bfc_[24],
               _bfc_[56],
               _bfc_[58],
               _bfc_[59],
               _bfc_[61],
               _bfc_[62],
               _bfc_[63],
               _bfc_[64],
               _bfc_[66],
               _bfc_[69],
               _bfc_[70],
               _bfc_[3],
               _bfc_[4],
               _bfc_[52],
               _bfc_[45],
               _bfc_[48],
               _bfc_[51],
               _bfc_[49],
               _bfc_[50],
               _bfc_[53],
               _bfc_[30],
               _bfc_[32],
               _bfc_[60],
               _bfc_[46],
               _bfc_[47],
               _bfc_[65],
               _bfc_[68],
               _bfc_[73],
               _bfc_[74],
               _bfc_[72]],
              _bfb_[68],
              _bfb_[18],
              _bfb_[19],
              _bfb_[20],
              _bfb_[21],
              _bfb_[22],
              _bfb_[23],
              _bfb_[24],
              _bfb_[25],
              _bfb_[26],
              _bfb_[27],
              _bfb_[28],
              _bfb_[29],
              _bfb_[30],
              _bfb_[31],
              _bfb_[32],
              _bfb_[33],
              _bfb_[34],
              _bfb_[35],
              _bfb_[36],
              _bfb_[37],
              _bfb_[38],
              _bfb_[39],
              _bfb_[40],
              _bfb_[41],
              _bfb_[42],
              _bfb_[43],
              _bfb_[44],
              _bfb_[45],
              _bfb_[46],
              _bfb_[47],
              _bfb_[48],
              _bfb_[49],
              _bfb_[50],
              _bfb_[51],
              _bfb_[52],
              _bfb_[53],
              _bfb_[54],
              _bfb_[55],
              _bfb_[56],
              _bfb_[57],
              _bfb_[58],
              _bfb_[59],
              _bfb_[60],
              _bfb_[61],
              _bfb_[62],
              _bfb_[63],
              _bfb_[64],
              _bfb_[65],
              _bfb_[66],
              _bfb_[67],
              _bfb_[2],
              _bfb_[3],
              _bfb_[4],
              _bfb_[5],
              _bfb_[6],
              _bfb_[7],
              _bfb_[8],
              _bfb_[9],
              _bfb_[10],
              _bfb_[11],
              _bfb_[12],
              _bfb_[13],
              _bfb_[14],
              _bfb_[15],
              _bfb_[16],
              _bfb_[17],
              _bfb_[70],
              _bfb_[72],
              _bfb_[71],
              _bfb_[74],
              _bfb_[69]]}
    var
     _xr_=
      [0,
       [0,
        t_of_sexp$24,
        sexp_of_t$31,
        length$11,
        is_empty$10,
        iter$13,
        fold$9,
        fold_result$4,
        exists$9,
        for_all$9,
        count$9,
        sum$4,
        find$9,
        find_map$4,
        to_list$4,
        to_array$4,
        invariants$6,
        mem$9,
        add$8,
        remove$8,
        union$4,
        inter$3,
        diff$3,
        symmetric_diff$6,
        compare_direct$6,
        equal$12,
        is_subset$2,
        Named$1,
        fold_until$4,
        fold_right$7,
        iter2$6,
        filter$10,
        partition_tf$8,
        elements$2,
        min_elt$8,
        min_elt_exn$6,
        max_elt$8,
        max_elt_exn$6,
        choose$3,
        choose_exn$3,
        split$6,
        group_by$2,
        find_exn$8,
        nth$6,
        remove_index$2,
        to_tree$7,
        to_sequence$7,
        binary_search$7,
        binary_search_segmented$7,
        merge_to_sequence$2,
        to_map$1,
        quickcheck_observer$4,
        quickcheck_shrinker$4,
        empty$8,
        singleton$8,
        union_list$2,
        of_list$6,
        of_array$2,
        of_sorted_array$6,
        of_sorted_array_unchecked$6,
        of_increasing_iterator_unchecked$6,
        stable_dedup_list$2,
        map$18,
        filter_map$9,
        of_tree$6,
        of_hash_set$2,
        of_hashtbl_keys$3,
        of_map_keys$1,
        quickcheck_generator$5],
       bin_shape_t$33,
       bin_size_t$35,
       bin_write_t$35,
       bin_read_t$72,
       bin_read_t$73,
       bin_writer_t$27,
       bin_reader_t$27,
       bin_t$27,
       compare$21,
       _wU_,
       sexp_of_t$30,
       length$9,
       is_empty$8,
       iter$10,
       fold$7,
       fold_result$2,
       exists$7,
       for_all$7,
       count$7,
       sum$2,
       find$7,
       find_map$2,
       to_list$2,
       to_array$2,
       invariants$4,
       mem$7,
       add$6,
       remove$6,
       union$2,
       inter$1,
       diff$1,
       symmetric_diff$4,
       compare_direct$4,
       equal$10,
       is_subset$0,
       Named$0,
       fold_until$2,
       fold_right$5,
       iter2$4,
       filter$8,
       partition_tf$6,
       elements$0,
       min_elt$6,
       min_elt_exn$4,
       max_elt$6,
       max_elt_exn$4,
       choose$1,
       choose_exn$1,
       split$4,
       group_by$0,
       find_exn$6,
       nth$4,
       remove_index$0,
       to_tree$5,
       to_sequence$5,
       binary_search$5,
       binary_search_segmented$5,
       merge_to_sequence$0,
       to_map,
       quickcheck_observer$3,
       quickcheck_shrinker$3,
       _wV_,
       _wW_,
       _wX_,
       _wY_,
       _wZ_,
       _w0_,
       _w1_,
       _w2_,
       _w3_,
       _w4_,
       _w5_,
       _w6_,
       _w7_,
       _w8_,
       _w9_,
       _w__];
    function _xq_(Elt)
     {var
       sexp_of_t=Elt[2],
       include=caml_call1(Make,Elt),
       comparator=include[1],
       _be$_=Make_plain_using_comparator$0([0,sexp_of_t,comparator]),
       _bfa_=_be$_[75];
      return [0,
              _be$_[1],
              [0,
               _bfa_[71],
               _bfa_[72],
               _bfa_[6],
               _bfa_[7],
               _bfa_[17],
               _bfa_[26],
               _bfa_[29],
               _bfa_[19],
               _bfa_[20],
               _bfa_[21],
               _bfa_[22],
               _bfa_[23],
               _bfa_[25],
               _bfa_[15],
               _bfa_[16],
               _bfa_[5],
               _bfa_[34],
               _bfa_[35],
               _bfa_[36],
               _bfa_[37],
               _bfa_[38],
               _bfa_[39],
               _bfa_[40],
               _bfa_[41],
               _bfa_[42],
               _bfa_[43],
               _bfa_[67],
               _bfa_[27],
               _bfa_[28],
               _bfa_[18],
               _bfa_[31],
               _bfa_[33],
               _bfa_[8],
               _bfa_[9],
               _bfa_[10],
               _bfa_[11],
               _bfa_[12],
               _bfa_[13],
               _bfa_[14],
               _bfa_[55],
               _bfa_[54],
               _bfa_[24],
               _bfa_[56],
               _bfa_[58],
               _bfa_[59],
               _bfa_[61],
               _bfa_[62],
               _bfa_[63],
               _bfa_[64],
               _bfa_[66],
               _bfa_[69],
               _bfa_[70],
               _bfa_[3],
               _bfa_[4],
               _bfa_[52],
               _bfa_[45],
               _bfa_[48],
               _bfa_[51],
               _bfa_[49],
               _bfa_[50],
               _bfa_[53],
               _bfa_[30],
               _bfa_[32],
               _bfa_[60],
               _bfa_[46],
               _bfa_[47],
               _bfa_[65],
               _bfa_[68],
               _bfa_[73]],
              _be$_[70],
              _be$_[71],
              _be$_[20],
              _be$_[21],
              _be$_[22],
              _be$_[23],
              _be$_[24],
              _be$_[25],
              _be$_[26],
              _be$_[27],
              _be$_[28],
              _be$_[29],
              _be$_[30],
              _be$_[31],
              _be$_[32],
              _be$_[33],
              _be$_[34],
              _be$_[35],
              _be$_[36],
              _be$_[37],
              _be$_[38],
              _be$_[39],
              _be$_[40],
              _be$_[41],
              _be$_[42],
              _be$_[43],
              _be$_[44],
              _be$_[45],
              _be$_[46],
              _be$_[47],
              _be$_[48],
              _be$_[49],
              _be$_[50],
              _be$_[51],
              _be$_[52],
              _be$_[53],
              _be$_[54],
              _be$_[55],
              _be$_[56],
              _be$_[57],
              _be$_[58],
              _be$_[59],
              _be$_[60],
              _be$_[61],
              _be$_[62],
              _be$_[63],
              _be$_[64],
              _be$_[65],
              _be$_[66],
              _be$_[67],
              _be$_[68],
              _be$_[69],
              _be$_[4],
              _be$_[5],
              _be$_[6],
              _be$_[7],
              _be$_[8],
              _be$_[9],
              _be$_[10],
              _be$_[11],
              _be$_[12],
              _be$_[13],
              _be$_[14],
              _be$_[15],
              _be$_[16],
              _be$_[17],
              _be$_[18],
              _be$_[19],
              _be$_[72],
              _be$_[74],
              _be$_[73]]}
    var
     _xs_=
      [0,
       empty$7,
       singleton$7,
       union_list$1,
       of_list$5,
       of_array$1,
       of_sorted_array$5,
       of_sorted_array_unchecked$5,
       of_increasing_iterator_unchecked$5,
       stable_dedup_list$1,
       map$17,
       filter_map$8,
       of_tree$5,
       of_hash_set$0,
       of_hashtbl_keys$1,
       of_map_keys,
       quickcheck_generator$3],
     Core_kernel_Set=
      [0,
       compare$20,
       [0,
        sexp_of_t$28,
        length$8,
        is_empty$7,
        iter$9,
        fold$6,
        fold_result$1,
        exists$6,
        for_all$6,
        count$6,
        sum$1,
        find$6,
        find_map$1,
        to_list$1,
        to_array$1,
        invariants$3,
        mem$6,
        add$5,
        remove$5,
        union$1,
        inter$0,
        diff$0,
        symmetric_diff$3,
        compare_direct$3,
        equal$9,
        is_subset,
        fold_until$1,
        fold_right$4,
        iter2$3,
        filter$7,
        partition_tf$5,
        elements,
        min_elt$5,
        min_elt_exn$3,
        max_elt$5,
        max_elt_exn$3,
        choose$0,
        choose_exn$0,
        split$3,
        group_by,
        find_exn$5,
        nth$3,
        remove_index,
        to_tree$4,
        to_sequence$4,
        binary_search$4,
        binary_search_segmented$4,
        merge_to_sequence,
        to_map$0,
        obs_tree$0,
        shr_tree$0,
        empty$4,
        singleton$5,
        union_list,
        of_list$3,
        of_array,
        of_sorted_array$3,
        of_sorted_array_unchecked$3,
        of_increasing_iterator_unchecked$3,
        stable_dedup_list,
        map$15,
        filter_map$6,
        of_tree$3,
        of_hash_set,
        of_hashtbl_keys$0,
        of_map_keys$0,
        gen_tree$0],
       _xs_,
       invariants$5,
       comparator$0,
       empty$6,
       singleton$6,
       length$10,
       is_empty$9,
       mem$8,
       add$7,
       remove$7,
       union$3,
       union_list$0,
       inter$2,
       diff$2,
       symmetric_diff$5,
       compare_direct$5,
       hash_fold_direct$0,
       equal$11,
       exists$8,
       for_all$8,
       count$8,
       sum$3,
       find$8,
       find_map$3,
       find_exn$7,
       nth$5,
       remove_index$1,
       is_subset$1,
       Base_Set[30],
       of_list$4,
       of_array$0,
       of_hash_set$1,
       of_hashtbl_keys$2,
       to_list$3,
       to_array$3,
       to_tree$6,
       of_tree$4,
       of_sorted_array$4,
       of_sorted_array_unchecked$4,
       of_increasing_iterator_unchecked$4,
       stable_dedup_list$0,
       map$16,
       filter_map$7,
       filter$9,
       fold$8,
       fold_result$3,
       fold_until$3,
       fold_right$6,
       iter$11,
       iter2$5,
       partition_tf$7,
       elements$1,
       min_elt$7,
       min_elt_exn$5,
       max_elt$7,
       max_elt_exn$5,
       choose$2,
       choose_exn$2,
       split$5,
       group_by$1,
       to_sequence$6,
       binary_search$6,
       binary_search_segmented$6,
       [0,
        _le_[1],
        _le_[2],
        _le_[3],
        _le_[4],
        _le_[5],
        _le_[6],
        _le_[7],
        _le_[8],
        _le_[9],
        _le_[11],
        _le_[12]],
       merge_to_sequence$1,
       to_map,
       of_map_keys,
       quickcheck_generator$4,
       quickcheck_observer$3,
       quickcheck_shrinker$3,
       _xr_,
       _xq_,
       _xp_,
       _xo_,
       _xn_,
       _xm_,
       _xl_,
       _xk_,
       sexp_of_m_t$1,
       m_t_of_sexp$1,
       compare_m_t$0,
       equal_m_t$0,
       hash_fold_m_t$0,
       hash_m_t,
       bin_shape_m_t$0,
       bin_size_m_t$0,
       bin_write_m_t$0,
       bin_read_m_t$1,
       bin_read_m_t$2,
       _xj_];
    caml_register_global(4343,Core_kernel_Set,"Core_kernel__Set");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$119);
    caml_call1(Expect_test_collector[4][1],cst_src_comparable_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$120,cst$39);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$121);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Comparable_intf=[0];
    caml_register_global
     (4344,Core_kernel_Comparable_intf,"Core_kernel__Comparable_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$122);
    caml_call1(Expect_test_collector[4][1],cst_src_comparable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$123,cst$40);
    function With_zero(_be__)
     {return caml_call1
              (Base_Comparable[12],
               [0,_be__[1],_be__[3],_be__[4],_be__[5],_be__[6],_be__[7]])}
    function Validate_with_zero(_be9_)
     {return caml_call1(Base_Comparable[13],[0,_be9_[1],_be9_[3],_be9_[4]])}
    function Map_and_set_binable_using_comparator(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       comparator=T[12],
       Map=_wv_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[10],T[11],T[12]]),
       Set=_xl_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[10],T[11],T[12]]);
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              comparator,
              Map,
              Set]}
    function Make_plain_using_comparator$1(T)
     {var
       M=caml_call1(Base_Comparable[9],T),
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=_wz_(T),
       Set=_xn_(T);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function Make_plain$1(T)
     {var sexp_of_t=T[2],include=caml_call1(Make,T),comparator=include[1];
      return Make_plain_using_comparator$1([0,sexp_of_t,comparator])}
    function Make_using_comparator$1(T)
     {var
       M=caml_call1(Base_Comparable[9],[0,T[2],T[3]]),
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=_wx_(T),
       Set=_xm_(T);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function Make$2(T)
     {var
       t_of_sexp=T[2],
       sexp_of_t=T[3],
       include=caml_call1(Make,[0,T[1],T[3]]),
       comparator=include[1];
      return Make_using_comparator$1([0,t_of_sexp,sexp_of_t,comparator])}
    function Make_binable_using_comparator$1(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[9],
       sexp_of_t=T[10],
       M=caml_call1(Base_Comparable[9],[0,T[10],T[11]]),
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=_wv_(T),
       Set=_xl_(T);
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              M,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function Inherit(C,T)
     {var t_of_sexp=T[1],sexp_of_t=T[2];
      function compare(t$0,t)
       {var _be7_=caml_call1(T[3],t),_be8_=caml_call1(T[3],t$0);
        return caml_call2(C[1],_be8_,_be7_)}
      return Make$2([0,compare,t_of_sexp,sexp_of_t])}
    var
     lexicographic=Base_Comparable[1],
     lift=Base_Comparable[2],
     reverse=Base_Comparable[3];
    function Make$3(X)
     {var Map=caml_call1(_wt_[1][1],X),Set=caml_call1(_xj_[1][1],X);
      return [0,Map,Set]}
    var V1$12=[0,Make$3],Stable$2=[0,V1$12];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$124);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var _xt_=Base_Comparable[11];
    function _xu_(_be6_){return caml_call1(_xt_,[0,_be6_[1],_be6_[3]])}
    function _xv_(T)
     {var
       t_of_sexp=T[1],
       sexp_of_t=T[2],
       include=caml_call1(Base_Comparable[10],[0,T[2]]),
       symbol=include[1],
       symbol$0=include[2],
       symbol$1=include[3],
       symbol$2=include[4],
       symbol$3=include[5],
       symbol$4=include[6],
       equal=include[7],
       compare=include[8],
       min=include[9],
       max=include[10],
       ascending=include[11],
       descending=include[12],
       between=include[13],
       clamp_exn=include[14],
       clamp=include[15],
       comparator=include[16],
       validate_lbound=include[17],
       validate_ubound=include[18],
       validate_bound=include[19],
       Replace_polymorphic_compare=
        [0,
         symbol,
         symbol$0,
         symbol$1,
         symbol$2,
         symbol$3,
         symbol$4,
         equal,
         compare,
         min,
         max],
       Map=_wx_([0,t_of_sexp,sexp_of_t,comparator]),
       Set=_xm_([0,t_of_sexp,sexp_of_t,comparator]);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function _xw_(_be4_)
     {var _be5_=Map_and_set_binable_using_comparator(_be4_);
      return [0,_be5_[12],_be5_[13],_be5_[14]]}
    function _xx_(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       include=caml_call1(Make,[0,T[9],T[11]]),
       comparator=include[1],
       _be3_=
        Map_and_set_binable_using_comparator
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           compare,
           t_of_sexp,
           sexp_of_t,
           comparator]);
      return [0,_be3_[12],_be3_[13],_be3_[14]]}
    function _xy_(M,X)
     {var
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       bin_size_t=X[1],
       bin_write_t=X[2],
       bin_read_t=X[3],
       bin_read_t$0=X[4],
       bin_shape_t=X[5],
       bin_writer_t=X[6],
       bin_reader_t=X[7],
       bin_t=X[8],
       t_of_sexp=X[9],
       sexp_of_t=X[10],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=
        _wv_
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]),
       Set=
        _xl_
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set]}
    function _xz_(M,X)
     {var
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       t_of_sexp=X[1],
       sexp_of_t=X[2],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=_wx_([0,t_of_sexp,sexp_of_t,comparator]),
       Set=_xm_([0,t_of_sexp,sexp_of_t,comparator]);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function _xA_(_be1_)
     {var _be2_=Make_binable_using_comparator$1(_be1_);
      return [0,
              _be2_[12],
              _be2_[13],
              _be2_[14],
              _be2_[15],
              _be2_[16],
              _be2_[17],
              _be2_[18],
              _be2_[19],
              _be2_[20],
              _be2_[21],
              _be2_[22],
              _be2_[23],
              _be2_[24],
              _be2_[25],
              _be2_[26],
              _be2_[28],
              _be2_[29],
              _be2_[30],
              _be2_[31],
              _be2_[27],
              _be2_[32],
              _be2_[33]]}
    function _xB_(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       include=caml_call1(Make,[0,T[9],T[11]]),
       comparator=include[1],
       _be0_=
        Make_binable_using_comparator$1
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]);
      return [0,
              _be0_[12],
              _be0_[13],
              _be0_[14],
              _be0_[15],
              _be0_[16],
              _be0_[17],
              _be0_[18],
              _be0_[19],
              _be0_[20],
              _be0_[21],
              _be0_[22],
              _be0_[23],
              _be0_[24],
              _be0_[25],
              _be0_[26],
              _be0_[28],
              _be0_[29],
              _be0_[30],
              _be0_[31],
              _be0_[27],
              _be0_[32],
              _be0_[33]]}
    var
     Core_kernel_Comparable=
      [0,
       lexicographic,
       lift,
       reverse,
       Inherit,
       Make_plain$1,
       Make$2,
       Make_plain_using_comparator$1,
       Make_using_comparator$1,
       _xB_,
       _xA_,
       _xz_,
       _xy_,
       _xx_,
       _xw_,
       _xv_,
       _xu_,
       With_zero,
       Validate_with_zero,
       Stable$2];
    caml_register_global
     (4345,Core_kernel_Comparable,"Core_kernel__Comparable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$125);
    caml_call1(Expect_test_collector[4][1],cst_src_doubly_linked_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$126,cst$41);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$127);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Doubly_linked_intf=[0];
    caml_register_global
     (4346,Core_kernel_Doubly_linked_intf,"Core_kernel__Doubly_linked_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$128);
    caml_call1(Expect_test_collector[4][1],cst_src_list_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$129,cst$42);
    var stable_dedup=_xr_[71];
    function stable_dedup_staged(compare)
     {function t_of_sexp(param){throw [0,Assert_failure,_xC_]}
      function sexp_of_t(param){throw [0,Assert_failure,_xD_]}
      var _beZ_=_xp_([0,compare,t_of_sexp,sexp_of_t])[62];
      return caml_call1(Base_Staged[1],_beZ_)}
    function zip_with_remainder(xs$1,ys$1)
     {var acc=0,xs=xs$1,ys=ys$1;
      for(;;)
       {if(xs)
         {if(ys)
           {var
             ys$0=ys[2],
             y=ys[1],
             xs$0=xs[2],
             x=xs[1],
             acc$0=[0,[0,x,y],acc],
             acc=acc$0,
             xs=xs$0,
             ys=ys$0;
            continue}
          return [0,caml_call1(parts,acc),[0,[0,xs]]]}
        return ys
                ?[0,caml_call1(parts,acc),[0,[1,ys]]]
                :[0,caml_call1(parts,acc),0]}}
    var
     Duplicate_found=
      [248,cst_Core_kernel_List_Duplicate_found,caml_fresh_oo_id(0)];
    function _xE_(param)
     {if(param[1] === Duplicate_found)
       {var
         v1=param[3],
         v0$0=param[2],
         v0=caml_call1(v0$0,0),
         v1$0=caml_call1(include$39[21],v1);
        return [1,[0,_xF_,[0,v0,[0,v1$0,0]]]]}
      throw [0,Assert_failure,_xG_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Duplicate_found,_xE_);
    function exn_if_dup(compare,opt,t,to_sexp)
     {if(opt)var sth=opt[1],context=sth;else var context=cst_exn_if_dup;
      var match=caml_call2(_qR_,compare,t);
      if(match)
       {var dup=match[1];
        throw [0,
               Duplicate_found,
               function(param){return caml_call1(to_sexp,dup)},
               context]}
      return 0}
    function slice$1(a,start,stop){return slice(length$1,_q5_,a,start,stop)}
    var
     _xH_=caml_call1(Bin_prot_Shape[3][1],cst_a$43),
     _xI_=caml_call1(Bin_prot_Shape[4][1],cst_src_list_ml_56_23),
     _xJ_=bin_shape_t$24(caml_call2(Bin_prot_Shape[15],_xI_,_xH_)),
     _xK_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$44),0],
     _xL_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$85),_xK_,_xJ_],0],
     _xM_=caml_call1(Bin_prot_Shape[4][1],cst_src_list_ml_56_4),
     group$41=caml_call2(Bin_prot_Shape[6],_xM_,_xL_);
    function bin_shape_t$34(a)
     {var _beY_=caml_call1(Bin_prot_Shape[2][1],cst_t$86);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$41,_beY_),[0,a,0])}
    function bin_size_t$36(size_of_a,v){return bin_size_t$26(size_of_a,v)}
    function bin_write_t$36(write_a,buf,pos,v)
     {return bin_write_t$26(write_a,buf,pos,v)}
    function bin_writer_t$28(bin_writer_a)
     {function _beU_(v)
       {var _beV_=bin_writer_a[2];
        return function(_beW_,_beX_)
         {return bin_write_t$36(_beV_,v,_beW_,_beX_)}}
      return [0,function(v){return bin_size_t$36(bin_writer_a[1],v)},_beU_]}
    function bin_read_t$74(of_a,buf,pos_ref,vint)
     {return bin_read_t$54(of_a,buf,pos_ref,vint)}
    function bin_read_t$75(of_a,buf,pos_ref)
     {return bin_read_t$55(of_a,buf,pos_ref)}
    function bin_reader_t$28(bin_reader_a)
     {function _beT_(buf,pos_ref,vtag)
       {return bin_read_t$74(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$75(bin_reader_a[1],buf,pos_ref)},
              _beT_]}
    function bin_t$28(bin_a)
     {var _beR_=bin_reader_t$28(bin_a[3]),_beS_=bin_writer_t$28(bin_a[2]);
      return [0,bin_shape_t$34(bin_a[1]),_beS_,_beR_]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$130);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _xN_=
      [0,
       Assoc[10],
       Assoc[11],
       Assoc[12],
       Assoc[15],
       Assoc[14],
       Assoc[13],
       Assoc[16],
       Assoc[17],
       Assoc[18],
       Assoc[1],
       Assoc[2],
       Assoc[3],
       Assoc[4],
       Assoc[5],
       Assoc[6],
       Assoc[7],
       Assoc[8],
       Assoc[9]],
     Core_kernel_List=
      [0,
       compare_sexp_list,
       hash_fold_sexp_list,
       _pe_,
       _pf_,
       _pg_,
       length$1,
       is_empty$0,
       _ph_,
       _pi_,
       _pj_,
       _pk_,
       _pl_,
       _pm_,
       _pn_,
       _po_,
       _pp_,
       _pq_,
       _pr_,
       _ps_,
       _pt_,
       _pu_,
       _pv_,
       _px_,
       _py_,
       _pz_,
       _pA_,
       _pB_,
       _pC_,
       _pF_,
       _pG_,
       _pH_,
       parts,
       _pI_,
       _pJ_,
       _pK_,
       _pL_,
       _pM_,
       _pN_,
       _pO_,
       _pP_,
       _pQ_,
       _pR_,
       _pS_,
       _pT_,
       _pU_,
       _pV_,
       _pW_,
       _pX_,
       _pY_,
       _pZ_,
       _p0_,
       _p1_,
       _p2_,
       _p3_,
       _p4_,
       _p5_,
       _p6_,
       _p7_,
       _p8_,
       _p9_,
       _p__,
       _p$_,
       _qa_,
       _qb_,
       _qc_,
       _qd_,
       _qe_,
       _qf_,
       _qg_,
       _qh_,
       _qi_,
       _qj_,
       _qk_,
       _ql_,
       _qm_,
       _qn_,
       _qo_,
       _qp_,
       _qq_,
       _qr_,
       _qs_,
       _qt_,
       _qu_,
       _qv_,
       _qw_,
       _qx_,
       _qy_,
       _qz_,
       _qA_,
       _qB_,
       _qC_,
       _qD_,
       _qE_,
       _qF_,
       _qG_,
       _qH_,
       _qI_,
       _qJ_,
       _qK_,
       _qL_,
       _qM_,
       _qN_,
       _qO_,
       _qP_,
       _qQ_,
       _qR_,
       _qS_,
       _qT_,
       _qU_,
       _qV_,
       _qW_,
       _qX_,
       _qY_,
       _qZ_,
       _q0_,
       _q1_,
       _q2_,
       _q3_,
       _q5_,
       _q6_,
       _q7_,
       _q8_,
       _q9_,
       _q__,
       _q$_,
       _ra_,
       _rb_,
       _rc_,
       _rd_,
       _re_,
       _rf_,
       _rg_,
       _rh_,
       _ri_,
       _rj_,
       _rk_,
       _rm_,
       _rn_,
       _ro_,
       bin_shape_t$24,
       bin_size_t$26,
       bin_write_t$26,
       bin_read_t$55,
       bin_read_t$54,
       bin_writer_t$18,
       bin_reader_t$18,
       bin_t$18,
       typerep_of_t$1,
       _rv_,
       _xN_,
       stable_dedup,
       stable_dedup_staged,
       Duplicate_found,
       exn_if_dup,
       slice$1,
       _rQ_,
       _rR_,
       _rV_,
       _rW_,
       to_string,
       _rS_,
       gen_with_length,
       _rT_,
       _rU_,
       zip_with_remainder,
       [0,
        [0,
         _pe_,
         _pf_,
         bin_shape_t$34,
         bin_size_t$36,
         bin_write_t$36,
         bin_read_t$75,
         bin_read_t$74,
         bin_writer_t$28,
         bin_reader_t$28,
         bin_t$28,
         compare_sexp_list]]];
    caml_register_global(4349,Core_kernel_List,"Core_kernel__List");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$131);
    caml_call1(Expect_test_collector[4][1],cst_src_option_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$132,cst$43);
    var
     _xO_=include$30[1],
     _xP_=include$30[2],
     _xQ_=include$30[3],
     _xR_=include$30[4],
     _xV_=include$30[8],
     _xW_=include$30[9],
     _x9_=include$30[22],
     _yd_=include$30[29],
     _yi_=include$30[35],
     _yj_=include$30[36],
     _yk_=include$30[37],
     _yn_=include$30[40],
     _yo_=include$30[41],
     _yv_=include$30[48],
     _xS_=include$30[5],
     _xT_=include$30[6],
     _xU_=include$30[7],
     _xX_=include$30[10],
     _xY_=include$30[11],
     _xZ_=include$30[12],
     _x0_=include$30[13],
     _x1_=include$30[14],
     _x2_=include$30[15],
     _x3_=include$30[16],
     _x4_=include$30[17],
     _x5_=include$30[18],
     _x6_=include$30[19],
     _x7_=include$30[20],
     _x8_=include$30[21],
     _x__=include$30[23],
     _x$_=include$30[24],
     _ya_=include$30[25],
     _yb_=include$30[27],
     _yc_=include$30[28],
     _ye_=include$30[30],
     _yf_=include$30[31],
     _yg_=include$30[32],
     _yh_=include$30[33],
     _yl_=include$30[38],
     _ym_=include$30[39],
     _yp_=include$30[42],
     _yq_=include$30[43],
     _yr_=include$30[44],
     _ys_=include$30[45],
     _yt_=include$30[46],
     _yu_=include$30[47],
     _yw_=include$30[49],
     _yx_=caml_call1(Bin_prot_Shape[3][1],cst_a$45),
     _yy_=caml_call1(Bin_prot_Shape[4][1],cst_src_option_ml_4_12),
     _yz_=caml_call1(_dj_,caml_call2(Bin_prot_Shape[15],_yy_,_yx_)),
     _yA_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$46),0],
     _yB_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$87),_yA_,_yz_],0],
     _yC_=caml_call1(Bin_prot_Shape[4][1],cst_src_option_ml_4_0),
     group$42=caml_call2(Bin_prot_Shape[6],_yC_,_yB_);
    function bin_shape_t$35(a)
     {var _beQ_=caml_call1(Bin_prot_Shape[2][1],cst_t$88);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$42,_beQ_),[0,a,0])}
    function bin_size_t$37(size_of_a,v){return caml_call2(_bw_,size_of_a,v)}
    function bin_write_t$37(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_dl_,write_a),buf,pos,v)}
    function bin_writer_t$29(bin_writer_a)
     {function _beM_(v)
       {var _beN_=bin_writer_a[2];
        return function(_beO_,_beP_)
         {return bin_write_t$37(_beN_,v,_beO_,_beP_)}}
      return [0,function(v){return bin_size_t$37(bin_writer_a[1],v)},_beM_]}
    function bin_read_t$76(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_do_,of_a),buf,pos_ref,vint)}
    function bin_read_t$77(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_dn_,of_a),buf,pos_ref)}
    function bin_reader_t$29(bin_reader_a)
     {function _beL_(buf,pos_ref,vtag)
       {return bin_read_t$76(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$77(bin_reader_a[1],buf,pos_ref)},
              _beL_]}
    function bin_t$29(bin_a)
     {var _beJ_=bin_reader_t$29(bin_a[3]),_beK_=bin_writer_t$29(bin_a[2]);
      return [0,bin_shape_t$35(bin_a[1]),_beK_,_beJ_]}
    var
     Typename_of_t$2=caml_call1(Typerep_lib_Make_typename[2],[0,name$11]),
     typename_of_t$1=Typename_of_t$2[2];
    function typerep_of_t$2(of_a)
     {var name_of_t=caml_call1(Typename_of_t$2[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_beI_){return caml_call1(_fg_,of_a)}]]]]}
    var
     include$40=caml_call1(Derived,[0,_xO_,_xR_]),
     _yD_=include$40[1],
     _yE_=Base_quickcheck_Generator[12],
     _yF_=Base_quickcheck_Observer[13],
     _yG_=Base_quickcheck_Shrinker[13],
     _yH_=caml_call1(Bin_prot_Shape[3][1],cst_a$47),
     _yI_=caml_call1(Bin_prot_Shape[4][1],cst_src_option_ml_16_23),
     _yJ_=bin_shape_t$35(caml_call2(Bin_prot_Shape[15],_yI_,_yH_)),
     _yK_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$48),0],
     _yL_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$89),_yK_,_yJ_],0],
     _yM_=caml_call1(Bin_prot_Shape[4][1],cst_src_option_ml_16_4),
     group$43=caml_call2(Bin_prot_Shape[6],_yM_,_yL_);
    function bin_shape_t$36(a)
     {var _beH_=caml_call1(Bin_prot_Shape[2][1],cst_t$90);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$43,_beH_),[0,a,0])}
    function bin_size_t$38(size_of_a,v){return bin_size_t$37(size_of_a,v)}
    function bin_write_t$38(write_a,buf,pos,v)
     {return bin_write_t$37(write_a,buf,pos,v)}
    function bin_writer_t$30(bin_writer_a)
     {function _beD_(v)
       {var _beE_=bin_writer_a[2];
        return function(_beF_,_beG_)
         {return bin_write_t$38(_beE_,v,_beF_,_beG_)}}
      return [0,function(v){return bin_size_t$38(bin_writer_a[1],v)},_beD_]}
    function bin_read_t$78(of_a,buf,pos_ref,vint)
     {return bin_read_t$76(of_a,buf,pos_ref,vint)}
    function bin_read_t$79(of_a,buf,pos_ref)
     {return bin_read_t$77(of_a,buf,pos_ref)}
    function bin_reader_t$30(bin_reader_a)
     {function _beC_(buf,pos_ref,vtag)
       {return bin_read_t$78(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$79(bin_reader_a[1],buf,pos_ref)},
              _beC_]}
    function bin_t$30(bin_a)
     {var _beA_=bin_reader_t$30(bin_a[3]),_beB_=bin_writer_t$30(bin_a[2]);
      return [0,bin_shape_t$36(bin_a[1]),_beB_,_beA_]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$133);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Option=
      [0,
       bin_shape_t$35,
       bin_size_t$37,
       bin_write_t$37,
       bin_read_t$77,
       bin_read_t$76,
       bin_writer_t$29,
       bin_reader_t$29,
       bin_t$29,
       typerep_of_t$2,
       typename_of_t$1,
       _xO_,
       _xP_,
       _xQ_,
       _xR_,
       _xS_,
       _xT_,
       _xU_,
       _xV_,
       _xW_,
       _xX_,
       _xY_,
       _xZ_,
       _x0_,
       _x1_,
       _x2_,
       _x3_,
       _x4_,
       _x5_,
       _x6_,
       _x7_,
       _x8_,
       _x9_,
       _x__,
       _x$_,
       _ya_,
       _yb_,
       _yc_,
       _yd_,
       _ye_,
       _yf_,
       _yg_,
       _yh_,
       _yi_,
       _yj_,
       _yk_,
       _yl_,
       _ym_,
       _yn_,
       _yo_,
       _yp_,
       _yq_,
       _yr_,
       _ys_,
       _yt_,
       _yu_,
       _yv_,
       _yw_,
       _yD_,
       _yE_,
       _yF_,
       _yG_,
       [0,
        [0,
         bin_shape_t$36,
         bin_size_t$38,
         bin_write_t$38,
         bin_read_t$79,
         bin_read_t$78,
         bin_writer_t$30,
         bin_reader_t$30,
         bin_t$30,
         _xO_,
         _xQ_,
         _xR_]]];
    caml_register_global(4350,Core_kernel_Option,"Core_kernel__Option");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$134);
    caml_call1(Expect_test_collector[4][1],cst_src_union_find_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$135,cst$44);
    function invariant$2(param,t)
     {var t$0=t,depth=0;
      for(;;)
       {var _bez_=t$0[1];
        if(0 === _bez_[0])
         {var
           t$1=_bez_[1],
           depth$0=caml_call2(_aw_,depth,1),
           t$0=t$1,
           depth=depth$0;
          continue}
        var r=_bez_[1];
        if(caml_call2(_aQ_,depth,r[2]))return 0;
        throw [0,Assert_failure,_yN_]}}
    function create$8(v){return [0,[1,[0,v,0]]]}
    function representative(t$1)
     {var _bey_=t$1[1];
      if(0 === _bey_[0])
       {var t$2=_bey_[1],t=t$2,inner_node=_bey_,inner=t$1,descendants=0;
        for(;;)
         {var _bex_=t[1];
          if(0 === _bex_[0])
           {var
             t$0=_bex_[1],
             descendants$0=[0,inner,descendants],
             inner_node=_bex_,
             inner=t,
             t=t$0,
             descendants=descendants$0;
            continue}
          var r=_bex_[1];
          caml_call2(_ph_,descendants,function(t){t[1] = inner_node;return 0});
          return [0,t,r]}}
      var r$0=_bey_[1];
      return [0,t$1,r$0]}
    function root(t)
     {var _bew_=t[1];
      if(0 === _bew_[0])return caml_call1(_a9_,representative(t));
      var r=_bew_[1];
      return r}
    function rank$3(t){return root(t)[2]}
    function get$0(t){return root(t)[1]}
    function set$5(t,v){root(t)[1] = v;return 0}
    function same_class(t1,t2)
     {var _bev_=root(t2);return caml_call2(_bb_,root(t1),_bev_)}
    function union$5(t1,t2)
     {var
       match=representative(t1),
       r1=match[2],
       t1$0=match[1],
       match$0=representative(t2),
       r2=match$0[2],
       t2$0=match$0[1];
      if(caml_call2(_bb_,r1,r2))return 0;
      var n1=r1[2],n2=r2[2];
      if(caml_call2(_aP_,n1,n2)){t1$0[1] = [0,t2$0];return 0}
      t2$0[1] = [0,t1$0];
      var
       _bet_=caml_call2(_aS_,n1,n2),
       _beu_=_bet_?(r1[2] = caml_call2(_aw_,r1[2],1),0):_bet_;
      return _beu_}
    function is_compressed(t)
     {invariant$2(function(_bes_){return 0},t);
      var _ber_=t[1];
      if(0 === _ber_[0]){var t$0=_ber_[1];return 0 === t$0[1][0]?0:1}
      return 1}
    var Private$0=[0,is_compressed,rank$3];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$136);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Union_find=
      [0,invariant$2,create$8,get$0,set$5,same_class,union$5,Private$0];
    caml_register_global
     (4351,Core_kernel_Union_find,"Core_kernel__Union_find");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$137);
    caml_call1(Expect_test_collector[4][1],cst_src_doubly_linked_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$138,cst$45);
    var
     Attempt_to_mutate_list_during_iteration=
      [248,
       cst_Core_kernel_Doubly_linked_Attempt_to_mutate_list_during_iteration,
       caml_fresh_oo_id(0)];
    function phys_equal(_beq_,_bep_){return _beq_ === _bep_?1:0}
    function create$9(param){return create$8([0,1,0])}
    function equal$13(t1,t2){return same_class(t1,t2)}
    function length$12(t){return get$0(t)[1]}
    function union_find_get_check_no_pending_iterations(t)
     {var s=get$0(t);
      if(caml_call2(_aT_,s[2],0))
       throw Attempt_to_mutate_list_during_iteration;
      return s}
    function check_no_pending_iterations(t)
     {union_find_get_check_no_pending_iterations(t);return 0}
    function incr_length(n,t)
     {var s=union_find_get_check_no_pending_iterations(t);
      s[1] = caml_call2(_aw_,s[1],n);
      return 0}
    function incr_pending_iters(s){s[2] = caml_call2(_aw_,s[2],1);return 0}
    function decr_pending_iters(s){s[2] = caml_call2(_ax_,s[2],1);return 0}
    function with_iteration_2(t,a,b,f)
     {var s=get$0(t);
      incr_pending_iters(s);
      try
       {var r=caml_call2(f,a,b)}
      catch(exn)
       {exn = caml_wrap_exception(exn);decr_pending_iters(s);throw exn}
      decr_pending_iters(s);
      return r}
    function with_iteration_3(t,a,b,c,f)
     {var s=get$0(t);
      incr_pending_iters(s);
      try
       {var r=caml_call3(f,a,b,c)}
      catch(exn)
       {exn = caml_wrap_exception(exn);decr_pending_iters(s);throw exn}
      decr_pending_iters(s);
      return r}
    function with_iteration_4(t,a,b,c,d,f)
     {var s=get$0(t);
      incr_pending_iters(s);
      try
       {var r=caml_call4(f,a,b,c,d)}
      catch(exn)
       {exn = caml_wrap_exception(exn);decr_pending_iters(s);throw exn}
      decr_pending_iters(s);
      return r}
    function prev(t){return t[2]}
    function create_aux(v,header)
     {var t=[];caml_update_dummy(t,[0,v,t,t,header]);return t}
    function is_singleton(t){return t === t[2]?1:0}
    function sexp_of_t$32(sexp_of_a,t){return caml_call1(sexp_of_a,t[1])}
    function create$10(v){return create_aux(v,create$9(0))}
    function value$0(t){return t[1]}
    function set$6(t,v){t[1] = v;return 0}
    function unsafe_split_or_splice(a,b,c,d)
     {a[3] = d;d[2] = a;c[3] = b;b[2] = c;return 0}
    function unsafe_split_or_splice_after(t1,t2)
     {return unsafe_split_or_splice(t1[3][2],t1[3],t2[3][2],t2[3])}
    function unsafe_split_or_splice_before(t1,t2)
     {return unsafe_split_or_splice(t1[2],t1[2][3],t2[2],t2[2][3])}
    function check_two_nodes_no_pending_iterations(t1,t2)
     {check_no_pending_iterations(t1[4]);
      var _beo_=1 - equal$13(t1[4],t2[4]);
      return _beo_?check_no_pending_iterations(t2[4]):_beo_}
    function split_or_splice_before(t1,t2)
     {check_two_nodes_no_pending_iterations(t1,t2);
      return unsafe_split_or_splice_before(t1,t2)}
    function insert_before(t,v)
     {incr_length(1,t[4]);
      var node=create_aux(v,t[4]);
      unsafe_split_or_splice_before(t,node);
      return node}
    function insert_after(t,v)
     {incr_length(1,t[4]);
      var node=create_aux(v,t[4]);
      unsafe_split_or_splice_after(t,node);
      return node}
    var dummy_header=create$9(0);
    function unlink(t)
     {var _ben_=t[2],node=_ben_[3];
      if(! is_singleton(node))
       {incr_length(-1,_ben_[4]);
        unsafe_split_or_splice_after(_ben_,node);
        node[4] = dummy_header}
      return 0}
    function invariant$3(invariant_a,t)
     {var _bem_=t[1];
      if(_bem_)
       {var head=_bem_[1],header=head[4],n=1,elt=head;
        for(;;)
         {var next_elt=elt[3],prev_elt=elt[2];
          if(elt === next_elt[2])
           {if(elt === prev_elt[3])
             {if(equal$13(elt[4],header))
               {caml_call1(invariant_a,elt[1]);
                if(next_elt === head)
                 {if(caml_call2(_aS_,n,length$12(header)))return 0;
                  throw [0,Assert_failure,_yR_]}
                var n$0=caml_call2(_aw_,n,1),n=n$0,elt=next_elt;
                continue}
              throw [0,Assert_failure,_yO_]}
            throw [0,Assert_failure,_yP_]}
          throw [0,Assert_failure,_yQ_]}}
      return 0}
    function create$11(param){return [0,0]}
    function equal$14(t$0,t){return t$0 === t?1:0}
    function of_list$7(param)
     {if(param)
       {var xs=param[2],x=param[1],first=create$10(x);
        caml_call3(_pi_,xs,first,insert_after);
        return [0,[0,first]]}
      return create$11(0)}
    function of_array$3(arr)
     {var len=arr.length - 1;
      if(0 === len)return create$11(0);
      var elt=create$10(caml_check_bound(arr,0)[1]),elt$0=elt,i=1;
      for(;;)
       {if(caml_call2(_aP_,i,caml_call1(length,arr)))
         {var
           i$0=caml_call2(_aw_,i,1),
           elt$1=insert_after(elt$0,caml_check_bound(arr,i)[1 + i]),
           elt$0=elt$1,
           i=i$0;
          continue}
        return [0,[0,elt]]}}
    function map$19(t,f)
     {var _bei_=t[1];
      if(_bei_)
       {var
         first=_bei_[1],
         new_first=create$10(caml_call1(f,first[1])),
         _bej_=
          function(f,new_first,first)
           {var next$0=first[3],_bel_=1 - (next$0 === first?1:0);
            if(_bel_)
             {var acc=new_first,elt=next$0;
              for(;;)
               {var
                 acc$0=insert_after(acc,caml_call1(f,elt[1])),
                 next=elt[3],
                 _bek_=1 - (next === first?1:0);
                if(_bek_){var acc=acc$0,elt=next;continue}
                return _bek_}}
            return _bel_};
        with_iteration_3(first[4],f,new_first,first,_bej_);
        return [0,[0,new_first]]}
      return create$11(0)}
    function mapi$5(t,f)
     {var _bee_=t[1];
      if(_bee_)
       {var
         first=_bee_[1],
         new_first=create$10(caml_call2(f,0,first[1])),
         _bef_=
          function(f,new_first,first)
           {var next$0=first[3],_beh_=1 - (next$0 === first?1:0);
            if(_beh_)
             {var i=1,acc=new_first,elt=next$0;
              for(;;)
               {var
                 acc$0=insert_after(acc,caml_call2(f,i,elt[1])),
                 next=elt[3],
                 _beg_=1 - (next === first?1:0);
                if(_beg_)
                 {var i$0=caml_call2(_aw_,i,1),i=i$0,acc=acc$0,elt=next;
                  continue}
                return _beg_}}
            return _beh_};
        with_iteration_3(first[4],f,new_first,first,_bef_);
        return [0,[0,new_first]]}
      return create$11(0)}
    function fold_elt(t,init,f)
     {var _bec_=t[1];
      if(_bec_)
       {var
         first=_bec_[1],
         _bed_=
          function(f,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call2(f,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_bed_)}
      return init}
    function foldi_elt(t,init,f)
     {var _bea_=t[1];
      if(_bea_)
       {var
         first=_bea_[1],
         _beb_=
          function(f,acc,first)
           {var i=0,acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call3(f,i,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var i$0=caml_call2(_aw_,i,1),i=i$0,acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_beb_)}
      return init}
    function fold_elt_1(t,init,f,a)
     {var _bd__=t[1];
      if(_bd__)
       {var
         first=_bd__[1],
         _bd$_=
          function(f,a,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call3(f,a,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_4(first[4],f,a,init,first,_bd$_)}
      return init}
    function foldi_elt_1(t,init,f,a)
     {var _bd8_=t[1];
      if(_bd8_)
       {var
         first=_bd8_[1],
         _bd9_=
          function(f,a,acc,first)
           {var i=0,acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call4(f,i,a,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var i$0=caml_call2(_aw_,i,1),i=i$0,acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_4(first[4],f,a,init,first,_bd9_)}
      return init}
    function iter_elt(t,f)
     {return fold_elt_1(t,0,function(f,param,elt){return caml_call1(f,elt)},f)}
    function iteri_elt(t,f)
     {return foldi_elt(t,0,function(i,param,elt){return caml_call2(f,i,elt)})}
    function find_elt(t,f)
     {function _bd6_(r)
       {fold_elt_1
         (t,
          0,
          function(f,param,elt)
           {var _bd7_=caml_call1(f,elt[1]);
            return _bd7_?caml_call1(r,[0,elt]):_bd7_},
          f);
        return 0}
      return caml_call1(Base_With_return[1],_bd6_)}
    function findi_elt(t,f)
     {function _bd4_(r)
       {foldi_elt_1
         (t,
          0,
          function(i,f,param,elt)
           {var _bd5_=caml_call2(f,i,elt[1]);
            return _bd5_?caml_call1(r,[0,[0,i,elt]]):_bd5_},
          f);
        return 0}
      return caml_call1(Base_With_return[1],_bd4_)}
    function iter$14(t,f)
     {var _bd1_=t[1];
      if(_bd1_)
       {var
         first=_bd1_[1],
         _bd2_=
          function(first,f)
           {var elt=first;
            for(;;)
             {caml_call1(f,elt[1]);
              var next=elt[3],_bd3_=1 - (next === first?1:0);
              if(_bd3_){var elt=next;continue}
              return _bd3_}};
        return with_iteration_2(first[4],first,f,_bd2_)}
      return 0}
    function length$13(t)
     {var _bd0_=t[1];
      if(_bd0_){var first=_bd0_[1];return length$12(first[4])}
      return 0}
    function iteri$5(t,f)
     {var _bdX_=t[1];
      if(_bdX_)
       {var
         first=_bdX_[1],
         _bdY_=
          function(first,f)
           {var i=0,elt=first;
            for(;;)
             {caml_call2(f,i,elt[1]);
              var next=elt[3],_bdZ_=1 - (next === first?1:0);
              if(_bdZ_){var i$0=caml_call2(_aw_,i,1),i=i$0,elt=next;continue}
              return _bdZ_}};
        return with_iteration_2(first[4],first,f,_bdY_)}
      return 0}
    function foldi$0(t,init,f)
     {return foldi_elt_1
              (t,
               init,
               function(i,f,acc,elt){return caml_call3(f,i,acc,elt[1])},
               f)}
    function fold$10(t,init,f)
     {return fold_elt_1
              (t,init,function(f,acc,elt){return caml_call2(f,acc,elt[1])},f)}
    var
     iter$15=[0,-198771759,iter$14],
     length$14=[0,-198771759,length$13],
     C=caml_call1(include$7[16],[0,fold$10,iter$15,length$14]),
     _yS_=C[10],
     _yT_=C[11],
     _yU_=C[8],
     _yV_=C[12],
     _yW_=C[13],
     _yX_=C[5],
     _yY_=C[9],
     _yZ_=C[1],
     _y0_=C[15],
     _y1_=C[16],
     _y2_=C[17],
     _y3_=C[6],
     _y4_=C[7];
    function unchecked_iter(t,f)
     {var _bdU_=t[1];
      if(_bdU_)
       {var first=_bdU_[1],elt=first;
        for(;;)
         {caml_call1(f,elt[1]);
          var next=elt[3],_bdV_=t[1];
          if(_bdV_)
           {var first$0=_bdV_[1],_bdW_=1 - (first$0 === next?1:0);
            if(_bdW_){var elt=next;continue}
            return _bdW_}
          return 0}}
      return 0}
    function is_empty$11(t){return caml_call1(_yi_,t[1])}
    function fold_right$8(t,init,f)
     {var _bdS_=t[1];
      if(_bdS_)
       {var
         first=_bdS_[1],
         _bdT_=
          function(f,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var elt$0=elt[2],acc$1=caml_call2(f,elt$0[1],acc$0);
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_bdT_)}
      return init}
    function fold_right_elt(t,init,f)
     {var _bdQ_=t[1];
      if(_bdQ_)
       {var
         first=_bdQ_[1],
         _bdR_=
          function(f,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var elt$0=elt[2],acc$1=caml_call2(f,elt$0,acc$0);
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_bdR_)}
      return init}
    function to_list$5(t)
     {return fold_right$8(t,0,function(x,tl){return [0,x,tl]})}
    function sexp_of_t$33(sexp_of_a,t)
     {return caml_call2(_pf_,sexp_of_a,to_list$5(t))}
    function t_of_sexp$25(a_of_sexp,s)
     {return of_list$7(caml_call2(_pe_,a_of_sexp,s))}
    function copy$2(t){return of_list$7(to_list$5(t))}
    function clear$1(t){t[1] = 0;return 0}
    function compare$22(compare_elt,t1,t2)
     {var _bdM_=t1[1],_bdN_=t2[1];
      if(_bdM_)
       {if(_bdN_)
         {var
           f2=_bdN_[1],
           f1=_bdM_[1],
           _bdO_=
            function(compare_elt,f1,f2)
             {function _bdP_(compare_elt,f1,f2)
               {var elt1=f1,elt2=f2;
                for(;;)
                 {var compare_result=caml_call2(compare_elt,elt1[1],elt2[1]);
                  if(caml_call2(_aR_,compare_result,0))return compare_result;
                  var
                   next1=elt1[3],
                   next2=elt2[3],
                   match=next1 === f1?1:0,
                   match$0=next2 === f2?1:0;
                  if(0 === match)
                   {if(0 === match$0){var elt1=next1,elt2=next2;continue}
                    return 1}
                  return 0 === match$0?-1:0}}
              return with_iteration_3(f2[4],compare_elt,f1,f2,_bdP_)};
          return with_iteration_3(f1[4],compare_elt,f1,f2,_bdO_)}
        return 1}
      return _bdN_?-1:0}
    var
     Transfer_src_and_dst_are_same_list=
      [248,
       cst_Core_kernel_Doubly_linked_Transfer_src_and_dst_are_same_list,
       caml_fresh_oo_id(0)];
    function transfer(src,dst)
     {if(src === dst)throw Transfer_src_and_dst_are_same_list;
      var _bdI_=src[1];
      if(_bdI_)
       {var src_head=_bdI_[1],_bdJ_=dst[1];
        if(_bdJ_)
         {var dst_head=_bdJ_[1],_bdK_=dst_head[4],_bdL_=src_head[4];
          if(same_class(_bdL_,_bdK_))
           var match=-823486817;
          else
           {var
             n1=union_find_get_check_no_pending_iterations(_bdL_)[1],
             n2=union_find_get_check_no_pending_iterations(_bdK_)[1];
            with_iteration_4
             (_bdL_,
              _bdL_,
              _bdK_,
              n1,
              n2,
              function(t1,t2,n1,n2)
               {return with_iteration_4
                        (t2,
                         t1,
                         t2,
                         n1,
                         n2,
                         function(t1,t2,n1,n2)
                          {union$5(t1,t2);
                           return set$5(t1,[0,caml_call2(_aw_,n1,n2),0])})});
            var match=1016869580}
          if(1016869580 <= match)
           {split_or_splice_before(dst_head,src_head);return clear$1(src)}
          throw Transfer_src_and_dst_are_same_list}
        dst[1] = [0,src_head];
        return clear$1(src)}
      return 0}
    function map_inplace$1(t,f)
     {return iter_elt(t,function(elt){return set$6(elt,caml_call1(f,elt[1]))})}
    function mapi_inplace$0(t,f)
     {return iteri_elt
              (t,function(i,elt){return set$6(elt,caml_call2(f,i,elt[1]))})}
    function remove_list(t,to_remove)
     {return caml_call2
              (_ph_,
               to_remove,
               function(elt)
                {var _bdG_=t[1];
                 if(_bdG_)
                  {var head=_bdG_[1];
                   if(head === elt)
                    {var next_elt=elt[3],_bdH_=head === next_elt?0:[0,next_elt];
                     t[1] = _bdH_}}
                 return unlink(elt)})}
    function filter_inplace$1(t,f)
     {var
       to_remove=
        caml_call1
         (parts,
          fold_elt
           (t,
            0,
            function(elts,elt){return caml_call1(f,elt[1])?elts:[0,elt,elts]}));
      return remove_list(t,to_remove)}
    function filteri_inplace$0(t,f)
     {var
       to_remove=
        caml_call1
         (parts,
          foldi_elt
           (t,
            0,
            function(i,elts,elt)
             {return caml_call2(f,i,elt[1])?elts:[0,elt,elts]}));
      return remove_list(t,to_remove)}
    function filter_map_inplace$0(t,f)
     {var
       to_remove=
        caml_call1
         (parts,
          fold_elt
           (t,
            0,
            function(elts,elt)
             {var match=caml_call1(f,elt[1]);
              if(match){var value=match[1];set$6(elt,value);return elts}
              return [0,elt,elts]}));
      return remove_list(t,to_remove)}
    function filter_mapi_inplace$0(t,f)
     {var
       to_remove=
        caml_call1
         (parts,
          foldi_elt
           (t,
            0,
            function(i,elts,elt)
             {var match=caml_call2(f,i,elt[1]);
              if(match){var value=match[1];set$6(elt,value);return elts}
              return [0,elt,elts]}));
      return remove_list(t,to_remove)}
    var
     Elt_does_not_belong_to_list=
      [248,
       cst_Core_kernel_Doubly_linked_Elt_does_not_belong_to_list,
       caml_fresh_oo_id(0)];
    function choose$4(t){return t[1]}
    function last_elt(t){return caml_call2(_yd_,t[1],prev)}
    function first$0(t){return caml_call2(_yd_,t[1],value$0)}
    function last$0(t){return caml_call2(_yd_,last_elt(t),value$0)}
    function is_first$0(t,elt)
     {var _bdF_=t[1];
      if(_bdF_)
       {var first=_bdF_[1];
        if(equal$13(first[4],elt[4]))return elt === first?1:0;
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function is_last(t,elt)
     {var _bdE_=t[1];
      if(_bdE_)
       {var first=_bdE_[1];
        if(equal$13(first[4],elt[4]))
         {var last=first[2];return elt === last?1:0}
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function mem_elt(t,elt)
     {var _bdD_=t[1];
      if(_bdD_){var first=_bdD_[1];return equal$13(first[4],elt[4])}
      return 0}
    function prev$0(t,elt)
     {var _bdC_=t[1];
      if(_bdC_)
       {var first=_bdC_[1];
        if(elt === first)return 0;
        if(equal$13(first[4],elt[4]))return [0,elt[2]];
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function next(t,elt)
     {var _bdB_=t[1];
      if(_bdB_)
       {var first=_bdB_[1],last=first[2];
        if(elt === last)return 0;
        if(equal$13(first[4],elt[4]))return [0,elt[3]];
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function insert_after$0(t,elt,v)
     {var _bdA_=t[1];
      if(_bdA_)
       {var first=_bdA_[1];
        if(equal$13(first[4],elt[4]))return insert_after(elt,v);
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function insert_before$0(t,elt,v)
     {var _bdz_=t[1];
      if(_bdz_)
       {var first=_bdz_[1];
        if(elt === first)
         {var new_elt=insert_before(first,v);
          t[1] = [0,new_elt];
          return new_elt}
        if(equal$13(first[4],elt[4]))return insert_before(elt,v);
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function insert_empty(t,v)
     {var new_elt=create$10(v);t[1] = [0,new_elt];return new_elt}
    function insert_last(t,v)
     {var _bdy_=t[1];
      if(_bdy_){var first=_bdy_[1];return insert_before(first,v)}
      return insert_empty(t,v)}
    function add$9(t,v)
     {var _bdx_=t[1];
      if(_bdx_)
       {var first=_bdx_[1],new_elt=insert_before(first,v);
        t[1] = [0,new_elt];
        return new_elt}
      return insert_empty(t,v)}
    function remove_last(t)
     {var _bdw_=t[1];
      if(_bdw_)
       {var first=_bdw_[1],node=first[2];
        if(! is_singleton(node))
         {incr_length(-1,first[4]);
          unsafe_split_or_splice_before(first,node);
          node[4] = dummy_header}
        if(first === node)t[1] = 0;
        return [0,node[1]]}
      return 0}
    function remove_one(t)
     {var _bdu_=t[1];
      if(_bdu_)
       {var first=_bdu_[1],second=first[3];
        unlink(first);
        var _bdv_=first === second?0:[0,second];
        t[1] = _bdv_;
        return [0,first[1]]}
      return 0}
    function remove$9(t,elt)
     {var _bdt_=t[1];
      if(_bdt_)
       {var first=_bdt_[1];
        if(elt === first){remove_one(t);return 0}
        if(equal$13(first[4],elt[4]))return unlink(elt);
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function filter$11(t,f)
     {var new_t=create$11(0),_bdq_=t[1];
      if(_bdq_)
       {var
         first=_bdq_[1],
         _bdr_=
          function(f,new_t,first)
           {var elt=first;
            for(;;)
             {if(caml_call1(f,elt[1]))insert_last(new_t,elt[1]);
              var next=elt[3],_bds_=1 - (next === first?1:0);
              if(_bds_){var elt=next;continue}
              return _bds_}};
        with_iteration_3(first[4],f,new_t,first,_bdr_)}
      return new_t}
    function filteri$5(t,f)
     {var new_t=create$11(0),_bdn_=t[1];
      if(_bdn_)
       {var
         first=_bdn_[1],
         _bdo_=
          function(f,new_t,first)
           {var i=0,elt=first;
            for(;;)
             {if(caml_call2(f,i,elt[1]))insert_last(new_t,elt[1]);
              var next=elt[3],_bdp_=1 - (next === first?1:0);
              if(_bdp_){var i$0=caml_call2(_aw_,i,1),i=i$0,elt=next;continue}
              return _bdp_}};
        with_iteration_3(first[4],f,new_t,first,_bdo_)}
      return new_t}
    function filter_map$10(t,f)
     {var new_t=create$11(0),_bdk_=t[1];
      if(_bdk_)
       {var
         first=_bdk_[1],
         _bdl_=
          function(f,new_t,first)
           {var elt=first;
            for(;;)
             {var match=caml_call1(f,elt[1]);
              if(match){var value=match[1];insert_last(new_t,value)}
              var next=elt[3],_bdm_=1 - (next === first?1:0);
              if(_bdm_){var elt=next;continue}
              return _bdm_}};
        with_iteration_3(first[4],f,new_t,first,_bdl_)}
      return new_t}
    function filter_mapi$5(t,f)
     {var new_t=create$11(0),_bdh_=t[1];
      if(_bdh_)
       {var
         first=_bdh_[1],
         _bdi_=
          function(f,new_t,first)
           {var i=0,elt=first;
            for(;;)
             {var match=caml_call2(f,i,elt[1]);
              if(match){var value=match[1];insert_last(new_t,value)}
              var next=elt[3],_bdj_=1 - (next === first?1:0);
              if(_bdj_){var i$0=caml_call2(_aw_,i,1),i=i$0,elt=next;continue}
              return _bdj_}};
        with_iteration_3(first[4],f,new_t,first,_bdi_)}
      return new_t}
    function partition_tf$9(t,f)
     {var t1=create$11(0),t2=create$11(0),_bdd_=t[1];
      if(_bdd_)
       {var
         first=_bdd_[1],
         _bde_=
          function(f,t1,t2,first)
           {var elt=first;
            for(;;)
             {var _bdf_=elt[1],t1$0=caml_call1(f,elt[1])?t1:t2;
              insert_last(t1$0,_bdf_);
              var next=elt[3],_bdg_=1 - (next === first?1:0);
              if(_bdg_){var elt=next;continue}
              return _bdg_}};
        with_iteration_4(first[4],f,t1,t2,first,_bde_)}
      return [0,t1,t2]}
    function partitioni_tf$5(t,f)
     {var t1=create$11(0),t2=create$11(0),_bc$_=t[1];
      if(_bc$_)
       {var
         first=_bc$_[1],
         _bda_=
          function(f,t1,t2,first)
           {var i=0,elt=first;
            for(;;)
             {var _bdb_=elt[1],t1$0=caml_call2(f,i,elt[1])?t1:t2;
              insert_last(t1$0,_bdb_);
              var next=elt[3],_bdc_=1 - (next === first?1:0);
              if(_bdc_){var i$0=caml_call2(_aw_,i,1),i=i$0,elt=next;continue}
              return _bdc_}};
        with_iteration_4(first[4],f,t1,t2,first,_bda_)}
      return [0,t1,t2]}
    function partition_map$4(t,f)
     {var t1=create$11(0),t2=create$11(0),_bc8_=t[1];
      if(_bc8_)
       {var
         first=_bc8_[1],
         _bc9_=
          function(f,t1,t2,first)
           {var elt=first;
            for(;;)
             {var match=caml_call1(f,elt[1]);
              if(0 === match[0])
               {var value=match[1];insert_last(t1,value)}
              else
               {var value$0=match[1];insert_last(t2,value$0)}
              var next=elt[3],_bc__=1 - (next === first?1:0);
              if(_bc__){var elt=next;continue}
              return _bc__}};
        with_iteration_4(first[4],f,t1,t2,first,_bc9_)}
      return [0,t1,t2]}
    function partition_mapi$4(t,f)
     {var t1=create$11(0),t2=create$11(0),_bc5_=t[1];
      if(_bc5_)
       {var
         first=_bc5_[1],
         _bc6_=
          function(f,t1,t2,first)
           {var i=0,elt=first;
            for(;;)
             {var match=caml_call2(f,i,elt[1]);
              if(0 === match[0])
               {var value=match[1];insert_last(t1,value)}
              else
               {var value$0=match[1];insert_last(t2,value$0)}
              var next=elt[3],_bc7_=1 - (next === first?1:0);
              if(_bc7_){var i$0=caml_call2(_aw_,i,1),i=i$0,elt=next;continue}
              return _bc7_}};
        with_iteration_4(first[4],f,t1,t2,first,_bc6_)}
      return [0,t1,t2]}
    var
     Invalid_move_elt_equals_anchor=
      [248,
       cst_Core_kernel_Doubly_linked_Invalid_move_elt_equals_anchor,
       caml_fresh_oo_id(0)];
    function move_before(t,elt,anchor)
     {if(anchor === elt)throw Invalid_move_elt_equals_anchor;
      if(equal$13(anchor[4],elt[4]))
       {var _bc2_=t[1];
        if(_bc2_)
         {var first=_bc2_[1];
          if(equal$13(first[4],elt[4]))
           {var after_elt=elt[3];
            split_or_splice_before(elt,after_elt);
            var first$0=first === elt?(t[1] = [0,after_elt],after_elt):first;
            split_or_splice_before(anchor,elt);
            var
             _bc3_=first$0 === anchor?1:0,
             _bc4_=_bc3_?(t[1] = [0,elt],0):_bc3_;
            return _bc4_}
          throw Elt_does_not_belong_to_list}
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function move_to_front(t,elt)
     {var _bc0_=t[1];
      if(_bc0_)
       {var first=_bc0_[1],_bc1_=1 - (elt === first?1:0);
        return _bc1_?move_before(t,elt,first):_bc1_}
      throw Elt_does_not_belong_to_list}
    function move_after(t,elt,anchor)
     {if(anchor === elt)throw Invalid_move_elt_equals_anchor;
      if(equal$13(anchor[4],elt[4]))
       {var _bcZ_=t[1];
        if(_bcZ_)
         {var first=_bcZ_[1];
          if(equal$13(first[4],elt[4]))
           {var after_elt=elt[3];
            split_or_splice_before(elt,after_elt);
            if(first === elt)t[1] = [0,after_elt];
            check_two_nodes_no_pending_iterations(anchor,elt);
            return unsafe_split_or_splice_after(anchor,elt)}
          throw Elt_does_not_belong_to_list}
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function move_to_back(t,elt)
     {var _bcX_=t[1];
      if(_bcX_)
       {var first=_bcX_[1],last=first[2],_bcY_=1 - (elt === last?1:0);
        return _bcY_?move_after(t,elt,last):_bcY_}
      throw Elt_does_not_belong_to_list}
    function to_sequence$8(t){return caml_call1(_ki_,to_list$5(t))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$139);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Elt=[0,value$0,phys_equal,set$6,sexp_of_t$32],
     include$41=
      [0,
       Elt,
       compare$22,
       t_of_sexp$25,
       sexp_of_t$33,
       _yZ_,
       length$13,
       is_empty$11,
       iter$14,
       _yX_,
       _y3_,
       _y4_,
       _yU_,
       _yY_,
       _yS_,
       _yT_,
       _yV_,
       _yW_,
       to_list$5,
       _y0_,
       _y1_,
       _y2_,
       invariant$3,
       create$11,
       of_list$7,
       of_array$3,
       equal$14,
       is_first$0,
       is_last,
       mem_elt,
       choose$4,
       last_elt,
       first$0,
       last$0,
       next,
       prev$0,
       insert_before$0,
       insert_after$0,
       add$9,
       insert_last,
       move_to_front,
       move_to_back,
       move_after,
       move_before,
       remove$9,
       remove_one,
       remove_last,
       iteri$5,
       foldi$0,
       fold_elt,
       foldi_elt,
       iter_elt,
       iteri_elt,
       fold_right$8,
       fold_right_elt,
       find_elt,
       findi_elt,
       clear$1,
       copy$2,
       transfer,
       map$19,
       mapi$5,
       filter$11,
       filteri$5,
       filter_map$10,
       filter_mapi$5,
       partition_tf$9,
       partitioni_tf$5,
       partition_map$4,
       partition_mapi$4,
       map_inplace$1,
       mapi_inplace$0,
       filter_inplace$1,
       filteri_inplace$0,
       filter_map_inplace$0,
       filter_mapi_inplace$0,
       unchecked_iter,
       to_sequence$8];
    caml_register_global(4352,include$41,"Core_kernel__Doubly_linked");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$140);
    caml_call1(Expect_test_collector[4][1],cst_src_hash_queue_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$141,cst$46);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$142);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Hash_queue_intf=[0];
    caml_register_global
     (4353,Core_kernel_Hash_queue_intf,"Core_kernel__Hash_queue_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$143);
    caml_call1(Expect_test_collector[4][1],cst_src_sexp_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$144,cst$47);
    var
     _y5_=caml_call1(Bin_prot_Shape[2][1],cst_t$91),
     _y6_=
      [0,
       [0,cst_Atom$1,[0,_cb_,0]],
       [0,
        [0,
         cst_List$1,
         [0,
          caml_call1(_dq_,caml_call1(caml_call1(Bin_prot_Shape[13],_y5_),0)),
          0]],
        0]],
     _y7_=caml_call1(Bin_prot_Shape[9],_y6_),
     _y8_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$92),0,_y7_],0],
     _y9_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_5_4),
     group$44=caml_call2(Bin_prot_Shape[6],_y9_,_y8_),
     _y__=caml_call1(Bin_prot_Shape[2][1],cst_t$93),
     bin_shape_t$37=caml_call1(caml_call2(Bin_prot_Shape[14],group$44,_y__),0);
    function bin_size_t$39(param)
     {if(0 === param[0])
       {var v1=param[1],_bcV_=caml_call1(bin_size_t,v1);
        return caml_call2(Bin_prot_Common[23],1,_bcV_)}
      var v1$0=param[1],_bcW_=caml_call2(_bz_,bin_size_t$39,v1$0);
      return caml_call2(Bin_prot_Common[23],1,_bcW_)}
    function bin_write_t$39(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(bin_write_t,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return caml_call3(caml_call1(_ds_,bin_write_t$39),buf,pos$1,v1$0)}
    var bin_writer_t$31=[0,bin_size_t$39,bin_write_t$39];
    function bin_read_t$80(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_sexp_ml_Stable_V1_t,pos_ref[1])}
    function bin_read_t$81(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match)
       {var arg_1=caml_call2(bin_read_t,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(caml_call1(_du_,bin_read_t$81),buf,pos_ref);
        return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_y$_,pos_ref[1])}
    var
     bin_reader_t$31=[0,bin_read_t$81,bin_read_t$80],
     bin_t$31=[0,bin_shape_t$37,bin_writer_t$31,bin_reader_t$31];
    function compare$23(a_001,match)
     {if(caml_call2(Ppx_compare_lib[1],a_001,match))return 0;
      if(0 === a_001[0])
       {var _bcT_=a_001[1];
        if(0 === match[0])
         {var b_004=match[1];return caml_call2(_af_,_bcT_,b_004)}
        return -1}
      var _bcU_=a_001[1];
      if(0 === match[0])return 1;
      var b_006=match[1];
      return caml_call3(_N_,compare$23,_bcU_,b_006)}
    var
     hash_fold_t$8=function _bcS_(_bcQ_,_bcR_){return _bcS_.fun(_bcQ_,_bcR_)},
     hash$8=function _bcP_(_bcO_){return _bcP_.fun(_bcO_)};
    caml_update_dummy
     (hash_fold_t$8,
      function(hsv,arg)
       {if(0 === arg[0])
         {var a0=arg[1],hsv$0=caml_call2(Base_Hash[3],hsv,0);
          return caml_call2(_ah_,hsv$0,a0)}
        var a0$0=arg[1],hsv$1=caml_call2(Base_Hash[3],hsv,1);
        return caml_call3(_P_,hash_fold_t$8,hsv$1,a0$0)});
    caml_update_dummy
     (hash$8,
      function(x)
       {var
         hsv=caml_call2(Base_Hash[11],0,0),
         _bcN_=caml_call2(hash_fold_t$8,hsv,x);
        return caml_call1(Base_Hash[9],_bcN_)});
    var
     t_of_sexp$26=include$18[59],
     sexp_of_t$34=include$18[58],
     _za_=Base[84],
     hash_fold_t$9=_za_[1],
     hash$9=_za_[2],
     Of_sexp_error=_za_[6],
     of_float_style=_za_[16],
     of_int_style=_za_[17],
     subst_found=include$18[61],
     search_physical=include$18[60],
     t_of_sexp$27=include$18[59],
     sexp_of_t$35=include$18[58],
     is_unit=include$18[57],
     unit=include$18[56],
     to_buffer_gen=include$18[55],
     to_buffer=include$18[54],
     to_buffer_mach=include$18[53],
     to_buffer_hum=include$18[52],
     to_string$0=include$18[51],
     to_string_mach=include$18[50],
     to_string_hum=include$18[49],
     of_bigstring_conv_exn=include$18[48],
     of_bigstring_conv=include$18[47],
     of_bigstring$0=include$18[46],
     of_string_conv_exn=include$18[45],
     of_string_conv=include$18[44],
     of_string=include$18[43],
     pp=include$18[41],
     pp_mach=include$18[40],
     pp_hum_indent=include$18[39],
     pp_hum=include$18[38],
     save_sexps=include$18[37],
     save_sexps_mach=include$18[36],
     save_sexps_hum=include$18[35],
     save=include$18[34],
     save_mach=include$18[33],
     save_hum=include$18[32],
     output=include$18[31],
     output_mach=include$18[30],
     output_hum_indent=include$18[29],
     output_hum=include$18[28],
     load_sexps_conv_exn=include$18[27],
     load_sexps_conv=include$18[26],
     load_sexp_conv_exn=include$18[25],
     load_sexp_conv=include$18[24],
     load_rev_sexps=include$18[23],
     load_sexps=include$18[22],
     load_sexp=include$18[21],
     input_rev_sexps=include$18[20],
     input_sexps=include$18[19],
     input_sexp=include$18[18],
     parse_bigstring=include$18[17],
     parse=include$18[16],
     Parse_error=include$18[15],
     scan_sexps_conv=include$18[11],
     scan_fold_sexps=include$18[10],
     scan_iter_sexps=include$18[9],
     scan_sexp_opt=include$18[8],
     scan_rev_sexps=include$18[7],
     scan_sexps=include$18[6],
     scan_sexp=include$18[5],
     size$0=include$18[4],
     default_indent=include$18[3],
     compare$24=include$18[1],
     O=[0],
     _zc_=caml_call1(Bin_prot_Shape[7],[0,bin_shape_t$37,[0,_ou_,0]]),
     _zd_=caml_call1(Bin_prot_Shape[3][1],cst_a$49),
     _ze_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_38_22),
     _zb_=0,
     _zf_=caml_call2(Bin_prot_Shape[15],_ze_,_zd_),
     _zg_=function(_bcM_){return bin_shape_t$7(_zf_,_bcM_)}(_zc_),
     _zh_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$50),0],
     _zi_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$94),_zh_,_zg_],_zb_],
     _zj_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_38_2),
     group$45=caml_call2(Bin_prot_Shape[6],_zj_,_zi_);
    function bin_shape_t$38(a)
     {var _bcL_=caml_call1(Bin_prot_Shape[2][1],cst_t$95);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$45,_bcL_),[0,a,0])}
    function bin_size_t$40(size_of_a,v)
     {return bin_size_t$11
              (size_of_a,
               function(param)
                {var
                  v2=param[2],
                  v1=param[1],
                  _bcJ_=bin_size_t$39(v1),
                  size=caml_call2(Bin_prot_Common[23],0,_bcJ_),
                  _bcK_=caml_call1(_oq_,v2);
                 return caml_call2(Bin_prot_Common[23],size,_bcK_)},
               v)}
    function bin_write_t$40(write_a,buf,pos,v)
     {return bin_write_t$11
              (write_a,
               function(buf,pos,param)
                {var v2=param[2],v1=param[1],pos$0=bin_write_t$39(buf,pos,v1);
                 return caml_call3(_or_,buf,pos$0,v2)},
               buf,
               pos,
               v)}
    function bin_writer_t$32(bin_writer_a)
     {function _bcF_(v)
       {var _bcG_=bin_writer_a[2];
        return function(_bcH_,_bcI_)
         {return bin_write_t$40(_bcG_,v,_bcH_,_bcI_)}}
      return [0,function(v){return bin_size_t$40(bin_writer_a[1],v)},_bcF_]}
    function bin_read_t$82(of_a,buf,pos_ref,vint)
     {return bin_read_t$25
              (of_a,
               function(buf,pos_ref)
                {var
                  v1=bin_read_t$81(buf,pos_ref),
                  v2=caml_call2(_os_,buf,pos_ref);
                 return [0,v1,v2]},
               buf,
               pos_ref,
               vint)}
    function bin_read_t$83(of_a,buf,pos_ref)
     {return bin_read_t$26
              (of_a,
               function(buf,pos_ref)
                {var
                  v1=bin_read_t$81(buf,pos_ref),
                  v2=caml_call2(_os_,buf,pos_ref);
                 return [0,v1,v2]},
               buf,
               pos_ref)}
    function bin_reader_t$32(bin_reader_a)
     {function _bcE_(buf,pos_ref,vtag)
       {return bin_read_t$82(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$83(bin_reader_a[1],buf,pos_ref)},
              _bcE_]}
    function bin_t$32(bin_a)
     {var _bcC_=bin_reader_t$32(bin_a[3]),_bcD_=bin_writer_t$32(bin_a[2]);
      return [0,bin_shape_t$38(bin_a[1]),_bcD_,_bcC_]}
    function compare$25(cmp_a,a_009,b_010)
     {return caml_call4
              (_hQ_,
               cmp_a,
               function(a_013,b_014)
                {var
                  t_016=a_013[2],
                  t_015=a_013[1],
                  t_018=b_014[2],
                  t_017=b_014[1],
                  n=caml_call2(compare$24,t_015,t_017);
                 return 0 === n?caml_call2(_n0_,t_016,t_018):n},
               a_009,
               b_010)}
    function hash_fold_t$10(hash_fold_a,hsv,arg)
     {return caml_call4
              (_hS_,
               hash_fold_a,
               function(hsv,arg)
                {var
                  e1=arg[2],
                  e0=arg[1],
                  hsv$0=caml_call2(hash_fold_t$9,hsv,e0),
                  hsv$1=caml_call2(_n2_,hsv$0,e1);
                 return hsv$1},
               hsv,
               arg)}
    function sexp_of_t$36(sexp_of_a,t)
     {if(0 === t[0]){var a=t[1];return caml_call1(sexp_of_a,a)}
      var match=t[1],err=match[2],sexp=match[1];
      return [1,[0,_zk_,[0,sexp,[0,caml_call1(_n5_,err),0]]]]}
    function t_of_sexp$28(a_of_sexp,sexp)
     {if(1 === sexp[0])
       {var _bcy_=sexp[1];
        if(_bcy_)
         {var _bcz_=_bcy_[1];
          if(0 === _bcz_[0])
           if(caml_string_notequal(_bcz_[1],cst_sexp_parse_error))
            var switch$0=0;
           else
            {var _bcA_=_bcy_[2];
             if(_bcA_)
              {var _bcB_=_bcA_[2];
               if(_bcB_)
                if(_bcB_[2])
                 var switch$0=0;
                else
                 var sexp$0=_bcA_[1],switch$0=1;
               else
                var switch$0=0}
             else
              var switch$0=0}
          else
           var switch$0=0}
        else
         var switch$0=0}
      else
       var switch$0=0;
      if(! switch$0)var sexp$0=sexp;
      try
       {var _bcx_=[0,caml_call1(a_of_sexp,sexp$0)];return _bcx_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return [1,[0,sexp$0,caml_call2(_oj_,0,exn)]]}}
    var
     _zl_=caml_call1(Bin_prot_Shape[3][1],cst_a$51),
     _zm_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_59_14),
     _zn_=
      [0,
       [0,cst_value,caml_call2(Bin_prot_Shape[15],_zm_,_zl_)],
       [0,[0,cst_text,_cb_],0]],
     _zo_=caml_call1(Bin_prot_Shape[8],_zn_),
     _zp_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$52),0],
     _zq_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$96),_zp_,_zo_],0],
     _zr_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_58_2),
     group$46=caml_call2(Bin_prot_Shape[6],_zr_,_zq_);
    function bin_shape_t$39(a)
     {var _bcw_=caml_call1(Bin_prot_Shape[2][1],cst_t$97);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$46,_bcw_),[0,a,0])}
    function bin_size_t$41(size_of_a,param)
     {var
       v2=param[2],
       v1=param[1],
       _bcu_=caml_call1(size_of_a,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bcu_),
       _bcv_=caml_call1(bin_size_t,v2);
      return caml_call2(Bin_prot_Common[23],size,_bcv_)}
    function bin_write_t$41(write_a,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(write_a,buf,pos,v1);
      return caml_call3(bin_write_t,buf,pos$0,v2)}
    function bin_writer_t$33(bin_writer_a)
     {function _bcq_(v)
       {var _bcr_=bin_writer_a[2];
        return function(_bcs_,_bct_)
         {return bin_write_t$41(_bcr_,v,_bcs_,_bct_)}}
      return [0,function(v){return bin_size_t$41(bin_writer_a[1],v)},_bcq_]}
    function bin_read_t$84(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_sexp_ml_With_text_t,pos_ref[1])}
    function bin_read_t$85(of_a,buf,pos_ref)
     {var
       v_value=caml_call2(of_a,buf,pos_ref),
       v_text=caml_call2(bin_read_t,buf,pos_ref);
      return [0,v_value,v_text]}
    function bin_reader_t$33(bin_reader_a)
     {function _bcp_(buf,pos_ref,vtag)
       {return bin_read_t$84(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$85(bin_reader_a[1],buf,pos_ref)},
              _bcp_]}
    function bin_t$33(bin_a)
     {var _bcn_=bin_reader_t$33(bin_a[3]),_bco_=bin_writer_t$33(bin_a[2]);
      return [0,bin_shape_t$39(bin_a[1]),_bco_,_bcn_]}
    function sexp_of_t$37(param,t){return [0,t[2]]}
    function of_text(value_of_sexp,opt,text)
     {if(opt)var sth=opt[1],filename=sth;else var filename=cst$48;
      var
       err=
        caml_call2
         (_t6_,
          0,
          function(param)
           {return caml_call2(of_string_conv,text,value_of_sexp)});
      if(0 === err[0])
       {var _bcm_=err[1];
        if(1025039613 <= _bcm_[1])
         {var value=_bcm_[2];return [0,[0,value,text]]}
        var match=_bcm_[2],annotated=match[2],exn=match[1];
        return [1,
                caml_call2
                 (_oj_,
                  0,
                  caml_call3(include$18[14][17],filename,exn,annotated))]}
      return err}
    function t_of_sexp$29(a_of_sexp,sexp)
     {if(0 === sexp[0])
       {var text=sexp[1];return caml_call1(_t9_,of_text(a_of_sexp,0,text))}
      return caml_call2
              (_eD_,
               cst_With_text_t_should_be_stored_as_an_atom_but_instead_a_list_was_found,
               sexp)}
    function text(t){return t[2]}
    function value$1(t){return t[1]}
    function of_value(sexp_of_value,value)
     {var text=caml_call2(to_string_hum,0,caml_call1(sexp_of_value,value));
      return [0,value,text]}
    var
     _zs_=caml_call1(Bin_prot_Shape[3][1],cst_a$53),
     _zt_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_92_19),
     _zu_=caml_call2(Bin_prot_Shape[15],_zt_,_zs_),
     _zv_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$54),0],
     _zw_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_no_raise),_zv_,_zu_],0],
     _zx_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_92_0),
     group$47=caml_call2(Bin_prot_Shape[6],_zx_,_zw_);
    function bin_shape_no_raise(a)
     {var _bcl_=caml_call1(Bin_prot_Shape[2][1],cst_no_raise$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$47,_bcl_),[0,a,0])}
    function bin_size_no_raise(size_of_a){return size_of_a}
    function bin_write_no_raise(write_a){return write_a}
    function bin_writer_no_raise(bin_writer_a)
     {function _bck_(v){return caml_call1(bin_writer_a[2],v)}
      return [0,function(v){return caml_call1(bin_writer_a[1],v)},_bck_]}
    function bin_read_no_raise(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[18],_zy_,pos_ref[1])}
    function bin_read_no_raise$0(of_a){return of_a}
    function bin_reader_no_raise(bin_reader_a)
     {function _bcj_(buf,pos_ref,vtag)
       {return bin_read_no_raise(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2(bin_reader_a[1],buf,pos_ref)},
              _bcj_]}
    function bin_no_raise(bin_a)
     {var
       _bch_=bin_reader_no_raise(bin_a[3]),
       _bci_=bin_writer_no_raise(bin_a[2]);
      return [0,bin_shape_no_raise(bin_a[1]),_bci_,_bch_]}
    function no_raise_of_sexp(of_a,t){return caml_call1(of_a,t)}
    function sexp_of_no_raise(sexp_of_a,a)
     {try
       {var _bcf_=caml_call1(sexp_of_a,a);return _bcf_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        try
         {var _bce_=[1,[0,_zA_,[0,caml_call1(sexp_of_t,exn),0]]];return _bce_}
        catch(_bcg_){return _zz_}}}
    var
     _zB_=Base[84],
     _zD_=Base[84],
     _zC_=[0,_zB_[3],_zB_[4]],
     _zE_=
      [0,
       _zD_[19],
       _zD_[20],
       _zD_[21],
       _zD_[22],
       _zD_[23],
       _zD_[24],
       _zD_[25],
       _zD_[26],
       _zD_[27],
       _zD_[28],
       _zD_[29],
       _zD_[30],
       _zD_[31],
       _zD_[32],
       _zD_[33],
       _zD_[34],
       _zD_[35],
       _zD_[36],
       _zD_[37]],
     include$42=function(_bcd_){return _xz_(_zE_,_bcd_)}(_zC_),
     _zH_=include$42[3],
     _zK_=include$42[6],
     _zM_=include$42[8],
     _zF_=include$42[1],
     _zG_=include$42[2],
     _zI_=include$42[4],
     _zJ_=include$42[5],
     _zL_=include$42[7],
     _zN_=include$42[9],
     _zO_=include$42[10],
     _zP_=include$42[11],
     _zQ_=include$42[12],
     _zR_=include$42[13],
     _zS_=include$42[14],
     _zT_=include$42[15],
     _zU_=include$42[16],
     _zV_=include$42[17],
     _zW_=include$42[18],
     _zX_=include$42[19],
     _zY_=include$42[20],
     _zZ_=include$42[21],
     _z0_=include$42[22];
    function of_sexp_allow_extra_fields_recursively(of_sexp,sexp)
     {var r=Sexplib_Conv[26],prev=r[1];
      function _bcb_(param){r[1] = prev;return 0}
      function _bcc_(param){r[1] = 0;return caml_call1(of_sexp,sexp)}
      return caml_call2(Base_Exn[12],_bcc_,_bcb_)}
    var
     _z1_=Base_quickcheck_Generator[11],
     _z2_=Base_quickcheck_Observer[12],
     _z3_=Base_quickcheck_Shrinker[12];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$145);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Sexp=
      [0,
       bin_size_t$39,
       bin_write_t$39,
       bin_read_t$81,
       bin_read_t$80,
       bin_shape_t$37,
       bin_writer_t$31,
       bin_reader_t$31,
       bin_t$31,
       hash_fold_t$9,
       hash$9,
       O,
       _zF_,
       _zG_,
       _zH_,
       _zI_,
       _zJ_,
       _zK_,
       _zN_,
       _zO_,
       _zP_,
       _zQ_,
       _zR_,
       _zS_,
       _zT_,
       _zU_,
       _zV_,
       _zW_,
       _zX_,
       _zY_,
       _zZ_,
       _z0_,
       _z1_,
       _z2_,
       _z3_,
       _zM_,
       _zL_,
       default_indent,
       size$0,
       scan_sexp,
       scan_sexps,
       scan_rev_sexps,
       scan_sexp_opt,
       scan_iter_sexps,
       scan_fold_sexps,
       scan_sexps_conv,
       Parse_error,
       parse,
       parse_bigstring,
       input_sexp,
       input_sexps,
       input_rev_sexps,
       load_sexp,
       load_sexps,
       load_rev_sexps,
       load_sexp_conv,
       load_sexp_conv_exn,
       load_sexps_conv,
       load_sexps_conv_exn,
       output_hum,
       output_hum_indent,
       output_mach,
       output,
       save_hum,
       save_mach,
       save,
       save_sexps_hum,
       save_sexps_mach,
       save_sexps,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp,
       of_string,
       of_string_conv,
       of_string_conv_exn,
       of_bigstring$0,
       of_bigstring_conv,
       of_bigstring_conv_exn,
       to_string_hum,
       to_string_mach,
       to_string$0,
       to_buffer_hum,
       to_buffer_mach,
       to_buffer,
       to_buffer_gen,
       unit,
       is_unit,
       sexp_of_t$35,
       t_of_sexp$27,
       search_physical,
       subst_found,
       Of_sexp_error,
       of_float_style,
       of_int_style,
       bin_shape_no_raise,
       bin_size_no_raise,
       bin_write_no_raise,
       bin_writer_no_raise,
       bin_read_no_raise$0,
       bin_read_no_raise,
       bin_reader_no_raise,
       bin_no_raise,
       sexp_of_no_raise,
       no_raise_of_sexp,
       [0,
        bin_shape_t$38,
        bin_size_t$40,
        bin_write_t$40,
        bin_read_t$83,
        bin_read_t$82,
        bin_writer_t$32,
        bin_reader_t$32,
        bin_t$32,
        compare$25,
        hash_fold_t$10,
        t_of_sexp$28,
        sexp_of_t$36],
       [0,
        t_of_sexp$29,
        sexp_of_t$37,
        bin_shape_t$39,
        bin_size_t$41,
        bin_write_t$41,
        bin_read_t$85,
        bin_read_t$84,
        bin_writer_t$33,
        bin_reader_t$33,
        bin_t$33,
        of_value,
        of_text,
        value$1,
        text],
       of_sexp_allow_extra_fields_recursively,
       [0,
        [0,
         t_of_sexp$26,
         sexp_of_t$34,
         bin_size_t$39,
         bin_write_t$39,
         bin_read_t$81,
         bin_read_t$80,
         bin_shape_t$37,
         bin_writer_t$31,
         bin_reader_t$31,
         bin_t$31,
         hash_fold_t$8,
         hash$8,
         compare$23]]];
    caml_register_global(4354,Core_kernel_Sexp,"Core_kernel__Sexp");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$146);
    caml_call1(Expect_test_collector[4][1],cst_src_hash_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$147,cst$49);
    function Make_backend(Table)
     {function key(t){return t[1]}
      function value(t){return t[2]}
      function sexp_of_t(sexp_of_key,sexp_of_data,t)
       {var _bca_=t[2];
        return sexp_of_t$33
                (function(param)
                  {var
                    v0=param[1],
                    v1=param[2],
                    v0$0=caml_call1(sexp_of_key,v0),
                    v1$0=caml_call1(sexp_of_data,v1);
                   return [1,[0,v0$0,[0,v1$0,0]]]},
                 _bca_)}
      function invariant(t)
       {var _bb8_=caml_call1(Table[28],t[3]);
        if(caml_call2(_aS_,length$13(t[2]),_bb8_))
         {var
           _bb9_=caml_call1(Table[77],t[3]),
           _bb__=[0,caml_call1(Table[28],t[3])],
           keys=caml_call3(Table[4],0,_bb__,_bb9_),
           _bb$_=
            function(kv)
             {var key=kv[1],match=caml_call2(Table[52],t[3],key);
              if(match)
               {if(caml_call2(Table[30],keys,key))
                 throw [0,Assert_failure,_z4_];
                return caml_call3(Table[34],keys,key,0)}
              throw [0,Assert_failure,_z5_]};
          return iter$14(t[2],_bb$_)}
        throw [0,Assert_failure,_z6_]}
      function create(opt,_bb5_,hashable)
       {if(opt)var sth=opt[1],growth_allowed=sth;else var growth_allowed=1;
        if(_bb5_)var sth$0=_bb5_[1],size=sth$0;else var size=16;
        var
         _bb6_=caml_call1(Base_Hashable[4],hashable),
         _bb7_=caml_call3(Table[4],[0,growth_allowed],[0,size],_bb6_);
        return [0,0,create$11(0),_bb7_]}
      function read(t,f)
       {t[1] = caml_call2(_aw_,t[1],1);
        function _bb4_(param){t[1] = caml_call2(_ax_,t[1],1);return 0}
        return caml_call2(Base_Exn[12],f,_bb4_)}
      function ensure_can_modify(t)
       {var _bb3_=caml_call2(_aT_,t[1],0);
        return _bb3_
                ?caml_call1
                  (_a__,
                   cst_It_is_an_error_to_modify_a_Hash_queue_t_while_iterating_over_it)
                :_bb3_}
      function clear(t)
       {ensure_can_modify(t);clear$1(t[2]);return caml_call1(Table[16],t[3])}
      function length(t){return caml_call1(Table[28],t[3])}
      function is_empty(t){return caml_call2(_aS_,length(t),0)}
      function lookup(t,k)
       {var match=caml_call2(Table[52],t[3],k);
        if(match){var elt=match[1];return [0,caml_call1(Elt[1],elt)[2]]}
        return 0}
      function lookup_exn(t,k)
       {var _bb2_=caml_call2(Table[53],t[3],k);
        return caml_call1(Elt[1],_bb2_)[2]}
      function mem(t,k){return caml_call2(Table[30],t[3],k)}
      function to_list(t){return caml_call2(_qg_,to_list$5(t[2]),value)}
      function to_array(t)
       {return caml_call2(map$0,caml_call1(_y0_,t[2]),value)}
      function for_all(t,f)
       {return read
                (t,
                 function(param)
                  {function _bb1_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_yY_,t[2],_bb1_)})}
      function exists(t,f)
       {return read
                (t,
                 function(param)
                  {function _bb0_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_yU_,t[2],_bb0_)})}
      function find_map(t,f)
       {return read
                (t,
                 function(param)
                  {function _bbZ_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_yW_,t[2],_bbZ_)})}
      function find(t,f)
       {return read
                (t,
                 function(param)
                  {function _bbY_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_yd_,caml_call2(_yV_,t[2],_bbY_),value)})}
      function enqueue(t,back_or_front,key,value)
       {ensure_can_modify(t);
        if(caml_call2(Table[30],t[3],key))return 975255060;
        var
         contents=[0,key,value],
         elt=
          109975721 <= back_or_front
           ?add$9(t[2],contents)
           :insert_last(t[2],contents);
        caml_call3(Table[34],t[3],key,elt);
        return 17724}
      function enqueue_back(t)
       {var _bbV_=-1055860185;
        return function(_bbW_,_bbX_){return enqueue(t,_bbV_,_bbW_,_bbX_)}}
      function enqueue_front(t)
       {var _bbS_=109975721;
        return function(_bbT_,_bbU_){return enqueue(t,_bbS_,_bbT_,_bbU_)}}
      function enqueue_exn(t,back_or_front,key,value)
       {var match=enqueue(t,back_or_front,key,value);
        if(975255060 <= match)
         {var
           _bbR_=
            [0,caml_call1(sexp_of_t$35,caml_call2(Table[15],t[3],key)),0];
          return caml_call1
                  (_ba_,
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7],
                       cst_Hash_queue_enqueue_exn_duplicate_key),
                     _bbR_]])}
        return 0}
      function enqueue_back_exn(t)
       {var _bbO_=-1055860185;
        return function(_bbP_,_bbQ_){return enqueue_exn(t,_bbO_,_bbP_,_bbQ_)}}
      function enqueue_front_exn(t)
       {var _bbL_=109975721;
        return function(_bbM_,_bbN_){return enqueue_exn(t,_bbL_,_bbM_,_bbN_)}}
      function lookup_and_move_to_back_exn(t,key)
       {ensure_can_modify(t);
        var elt=caml_call2(Table[53],t[3],key);
        move_to_back(t[2],elt);
        return caml_call1(Elt[1],elt)[2]}
      function lookup_and_move_to_back(t,key)
       {ensure_can_modify(t);
        function _bbJ_(elt)
         {move_to_back(t[2],elt);return caml_call1(Elt[1],elt)[2]}
        var _bbK_=caml_call2(Table[52],t[3],key);
        return caml_call2(include$30[34][4][3],_bbK_,_bbJ_)}
      function lookup_and_move_to_front_exn(t,key)
       {ensure_can_modify(t);
        var elt=caml_call2(Table[53],t[3],key);
        move_to_front(t[2],elt);
        return caml_call1(Elt[1],elt)[2]}
      function lookup_and_move_to_front(t,key)
       {ensure_can_modify(t);
        function _bbH_(elt)
         {move_to_front(t[2],elt);return caml_call1(Elt[1],elt)[2]}
        var _bbI_=caml_call2(Table[52],t[3],key);
        return caml_call2(include$30[34][4][3],_bbI_,_bbH_)}
      function dequeue_with_key(t,back_or_front)
       {ensure_can_modify(t);
        var
         maybe_kv=
          109975721 <= back_or_front?remove_one(t[2]):remove_last(t[2]);
        if(maybe_kv)
         {var kv=maybe_kv[1];
          caml_call2(Table[31],t[3],kv[1]);
          return [0,[0,kv[1],kv[2]]]}
        return 0}
      function dequeue_with_key_exn(t,back_or_front)
       {var match=dequeue_with_key(t,back_or_front);
        if(match)
         {var match$0=match[1],v=match$0[2],k=match$0[1];return [0,k,v]}
        return caml_call1
                (_ba_,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],
                   cst_Hash_queue_dequeue_with_key_empty_queue))}
      function dequeue_back_with_key(t)
       {return dequeue_with_key(t,-1055860185)}
      function dequeue_back_with_key_exn(t)
       {return dequeue_with_key_exn(t,-1055860185)}
      function dequeue_front_with_key(t){return dequeue_with_key(t,109975721)}
      function dequeue_front_with_key_exn(t)
       {return dequeue_with_key_exn(t,109975721)}
      function dequeue(t,back_or_front)
       {var match=dequeue_with_key(t,back_or_front);
        if(match){var match$0=match[1],v=match$0[2];return [0,v]}
        return 0}
      function dequeue_back(t){return dequeue(t,-1055860185)}
      function dequeue_front(t){return dequeue(t,109975721)}
      function first_with_key(t)
       {var match=first$0(t[2]);
        if(match)
         {var match$0=match[1],key=match$0[1],value=match$0[2];
          return [0,[0,key,value]]}
        return 0}
      function first(t)
       {var match=first$0(t[2]);
        if(match){var kv=match[1];return [0,kv[2]]}
        return 0}
      function dequeue_exn(t,back_or_front)
       {var match=dequeue(t,back_or_front);
        if(match){var v=match[1];return v}
        return caml_call1
                (_ba_,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],
                   cst_Hash_queue_dequeue_exn_empty_queue))}
      function dequeue_back_exn(t){return dequeue_exn(t,-1055860185)}
      function dequeue_front_exn(t){return dequeue_exn(t,109975721)}
      function keys(t){return caml_call2(_qg_,to_list$5(t[2]),key)}
      function iteri(t,f)
       {return read
                (t,
                 function(param)
                  {function _bbG_(kv){return caml_call2(f,kv[1],kv[2])}
                   return iter$14(t[2],_bbG_)})}
      function iter(t,f)
       {return iteri(t,function(param,data){return caml_call1(f,data)})}
      function foldi(t,init,f)
       {return read
                (t,
                 function(param)
                  {function _bbF_(ac,kv){return caml_call3(f,ac,kv[1],kv[2])}
                   return caml_call3(_yX_,t[2],init,_bbF_)})}
      function fold(t,init,f)
       {return foldi
                (t,init,function(ac,param,data){return caml_call2(f,ac,data)})}
      function count(t,f){return caml_call3(_ip_,fold,t,f)}
      function sum(m,t,f){return caml_call4(_iu_,fold,m,t,f)}
      function min_elt(t,compare){return caml_call3(_iq_,fold,t,compare)}
      function max_elt(t,compare){return caml_call3(_ir_,fold,t,compare)}
      function fold_result(t,init,f){return caml_call4(_iv_,fold,init,f,t)}
      function fold_until(t,init,f)
       {var _bbD_=caml_call3(_iw_,fold,init,f);
        return function(_bbE_){return caml_call2(_bbD_,_bbE_,t)}}
      function dequeue_all(t,f)
       {for(;;)
         {var match=dequeue_front(t);
          if(match){var v=match[1];caml_call1(f,v);continue}
          return 0}}
      function remove(t,k)
       {ensure_can_modify(t);
        var match=caml_call2(Table[52],t[3],k);
        if(match)
         {var elt=match[1];
          remove$9(t[2],elt);
          var _bbC_=caml_call1(Elt[1],elt)[1];
          caml_call2(Table[31],t[3],_bbC_);
          return 17724}
        return -725941051}
      function remove_exn(t,k)
       {ensure_can_modify(t);
        var match=remove(t,k);
        if(17724 <= match)return 0;
        var _bbB_=[0,caml_call1(sexp_of_t$35,caml_call2(Table[15],t[3],k)),0];
        return caml_call1
                (_ba_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],
                     cst_Hash_queue_remove_exn_unknown_key),
                   _bbB_]])}
      function replace(t,k,v)
       {ensure_can_modify(t);
        var match=caml_call2(Table[52],t[3],k);
        if(match){var elt=match[1];caml_call1(Elt[1],elt)[2] = v;return 17724}
        return -725941051}
      function replace_exn(t,k,v)
       {ensure_can_modify(t);
        var match=replace(t,k,v);
        if(17724 <= match)return 0;
        var _bbA_=[0,caml_call1(sexp_of_t$35,caml_call2(Table[15],t[3],k)),0];
        return caml_call1
                (_ba_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],
                     cst_Hash_queue_replace_exn_unknown_key),
                   _bbA_]])}
      function drop(opt,t,back_or_front)
       {if(opt)var sth=opt[1],n=sth;else var n=1;
        if(caml_call2(_aU_,n,length(t)))return clear(t);
        var _bby_=1;
        if(! (n < 1))
         {var for$0=_bby_;
          for(;;)
           {dequeue_with_key(t,back_or_front);
            var _bbz_=for$0 + 1 | 0;
            if(n !== for$0){var for$0=_bbz_;continue}
            break}}
        return 0}
      function drop_back(n,t){return drop(n,t,-1055860185)}
      function drop_front(n,t){return drop(n,t,109975721)}
      function Make(_bbx_)
       {function sexp_of_t$0(of_data,v){return sexp_of_t(_bbx_[2],of_data,v)}
        var hashable=caml_call1(Base_Hashable[3],_bbx_);
        function create$0(growth_allowed,size,param)
         {return create(growth_allowed,size,hashable)}
        return [0,
                length,
                is_empty,
                iter,
                fold,
                fold_result,
                fold_until,
                exists,
                for_all,
                count,
                sum,
                find,
                find_map,
                to_list,
                to_array,
                min_elt,
                max_elt,
                invariant,
                create$0,
                clear,
                mem,
                lookup,
                lookup_exn,
                enqueue,
                enqueue_exn,
                enqueue_back,
                enqueue_back_exn,
                enqueue_front,
                enqueue_front_exn,
                lookup_and_move_to_back,
                lookup_and_move_to_back_exn,
                lookup_and_move_to_front,
                lookup_and_move_to_front_exn,
                first,
                first_with_key,
                keys,
                dequeue,
                dequeue_exn,
                dequeue_back,
                dequeue_back_exn,
                dequeue_front,
                dequeue_front_exn,
                dequeue_with_key,
                dequeue_with_key_exn,
                dequeue_back_with_key,
                dequeue_back_with_key_exn,
                dequeue_front_with_key,
                dequeue_front_with_key_exn,
                dequeue_all,
                remove,
                remove_exn,
                replace,
                replace_exn,
                drop,
                drop_front,
                drop_back,
                iteri,
                foldi,
                sexp_of_t$0]}
      return [0,
              sexp_of_t,
              length,
              is_empty,
              iter,
              fold,
              fold_result,
              fold_until,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_list,
              to_array,
              min_elt,
              max_elt,
              invariant,
              create,
              clear,
              mem,
              lookup,
              lookup_exn,
              enqueue,
              enqueue_exn,
              enqueue_back,
              enqueue_back_exn,
              enqueue_front,
              enqueue_front_exn,
              lookup_and_move_to_back,
              lookup_and_move_to_back_exn,
              lookup_and_move_to_front,
              lookup_and_move_to_front_exn,
              first,
              first_with_key,
              keys,
              dequeue,
              dequeue_exn,
              dequeue_back,
              dequeue_back_exn,
              dequeue_front,
              dequeue_front_exn,
              dequeue_with_key,
              dequeue_with_key_exn,
              dequeue_back_with_key,
              dequeue_back_with_key_exn,
              dequeue_front_with_key,
              dequeue_front_with_key_exn,
              dequeue_all,
              remove,
              remove_exn,
              replace,
              replace_exn,
              drop,
              drop_front,
              drop_back,
              iteri,
              foldi,
              Make]}
    var
     include$43=Make_backend(Core_kernel_Hashtbl),
     _A1_=include$43[59],
     _z7_=include$43[1],
     _z8_=include$43[2],
     _z9_=include$43[3],
     _z__=include$43[4],
     _z$_=include$43[5],
     _Aa_=include$43[6],
     _Ab_=include$43[7],
     _Ac_=include$43[8],
     _Ad_=include$43[9],
     _Ae_=include$43[10],
     _Af_=include$43[11],
     _Ag_=include$43[12],
     _Ah_=include$43[13],
     _Ai_=include$43[14],
     _Aj_=include$43[15],
     _Ak_=include$43[16],
     _Al_=include$43[17],
     _Am_=include$43[18],
     _An_=include$43[19],
     _Ao_=include$43[20],
     _Ap_=include$43[21],
     _Aq_=include$43[22],
     _Ar_=include$43[23],
     _As_=include$43[24],
     _At_=include$43[25],
     _Au_=include$43[26],
     _Av_=include$43[27],
     _Aw_=include$43[28],
     _Ax_=include$43[29],
     _Ay_=include$43[30],
     _Az_=include$43[31],
     _AA_=include$43[32],
     _AB_=include$43[33],
     _AC_=include$43[34],
     _AD_=include$43[35],
     _AE_=include$43[36],
     _AF_=include$43[37],
     _AG_=include$43[38],
     _AH_=include$43[39],
     _AI_=include$43[40],
     _AJ_=include$43[41],
     _AK_=include$43[42],
     _AL_=include$43[43],
     _AM_=include$43[44],
     _AN_=include$43[45],
     _AO_=include$43[46],
     _AP_=include$43[47],
     _AQ_=include$43[48],
     _AR_=include$43[49],
     _AS_=include$43[50],
     _AT_=include$43[51],
     _AU_=include$43[52],
     _AV_=include$43[53],
     _AW_=include$43[54],
     _AX_=include$43[55],
     _AY_=include$43[56],
     _AZ_=include$43[57],
     _A0_=include$43[58];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$148);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Hash_queue=
      [0,
       Make_backend,
       _z7_,
       _z8_,
       _z9_,
       _z__,
       _z$_,
       _Aa_,
       _Ab_,
       _Ac_,
       _Ad_,
       _Ae_,
       _Af_,
       _Ag_,
       _Ah_,
       _Ai_,
       _Aj_,
       _Ak_,
       _Al_,
       _Am_,
       _An_,
       _Ao_,
       _Ap_,
       _Aq_,
       _Ar_,
       _As_,
       _At_,
       _Au_,
       _Av_,
       _Aw_,
       _Ax_,
       _Ay_,
       _Az_,
       _AA_,
       _AB_,
       _AC_,
       _AD_,
       _AE_,
       _AF_,
       _AG_,
       _AH_,
       _AI_,
       _AJ_,
       _AK_,
       _AL_,
       _AM_,
       _AN_,
       _AO_,
       _AP_,
       _AQ_,
       _AR_,
       _AS_,
       _AT_,
       _AU_,
       _AV_,
       _AW_,
       _AX_,
       _AY_,
       _AZ_,
       _A0_,
       _A1_];
    caml_register_global
     (4355,Core_kernel_Hash_queue,"Core_kernel__Hash_queue");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$149);
    caml_call1(Expect_test_collector[4][1],cst_src_hashable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$150,cst$50);
    function Make_plain$2(T)
     {var
       hash_fold_t=T[1],
       compare=T[2],
       hash=T[4],
       Table=caml_call1(Core_kernel_Hashtbl[81],[0,T[2],T[3],T[4]]),
       Hash_set=_tH_([0,T[2],T[3],T[4]]),
       Hash_queue=caml_call1(_A1_,[0,T[2],T[3],T[4]]),
       hashable=Table[2];
      return [0,compare,hash_fold_t,hash,hashable,Table,Hash_set,Hash_queue]}
    function Make_plain_and_derive_hash_fold_t(T)
     {var compare=T[1],sexp_of_t=T[2],hash=T[3];
      function hash_fold_t(state,t)
       {return caml_call2(_z_,state,caml_call1(hash,t))}
      return Make_plain$2([0,hash_fold_t,compare,sexp_of_t,hash])}
    function Make$4(T)
     {var
       hash_fold_t=T[1],
       compare=T[3],
       hash=T[5],
       Table=caml_call1(Core_kernel_Hashtbl[82],[0,T[2],T[3],T[4],T[5]]),
       Hash_set=_tG_([0,T[2],T[3],T[4],T[5]]),
       Hash_queue=caml_call1(_A1_,[0,T[3],T[4],T[5]]),
       hashable=Table[2];
      return [0,compare,hash_fold_t,hash,hashable,Table,Hash_set,Hash_queue]}
    function Make_and_derive_hash_fold_t(T)
     {var t_of_sexp=T[1],compare=T[2],sexp_of_t=T[3],hash=T[4];
      function hash_fold_t(state,t)
       {return caml_call2(_z_,state,caml_call1(hash,t))}
      return Make$4([0,hash_fold_t,t_of_sexp,compare,sexp_of_t,hash])}
    function Make_binable(T)
     {var
       Table=
        caml_call1
         (Core_kernel_Hashtbl[83],
          [0,T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[10],T[11],T[12],T[13]]),
       Hash_set=
        _tF_
         ([0,T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[10],T[11],T[12],T[13]]),
       Hash_queue=caml_call1(_A1_,[0,T[11],T[12],T[13]]),
       hash_fold_t=T[1],
       hash=T[13],
       hashable=Table[2];
      return [0,hash_fold_t,hash,hashable,Table,Hash_set,Hash_queue]}
    function Make_binable_and_derive_hash_fold_t(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[9],
       compare=T[10],
       sexp_of_t=T[11],
       hash=T[12];
      function hash_fold_t(state,t)
       {return caml_call2(_z_,state,caml_call1(hash,t))}
      return Make_binable
              ([0,
                hash_fold_t,
                bin_size_t,
                bin_write_t,
                bin_read_t,
                bin_read_t$0,
                bin_shape_t,
                bin_writer_t,
                bin_reader_t,
                bin_t,
                t_of_sexp,
                compare,
                sexp_of_t,
                hash])}
    function Make$5(Key)
     {var Table=caml_call1(Core_kernel_Hashtbl[83],Key),Hash_set=_tF_(Key);
      return [0,
              [0,
               Table[79],
               Table[1],
               Table[80],
               Table[81],
               Table[82],
               Table[83],
               Table[84],
               Table[85],
               Table[86],
               Table[87]],
              [0,
               Hash_set[6],
               Hash_set[1],
               Hash_set[7],
               Hash_set[8],
               Hash_set[9],
               Hash_set[10],
               Hash_set[11],
               Hash_set[12],
               Hash_set[13],
               Hash_set[14]]]}
    var V1$13=[0,Make$5],Stable$3=[0,V1$13];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$151);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Hashable=
      [0,
       Make_plain$2,
       Make_plain_and_derive_hash_fold_t,
       Make$4,
       Make_and_derive_hash_fold_t,
       Make_binable,
       Make_binable_and_derive_hash_fold_t,
       Stable$3];
    caml_register_global(4356,Core_kernel_Hashable,"Core_kernel__Hashable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$152);
    caml_call1(Expect_test_collector[4][1],cst_src_identifiable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$153,cst$51);
    function Make$6(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[12],
       sexp_of_t=T[13],
       of_string=T[14],
       to_string=T[15],
       module_name=T[16],
       _bbv_=
        _xB_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[12],T[13]]),
       symbol=_bbv_[1],
       symbol$0=_bbv_[2],
       symbol$1=_bbv_[3],
       symbol$2=_bbv_[4],
       symbol$3=_bbv_[5],
       symbol$4=_bbv_[6],
       equal=_bbv_[7],
       compare=_bbv_[8],
       min=_bbv_[9],
       max=_bbv_[10],
       ascending=_bbv_[11],
       descending=_bbv_[12],
       between=_bbv_[13],
       clamp_exn=_bbv_[14],
       clamp=_bbv_[15],
       validate_lbound=_bbv_[16],
       validate_ubound=_bbv_[17],
       validate_bound=_bbv_[18],
       Replace_polymorphic_compare=_bbv_[19],
       comparator=_bbv_[20],
       Map=_bbv_[21],
       Set=_bbv_[22],
       _bbw_=
        Make_binable
         ([0,
           T[10],
           T[1],
           T[2],
           T[3],
           T[4],
           T[5],
           T[6],
           T[7],
           T[8],
           T[12],
           T[9],
           T[13],
           T[11]]),
       hash_fold_t=_bbw_[1],
       hash=_bbw_[2],
       hashable=_bbw_[3],
       Table=_bbw_[4],
       Hash_set=_bbw_[5],
       Hash_queue=_bbw_[6],
       include=caml_call1(Base_Pretty_printer[2],[0,T[16],T[15]]),
       pp=include[1];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              module_name,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              pp]}
    function Make_using_comparator$2(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[12],
       sexp_of_t=T[13],
       of_string=T[15],
       to_string=T[16],
       module_name=T[17],
       _bbt_=
        _xA_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[12],T[13],T[14]]),
       symbol=_bbt_[1],
       symbol$0=_bbt_[2],
       symbol$1=_bbt_[3],
       symbol$2=_bbt_[4],
       symbol$3=_bbt_[5],
       symbol$4=_bbt_[6],
       equal=_bbt_[7],
       compare=_bbt_[8],
       min=_bbt_[9],
       max=_bbt_[10],
       ascending=_bbt_[11],
       descending=_bbt_[12],
       between=_bbt_[13],
       clamp_exn=_bbt_[14],
       clamp=_bbt_[15],
       validate_lbound=_bbt_[16],
       validate_ubound=_bbt_[17],
       validate_bound=_bbt_[18],
       Replace_polymorphic_compare=_bbt_[19],
       comparator=_bbt_[20],
       Map=_bbt_[21],
       Set=_bbt_[22],
       _bbu_=
        Make_binable
         ([0,
           T[10],
           T[1],
           T[2],
           T[3],
           T[4],
           T[5],
           T[6],
           T[7],
           T[8],
           T[12],
           T[9],
           T[13],
           T[11]]),
       hash_fold_t=_bbu_[1],
       hash=_bbu_[2],
       hashable=_bbu_[3],
       Table=_bbu_[4],
       Hash_set=_bbu_[5],
       Hash_queue=_bbu_[6],
       include=caml_call1(Base_Pretty_printer[2],[0,T[17],T[16]]),
       pp=include[1];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              module_name,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              pp]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$154);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _A2_(M,B)
     {var
       hash_fold_t=M[1],
       hash=M[2],
       t_of_sexp=M[3],
       sexp_of_t=M[4],
       of_string=M[5],
       to_string=M[6],
       compare=M[14],
       pp=M[26],
       bin_size_t=B[1],
       bin_write_t=B[2],
       bin_read_t=B[3],
       bin_read_t$0=B[4],
       bin_shape_t=B[5],
       bin_writer_t=B[6],
       bin_reader_t=B[7],
       bin_t=B[8],
       _bbs_=
        _xy_
         ([0,
           M[7],
           M[8],
           M[9],
           M[10],
           M[11],
           M[12],
           M[13],
           M[14],
           M[15],
           M[16],
           M[17],
           M[18],
           M[19],
           M[20],
           M[21],
           M[22],
           M[23],
           M[24],
           M[25]],
          [0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t]),
       symbol=_bbs_[1],
       symbol$0=_bbs_[2],
       symbol$1=_bbs_[3],
       symbol$2=_bbs_[4],
       symbol$3=_bbs_[5],
       symbol$4=_bbs_[6],
       equal=_bbs_[7],
       compare$0=_bbs_[8],
       min=_bbs_[9],
       max=_bbs_[10],
       ascending=_bbs_[11],
       descending=_bbs_[12],
       between=_bbs_[13],
       clamp_exn=_bbs_[14],
       clamp=_bbs_[15],
       validate_lbound=_bbs_[16],
       validate_ubound=_bbs_[17],
       validate_bound=_bbs_[18],
       Replace_polymorphic_compare=_bbs_[19],
       comparator=_bbs_[20],
       Map=_bbs_[21],
       Set=_bbs_[22],
       include=
        Make_binable
         ([0,
           hash_fold_t,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           compare,
           sexp_of_t,
           hash]),
       hash_fold_t$0=include[1],
       hash$0=include[2],
       hashable=include[3],
       Table=include[4],
       Hash_set=include[5],
       Hash_queue=include[6];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              pp,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare$0,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t$0,
              hash$0,
              hashable,
              Table,
              Hash_set,
              Hash_queue]}
    function _A3_(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       comparator=T[12],
       of_string=T[13],
       to_string=T[14],
       hash=T[15],
       module_name=T[16];
      function hash_fold_t(state,t)
       {return caml_call2(_z_,state,caml_call1(hash,t))}
      var
       _bbr_=
        Make_using_comparator$2
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           compare,
           hash_fold_t,
           hash,
           t_of_sexp,
           sexp_of_t,
           comparator,
           of_string,
           to_string,
           module_name]);
      return [0,
              _bbr_[1],
              _bbr_[2],
              _bbr_[3],
              _bbr_[4],
              _bbr_[5],
              _bbr_[6],
              _bbr_[7],
              _bbr_[8],
              _bbr_[9],
              _bbr_[10],
              _bbr_[11],
              _bbr_[12],
              _bbr_[42],
              _bbr_[14],
              _bbr_[15],
              _bbr_[16],
              _bbr_[17],
              _bbr_[18],
              _bbr_[19],
              _bbr_[20],
              _bbr_[21],
              _bbr_[22],
              _bbr_[23],
              _bbr_[24],
              _bbr_[25],
              _bbr_[26],
              _bbr_[27],
              _bbr_[28],
              _bbr_[29],
              _bbr_[30],
              _bbr_[31],
              _bbr_[32],
              _bbr_[33],
              _bbr_[34],
              _bbr_[35],
              _bbr_[36],
              _bbr_[37],
              _bbr_[38],
              _bbr_[39],
              _bbr_[40],
              _bbr_[41]]}
    function _A4_(_bbp_)
     {var _bbq_=Make_using_comparator$2(_bbp_);
      return [0,
              _bbq_[1],
              _bbq_[2],
              _bbq_[3],
              _bbq_[4],
              _bbq_[5],
              _bbq_[6],
              _bbq_[7],
              _bbq_[8],
              _bbq_[9],
              _bbq_[10],
              _bbq_[11],
              _bbq_[12],
              _bbq_[42],
              _bbq_[14],
              _bbq_[15],
              _bbq_[16],
              _bbq_[17],
              _bbq_[18],
              _bbq_[19],
              _bbq_[20],
              _bbq_[21],
              _bbq_[22],
              _bbq_[23],
              _bbq_[24],
              _bbq_[25],
              _bbq_[26],
              _bbq_[27],
              _bbq_[28],
              _bbq_[29],
              _bbq_[30],
              _bbq_[31],
              _bbq_[32],
              _bbq_[33],
              _bbq_[34],
              _bbq_[35],
              _bbq_[36],
              _bbq_[37],
              _bbq_[38],
              _bbq_[39],
              _bbq_[40],
              _bbq_[41]]}
    function _A5_(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       of_string=T[12],
       to_string=T[13],
       hash=T[14],
       module_name=T[15];
      function hash_fold_t(state,t)
       {return caml_call2(_z_,state,caml_call1(hash,t))}
      var
       _bbo_=
        Make$6
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           compare,
           hash_fold_t,
           hash,
           t_of_sexp,
           sexp_of_t,
           of_string,
           to_string,
           module_name]);
      return [0,
              _bbo_[1],
              _bbo_[2],
              _bbo_[3],
              _bbo_[4],
              _bbo_[5],
              _bbo_[6],
              _bbo_[7],
              _bbo_[8],
              _bbo_[9],
              _bbo_[10],
              _bbo_[11],
              _bbo_[12],
              _bbo_[42],
              _bbo_[14],
              _bbo_[15],
              _bbo_[16],
              _bbo_[17],
              _bbo_[18],
              _bbo_[19],
              _bbo_[20],
              _bbo_[21],
              _bbo_[22],
              _bbo_[23],
              _bbo_[24],
              _bbo_[25],
              _bbo_[26],
              _bbo_[27],
              _bbo_[28],
              _bbo_[29],
              _bbo_[30],
              _bbo_[31],
              _bbo_[32],
              _bbo_[33],
              _bbo_[34],
              _bbo_[35],
              _bbo_[36],
              _bbo_[37],
              _bbo_[38],
              _bbo_[39],
              _bbo_[40],
              _bbo_[41]]}
    function _A6_(_bbm_)
     {var _bbn_=Make$6(_bbm_);
      return [0,
              _bbn_[1],
              _bbn_[2],
              _bbn_[3],
              _bbn_[4],
              _bbn_[5],
              _bbn_[6],
              _bbn_[7],
              _bbn_[8],
              _bbn_[9],
              _bbn_[10],
              _bbn_[11],
              _bbn_[12],
              _bbn_[42],
              _bbn_[14],
              _bbn_[15],
              _bbn_[16],
              _bbn_[17],
              _bbn_[18],
              _bbn_[19],
              _bbn_[20],
              _bbn_[21],
              _bbn_[22],
              _bbn_[23],
              _bbn_[24],
              _bbn_[25],
              _bbn_[26],
              _bbn_[27],
              _bbn_[28],
              _bbn_[29],
              _bbn_[30],
              _bbn_[31],
              _bbn_[32],
              _bbn_[33],
              _bbn_[34],
              _bbn_[35],
              _bbn_[36],
              _bbn_[37],
              _bbn_[38],
              _bbn_[39],
              _bbn_[40],
              _bbn_[41]]}
    var
     Core_kernel_Identifiable=
      [0,
       function(T)
        {var
          sexp_of_t=T[4],
          of_string=T[5],
          to_string=T[6],
          _bbk_=Make_plain$1([0,T[1],T[4]]),
          symbol=_bbk_[1],
          symbol$0=_bbk_[2],
          symbol$1=_bbk_[3],
          symbol$2=_bbk_[4],
          symbol$3=_bbk_[5],
          symbol$4=_bbk_[6],
          equal=_bbk_[7],
          min=_bbk_[9],
          max=_bbk_[10],
          ascending=_bbk_[11],
          descending=_bbk_[12],
          between=_bbk_[13],
          clamp_exn=_bbk_[14],
          clamp=_bbk_[15],
          comparator=_bbk_[16],
          validate_lbound=_bbk_[17],
          validate_ubound=_bbk_[18],
          validate_bound=_bbk_[19],
          Replace_polymorphic_compare=_bbk_[20],
          Map=_bbk_[21],
          Set=_bbk_[22],
          _bbl_=Make_plain$2([0,T[2],T[1],T[4],T[3]]),
          compare=_bbl_[1],
          hash_fold_t=_bbl_[2],
          hash=_bbl_[3],
          hashable=_bbl_[4],
          Table=_bbl_[5],
          Hash_set=_bbl_[6],
          Hash_queue=_bbl_[7],
          include=caml_call1(Base_Pretty_printer[2],[0,T[7],T[6]]),
          pp=include[1];
         return [0,
                 sexp_of_t,
                 of_string,
                 to_string,
                 pp,
                 symbol,
                 symbol$0,
                 symbol$1,
                 symbol$2,
                 symbol$3,
                 symbol$4,
                 equal,
                 min,
                 max,
                 ascending,
                 descending,
                 between,
                 clamp_exn,
                 clamp,
                 comparator,
                 validate_lbound,
                 validate_ubound,
                 validate_bound,
                 Replace_polymorphic_compare,
                 Map,
                 Set,
                 compare,
                 hash_fold_t,
                 hash,
                 hashable,
                 Table,
                 Hash_set,
                 Hash_queue]},
       _A6_,
       _A5_,
       _A4_,
       _A3_,
       _A2_];
    caml_register_global
     (4358,Core_kernel_Identifiable,"Core_kernel__Identifiable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$155);
    caml_call1(Expect_test_collector[4][1],cst_src_bool_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$156,cst$52);
    var
     _A7_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$98),0,_b6_],0],
     _A8_=caml_call1(Bin_prot_Shape[4][1],cst_src_bool_ml_3_0),
     group$48=caml_call2(Bin_prot_Shape[6],_A8_,_A7_),
     _A9_=caml_call1(Bin_prot_Shape[2][1],cst_t$99),
     bin_shape_t$40=caml_call1(caml_call2(Bin_prot_Shape[14],group$48,_A9_),0),
     Typename_of_t$3=caml_call1(Typerep_lib_Make_typename[1],[0,name$12]),
     typename_of_t$2=Typename_of_t$3[2],
     name_of_t=Typename_of_t$3[1],
     typerep_of_t$3=[9,[0,name_of_t,[0,_fj_]]],
     _A__=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$100),0,bin_shape_t$40],0],
     _A$_=caml_call1(Bin_prot_Shape[4][1],cst_src_bool_ml_8_6),
     group$49=caml_call2(Bin_prot_Shape[6],_A$_,_A__),
     _Ba_=caml_call1(Bin_prot_Shape[2][1],cst_t$101),
     bin_shape_t$41=caml_call1(caml_call2(Bin_prot_Shape[14],group$49,_Ba_),0),
     bin_writer_t$34=[0,_bn_,_b8_],
     bin_reader_t$34=[0,_b__,_b$_],
     bin_t$34=[0,bin_shape_t$41,bin_writer_t$34,bin_reader_t$34],
     _Bb_=
      [0,
       _bn_,
       _b8_,
       _b__,
       _b$_,
       bin_shape_t$41,
       bin_writer_t$34,
       bin_reader_t$34,
       bin_t$34],
     _Bc_=
      [0,
       Base_Bool[2],
       Base_Bool[3],
       Base_Bool[4],
       Base_Bool[5],
       Base_Bool[6],
       Base_Bool[7],
       Base_Bool[8],
       Base_Bool[9],
       Base_Bool[10],
       Base_Bool[11],
       Base_Bool[12],
       Base_Bool[13],
       Base_Bool[14],
       Base_Bool[15],
       Base_Bool[16],
       Base_Bool[17],
       Base_Bool[18],
       Base_Bool[19],
       Base_Bool[20],
       Base_Bool[21],
       Base_Bool[22],
       Base_Bool[23],
       Base_Bool[24],
       Base_Bool[25],
       Base_Bool[26],
       Base_Bool[27]],
     _Bd_=function(_bbj_){return _A2_(_Bc_,_bbj_)}(_Bb_),
     _Be_=_Bd_[1],
     _Bf_=_Bd_[2],
     _Bg_=_Bd_[3],
     _Bh_=_Bd_[4],
     _Bi_=_Bd_[5],
     _BF_=Base_Bool[15],
     _BG_=Base_Bool[14],
     _BP_=Base_Bool[5],
     _BQ_=Base_Bool[4],
     _BR_=Base_Bool[3],
     _BS_=Base_Bool[2],
     _Bj_=_Bd_[6],
     _Bk_=_Bd_[7],
     _Bl_=_Bd_[8],
     _Bm_=_Bd_[34],
     _Bn_=_Bd_[35],
     _Bo_=_Bd_[38],
     _Bp_=_Bd_[39],
     _Bq_=_Bd_[40],
     _Br_=_Bd_[41],
     _Bs_=Base_Bool[28],
     _Bt_=Base_Bool[27],
     _Bu_=Base_Bool[26],
     _Bv_=Base_Bool[25],
     _Bw_=Base_Bool[24],
     _Bx_=Base_Bool[23],
     _By_=Base_Bool[22],
     _Bz_=Base_Bool[21],
     _BA_=Base_Bool[20],
     _BB_=Base_Bool[19],
     _BC_=Base_Bool[18],
     _BD_=Base_Bool[17],
     _BE_=Base_Bool[16],
     _BH_=Base_Bool[13],
     _BI_=Base_Bool[12],
     _BJ_=Base_Bool[11],
     _BK_=Base_Bool[10],
     _BL_=Base_Bool[9],
     _BM_=Base_Bool[8],
     _BN_=Base_Bool[7],
     _BO_=Base_Bool[6],
     _BT_=Base_Bool[1],
     _BU_=Base_quickcheck_Generator[2],
     _BV_=Base_quickcheck_Observer[3],
     _BW_=Base_quickcheck_Shrinker[3],
     _BX_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$102),0,_Bi_],0],
     _BY_=caml_call1(Bin_prot_Shape[4][1],cst_src_bool_ml_26_4),
     group$50=caml_call2(Bin_prot_Shape[6],_BY_,_BX_),
     _BZ_=caml_call1(Bin_prot_Shape[2][1],cst_t$103),
     bin_shape_t$42=caml_call1(caml_call2(Bin_prot_Shape[14],group$50,_BZ_),0),
     bin_writer_t$35=[0,_Be_,_Bf_],
     bin_reader_t$35=[0,_Bg_,_Bh_],
     bin_t$35=[0,bin_shape_t$42,bin_writer_t$35,bin_reader_t$35];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$157);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bool=
      [0,
       typerep_of_t$3,
       typename_of_t$2,
       _BT_,
       _Bs_,
       Base_Bool[29],
       _Be_,
       _Bf_,
       _Bg_,
       _Bh_,
       _Bi_,
       _Bj_,
       _Bk_,
       _Bl_,
       _BQ_,
       _BP_,
       _BO_,
       _BN_,
       _Bt_,
       _BM_,
       _BL_,
       _BK_,
       _BJ_,
       _BI_,
       _BH_,
       _BG_,
       _BF_,
       _BE_,
       _BD_,
       _BC_,
       _BB_,
       _BA_,
       _Bz_,
       _By_,
       _Bw_,
       _Bv_,
       _Bu_,
       [0,
        Base_Bool[8],
        Base_Bool[9],
        Base_Bool[10],
        Base_Bool[11],
        Base_Bool[12],
        Base_Bool[13],
        Base_Bool[14],
        Base_Bool[15],
        Base_Bool[16],
        Base_Bool[17]],
       _Bx_,
       _Bm_,
       _Bn_,
       _BS_,
       _BR_,
       _Bo_,
       _Bp_,
       _Bq_,
       _Br_,
       _BU_,
       _BV_,
       _BW_,
       [0,
        [0,
         _BF_,
         _BQ_,
         _BP_,
         _Be_,
         _Bf_,
         _Bg_,
         _Bh_,
         bin_shape_t$42,
         bin_writer_t$35,
         bin_reader_t$35,
         bin_t$35]]];
    caml_register_global(4360,Core_kernel_Bool,"Core_kernel__Bool");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$158);
    caml_call1(Expect_test_collector[4][1],cst_src_hexdump_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$159,cst$53);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$160);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Hexdump_intf=[0];
    caml_register_global
     (4361,Core_kernel_Hexdump_intf,"Core_kernel__Hexdump_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$161);
    caml_call1(Expect_test_collector[4][1],cst_src_hexdump_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$162,cst$54);
    var
     default_max_lines=[0,caml_call2(_aw_,caml_call2(_az_,4096,16),1)],
     bytes_per_line=16;
    function Of_indexable2(T)
     {var length=T[1],get=T[2];
      function hex_of_pos(pos){return caml_call2(_fE_,_B0_,pos)}
      function hex_of_char(t,start,until,offset)
       {var pos=caml_call2(_aw_,start,offset);
        if(caml_call2(_aU_,pos,until))return cst$55;
        var _bbi_=caml_call2(get,t,pos);
        return caml_call2(_fE_,_B1_,caml_call1(Base_Char[29],_bbi_))}
      function hex_of_line(t,start,until)
       {var
         _ba5_=hex_of_char(t,start,until,15),
         _ba6_=hex_of_char(t,start,until,14),
         _ba7_=hex_of_char(t,start,until,13),
         _ba8_=hex_of_char(t,start,until,12),
         _ba9_=hex_of_char(t,start,until,11),
         _ba__=hex_of_char(t,start,until,10),
         _ba$_=hex_of_char(t,start,until,9),
         _bba_=hex_of_char(t,start,until,8),
         _bbb_=hex_of_char(t,start,until,7),
         _bbc_=hex_of_char(t,start,until,6),
         _bbd_=hex_of_char(t,start,until,5),
         _bbe_=hex_of_char(t,start,until,4),
         _bbf_=hex_of_char(t,start,until,3),
         _bbg_=hex_of_char(t,start,until,2),
         _bbh_=hex_of_char(t,start,until,1);
        return caml_call17
                (_fE_,
                 _B2_,
                 hex_of_char(t,start,until,0),
                 _bbh_,
                 _bbg_,
                 _bbf_,
                 _bbe_,
                 _bbd_,
                 _bbc_,
                 _bbb_,
                 _bba_,
                 _ba$_,
                 _ba__,
                 _ba9_,
                 _ba8_,
                 _ba7_,
                 _ba6_,
                 _ba5_)}
      function printable_string(t,start,until)
       {function _ba3_(i)
         {var char$0=caml_call2(get,t,caml_call2(_aw_,start,i));
          return caml_call1(Base_Char[41],char$0)?char$0:46}
        var _ba4_=caml_call2(_ax_,until,start);
        return caml_call2(include$39[46],_ba4_,_ba3_)}
      function line(t,pos,len,line_index)
       {var
         start=caml_call2(_aw_,pos,caml_call2(_ay_,line_index,bytes_per_line)),
         _ba0_=caml_call2(_aw_,pos,len),
         until=caml_call2(_a0_,caml_call2(_aw_,start,bytes_per_line),_ba0_),
         _ba1_=printable_string(t,start,until),
         _ba2_=hex_of_line(t,start,until);
        return caml_call4(_fE_,_B3_,hex_of_pos(start),_ba2_,_ba1_)}
      function to_sequence(max_lines,pos,len,t)
       {var
         match=caml_call4(_iK_,pos,len,0,caml_call1(length,t)),
         len$0=match[2],
         pos$0=match[1];
        if(max_lines)
         var max_lines$0=max_lines[1],max_lines$1=max_lines$0;
        else
         var max_lines$1=default_max_lines[1];
        var
         max_lines$2=caml_call2(_aZ_,max_lines$1,3),
         unabridged_lines=
          caml_call2
           (_az_,
            caml_call2(include$29[65],len$0,bytes_per_line),
            bytes_per_line),
         skip_from=caml_call2(_az_,caml_call2(_ax_,max_lines$2,1),2),
         skip_to=
          caml_call2
           (_aw_,
            caml_call2
             (_ax_,unabridged_lines,caml_call2(_ax_,max_lines$2,skip_from)),
            1);
        return caml_call2
                (_jm_,
                 0,
                 function(line_index)
                  {if(caml_call2(_aU_,line_index,unabridged_lines))return 0;
                   if(caml_call2(_aS_,line_index,skip_from))
                    if(caml_call2(_aP_,max_lines$2,unabridged_lines))
                     return [1,cst$56,skip_to];
                   var _baZ_=caml_call2(_aw_,line_index,1);
                   return [1,line(t,pos$0,len$0,line_index),_baZ_]})}
      function to_string_hum(max_lines,pos,len,t)
       {var _baY_=caml_call1(_i2_,to_sequence(max_lines,pos,len,t));
        return caml_call2(include$39[48],_B4_,_baY_)}
      function sexp_of_t(param,_baW_,t)
       {var _baX_=caml_call1(_i2_,to_sequence(0,0,0,t));
        return caml_call1(caml_call1(_R_,_ak_),_baX_)}
      var length$0=T[1],get$0=T[2];
      function printable(t)
       {var length=caml_call1(length$0,t),pos=0;
        for(;;)
         {var _baS_=caml_call2(_aU_,pos,length);
          if(_baS_)
           var _baT_=_baS_;
          else
           {var
             _baU_=caml_call2(get$0,t,pos),
             _baV_=caml_call1(Base_Char[41],_baU_);
            if(_baV_){var pos$0=caml_call2(_aw_,pos,1),pos=pos$0;continue}
            var _baT_=_baV_}
          return _baT_}}
      function to_string(t)
       {function _baQ_(pos){return caml_call2(get$0,t,pos)}
        var _baR_=caml_call1(length$0,t);
        return caml_call2(include$39[46],_baR_,_baQ_)}
      function sexp_of_t$0(sexp_of_a,sexp_of_b,t)
       {return printable(t)
                ?caml_call1(_ak_,to_string(t))
                :sexp_of_t(sexp_of_a,sexp_of_b,t)}
      var
       Pretty=[0,length$0,get$0,printable,to_string,sexp_of_t$0],
       Hexdump=
        [0,
         length,
         get,
         hex_of_pos,
         hex_of_char,
         hex_of_line,
         printable_string,
         line,
         to_sequence,
         to_string_hum,
         sexp_of_t,
         Pretty];
      return [0,Hexdump]}
    function Of_indexable1(T)
     {var
       length=T[1],
       get=T[2],
       M=Of_indexable2([0,length,get]),
       length$0=T[1],
       get$0=T[2];
      function sexp_of_t(x,t)
       {function _baP_(param){return _B5_}
        return caml_call3(M[1][10],x,_baP_,t)}
      var to_sequence=M[1][8],to_string_hum=M[1][9],length$1=T[1],get$1=T[2];
      function sexp_of_t$0(sexp_of_a,t)
       {function _baO_(param){return _B6_}
        return caml_call3(M[1][11][5],sexp_of_a,_baO_,t)}
      var
       Pretty=[0,length$1,get$1,sexp_of_t$0],
       Hexdump=[0,length$0,get$0,sexp_of_t,to_sequence,to_string_hum,Pretty];
      return [0,M,Hexdump]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$163);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _B9_(_baM_)
     {var _baN_=Of_indexable2(_baM_)[1];
      return [0,[0,_baN_[10],_baN_[9],_baN_[8],[0,_baN_[11][5]]]]}
    function _B__(_baK_)
     {var _baL_=Of_indexable1(_baK_)[2];
      return [0,[0,_baL_[3],_baL_[5],_baL_[4],[0,_baL_[6][3]]]]}
    function _B$_(T)
     {var length=T[1],get=T[2],M=Of_indexable1([0,length,get]);
      function sexp_of_t(t)
       {function _baJ_(param){return _B7_}return caml_call2(M[2][3],_baJ_,t)}
      var to_sequence=M[2][4],to_string_hum=M[2][5];
      function sexp_of_t$0(t)
       {function _baI_(param){return _B8_}
        return caml_call2(M[2][6][3],_baI_,t)}
      return [0,[0,sexp_of_t,to_string_hum,to_sequence,[0,sexp_of_t$0]]]}
    var Core_kernel_Hexdump=[0,default_max_lines,_B$_,_B__,_B9_];
    caml_register_global(4363,Core_kernel_Hexdump,"Core_kernel__Hexdump");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$164);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_comparable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$165,cst$57);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$166);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Stable_comparable=[0];
    caml_register_global
     (4364,Core_kernel_Stable_comparable,"Core_kernel__Stable_comparable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$167);
    caml_call1(Expect_test_collector[4][1],cst_src_string_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$168,cst$58);
    var
     _Ca_=include$39[1],
     _Cb_=include$39[2],
     _Cc_=include$39[3],
     _Cd_=include$39[4],
     _Ci_=include$39[9],
     _Cj_=include$39[10],
     _Ct_=include$39[44],
     _Cx_=include$39[48],
     _Cz_=include$39[50],
     _CA_=include$39[51],
     _CB_=include$39[52],
     _CE_=include$39[55],
     _CT_=include$39[71],
     _CW_=include$39[74],
     _CX_=include$39[75],
     _CY_=include$39[76],
     _C0_=include$39[78],
     _C1_=include$39[79],
     _C2_=include$39[80],
     _C5_=include$39[83],
     _C6_=include$39[84],
     _C7_=include$39[85],
     _C9_=include$39[87],
     _Dd_=include$39[93],
     _Df_=include$39[95],
     _Dg_=include$39[96],
     _Dh_=include$39[97],
     _Di_=include$39[98],
     _Dl_=include$39[101],
     hash_fold_t$11=include$39[19],
     t_of_sexp$30=include$39[20],
     sexp_of_t$38=include$39[21],
     compare$26=include$39[30],
     comparator$1=include$39[38],
     equal$15=include$39[104],
     _Ce_=include$39[5],
     _Cf_=include$39[6],
     _Cg_=include$39[7],
     _Ch_=include$39[8],
     _Ck_=include$39[11],
     _Cl_=include$39[12],
     _Cm_=include$39[13],
     _Cn_=include$39[14],
     _Co_=include$39[15],
     _Cp_=include$39[16],
     _Cq_=include$39[17],
     _Cr_=include$39[18],
     _Cs_=include$39[43],
     _Cu_=include$39[45],
     _Cv_=include$39[46],
     _Cw_=include$39[47],
     _Cy_=include$39[49],
     _CC_=include$39[53],
     _CD_=include$39[54],
     _CF_=include$39[56],
     _CG_=include$39[57],
     _CH_=include$39[58],
     _CI_=include$39[59],
     _CJ_=include$39[60],
     _CK_=include$39[61],
     _CL_=include$39[62],
     _CM_=include$39[63],
     _CN_=include$39[65],
     _CO_=include$39[66],
     _CP_=include$39[67],
     _CQ_=include$39[68],
     _CR_=include$39[69],
     _CS_=include$39[70],
     _CU_=include$39[72],
     _CV_=include$39[73],
     _CZ_=include$39[77],
     _C3_=include$39[81],
     _C4_=include$39[82],
     _C8_=include$39[86],
     _C__=include$39[88],
     _C$_=include$39[89],
     _Da_=include$39[90],
     _Db_=include$39[91],
     _Dc_=include$39[92],
     _De_=include$39[94],
     _Dj_=include$39[99],
     _Dk_=include$39[100],
     _Dm_=include$39[102],
     _Dn_=include$39[103],
     _Do_=include$39[105],
     _Dp_=include$39[106],
     _Dq_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$104),0,_cb_],0],
     _Dr_=caml_call1(Bin_prot_Shape[4][1],cst_src_string_ml_14_6),
     group$51=caml_call2(Bin_prot_Shape[6],_Dr_,_Dq_),
     _Ds_=caml_call1(Bin_prot_Shape[2][1],cst_t$105),
     bin_shape_t$43=caml_call1(caml_call2(Bin_prot_Shape[14],group$51,_Ds_),0),
     bin_writer_t$36=[0,bin_size_t,bin_write_t],
     bin_reader_t$36=[0,bin_read_t,bin_read_t$0],
     bin_t$36=[0,bin_shape_t$43,bin_writer_t$36,bin_reader_t$36],
     _Dt_=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t,
         bin_read_t$0,
         bin_shape_t$43,
         bin_writer_t$36,
         bin_reader_t$36,
         bin_t$36,
         compare$26,
         t_of_sexp$30,
         sexp_of_t$38,
         comparator$1]),
     Map=_Dt_[1],
     Set=_Dt_[2],
     _Du_=
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t$43,
       bin_writer_t$36,
       bin_reader_t$36,
       bin_t$36,
       t_of_sexp$30,
       compare$26,
       sexp_of_t$38,
       function(_baH_){return runtime.Base_hash_string(_baH_)}],
     include$44=caml_call1(Stable$3[1][1],_Du_),
     Table=include$44[1],
     Hash_set=include$44[2],
     t_of_sexp$31=_CE_[3],
     sexp_of_t$39=_CE_[4],
     is_suffix=_CE_[24],
     is_prefix=_CE_[25],
     _Dv_=_CE_[1],
     _Dw_=_CE_[2],
     _Dx_=_CE_[12],
     _Dy_=_CE_[20],
     _Dz_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$106),0,_cb_],0],
     _DA_=caml_call1(Bin_prot_Shape[4][1],cst_src_string_ml_27_4),
     group$52=caml_call2(Bin_prot_Shape[6],_DA_,_Dz_),
     _DB_=caml_call1(Bin_prot_Shape[2][1],cst_t$107),
     bin_shape_t$44=caml_call1(caml_call2(Bin_prot_Shape[14],group$52,_DB_),0),
     bin_writer_t$37=[0,bin_size_t,bin_write_t],
     bin_reader_t$37=[0,bin_read_t,bin_read_t$0],
     bin_t$37=[0,bin_shape_t$44,bin_writer_t$37,bin_reader_t$37],
     _DC_=
      _xA_
       ([0,
         bin_size_t,
         bin_write_t,
         bin_read_t,
         bin_read_t$0,
         bin_shape_t$44,
         bin_writer_t$37,
         bin_reader_t$37,
         bin_t$37,
         t_of_sexp$31,
         sexp_of_t$39,
         _Dy_]),
     symbol$3=_DC_[1],
     symbol$4=_DC_[2],
     symbol$5=_DC_[3],
     symbol$6=_DC_[4],
     symbol$7=_DC_[5],
     symbol$8=_DC_[6],
     equal$16=_DC_[7],
     compare$27=_DC_[8],
     min=_DC_[9],
     max=_DC_[10],
     ascending=_DC_[11],
     descending=_DC_[12],
     between=_DC_[13],
     clamp_exn=_DC_[14],
     clamp=_DC_[15],
     validate_lbound=_DC_[16],
     validate_ubound=_DC_[17],
     validate_bound=_DC_[18],
     Replace_polymorphic_compare=_DC_[19],
     comparator$2=_DC_[20],
     Map$0=_DC_[21],
     Set$0=_DC_[22],
     include$45=
      Make_binable
       ([0,
         _Dv_,
         bin_size_t,
         bin_write_t,
         bin_read_t,
         bin_read_t$0,
         bin_shape_t$44,
         bin_writer_t$37,
         bin_reader_t$37,
         bin_t$37,
         t_of_sexp$31,
         _Dx_,
         sexp_of_t$39,
         _Dw_]),
     hash_fold_t$12=include$45[1],
     hash$10=include$45[2],
     hashable=include$45[3],
     Table$0=include$45[4],
     Hash_set$0=include$45[5],
     Hash_queue=include$45[6],
     Typename_of_t$4=caml_call1(Typerep_lib_Make_typename[1],[0,name$13]),
     typename_of_t$3=Typename_of_t$4[2],
     name_of_t$0=Typename_of_t$4[1],
     typerep_of_t$4=[9,[0,name_of_t$0,[0,_fl_]]],
     _DD_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$108),0,_cb_],0],
     _DE_=caml_call1(Bin_prot_Shape[4][1],cst_src_string_ml_40_6),
     group$53=caml_call2(Bin_prot_Shape[6],_DE_,_DD_),
     _DF_=caml_call1(Bin_prot_Shape[2][1],cst_t$109),
     bin_shape_t$45=caml_call1(caml_call2(Bin_prot_Shape[14],group$53,_DF_),0),
     bin_writer_t$38=[0,bin_size_t,bin_write_t],
     bin_reader_t$38=[0,bin_read_t,bin_read_t$0],
     bin_t$38=[0,bin_shape_t$45,bin_writer_t$38,bin_reader_t$38],
     _DG_=
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t$45,
       bin_writer_t$38,
       bin_reader_t$38,
       bin_t$38],
     _DH_=include$39[42],
     _DI_=include$39[41],
     _DJ_=include$39[40],
     _DK_=include$39[39],
     _DL_=include$39[38],
     _DM_=include$39[37],
     _DN_=include$39[36],
     _DO_=include$39[35],
     _DP_=include$39[34],
     _DQ_=include$39[33],
     _DR_=include$39[32],
     _DS_=include$39[31],
     _DT_=include$39[30],
     _DU_=include$39[104],
     _DV_=include$39[29],
     _DW_=include$39[28],
     _DX_=include$39[27],
     _DY_=include$39[26],
     _DZ_=include$39[25],
     _D0_=include$39[24],
     _D1_=include$39[23],
     _D2_=include$39[22],
     _D3_=include$39[21],
     _D4_=include$39[20];
    function _D5_(_baG_){return runtime.Base_hash_string(_baG_)}
    var
     _D6_=
      [0,
       include$39[19],
       _D5_,
       _D4_,
       _D3_,
       _D2_,
       _D1_,
       _D0_,
       _DZ_,
       _DY_,
       _DX_,
       _DW_,
       _DV_,
       _DU_,
       _DT_,
       _DS_,
       _DR_,
       _DQ_,
       _DP_,
       _DO_,
       _DN_,
       _DM_,
       _DL_,
       _DK_,
       _DJ_,
       _DI_,
       _DH_],
     include$46=function(_baF_){return _A2_(_D6_,_baF_)}(_DG_),
     bin_size_t$42=include$46[1],
     bin_write_t$42=include$46[2],
     bin_read_t$86=include$46[3],
     bin_read_t$87=include$46[4],
     bin_shape_t$46=include$46[5],
     bin_writer_t$39=include$46[6],
     bin_reader_t$39=include$46[7],
     bin_t$39=include$46[8],
     t_of_sexp$32=include$46[9],
     sexp_of_t$40=include$46[10],
     of_string$0=include$46[11],
     to_string$1=include$46[12],
     pp$0=include$46[13],
     symbol$9=include$46[14],
     symbol$10=include$46[15],
     symbol$11=include$46[16],
     symbol$12=include$46[17],
     symbol$13=include$46[18],
     symbol$14=include$46[19],
     equal$17=include$46[20],
     compare$28=include$46[21],
     min$0=include$46[22],
     max$0=include$46[23],
     ascending$0=include$46[24],
     descending$0=include$46[25],
     between$0=include$46[26],
     clamp_exn$0=include$46[27],
     clamp$0=include$46[28],
     validate_lbound$0=include$46[29],
     validate_ubound$0=include$46[30],
     validate_bound$0=include$46[31],
     Replace_polymorphic_compare$0=include$46[32],
     comparator$3=include$46[33],
     Map$1=include$46[34],
     Set$1=include$46[35],
     hash_fold_t$13=include$46[36],
     hash$11=include$46[37],
     hashable$0=include$46[38],
     Table$1=include$46[39],
     Hash_set$1=include$46[40],
     Hash_queue$0=include$46[41],
     length$15=caml_ml_string_length,
     get$1=caml_string_get,
     include$47=_B$_([0,length$15,get$1]),
     _D8_=Base_quickcheck_Generator[4],
     _D9_=Base_quickcheck_Observer[5],
     _D__=Base_quickcheck_Shrinker[5],
     _Ea_=Base_quickcheck_Generator[99],
     _Eb_=Base_quickcheck_Generator[100],
     _D7_=include$47[1],
     _D$_=Base_quickcheck_Generator[97];
    function gen_with_length$0(length,chars)
     {return caml_call2(Base_quickcheck_Generator[101],chars,length)}
    function take_while(t,f)
     {var
       match=
        caml_call3(_C5_,0,t,function(param,elt){return 1 - caml_call1(f,elt)});
      if(match){var i=match[1];return caml_call3(_Ca_,t,0,i)}
      return t}
    function rtake_while(t,f)
     {var
       match=
        caml_call3(_C6_,0,t,function(param,elt){return 1 - caml_call1(f,elt)});
      if(match)
       {var
         i=match[1],
         _baE_=caml_call2(_ax_,caml_call2(_ax_,caml_ml_string_length(t),i),1);
        return caml_call3(_Ca_,t,caml_call2(_aw_,i,1),_baE_)}
      return t}
    function slice$2(t,start,stop)
     {return slice(caml_ml_string_length,_Ca_,t,start,stop)}
    function nget$0(x,i)
     {return caml_string_get(x,normalize(caml_ml_string_length,x,i))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$169);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _Ec_=
      [0,
       [0,
        equal$15,
        hash_fold_t$11,
        function(_baD_){return runtime.Base_hash_string(_baD_)},
        bin_size_t,
        bin_write_t,
        bin_read_t,
        bin_read_t$0,
        bin_shape_t$43,
        bin_writer_t$36,
        bin_reader_t$36,
        bin_t$36,
        compare$26,
        t_of_sexp$30,
        sexp_of_t$38,
        comparator$1,
        Map,
        Set,
        Table,
        Hash_set]],
     Core_kernel_String=
      [0,
       _Ca_,
       _Cb_,
       _Cc_,
       _Cd_,
       _Ce_,
       _Cf_,
       _Cg_,
       _Ch_,
       _Ci_,
       _Cj_,
       _Ck_,
       _Cl_,
       _Cm_,
       _Cn_,
       _Co_,
       _Cp_,
       _Cq_,
       _Cr_,
       _Cs_,
       _Ct_,
       _Cu_,
       _Cv_,
       _Cw_,
       _Cx_,
       _Cy_,
       _Cz_,
       _CA_,
       _CB_,
       _CC_,
       _CD_,
       _CF_,
       _CG_,
       _CH_,
       _CI_,
       _CJ_,
       _CK_,
       _CL_,
       _CM_,
       _CN_,
       _CO_,
       _CP_,
       _CQ_,
       _CR_,
       _CS_,
       _CT_,
       _CU_,
       _CV_,
       _CW_,
       _CX_,
       _CY_,
       _CZ_,
       _C0_,
       _C1_,
       _C2_,
       _C3_,
       _C4_,
       _C5_,
       _C6_,
       _C7_,
       _C8_,
       _C9_,
       _C__,
       _C$_,
       _Da_,
       _Db_,
       _Dc_,
       _Dd_,
       _De_,
       _Df_,
       _Dg_,
       _Dh_,
       _Di_,
       _Dj_,
       _Dk_,
       _Dl_,
       _Dm_,
       _Dn_,
       _Do_,
       _Dp_,
       typerep_of_t$4,
       typename_of_t$3,
       [0,
        bin_size_t,
        bin_write_t,
        bin_read_t,
        bin_read_t$0,
        bin_shape_t$44,
        bin_writer_t$37,
        bin_reader_t$37,
        bin_t$37,
        t_of_sexp$31,
        sexp_of_t$39,
        symbol$3,
        symbol$4,
        symbol$5,
        symbol$6,
        symbol$7,
        symbol$8,
        equal$16,
        compare$27,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        validate_lbound,
        validate_ubound,
        validate_bound,
        Replace_polymorphic_compare,
        comparator$2,
        Map$0,
        Set$0,
        hash_fold_t$12,
        hash$10,
        hashable,
        Table$0,
        Hash_set$0,
        Hash_queue,
        is_suffix,
        is_prefix],
       slice$2,
       nget$0,
       take_while,
       rtake_while,
       _D7_,
       bin_size_t$42,
       bin_write_t$42,
       bin_read_t$86,
       bin_read_t$87,
       bin_shape_t$46,
       bin_writer_t$39,
       bin_reader_t$39,
       bin_t$39,
       t_of_sexp$32,
       sexp_of_t$40,
       of_string$0,
       to_string$1,
       pp$0,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       symbol$13,
       symbol$14,
       equal$17,
       compare$28,
       min$0,
       max$0,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       comparator$3,
       Map$1,
       Set$1,
       hash_fold_t$13,
       hash$11,
       hashable$0,
       Table$1,
       Hash_set$1,
       Hash_queue$0,
       _D8_,
       _D9_,
       _D__,
       _D$_,
       _Ea_,
       _Eb_,
       gen_with_length$0,
       _Ec_];
    caml_register_global(4365,Core_kernel_String,"Core_kernel__String");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$170);
    caml_call1(Expect_test_collector[4][1],cst_src_bytes_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$171,cst$59);
    var
     _Ed_=include$48[1],
     _Ee_=include$48[2],
     _Eg_=include$48[4],
     _Eq_=include$48[14],
     _Er_=include$48[15],
     _Ez_=include$48[23],
     _ED_=include$48[27],
     _EE_=include$48[28],
     _EG_=include$48[32],
     _EN_=include$48[39],
     _EO_=include$48[40],
     _EP_=include$48[41],
     _EZ_=include$48[51],
     _Ef_=include$48[3],
     _Eh_=include$48[5],
     _Ei_=include$48[6],
     _Ej_=include$48[7],
     _Ek_=include$48[8],
     _El_=include$48[9],
     _Em_=include$48[10],
     _En_=include$48[11],
     _Eo_=include$48[12],
     _Ep_=include$48[13],
     _Es_=include$48[16],
     _Et_=include$48[17],
     _Eu_=include$48[18],
     _Ev_=include$48[19],
     _Ew_=include$48[20],
     _Ex_=include$48[21],
     _Ey_=include$48[22],
     _EA_=include$48[24],
     _EB_=include$48[25],
     _EC_=include$48[26],
     _EF_=include$48[29],
     _EH_=include$48[33],
     _EI_=include$48[34],
     _EJ_=include$48[35],
     _EK_=include$48[36],
     _EL_=include$48[37],
     _EM_=include$48[38],
     _EQ_=include$48[42],
     _ER_=include$48[43],
     _ES_=include$48[44],
     _ET_=include$48[45],
     _EU_=include$48[46],
     _EV_=include$48[47],
     _EW_=include$48[48],
     _EX_=include$48[49],
     _EY_=include$48[50],
     _E0_=include$48[52],
     _E1_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$110),0,_cf_],0],
     _E2_=caml_call1(Bin_prot_Shape[4][1],cst_src_bytes_ml_7_4),
     group$54=caml_call2(Bin_prot_Shape[6],_E2_,_E1_),
     _E3_=caml_call1(Bin_prot_Shape[2][1],cst_t$111),
     bin_shape_t$47=caml_call1(caml_call2(Bin_prot_Shape[14],group$54,_E3_),0),
     bin_writer_t$40=[0,bin_size_t$0,bin_write_t$0],
     bin_reader_t$40=[0,bin_read_t$1,bin_read_t$2],
     bin_t$40=[0,bin_shape_t$47,bin_writer_t$40,bin_reader_t$40],
     Typename_of_t$5=caml_call1(Typerep_lib_Make_typename[1],[0,name$14]),
     typename_of_t$4=Typename_of_t$5[2],
     name_of_t$1=Typename_of_t$5[1],
     typerep_of_t$5=[9,[0,name_of_t$1,[0,_fk_]]],
     include$49=_B$_([0,_EN_,_EO_]),
     _E4_=include$49[1],
     quickcheck_generator$6=caml_call2(_vb_[10],_D8_,_ED_),
     quickcheck_observer$5=caml_call2(_va_[18],_D9_,_EE_),
     quickcheck_shrinker$5=caml_call3(_u$_[6],_D__,_ED_,_EE_);
    function gen(char_gen)
     {var _baC_=caml_call1(_Ea_,char_gen);
      return caml_call2(_vb_[10],_baC_,_ED_)}
    function gen_with_length$1(len,char_gen)
     {var _baB_=gen_with_length$0(len,char_gen);
      return caml_call2(_vb_[10],_baB_,_ED_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$172);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$50=
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_shape_t$47,
       bin_writer_t$40,
       bin_reader_t$40,
       bin_t$40,
       typerep_of_t$5,
       typename_of_t$4,
       _Ed_,
       _Ee_,
       _Ef_,
       _Eg_,
       _Eh_,
       _Ei_,
       _Ej_,
       _Ek_,
       _El_,
       _Em_,
       _En_,
       _Eo_,
       _Ep_,
       _Eq_,
       _Er_,
       _Es_,
       _Et_,
       _Eu_,
       _Ev_,
       _Ew_,
       _Ex_,
       _Ey_,
       _Ez_,
       _EA_,
       _EB_,
       _EC_,
       _ED_,
       _EE_,
       _EF_,
       _EG_,
       _EH_,
       _EI_,
       _EJ_,
       _EK_,
       _EL_,
       _EM_,
       _EN_,
       _EO_,
       _EP_,
       _EQ_,
       _ER_,
       _ES_,
       _ET_,
       _EU_,
       _EV_,
       _EW_,
       _EX_,
       _EY_,
       _EZ_,
       _E0_,
       _E4_,
       quickcheck_generator$6,
       quickcheck_observer$5,
       quickcheck_shrinker$5,
       gen,
       gen_with_length$1,
       [0,
        [0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$1,
         bin_read_t$2,
         bin_shape_t$47,
         bin_writer_t$40,
         bin_reader_t$40,
         bin_t$40,
         _Er_,
         _Ed_,
         _Ee_,
         _Ez_]]];
    caml_register_global(4367,include$50,"Core_kernel__Bytes");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$173);
    caml_call1(Expect_test_collector[4][1],cst_src_char_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$174,cst$60);
    var
     Typename_of_t$6=caml_call1(Typerep_lib_Make_typename[1],[0,name$15]),
     typename_of_t$5=Typename_of_t$6[2],
     name_of_t$2=Typename_of_t$6[1],
     typerep_of_t$6=[9,[0,name_of_t$2,[0,_fn_]]],
     _E5_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$112),0,_cj_],0],
     _E6_=caml_call1(Bin_prot_Shape[4][1],cst_src_char_ml_8_6),
     group$55=caml_call2(Bin_prot_Shape[6],_E6_,_E5_),
     _E7_=caml_call1(Bin_prot_Shape[2][1],cst_t$113),
     bin_shape_t$48=caml_call1(caml_call2(Bin_prot_Shape[14],group$55,_E7_),0),
     bin_writer_t$41=[0,_bo_,_cl_],
     bin_reader_t$41=[0,_cn_,_co_],
     bin_t$41=[0,bin_shape_t$48,bin_writer_t$41,bin_reader_t$41],
     _E8_=
      [0,
       _bo_,
       _cl_,
       _cn_,
       _co_,
       bin_shape_t$48,
       bin_writer_t$41,
       bin_reader_t$41,
       bin_t$41],
     _E9_=
      [0,
       Base_Char[2],
       Base_Char[3],
       Base_Char[4],
       Base_Char[5],
       Base_Char[6],
       Base_Char[7],
       Base_Char[8],
       Base_Char[9],
       Base_Char[10],
       Base_Char[11],
       Base_Char[12],
       Base_Char[13],
       Base_Char[14],
       Base_Char[15],
       Base_Char[16],
       Base_Char[17],
       Base_Char[18],
       Base_Char[19],
       Base_Char[20],
       Base_Char[21],
       Base_Char[22],
       Base_Char[23],
       Base_Char[24],
       Base_Char[25],
       Base_Char[26],
       Base_Char[27]],
     _E__=function(_baA_){return _A2_(_E9_,_baA_)}(_E8_),
     _E$_=_E__[1],
     _Fa_=_E__[2],
     _Fb_=_E__[3],
     _Fc_=_E__[4],
     _Fd_=_E__[5],
     _Fi_=_E__[35],
     _Fp_=Base_Char[44],
     _Fr_=Base_Char[42],
     _Fx_=Base_Char[36],
     _Fz_=Base_Char[34],
     _FB_=Base_Char[32],
     _FE_=Base_Char[29],
     _FR_=Base_Char[15],
     _FS_=Base_Char[14],
     _FT_=Base_Char[13],
     _FW_=Base_Char[10],
     _F0_=Base_Char[6],
     _F1_=Base_Char[5],
     _F2_=Base_Char[4],
     _F3_=Base_Char[3],
     _F4_=Base_Char[2],
     _Gc_=Base_quickcheck_Generator[95],
     _Fe_=_E__[6],
     _Ff_=_E__[7],
     _Fg_=_E__[8],
     _Fh_=_E__[34],
     _Fj_=_E__[38],
     _Fk_=_E__[39],
     _Fl_=_E__[40],
     _Fm_=_E__[41],
     _Fn_=Base_Char[46],
     _Fo_=Base_Char[45],
     _Fq_=Base_Char[43],
     _Fs_=Base_Char[41],
     _Ft_=Base_Char[40],
     _Fu_=Base_Char[39],
     _Fv_=Base_Char[38],
     _Fw_=Base_Char[37],
     _Fy_=Base_Char[35],
     _FA_=Base_Char[33],
     _FC_=Base_Char[31],
     _FD_=Base_Char[30],
     _FF_=Base_Char[27],
     _FG_=Base_Char[26],
     _FH_=Base_Char[25],
     _FI_=Base_Char[24],
     _FJ_=Base_Char[23],
     _FK_=Base_Char[22],
     _FL_=Base_Char[21],
     _FM_=Base_Char[20],
     _FN_=Base_Char[19],
     _FO_=Base_Char[18],
     _FP_=Base_Char[17],
     _FQ_=Base_Char[16],
     _FU_=Base_Char[12],
     _FV_=Base_Char[11],
     _FX_=Base_Char[9],
     _FY_=Base_Char[8],
     _FZ_=Base_Char[7],
     _F5_=Base_Char[1],
     _F6_=Base_quickcheck_Generator[3],
     _F7_=Base_quickcheck_Observer[4],
     _F8_=Base_quickcheck_Shrinker[4],
     _F9_=Base_quickcheck_Generator[91],
     _F__=Base_quickcheck_Generator[89],
     _F$_=Base_quickcheck_Generator[90],
     _Ga_=Base_quickcheck_Generator[92],
     _Gb_=Base_quickcheck_Generator[93],
     _Gd_=Base_quickcheck_Generator[94],
     _Ge_=Base_quickcheck_Generator[96];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$175);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Char=
      [0,
       typerep_of_t$6,
       typename_of_t$5,
       _F5_,
       _FE_,
       _FD_,
       _FC_,
       _FB_,
       _FA_,
       _Fz_,
       _Fy_,
       _Fx_,
       _Fw_,
       _Fv_,
       _Fu_,
       _Ft_,
       _Fs_,
       _Fr_,
       _Fq_,
       _Fp_,
       _Fo_,
       _Fn_,
       _E$_,
       _Fa_,
       _Fb_,
       _Fc_,
       _Fd_,
       _Fe_,
       _Ff_,
       _Fg_,
       _F2_,
       _F1_,
       _F0_,
       _FZ_,
       _FF_,
       _FY_,
       _FX_,
       _FW_,
       _FV_,
       _FU_,
       _FT_,
       _FS_,
       _FR_,
       _FQ_,
       _FP_,
       _FO_,
       _FN_,
       _FM_,
       _FL_,
       _FK_,
       _FI_,
       _FH_,
       _FG_,
       [0,
        Base_Char[8],
        Base_Char[9],
        Base_Char[10],
        Base_Char[11],
        Base_Char[12],
        Base_Char[13],
        Base_Char[14],
        Base_Char[15],
        Base_Char[16],
        Base_Char[17]],
       _FJ_,
       _Fh_,
       _Fi_,
       _F4_,
       _F3_,
       _Fj_,
       _Fk_,
       _Fl_,
       _Fm_,
       _F6_,
       _F7_,
       _F8_,
       _F9_,
       _F__,
       _F$_,
       _Ga_,
       _Gb_,
       _Gc_,
       _Gd_,
       _Ge_];
    caml_register_global(4368,Core_kernel_Char,"Core_kernel__Char");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$176);
    caml_call1(Expect_test_collector[4][1],cst_src_core_pervasives_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$177,cst$61);
    var
     _Gf_=include$0[1],
     _Gg_=include$0[2],
     _Gh_=include$0[3],
     _Gk_=include$0[17],
     _Gl_=include$0[18],
     _Gm_=include$0[19],
     _Gn_=include$0[20],
     _Go_=include$0[21],
     _Gp_=include$0[22],
     _Gq_=include$0[23],
     _Gr_=include$0[24],
     _Gs_=include$0[25],
     _Gt_=include$0[26],
     _Gu_=include$0[27],
     _Gv_=include$0[28],
     _Gw_=include$0[29],
     _Gx_=include$0[31],
     _Gy_=include$0[32],
     _Gz_=include$0[34],
     _GB_=include$0[37],
     _GC_=include$0[38],
     _GD_=include$0[39],
     _GE_=include$0[40],
     _GF_=include$0[41],
     _GG_=include$0[42],
     _GH_=include$0[43],
     _GI_=include$0[44],
     _GJ_=include$0[45],
     _GK_=include$0[46],
     _GL_=include$0[47],
     _GM_=include$0[48],
     _GN_=include$0[49],
     _GO_=include$0[50],
     _GP_=include$0[51],
     _GQ_=include$0[52],
     _GR_=include$0[53],
     _GS_=include$0[54],
     _GT_=include$0[56],
     _GU_=include$0[58],
     _GV_=include$0[59],
     _GW_=include$0[60],
     _GX_=include$0[61],
     _GY_=include$0[62],
     _GZ_=include$0[63],
     _G0_=include$0[64],
     _G1_=include$0[65],
     _G2_=include$0[66],
     _G3_=include$0[67],
     _G4_=include$0[68],
     _G5_=include$0[69],
     _G6_=include$0[70],
     _G7_=include$0[71],
     _G8_=include$0[72],
     _G9_=include$0[73],
     _G__=include$0[74],
     _G$_=include$0[75],
     _Ha_=include$0[76],
     _Hb_=include$0[77],
     _Hc_=include$0[78],
     _Hd_=include$0[79],
     _He_=include$0[80],
     _Hf_=include$0[81],
     _Hg_=include$0[82],
     _Hh_=include$0[83],
     _Hi_=include$0[84],
     _Hj_=include$0[85],
     _Hk_=include$0[86],
     _Hl_=include$0[87],
     _Hm_=include$0[88],
     _Hn_=include$0[89],
     _Ho_=include$0[90],
     _Hp_=include$0[91],
     _Hq_=include$0[92],
     _Hr_=include$0[93],
     _Hs_=include$0[94],
     _Ht_=include$0[95],
     _Hu_=include$0[96],
     _Hv_=include$0[97],
     _Hw_=include$0[98],
     _Hx_=include$0[99],
     _Hy_=include$0[100],
     _Hz_=include$0[101],
     _HA_=include$0[102],
     _Gi_=include$0[15],
     _Gj_=include$0[16],
     _GA_=include$0[36];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$178);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Core_pervasives=
      [0,
       _Gf_,
       _Gg_,
       _Gh_,
       _Gi_,
       _Gj_,
       _Gk_,
       _Gl_,
       _Gm_,
       _Gn_,
       _Go_,
       _Gp_,
       _Gq_,
       _Gr_,
       _Gs_,
       _Gt_,
       _Gu_,
       _Gv_,
       _Gw_,
       _Gx_,
       _Gy_,
       _Gz_,
       _GA_,
       _GB_,
       _GC_,
       _GD_,
       _GE_,
       _GF_,
       _GG_,
       _GH_,
       _GI_,
       _GJ_,
       _GK_,
       _GL_,
       _GM_,
       _GN_,
       _GO_,
       _GP_,
       _GQ_,
       _GR_,
       _GS_,
       _GT_,
       _GU_,
       _GV_,
       _GW_,
       _GX_,
       _GY_,
       _GZ_,
       _G0_,
       _G1_,
       _G2_,
       _G3_,
       _G4_,
       _G5_,
       _G6_,
       _G7_,
       _G8_,
       _G9_,
       _G__,
       _G$_,
       _Ha_,
       _Hb_,
       _Hc_,
       _Hd_,
       _He_,
       _Hf_,
       _Hg_,
       _Hh_,
       _Hi_,
       _Hj_,
       _Hk_,
       _Hl_,
       _Hm_,
       _Hn_,
       _Ho_,
       _Hp_,
       _Hq_,
       _Hr_,
       _Hs_,
       _Ht_,
       _Hu_,
       _Hv_,
       _Hw_,
       _Hx_,
       _Hy_,
       _Hz_,
       _HA_];
    caml_register_global
     (4369,Core_kernel_Core_pervasives,"Core_kernel__Core_pervasives");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$179);
    caml_call1(Expect_test_collector[4][1],cst_src_robustly_comparable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$180,cst$62);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$181);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Robustly_comparable=[0];
    caml_register_global
     (4370,Core_kernel_Robustly_comparable,"Core_kernel__Robustly_comparable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$182);
    caml_call1(Expect_test_collector[4][1],cst_src_sign_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$183,cst$63);
    function t_of_sexp$33(sexp)
     {if(0 === sexp[0])
       {var _baw_=sexp[1];
        if(caml_string_notequal(_baw_,cst_Neg))
         {if(caml_string_notequal(_baw_,cst_Pos))
           {if(caml_string_notequal(_baw_,cst_Zero))
             if(caml_string_notequal(_baw_,cst_neg))
              if(caml_string_notequal(_baw_,cst_pos))
               if(caml_string_notequal(_baw_,cst_zero))
                var switch$0=1,switch$1=0,switch$2=0;
               else
                var switch$2=1;
              else
               var switch$1=1,switch$2=0;
             else
              var switch$0=0,switch$1=0,switch$2=0;
            else
             var switch$2=1;
            if(switch$2)return 1}
          else
           var switch$1=1;
          if(switch$1)return 2}
        else
         var switch$0=0;
        if(! switch$0)return 0}
      else
       {var _bax_=sexp[1];
        if(! _bax_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$15,sexp);
        var _bay_=_bax_[1];
        if(0 !== _bay_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$15,sexp);
        var _baz_=_bay_[1];
        if(caml_string_notequal(_baz_,cst_Neg$0))
         {if(caml_string_notequal(_baz_,cst_Pos$0))
           {if(caml_string_notequal(_baz_,cst_Zero$0))
             if(caml_string_notequal(_baz_,cst_neg$0))
              if(caml_string_notequal(_baz_,cst_pos$0))
               if(caml_string_notequal(_baz_,cst_zero$0))
                var switch$3=1,switch$4=0,switch$5=0;
               else
                var switch$5=1;
              else
               var switch$4=1,switch$5=0;
             else
              var switch$3=0,switch$4=0,switch$5=0;
            else
             var switch$5=1;
            if(switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$15,sexp)}
          else
           var switch$4=1;
          if(switch$4)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$15,sexp)}
        else
         var switch$3=0;
        if(! switch$3)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$15,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$15,sexp)}
    function sexp_of_t$41(param)
     {switch(param){case 0:return _HB_;case 1:return _HC_;default:return _HD_}}
    var
     _HF_=caml_call1(Bin_prot_Shape[9],_HE_),
     _HG_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$114),0,_HF_],0],
     _HH_=caml_call1(Bin_prot_Shape[4][1],cst_src_sign_ml_6_4),
     group$56=caml_call2(Bin_prot_Shape[6],_HH_,_HG_),
     _HI_=caml_call1(Bin_prot_Shape[2][1],cst_t$115),
     bin_shape_t$49=caml_call1(caml_call2(Bin_prot_Shape[14],group$56,_HI_),0);
    function bin_size_t$43(param){return 1}
    function bin_write_t$43(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,2)}}
    var bin_writer_t$42=[0,bin_size_t$43,bin_write_t$43];
    function bin_read_t$88(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_sign_ml_Stable_V1_t,pos_ref[1])}
    function bin_read_t$89(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_HJ_,pos_ref[1]);
      switch(match){case 0:return 0;case 1:return 1;default:return 2}}
    var
     bin_reader_t$42=[0,bin_read_t$89,bin_read_t$88],
     bin_t$42=[0,bin_shape_t$49,bin_writer_t$42,bin_reader_t$42],
     compare$29=caml_int_compare;
    function hash_fold_t$14(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        default:return caml_call2(Base_Hash[3],hsv,2)}}
    function hash$12(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bav_=hash_fold_t$14(hsv,x);
      return caml_call1(Base_Hash[9],_bav_)}
    var
     Typename_of_t$7=caml_call1(Typerep_lib_Make_typename[1],[0,name$16]),
     typename_of_t$6=Typename_of_t$7[2],
     name_of_t$3=Typename_of_t$7[1],
     typerep_of_t$7=
      [9,
       [0,
        name_of_t$3,
        [0,
         [246,
          function(_bau_)
           {var
             tag0=
              caml_call1
               (Typerep_lib_Std[1][4][9],[0,cst_Neg$1,_fa_,0,0,0,0,_eQ_,_HK_]),
             tag1=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Zero$1,_fa_,0,0,1,1,_eQ_,_HL_]),
             tag2=
              caml_call1
               (Typerep_lib_Std[1][4][9],[0,cst_Pos$1,_fa_,0,0,2,2,_eQ_,_HM_]),
             typename=caml_call1(Typerep_lib_Std[1][1][2],name_of_t$3),
             tags=[0,[0,tag0],[0,tag1],[0,tag2]],
             polymorphic=0;
            function value(param)
             {switch(param)
               {case 0:return [0,tag0,_fh_];
                case 1:return [0,tag1,_fh_];
                default:return [0,tag2,_fh_]}}
            return [8,
                    caml_call1
                     (Typerep_lib_Std[1][6][7],
                      [0,typename,tags,polymorphic,value])]}]]]],
     _HN_=Base_Sign[1],
     _HO_=Base_Sign[28],
     _HP_=Base_Sign[29],
     _HQ_=Base_Sign[30],
     _HR_=Base_Sign[31],
     _HS_=Base_Sign[32],
     _HT_=
      [0,
       bin_size_t$43,
       bin_write_t$43,
       bin_read_t$89,
       bin_read_t$88,
       bin_shape_t$49,
       bin_writer_t$42,
       bin_reader_t$42,
       bin_t$42],
     _HU_=
      [0,
       Base_Sign[2],
       Base_Sign[3],
       Base_Sign[4],
       Base_Sign[5],
       Base_Sign[6],
       Base_Sign[7],
       Base_Sign[8],
       Base_Sign[9],
       Base_Sign[10],
       Base_Sign[11],
       Base_Sign[12],
       Base_Sign[13],
       Base_Sign[14],
       Base_Sign[15],
       Base_Sign[16],
       Base_Sign[17],
       Base_Sign[18],
       Base_Sign[19],
       Base_Sign[20],
       Base_Sign[21],
       Base_Sign[22],
       Base_Sign[23],
       Base_Sign[24],
       Base_Sign[25],
       Base_Sign[26],
       Base_Sign[27]],
     include$51=function(_bat_){return _A2_(_HU_,_bat_)}(_HT_),
     _H3_=include$51[9],
     _H4_=include$51[10],
     _Id_=include$51[21],
     _HV_=include$51[1],
     _HW_=include$51[2],
     _HX_=include$51[3],
     _HY_=include$51[4],
     _HZ_=include$51[5],
     _H0_=include$51[6],
     _H1_=include$51[7],
     _H2_=include$51[8],
     _H5_=include$51[11],
     _H6_=include$51[12],
     _H7_=include$51[13],
     _H8_=include$51[14],
     _H9_=include$51[15],
     _H__=include$51[16],
     _H$_=include$51[17],
     _Ia_=include$51[18],
     _Ib_=include$51[19],
     _Ic_=include$51[20],
     _Ie_=include$51[22],
     _If_=include$51[23],
     _Ig_=include$51[24],
     _Ih_=include$51[25],
     _Ii_=include$51[26],
     _Ij_=include$51[27],
     _Ik_=include$51[28],
     _Il_=include$51[29],
     _Im_=include$51[30],
     _In_=include$51[31],
     _Io_=include$51[32],
     _Ip_=include$51[33],
     _Iq_=include$51[34],
     _Ir_=include$51[35],
     _Is_=include$51[36],
     _It_=include$51[37],
     _Iu_=include$51[38],
     _Iv_=include$51[39],
     _Iw_=include$51[40],
     _Ix_=include$51[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$184);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Sign=
      [0,
       typerep_of_t$7,
       typename_of_t$6,
       _HN_,
       _HO_,
       _HP_,
       _HQ_,
       _HR_,
       _HS_,
       _HV_,
       _HW_,
       _HX_,
       _HY_,
       _HZ_,
       _H0_,
       _H1_,
       _H2_,
       _H3_,
       _H4_,
       _H5_,
       _H6_,
       _H7_,
       _H8_,
       _H9_,
       _H__,
       _H$_,
       _Ia_,
       _Ib_,
       _Ic_,
       _Id_,
       _Ie_,
       _If_,
       _Ig_,
       _Ih_,
       _Ii_,
       _Ij_,
       _Ik_,
       _Il_,
       _Im_,
       _In_,
       _Io_,
       _Ip_,
       _Iq_,
       _Ir_,
       _Is_,
       _It_,
       _Iu_,
       _Iv_,
       _Iw_,
       _Ix_,
       [0,
        [0,
         bin_size_t$43,
         bin_write_t$43,
         bin_read_t$89,
         bin_read_t$88,
         bin_shape_t$49,
         bin_writer_t$42,
         bin_reader_t$42,
         bin_t$42,
         compare$29,
         hash_fold_t$14,
         hash$12,
         t_of_sexp$33,
         sexp_of_t$41]]];
    caml_register_global(4372,Core_kernel_Sign,"Core_kernel__Sign");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$185);
    caml_call1(Expect_test_collector[4][1],cst_src_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$186,cst$64);
    var
     of_float=include$13[1],
     to_float=include$13[2],
     _IA_=include$13[5],
     sexp_of_t$42=include$13[6],
     _IB_=include$13[7],
     symbol$15=include$13[8],
     symbol$16=include$13[9],
     symbol$17=include$13[10],
     symbol$18=include$13[11],
     symbol$19=include$13[12],
     symbol$20=include$13[13],
     equal$18=include$13[14],
     compare$30=include$13[15],
     min$1=include$13[16],
     max$1=include$13[17],
     ascending$1=include$13[18],
     descending$1=include$13[19],
     between$1=include$13[20],
     clamp_exn$1=include$13[21],
     clamp$1=include$13[22],
     validate_lbound$1=include$13[24],
     validate_ubound$1=include$13[25],
     validate_bound$1=include$13[26],
     validate_positive=include$13[28],
     validate_non_negative=include$13[29],
     validate_negative=include$13[30],
     validate_non_positive=include$13[31],
     is_positive=include$13[32],
     is_non_negative=include$13[33],
     is_negative=include$13[34],
     is_non_positive=include$13[35],
     _IE_=include$13[36],
     _IF_=include$13[37],
     _IG_=include$13[38],
     _IH_=include$13[39],
     zero=include$13[42],
     _IX_=include$13[56],
     _IY_=include$13[57],
     _IZ_=include$13[58],
     _I3_=include$13[62],
     _I7_=include$13[66],
     _Je_=include$13[75],
     _Jf_=include$13[76],
     _Jg_=include$13[77],
     _Jh_=include$13[78],
     _Jj_=include$13[80],
     _Jm_=include$13[83],
     _Jn_=include$13[84],
     is_nan=include$13[85],
     is_inf=include$13[86],
     symbol$21=include$13[89],
     symbol$22=include$13[90],
     symbol$23=include$13[92],
     _Ju_=include$13[97],
     neg=include$13[100],
     scale=include$13[101],
     abs=include$13[102],
     _Jx_=include$13[105],
     _Jy_=include$13[106],
     _JF_=include$13[114],
     _JG_=include$13[115],
     sign=include$13[117],
     _Iy_=include$13[3],
     _Iz_=include$13[4],
     _IC_=include$13[23],
     _ID_=include$13[27],
     _II_=include$13[40],
     _IJ_=include$13[41],
     _IK_=include$13[43],
     _IL_=include$13[44],
     _IM_=include$13[45],
     _IN_=include$13[46],
     _IO_=include$13[47],
     _IP_=include$13[48],
     _IQ_=include$13[49],
     _IR_=include$13[50],
     _IS_=include$13[51],
     _IT_=include$13[52],
     _IU_=include$13[53],
     _IV_=include$13[54],
     _IW_=include$13[55],
     _I0_=include$13[59],
     _I1_=include$13[60],
     _I2_=include$13[61],
     _I4_=include$13[63],
     _I5_=include$13[64],
     _I6_=include$13[65],
     _I8_=include$13[67],
     _I9_=include$13[68],
     _I__=include$13[69],
     _I$_=include$13[70],
     _Ja_=include$13[71],
     _Jb_=include$13[72],
     _Jc_=include$13[73],
     _Jd_=include$13[74],
     _Ji_=include$13[79],
     _Jk_=include$13[81],
     _Jl_=include$13[82],
     _Jo_=include$13[87],
     _Jp_=include$13[88],
     _Jq_=include$13[91],
     _Jr_=include$13[93],
     _Js_=include$13[94],
     _Jt_=include$13[96],
     _Jv_=include$13[98],
     _Jw_=include$13[99],
     _Jz_=include$13[107],
     _JA_=include$13[108],
     _JB_=include$13[109],
     _JC_=include$13[110],
     _JD_=include$13[111],
     _JE_=include$13[112],
     _JH_=include$13[118],
     _JI_=include$13[119],
     _JJ_=include$13[120],
     _JK_=include$13[121],
     _JL_=include$13[122],
     _JM_=include$13[123],
     _JN_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$116),0,_cu_],0],
     _JO_=caml_call1(Bin_prot_Shape[4][1],cst_src_float_ml_26_2),
     group$57=caml_call2(Bin_prot_Shape[6],_JO_,_JN_),
     _JP_=caml_call1(Bin_prot_Shape[2][1],cst_t$117),
     bin_shape_t$50=caml_call1(caml_call2(Bin_prot_Shape[14],group$57,_JP_),0),
     bin_writer_t$43=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$43=[0,bin_read_t$5,bin_read_t$6],
     bin_t$43=[0,bin_shape_t$50,bin_writer_t$43,bin_reader_t$43],
     Typename_of_t$8=caml_call1(Typerep_lib_Make_typename[1],[0,name$17]),
     typename_of_t$7=Typename_of_t$8[2],
     name_of_t$4=Typename_of_t$8[1],
     typerep_of_t$8=[9,[0,name_of_t$4,[0,_fm_]]],
     _JQ_=
      Make_binable
       ([0,
         _Iy_,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$50,
         bin_writer_t$43,
         bin_reader_t$43,
         bin_t$43,
         _IA_,
         compare$30,
         sexp_of_t$42,
         _Iz_]),
     hash_fold_t$15=_JQ_[1],
     hash$13=_JQ_[2],
     hashable$1=_JQ_[3],
     Table$2=_JQ_[4],
     Hash_set$2=_JQ_[5],
     Hash_queue$1=_JQ_[6],
     include$52=
      _xw_
       ([0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$50,
         bin_writer_t$43,
         bin_reader_t$43,
         bin_t$43,
         compare$30,
         _IA_,
         sexp_of_t$42,
         _IC_]),
     comparator$4=include$52[1],
     Map$2=include$52[2],
     Set$2=include$52[3],
     Replace_polymorphic_compare$1=
      [0,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$18,
       compare$30,
       min$1,
       max$1];
    function Make$7(T)
     {var robust_comparison_tolerance=T[1];
      function symbol(x,y){return y - robust_comparison_tolerance <= x?1:0}
      function symbol$0(x,y){return symbol(y,x)}
      function symbol$1(x,y)
       {var _bas_=symbol(x,y);return _bas_?symbol(y,x):_bas_}
      function symbol$2(x,y){return y + robust_comparison_tolerance < x?1:0}
      function symbol$3(x,y){return symbol$2(y,x)}
      function symbol$4(x,y){return 1 - symbol$1(x,y)}
      function robustly_compare(x,y)
       {var d=x - y;
        return d < - robust_comparison_tolerance
                ?-1
                :robust_comparison_tolerance < d?1:0}
      return [0,
              robust_comparison_tolerance,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              robustly_compare]}
    var
     Robust_compare=[0,Make$7],
     include$53=caml_call1(Robust_compare[1],[0,1e-07]),
     symbol$24=include$53[2],
     symbol$25=include$53[3],
     symbol$26=include$53[4],
     symbol$27=include$53[5],
     symbol$28=include$53[6],
     symbol$29=include$53[7],
     robustly_compare=include$53[8],
     _JS_=include$13[103],
     symbol$30=_JS_[1],
     symbol$31=_JS_[2],
     symbol$32=_JS_[3],
     symbol$33=_JS_[4],
     symbol$34=_JS_[5],
     symbol$35=_JS_[6],
     symbol$36=_JS_[7],
     symbol$37=_JS_[8],
     symbol$38=_JS_[9],
     symbol$39=_JS_[10],
     symbol$40=_JS_[11],
     symbol$41=_JS_[12],
     abs$0=_JS_[13],
     neg$0=_JS_[14],
     zero$0=_JS_[15],
     of_int=_JS_[16],
     of_float$0=_JS_[17],
     symbol$42=include$53[2],
     symbol$43=include$53[3],
     symbol$44=include$53[4],
     symbol$45=include$53[5],
     symbol$46=include$53[6],
     symbol$47=include$53[7],
     robustly_compare$0=include$53[8],
     _JR_=include$53[1],
     _JT_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$118),0,bin_shape_t$50],0],
     _JU_=caml_call1(Bin_prot_Shape[4][1],cst_src_float_ml_84_2),
     group$58=caml_call2(Bin_prot_Shape[6],_JU_,_JT_),
     _JV_=caml_call1(Bin_prot_Shape[2][1],cst_t$119),
     bin_shape_t$51=caml_call1(caml_call2(Bin_prot_Shape[14],group$58,_JV_),0),
     bin_writer_t$44=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$44=[0,bin_read_t$5,bin_read_t$6],
     bin_t$44=[0,bin_shape_t$51,bin_writer_t$44,bin_reader_t$44],
     include$54=include$13[124],
     t_of_sexp$34=include$54[1],
     sexp_of_t$43=include$54[2],
     of_string$1=include$54[3],
     to_string$2=include$54[4];
    function sign$0(t)
     {return caml_call2(symbol$27,t,0.)?2:caml_call2(symbol$28,t,0.)?0:1}
    function to_string_12(x)
     {var
       s=runtime.caml_format_float(cst_12g,x),
       l=caml_ml_string_length(s),
       i=0;
      for(;;)
       {if(l <= i)return caml_call2(Stdlib[28],s,cst$65);
        var
         match=caml_string_get(s,i),
         switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    var
     quickcheck_generator$7=Base_quickcheck_Generator[10],
     quickcheck_observer$6=Base_quickcheck_Observer[11],
     quickcheck_shrinker$6=Base_quickcheck_Shrinker[11],
     _JW_=Base_quickcheck_Generator[81],
     _JX_=Base_quickcheck_Generator[80],
     _JZ_=Base_quickcheck_Generator[83],
     _JY_=Base_quickcheck_Generator[82],
     _J0_=Base_quickcheck_Generator[84],
     _J1_=Base_quickcheck_Generator[85],
     gen_zero=caml_call1(Base_quickcheck_Generator[88],4),
     gen_nan=caml_call1(Base_quickcheck_Generator[88],1),
     gen_subnormal=caml_call1(Base_quickcheck_Generator[88],3),
     gen_normal=caml_call1(Base_quickcheck_Generator[88],2),
     gen_infinite=caml_call1(Base_quickcheck_Generator[88],0);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$187);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$55=
      [0,
       of_float,
       to_float,
       validate_positive,
       validate_non_negative,
       validate_negative,
       validate_non_positive,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       _IE_,
       _IF_,
       _IG_,
       _IH_,
       _II_,
       _IJ_,
       zero,
       _IK_,
       _IL_,
       _IM_,
       _IN_,
       _IO_,
       _IP_,
       _IQ_,
       _IR_,
       _IS_,
       _IT_,
       _IU_,
       _IV_,
       _IW_,
       _IX_,
       _IY_,
       _IZ_,
       _I0_,
       _I1_,
       _I2_,
       _I3_,
       _I4_,
       _I5_,
       _I6_,
       _I7_,
       _I8_,
       _I9_,
       _I__,
       _I$_,
       _Ja_,
       _Jb_,
       _Jc_,
       _Jd_,
       _Je_,
       _Jf_,
       _Jg_,
       _Jh_,
       _Ji_,
       _Jj_,
       _Jk_,
       _Jl_,
       _Jm_,
       _Jn_,
       is_nan,
       is_inf,
       _Jo_,
       _Jp_,
       symbol$21,
       symbol$22,
       _Jq_,
       symbol$23,
       _Jr_,
       _Js_,
       _Jt_,
       _Ju_,
       _Jv_,
       _Jw_,
       neg,
       scale,
       abs,
       _Jy_,
       _Jz_,
       _JA_,
       _JB_,
       _JC_,
       _JD_,
       _JE_,
       _JF_,
       _JG_,
       sign,
       _JH_,
       _JI_,
       _JJ_,
       _JK_,
       _JL_,
       _JM_,
       typerep_of_t$8,
       typename_of_t$7,
       Robust_compare,
       _JR_,
       symbol$24,
       symbol$25,
       symbol$26,
       symbol$27,
       symbol$28,
       symbol$29,
       robustly_compare,
       [0,
        symbol$30,
        symbol$31,
        symbol$32,
        symbol$33,
        symbol$34,
        symbol$35,
        symbol$36,
        symbol$37,
        symbol$38,
        symbol$39,
        symbol$40,
        symbol$41,
        abs$0,
        neg$0,
        zero$0,
        of_int,
        of_float$0,
        symbol$42,
        symbol$43,
        symbol$44,
        symbol$45,
        symbol$46,
        symbol$47,
        robustly_compare$0],
       include$53,
       [0,
        bin_size_t$2,
        bin_write_t$2,
        bin_read_t$5,
        bin_read_t$6,
        bin_shape_t$51,
        bin_writer_t$44,
        bin_reader_t$44,
        bin_t$44,
        t_of_sexp$34,
        sexp_of_t$43,
        of_string$1,
        to_string$2],
       bin_size_t$2,
       bin_write_t$2,
       bin_read_t$5,
       bin_read_t$6,
       bin_shape_t$50,
       bin_writer_t$43,
       bin_reader_t$43,
       bin_t$43,
       _IA_,
       sexp_of_t$42,
       _IB_,
       _ID_,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$18,
       compare$30,
       min$1,
       max$1,
       ascending$1,
       descending$1,
       between$1,
       clamp_exn$1,
       clamp$1,
       validate_lbound$1,
       validate_ubound$1,
       validate_bound$1,
       Replace_polymorphic_compare$1,
       comparator$4,
       Map$2,
       Set$2,
       hash_fold_t$15,
       hash$13,
       hashable$1,
       Table$2,
       Hash_set$2,
       Hash_queue$1,
       to_string_12,
       _Jx_,
       quickcheck_generator$7,
       quickcheck_observer$6,
       quickcheck_shrinker$6,
       sign$0,
       sign$0,
       _JW_,
       _JX_,
       _JZ_,
       _J0_,
       _J1_,
       _JY_,
       gen_infinite,
       gen_nan,
       gen_normal,
       gen_subnormal,
       gen_zero];
    caml_register_global(4373,include$55,"Core_kernel__Float");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$188);
    caml_call1(Expect_test_collector[4][1],cst_src_int_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$189,cst$66);
    var
     compare$31=include$29[18],
     comparator$5=include$29[26],
     _J2_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$120),0,_cq_],0],
     _J3_=caml_call1(Bin_prot_Shape[4][1],cst_src_int_ml_8_6),
     group$59=caml_call2(Bin_prot_Shape[6],_J3_,_J2_),
     _J4_=caml_call1(Bin_prot_Shape[2][1],cst_t$121),
     bin_shape_t$52=caml_call1(caml_call2(Bin_prot_Shape[14],group$59,_J4_),0),
     bin_writer_t$45=[0,bin_size_t$1,bin_write_t$1],
     bin_reader_t$45=[0,bin_read_t$3,bin_read_t$4],
     bin_t$45=[0,bin_shape_t$52,bin_writer_t$45,bin_reader_t$45],
     include$56=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$3,
         bin_read_t$4,
         bin_shape_t$52,
         bin_writer_t$45,
         bin_reader_t$45,
         bin_t$45,
         compare$31,
         t_of_sexp,
         sexp_of_t$0,
         comparator$5]),
     Map$3=include$56[1],
     Set$3=include$56[2],
     _J5_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$122),0,_cq_],0],
     _J6_=caml_call1(Bin_prot_Shape[4][1],cst_src_int_ml_19_6),
     group$60=caml_call2(Bin_prot_Shape[6],_J6_,_J5_),
     _J7_=caml_call1(Bin_prot_Shape[2][1],cst_t$123),
     bin_shape_t$53=caml_call1(caml_call2(Bin_prot_Shape[14],group$60,_J7_),0),
     bin_writer_t$46=[0,bin_size_t$1,bin_write_t$1],
     bin_reader_t$46=[0,bin_read_t$3,bin_read_t$4],
     bin_t$46=[0,bin_shape_t$53,bin_writer_t$46,bin_reader_t$46],
     _J8_=
      [0,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_shape_t$53,
       bin_writer_t$46,
       bin_reader_t$46,
       bin_t$46],
     _J9_=
      [0,
       include$29[5],
       include$29[6],
       include$29[7],
       include$29[8],
       include$29[9],
       include$29[10],
       include$29[11],
       include$29[12],
       include$29[13],
       include$29[14],
       include$29[15],
       include$29[16],
       include$29[17],
       include$29[18],
       include$29[19],
       include$29[20],
       include$29[21],
       include$29[22],
       include$29[23],
       include$29[24],
       include$29[25],
       include$29[26],
       include$29[27],
       include$29[28],
       include$29[29],
       include$29[30]],
     _J__=function(_bar_){return _A2_(_J9_,_bar_)}(_J8_),
     bin_size_t$44=_J__[1],
     bin_write_t$44=_J__[2],
     bin_read_t$90=_J__[3],
     bin_read_t$91=_J__[4],
     bin_shape_t$54=_J__[5],
     bin_writer_t$47=_J__[6],
     bin_reader_t$47=_J__[7],
     bin_t$47=_J__[8],
     Map$4=_J__[34],
     Set$4=_J__[35],
     hashable$2=_J__[38],
     Table$3=_J__[39],
     Hash_set$3=_J__[40],
     Hash_queue$2=_J__[41],
     of_float$1=include$29[1],
     to_float$0=include$29[2],
     of_int_exn=include$29[3],
     to_int_exn=include$29[4],
     hash_fold_t$16=include$29[5],
     hash$14=include$29[6],
     t_of_sexp$35=include$29[7],
     sexp_of_t$44=include$29[8],
     of_string$2=include$29[9],
     to_string$3=include$29[10],
     symbol$48=include$29[11],
     symbol$49=include$29[12],
     symbol$50=include$29[13],
     symbol$51=include$29[14],
     symbol$52=include$29[15],
     symbol$53=include$29[16],
     equal$19=include$29[17],
     compare$32=include$29[18],
     min$2=include$29[19],
     max$2=include$29[20],
     ascending$2=include$29[21],
     descending$2=include$29[22],
     between$2=include$29[23],
     clamp_exn$2=include$29[24],
     clamp$2=include$29[25],
     comparator$6=include$29[26],
     validate_lbound$2=include$29[27],
     validate_ubound$2=include$29[28],
     validate_bound$2=include$29[29],
     pp$1=include$29[30],
     validate_positive$0=include$29[31],
     validate_non_negative$0=include$29[32],
     validate_negative$0=include$29[33],
     validate_non_positive$0=include$29[34],
     is_positive$0=include$29[35],
     is_non_negative$0=include$29[36],
     is_negative$0=include$29[37],
     is_non_positive$0=include$29[38],
     sign$1=include$29[39],
     Hex=include$29[40],
     to_string_hum$0=include$29[41],
     zero$1=include$29[42],
     one=include$29[43],
     minus_one=include$29[44],
     symbol$54=include$29[45],
     symbol$55=include$29[46],
     symbol$56=include$29[47],
     symbol$57=include$29[48],
     neg$1=include$29[49],
     symbol$58=include$29[50],
     symbol$59=include$29[51],
     symbol$60=include$29[52],
     symbol$61=include$29[53],
     rem=include$29[54],
     symbol$62=include$29[55],
     land=include$29[56],
     lor=include$29[57],
     lxor=include$29[58],
     lnot=include$29[59],
     lsl=include$29[60],
     asr=include$29[61],
     round=include$29[62],
     round_towards_zero=include$29[63],
     round_down=include$29[64],
     round_up=include$29[65],
     round_nearest=include$29[66],
     abs$1=include$29[67],
     next$0=include$29[68],
     prev$1=include$29[69],
     pow=include$29[70],
     bit_and=include$29[71],
     bit_or=include$29[72],
     bit_xor=include$29[73],
     bit_not=include$29[74],
     popcount=include$29[75],
     shift_left=include$29[76],
     shift_right=include$29[77],
     decr$0=include$29[78],
     incr$0=include$29[79],
     of_int32_exn=include$29[80],
     to_int32_exn=include$29[81],
     of_int64_exn=include$29[82],
     to_int64=include$29[83],
     of_nativeint_exn=include$29[84],
     to_nativeint_exn=include$29[85],
     of_float_unchecked=include$29[86],
     num_bits=include$29[87],
     max_value=include$29[88],
     min_value=include$29[89],
     lsr=include$29[90],
     shift_right_logical=include$29[91],
     ceil_pow2=include$29[92],
     floor_pow2=include$29[93],
     ceil_log2=include$29[94],
     floor_log2=include$29[95],
     is_pow2=include$29[96],
     O$0=include$29[97],
     max_value_30_bits=include$29[98],
     of_int$0=include$29[99],
     to_int=include$29[100],
     of_int32=include$29[101],
     to_int32=include$29[102],
     of_int64=include$29[103],
     of_nativeint=include$29[104],
     to_nativeint=include$29[105],
     of_int32_trunc=include$29[106],
     to_int32_trunc=include$29[107],
     of_int64_trunc=include$29[108],
     of_nativeint_trunc=include$29[109],
     Private$1=include$29[110],
     Typename_of_t$9=caml_call1(Typerep_lib_Make_typename[1],[0,name$18]),
     typename_of_t$8=Typename_of_t$9[2],
     name_of_t$5=Typename_of_t$9[1],
     typerep_of_t$9=[9,[0,name_of_t$5,[0,_fs_]]],
     t_of_sexp$36=Hex[1],
     sexp_of_t$45=Hex[2],
     compare$33=Hex[3],
     hash_fold_t$17=Hex[4],
     hash$15=Hex[5],
     of_string$3=Hex[6],
     to_string$4=Hex[7],
     to_string_hum$1=Hex[8],
     Typename_of_t$10=caml_call1(Typerep_lib_Make_typename[1],[0,name$19]),
     typename_of_t$9=Typename_of_t$10[2],
     name_of_t$6=Typename_of_t$10[1],
     typerep_of_t$10=[9,[0,name_of_t$6,[0,typerep_of_t$9]]],
     _J$_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$124),0,bin_shape_t$54],0],
     _Ka_=caml_call1(Bin_prot_Shape[4][1],cst_src_int_ml_30_2),
     group$61=caml_call2(Bin_prot_Shape[6],_Ka_,_J$_),
     _Kb_=caml_call1(Bin_prot_Shape[2][1],cst_t$125),
     bin_shape_t$55=caml_call1(caml_call2(Bin_prot_Shape[14],group$61,_Kb_),0),
     bin_writer_t$48=[0,bin_size_t$44,bin_write_t$44],
     bin_reader_t$48=[0,bin_read_t$90,bin_read_t$91],
     bin_t$48=[0,bin_shape_t$55,bin_writer_t$48,bin_reader_t$48],
     _Kc_=Base_quickcheck_Generator[5],
     _Kg_=Base_quickcheck_Generator[65],
     _Kd_=Base_quickcheck_Observer[6],
     _Ke_=Base_quickcheck_Shrinker[6],
     _Kf_=Base_quickcheck_Generator[60],
     _Kh_=Base_quickcheck_Generator[75],
     _Ki_=Base_quickcheck_Generator[70];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$190);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Stable$4=
      [0,
       [0,
        bin_size_t$1,
        bin_write_t$1,
        bin_read_t$3,
        bin_read_t$4,
        bin_shape_t$52,
        bin_writer_t$45,
        bin_reader_t$45,
        bin_t$45,
        compare$31,
        t_of_sexp,
        sexp_of_t$0,
        comparator$5,
        Map$3,
        Set$3]],
     Replace_polymorphic_compare$2=
      [0,
       include$29[11],
       include$29[12],
       include$29[13],
       include$29[14],
       include$29[15],
       include$29[16],
       include$29[17],
       include$29[18],
       include$29[19],
       include$29[20]],
     Hex$0=
      [0,
       bin_size_t$44,
       bin_write_t$44,
       bin_read_t$90,
       bin_read_t$91,
       bin_shape_t$55,
       bin_writer_t$48,
       bin_reader_t$48,
       bin_t$48,
       t_of_sexp$36,
       sexp_of_t$45,
       compare$33,
       hash_fold_t$17,
       hash$15,
       typerep_of_t$10,
       typename_of_t$9,
       of_string$3,
       to_string$4,
       to_string_hum$1],
     include$57=
      [0,
       of_float$1,
       to_float$0,
       of_int_exn,
       to_int_exn,
       validate_positive$0,
       validate_non_negative$0,
       validate_negative$0,
       validate_non_positive$0,
       is_positive$0,
       is_non_negative$0,
       is_negative$0,
       is_non_positive$0,
       sign$1,
       to_string_hum$0,
       zero$1,
       one,
       minus_one,
       symbol$54,
       symbol$55,
       symbol$56,
       symbol$57,
       neg$1,
       symbol$58,
       symbol$59,
       symbol$60,
       symbol$61,
       rem,
       symbol$62,
       land,
       lor,
       lxor,
       lnot,
       lsl,
       asr,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       abs$1,
       next$0,
       prev$1,
       pow,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left,
       shift_right,
       decr$0,
       incr$0,
       of_int32_exn,
       to_int32_exn,
       of_int64_exn,
       to_int64,
       of_nativeint_exn,
       to_nativeint_exn,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       lsr,
       shift_right_logical,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       O$0,
       max_value_30_bits,
       of_int$0,
       to_int,
       of_int32,
       to_int32,
       of_int64,
       of_nativeint,
       to_nativeint,
       of_int32_trunc,
       to_int32_trunc,
       of_int64_trunc,
       of_nativeint_trunc,
       Private$1,
       typerep_of_t$9,
       typename_of_t$8,
       Hex$0,
       bin_size_t$44,
       bin_write_t$44,
       bin_read_t$90,
       bin_read_t$91,
       bin_shape_t$54,
       bin_writer_t$47,
       bin_reader_t$47,
       bin_t$47,
       t_of_sexp$35,
       sexp_of_t$44,
       of_string$2,
       to_string$3,
       pp$1,
       symbol$48,
       symbol$49,
       symbol$50,
       symbol$51,
       symbol$52,
       symbol$53,
       equal$19,
       compare$32,
       min$2,
       max$2,
       ascending$2,
       descending$2,
       between$2,
       clamp_exn$2,
       clamp$2,
       validate_lbound$2,
       validate_ubound$2,
       validate_bound$2,
       Replace_polymorphic_compare$2,
       comparator$6,
       Map$4,
       Set$4,
       hash_fold_t$16,
       hash$14,
       hashable$2,
       Table$3,
       Hash_set$3,
       Hash_queue$2,
       _Kc_,
       _Kd_,
       _Ke_,
       _Kf_,
       _Kg_,
       _Ki_,
       _Kh_,
       Stable$4];
    caml_register_global(4374,include$57,"Core_kernel__Int");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$191);
    caml_call1(Expect_test_collector[4][1],cst_src_int32_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$192,cst$67);
    var
     _Kj_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$126),0,_cF_],0],
     _Kk_=caml_call1(Bin_prot_Shape[4][1],cst_src_int32_ml_6_6),
     group$62=caml_call2(Bin_prot_Shape[6],_Kk_,_Kj_),
     _Kl_=caml_call1(Bin_prot_Shape[2][1],cst_t$127),
     bin_shape_t$56=caml_call1(caml_call2(Bin_prot_Shape[14],group$62,_Kl_),0),
     bin_writer_t$49=[0,_bp_,_cH_],
     bin_reader_t$49=[0,_cJ_,_cK_],
     bin_t$49=[0,bin_shape_t$56,bin_writer_t$49,bin_reader_t$49],
     _Km_=
      [0,
       _bp_,
       _cH_,
       _cJ_,
       _cK_,
       bin_shape_t$56,
       bin_writer_t$49,
       bin_reader_t$49,
       bin_t$49],
     _Kn_=
      [0,
       include$58[5],
       include$58[6],
       include$58[7],
       include$58[8],
       include$58[9],
       include$58[10],
       include$58[11],
       include$58[12],
       include$58[13],
       include$58[14],
       include$58[15],
       include$58[16],
       include$58[17],
       include$58[18],
       include$58[19],
       include$58[20],
       include$58[21],
       include$58[22],
       include$58[23],
       include$58[24],
       include$58[25],
       include$58[26],
       include$58[27],
       include$58[28],
       include$58[29],
       include$58[30]],
     _Ko_=function(_baq_){return _A2_(_Kn_,_baq_)}(_Km_),
     bin_size_t$45=_Ko_[1],
     bin_write_t$45=_Ko_[2],
     bin_read_t$92=_Ko_[3],
     bin_read_t$93=_Ko_[4],
     bin_shape_t$57=_Ko_[5],
     bin_writer_t$50=_Ko_[6],
     bin_reader_t$50=_Ko_[7],
     bin_t$50=_Ko_[8],
     Replace_polymorphic_compare$3=_Ko_[32],
     Map$5=_Ko_[34],
     Set$5=_Ko_[35],
     hashable$3=_Ko_[38],
     Table$4=_Ko_[39],
     Hash_set$4=_Ko_[40],
     Hash_queue$3=_Ko_[41],
     of_float$2=include$58[1],
     to_float$1=include$58[2],
     of_int_exn$0=include$58[3],
     to_int_exn$0=include$58[4],
     hash_fold_t$18=include$58[5],
     hash$16=include$58[6],
     t_of_sexp$37=include$58[7],
     sexp_of_t$46=include$58[8],
     of_string$4=include$58[9],
     to_string$5=include$58[10],
     symbol$63=include$58[11],
     symbol$64=include$58[12],
     symbol$65=include$58[13],
     symbol$66=include$58[14],
     symbol$67=include$58[15],
     symbol$68=include$58[16],
     equal$20=include$58[17],
     compare$34=include$58[18],
     min$3=include$58[19],
     max$3=include$58[20],
     ascending$3=include$58[21],
     descending$3=include$58[22],
     between$3=include$58[23],
     clamp_exn$3=include$58[24],
     clamp$3=include$58[25],
     comparator$7=include$58[26],
     validate_lbound$3=include$58[27],
     validate_ubound$3=include$58[28],
     validate_bound$3=include$58[29],
     pp$2=include$58[30],
     validate_positive$1=include$58[31],
     validate_non_negative$1=include$58[32],
     validate_negative$1=include$58[33],
     validate_non_positive$1=include$58[34],
     is_positive$1=include$58[35],
     is_non_negative$1=include$58[36],
     is_negative$1=include$58[37],
     is_non_positive$1=include$58[38],
     sign$2=include$58[39],
     Hex$1=include$58[40],
     to_string_hum$2=include$58[41],
     zero$2=include$58[42],
     one$0=include$58[43],
     minus_one$0=include$58[44],
     symbol$69=include$58[45],
     symbol$70=include$58[46],
     symbol$71=include$58[47],
     symbol$72=include$58[48],
     neg$2=include$58[49],
     symbol$73=include$58[50],
     symbol$74=include$58[51],
     symbol$75=include$58[52],
     symbol$76=include$58[53],
     rem$0=include$58[54],
     symbol$77=include$58[55],
     land$0=include$58[56],
     lor$0=include$58[57],
     lxor$0=include$58[58],
     lnot$0=include$58[59],
     lsl$0=include$58[60],
     asr$0=include$58[61],
     round$0=include$58[62],
     round_towards_zero$0=include$58[63],
     round_down$0=include$58[64],
     round_up$0=include$58[65],
     round_nearest$0=include$58[66],
     abs$2=include$58[67],
     succ=include$58[68],
     pred=include$58[69],
     pow$0=include$58[70],
     bit_and$0=include$58[71],
     bit_or$0=include$58[72],
     bit_xor$0=include$58[73],
     bit_not$0=include$58[74],
     popcount$0=include$58[75],
     shift_left$0=include$58[76],
     shift_right$0=include$58[77],
     decr$1=include$58[78],
     incr$1=include$58[79],
     of_int32_exn$0=include$58[80],
     to_int32_exn$0=include$58[81],
     of_int64_exn$0=include$58[82],
     to_int64$0=include$58[83],
     of_nativeint_exn$0=include$58[84],
     to_nativeint_exn$0=include$58[85],
     of_float_unchecked$0=include$58[86],
     num_bits$0=include$58[87],
     max_value$0=include$58[88],
     min_value$0=include$58[89],
     lsr$0=include$58[90],
     shift_right_logical$0=include$58[91],
     ceil_pow2$0=include$58[92],
     floor_pow2$0=include$58[93],
     ceil_log2$0=include$58[94],
     floor_log2$0=include$58[95],
     is_pow2$0=include$58[96],
     of_int$1=include$58[98],
     to_int$0=include$58[99],
     of_int32$0=include$58[100],
     to_int32$0=include$58[101],
     of_nativeint$0=include$58[102],
     to_nativeint$0=include$58[103],
     of_int64$0=include$58[104],
     of_int_trunc=include$58[105],
     to_int_trunc=include$58[106],
     of_nativeint_trunc$0=include$58[107],
     of_int64_trunc$0=include$58[108],
     bits_of_float=include$58[109],
     float_of_bits=include$58[110],
     Typename_of_t$11=caml_call1(Typerep_lib_Make_typename[1],[0,name$20]),
     typename_of_t$10=Typename_of_t$11[2],
     name_of_t$7=Typename_of_t$11[1],
     typerep_of_t$11=[9,[0,name_of_t$7,[0,_fr_]]],
     t_of_sexp$38=Hex$1[1],
     sexp_of_t$47=Hex$1[2],
     compare$35=Hex$1[3],
     hash_fold_t$19=Hex$1[4],
     hash$17=Hex$1[5],
     of_string$5=Hex$1[6],
     to_string$6=Hex$1[7],
     to_string_hum$3=Hex$1[8],
     Typename_of_t$12=caml_call1(Typerep_lib_Make_typename[1],[0,name$21]),
     typename_of_t$11=Typename_of_t$12[2],
     name_of_t$8=Typename_of_t$12[1],
     typerep_of_t$12=[9,[0,name_of_t$8,[0,typerep_of_t$11]]],
     _Kp_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$128),0,bin_shape_t$57],0],
     _Kq_=caml_call1(Bin_prot_Shape[4][1],cst_src_int32_ml_16_2),
     group$63=caml_call2(Bin_prot_Shape[6],_Kq_,_Kp_),
     _Kr_=caml_call1(Bin_prot_Shape[2][1],cst_t$129),
     bin_shape_t$58=caml_call1(caml_call2(Bin_prot_Shape[14],group$63,_Kr_),0),
     bin_writer_t$51=[0,bin_size_t$45,bin_write_t$45],
     bin_reader_t$51=[0,bin_read_t$92,bin_read_t$93],
     bin_t$51=[0,bin_shape_t$58,bin_writer_t$51,bin_reader_t$51],
     _Ks_=Base_quickcheck_Generator[6],
     _Kt_=Base_quickcheck_Observer[7],
     _Ku_=Base_quickcheck_Shrinker[7],
     _Kv_=Base_quickcheck_Generator[61],
     _Kw_=Base_quickcheck_Generator[66],
     _Kx_=Base_quickcheck_Generator[76],
     _Ky_=Base_quickcheck_Generator[71];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$193);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Int32=
      [0,
       of_float$2,
       to_float$1,
       of_int_exn$0,
       to_int_exn$0,
       validate_positive$1,
       validate_non_negative$1,
       validate_negative$1,
       validate_non_positive$1,
       is_positive$1,
       is_non_negative$1,
       is_negative$1,
       is_non_positive$1,
       sign$2,
       to_string_hum$2,
       zero$2,
       one$0,
       minus_one$0,
       symbol$69,
       symbol$70,
       symbol$71,
       symbol$72,
       neg$2,
       symbol$73,
       symbol$74,
       symbol$75,
       symbol$76,
       rem$0,
       symbol$77,
       land$0,
       lor$0,
       lxor$0,
       lnot$0,
       lsl$0,
       asr$0,
       round$0,
       round_towards_zero$0,
       round_down$0,
       round_up$0,
       round_nearest$0,
       abs$2,
       succ,
       pred,
       pow$0,
       bit_and$0,
       bit_or$0,
       bit_xor$0,
       bit_not$0,
       popcount$0,
       shift_left$0,
       shift_right$0,
       decr$1,
       incr$1,
       of_int32_exn$0,
       to_int32_exn$0,
       of_int64_exn$0,
       to_int64$0,
       of_nativeint_exn$0,
       to_nativeint_exn$0,
       of_float_unchecked$0,
       num_bits$0,
       max_value$0,
       min_value$0,
       lsr$0,
       shift_right_logical$0,
       ceil_pow2$0,
       floor_pow2$0,
       ceil_log2$0,
       floor_log2$0,
       is_pow2$0,
       of_int$1,
       to_int$0,
       of_int32$0,
       to_int32$0,
       of_nativeint$0,
       to_nativeint$0,
       of_int64$0,
       of_int_trunc,
       to_int_trunc,
       of_nativeint_trunc$0,
       of_int64_trunc$0,
       bits_of_float,
       float_of_bits,
       typerep_of_t$11,
       typename_of_t$10,
       [0,
        bin_size_t$45,
        bin_write_t$45,
        bin_read_t$92,
        bin_read_t$93,
        bin_shape_t$58,
        bin_writer_t$51,
        bin_reader_t$51,
        bin_t$51,
        t_of_sexp$38,
        sexp_of_t$47,
        compare$35,
        hash_fold_t$19,
        hash$17,
        typerep_of_t$12,
        typename_of_t$11,
        of_string$5,
        to_string$6,
        to_string_hum$3],
       bin_size_t$45,
       bin_write_t$45,
       bin_read_t$92,
       bin_read_t$93,
       bin_shape_t$57,
       bin_writer_t$50,
       bin_reader_t$50,
       bin_t$50,
       t_of_sexp$37,
       sexp_of_t$46,
       of_string$4,
       to_string$5,
       pp$2,
       symbol$63,
       symbol$64,
       symbol$65,
       symbol$66,
       symbol$67,
       symbol$68,
       equal$20,
       compare$34,
       min$3,
       max$3,
       ascending$3,
       descending$3,
       between$3,
       clamp_exn$3,
       clamp$3,
       validate_lbound$3,
       validate_ubound$3,
       validate_bound$3,
       Replace_polymorphic_compare$3,
       comparator$7,
       Map$5,
       Set$5,
       hash_fold_t$18,
       hash$16,
       hashable$3,
       Table$4,
       Hash_set$4,
       Hash_queue$3,
       _Ks_,
       _Kt_,
       _Ku_,
       _Kv_,
       _Kw_,
       _Ky_,
       _Kx_];
    caml_register_global(4376,Core_kernel_Int32,"Core_kernel__Int32");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$194);
    caml_call1(Expect_test_collector[4][1],cst_src_int64_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$195,cst$68);
    var
     _Kz_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$130),0,_cM_],0],
     _KA_=caml_call1(Bin_prot_Shape[4][1],cst_src_int64_ml_6_6),
     group$64=caml_call2(Bin_prot_Shape[6],_KA_,_Kz_),
     _KB_=caml_call1(Bin_prot_Shape[2][1],cst_t$131),
     bin_shape_t$59=caml_call1(caml_call2(Bin_prot_Shape[14],group$64,_KB_),0),
     bin_writer_t$52=[0,_bq_,_cO_],
     bin_reader_t$52=[0,_cQ_,_cR_],
     bin_t$52=[0,bin_shape_t$59,bin_writer_t$52,bin_reader_t$52],
     _KC_=
      [0,
       _bq_,
       _cO_,
       _cQ_,
       _cR_,
       bin_shape_t$59,
       bin_writer_t$52,
       bin_reader_t$52,
       bin_t$52],
     _KD_=
      [0,
       include$59[5],
       include$59[6],
       include$59[7],
       include$59[8],
       include$59[9],
       include$59[10],
       include$59[11],
       include$59[12],
       include$59[13],
       include$59[14],
       include$59[15],
       include$59[16],
       include$59[17],
       include$59[18],
       include$59[19],
       include$59[20],
       include$59[21],
       include$59[22],
       include$59[23],
       include$59[24],
       include$59[25],
       include$59[26],
       include$59[27],
       include$59[28],
       include$59[29],
       include$59[30]],
     _KE_=function(_bap_){return _A2_(_KD_,_bap_)}(_KC_),
     bin_size_t$46=_KE_[1],
     bin_write_t$46=_KE_[2],
     bin_read_t$94=_KE_[3],
     bin_read_t$95=_KE_[4],
     bin_shape_t$60=_KE_[5],
     bin_writer_t$53=_KE_[6],
     bin_reader_t$53=_KE_[7],
     bin_t$53=_KE_[8],
     Replace_polymorphic_compare$4=_KE_[32],
     Map$6=_KE_[34],
     Set$6=_KE_[35],
     hashable$4=_KE_[38],
     Table$5=_KE_[39],
     Hash_set$5=_KE_[40],
     Hash_queue$4=_KE_[41],
     of_float$3=include$59[1],
     to_float$2=include$59[2],
     of_int_exn$1=include$59[3],
     to_int_exn$1=include$59[4],
     hash_fold_t$20=include$59[5],
     hash$18=include$59[6],
     t_of_sexp$39=include$59[7],
     sexp_of_t$48=include$59[8],
     of_string$6=include$59[9],
     to_string$7=include$59[10],
     symbol$78=include$59[11],
     symbol$79=include$59[12],
     symbol$80=include$59[13],
     symbol$81=include$59[14],
     symbol$82=include$59[15],
     symbol$83=include$59[16],
     equal$21=include$59[17],
     compare$36=include$59[18],
     min$4=include$59[19],
     max$4=include$59[20],
     ascending$4=include$59[21],
     descending$4=include$59[22],
     between$4=include$59[23],
     clamp_exn$4=include$59[24],
     clamp$4=include$59[25],
     comparator$8=include$59[26],
     validate_lbound$4=include$59[27],
     validate_ubound$4=include$59[28],
     validate_bound$4=include$59[29],
     pp$3=include$59[30],
     validate_positive$2=include$59[31],
     validate_non_negative$2=include$59[32],
     validate_negative$2=include$59[33],
     validate_non_positive$2=include$59[34],
     is_positive$2=include$59[35],
     is_non_negative$2=include$59[36],
     is_negative$2=include$59[37],
     is_non_positive$2=include$59[38],
     sign$3=include$59[39],
     Hex$2=include$59[40],
     to_string_hum$4=include$59[41],
     zero$3=include$59[42],
     one$1=include$59[43],
     minus_one$1=include$59[44],
     symbol$84=include$59[45],
     symbol$85=include$59[46],
     symbol$86=include$59[47],
     symbol$87=include$59[48],
     neg$3=include$59[49],
     symbol$88=include$59[50],
     symbol$89=include$59[51],
     symbol$90=include$59[52],
     symbol$91=include$59[53],
     rem$1=include$59[54],
     symbol$92=include$59[55],
     land$1=include$59[56],
     lor$1=include$59[57],
     lxor$1=include$59[58],
     lnot$1=include$59[59],
     lsl$1=include$59[60],
     asr$1=include$59[61],
     round$1=include$59[62],
     round_towards_zero$1=include$59[63],
     round_down$1=include$59[64],
     round_up$1=include$59[65],
     round_nearest$1=include$59[66],
     abs$3=include$59[67],
     succ$0=include$59[68],
     pred$0=include$59[69],
     pow$1=include$59[70],
     bit_and$1=include$59[71],
     bit_or$1=include$59[72],
     bit_xor$1=include$59[73],
     bit_not$1=include$59[74],
     popcount$1=include$59[75],
     shift_left$1=include$59[76],
     shift_right$1=include$59[77],
     decr$2=include$59[78],
     incr$2=include$59[79],
     of_int32_exn$1=include$59[80],
     to_int32_exn$1=include$59[81],
     of_int64_exn$1=include$59[82],
     to_int64$1=include$59[83],
     of_nativeint_exn$1=include$59[84],
     to_nativeint_exn$1=include$59[85],
     of_float_unchecked$1=include$59[86],
     num_bits$1=include$59[87],
     max_value$1=include$59[88],
     min_value$1=include$59[89],
     lsr$1=include$59[90],
     shift_right_logical$1=include$59[91],
     ceil_pow2$1=include$59[92],
     floor_pow2$1=include$59[93],
     ceil_log2$1=include$59[94],
     floor_log2$1=include$59[95],
     is_pow2$1=include$59[96],
     of_int$2=include$59[98],
     to_int$1=include$59[99],
     of_int32$1=include$59[100],
     to_int32$1=include$59[101],
     of_nativeint$1=include$59[102],
     to_nativeint$1=include$59[103],
     of_int64$1=include$59[104],
     to_int_trunc$0=include$59[105],
     to_int32_trunc$0=include$59[106],
     to_nativeint_trunc=include$59[107],
     bits_of_float$0=include$59[108],
     float_of_bits$0=include$59[109],
     Typename_of_t$13=caml_call1(Typerep_lib_Make_typename[1],[0,name$22]),
     typename_of_t$12=Typename_of_t$13[2],
     name_of_t$9=Typename_of_t$13[1],
     typerep_of_t$13=[9,[0,name_of_t$9,[0,_fq_]]],
     t_of_sexp$40=Hex$2[1],
     sexp_of_t$49=Hex$2[2],
     compare$37=Hex$2[3],
     hash_fold_t$21=Hex$2[4],
     hash$19=Hex$2[5],
     of_string$7=Hex$2[6],
     to_string$8=Hex$2[7],
     to_string_hum$5=Hex$2[8],
     Typename_of_t$14=caml_call1(Typerep_lib_Make_typename[1],[0,name$23]),
     typename_of_t$13=Typename_of_t$14[2],
     name_of_t$10=Typename_of_t$14[1],
     typerep_of_t$14=[9,[0,name_of_t$10,[0,typerep_of_t$13]]],
     _KF_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$132),0,bin_shape_t$60],0],
     _KG_=caml_call1(Bin_prot_Shape[4][1],cst_src_int64_ml_16_2),
     group$65=caml_call2(Bin_prot_Shape[6],_KG_,_KF_),
     _KH_=caml_call1(Bin_prot_Shape[2][1],cst_t$133),
     bin_shape_t$61=caml_call1(caml_call2(Bin_prot_Shape[14],group$65,_KH_),0),
     bin_writer_t$54=[0,bin_size_t$46,bin_write_t$46],
     bin_reader_t$54=[0,bin_read_t$94,bin_read_t$95],
     bin_t$54=[0,bin_shape_t$61,bin_writer_t$54,bin_reader_t$54],
     _KI_=Base_quickcheck_Generator[8],
     _KJ_=Base_quickcheck_Observer[9],
     _KK_=Base_quickcheck_Shrinker[9],
     _KL_=Base_quickcheck_Generator[63],
     _KM_=Base_quickcheck_Generator[68],
     _KN_=Base_quickcheck_Generator[78],
     _KO_=Base_quickcheck_Generator[73];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$196);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Int64=
      [0,
       of_float$3,
       to_float$2,
       of_int_exn$1,
       to_int_exn$1,
       validate_positive$2,
       validate_non_negative$2,
       validate_negative$2,
       validate_non_positive$2,
       is_positive$2,
       is_non_negative$2,
       is_negative$2,
       is_non_positive$2,
       sign$3,
       to_string_hum$4,
       zero$3,
       one$1,
       minus_one$1,
       symbol$84,
       symbol$85,
       symbol$86,
       symbol$87,
       neg$3,
       symbol$88,
       symbol$89,
       symbol$90,
       symbol$91,
       rem$1,
       symbol$92,
       land$1,
       lor$1,
       lxor$1,
       lnot$1,
       lsl$1,
       asr$1,
       round$1,
       round_towards_zero$1,
       round_down$1,
       round_up$1,
       round_nearest$1,
       abs$3,
       succ$0,
       pred$0,
       pow$1,
       bit_and$1,
       bit_or$1,
       bit_xor$1,
       bit_not$1,
       popcount$1,
       shift_left$1,
       shift_right$1,
       decr$2,
       incr$2,
       of_int32_exn$1,
       to_int32_exn$1,
       of_int64_exn$1,
       to_int64$1,
       of_nativeint_exn$1,
       to_nativeint_exn$1,
       of_float_unchecked$1,
       num_bits$1,
       max_value$1,
       min_value$1,
       lsr$1,
       shift_right_logical$1,
       ceil_pow2$1,
       floor_pow2$1,
       ceil_log2$1,
       floor_log2$1,
       is_pow2$1,
       of_int$2,
       to_int$1,
       of_int32$1,
       to_int32$1,
       of_nativeint$1,
       to_nativeint$1,
       of_int64$1,
       to_int_trunc$0,
       to_int32_trunc$0,
       to_nativeint_trunc,
       bits_of_float$0,
       float_of_bits$0,
       typerep_of_t$13,
       typename_of_t$12,
       [0,
        bin_size_t$46,
        bin_write_t$46,
        bin_read_t$94,
        bin_read_t$95,
        bin_shape_t$61,
        bin_writer_t$54,
        bin_reader_t$54,
        bin_t$54,
        t_of_sexp$40,
        sexp_of_t$49,
        compare$37,
        hash_fold_t$21,
        hash$19,
        typerep_of_t$14,
        typename_of_t$13,
        of_string$7,
        to_string$8,
        to_string_hum$5],
       bin_size_t$46,
       bin_write_t$46,
       bin_read_t$94,
       bin_read_t$95,
       bin_shape_t$60,
       bin_writer_t$53,
       bin_reader_t$53,
       bin_t$53,
       t_of_sexp$39,
       sexp_of_t$48,
       of_string$6,
       to_string$7,
       pp$3,
       symbol$78,
       symbol$79,
       symbol$80,
       symbol$81,
       symbol$82,
       symbol$83,
       equal$21,
       compare$36,
       min$4,
       max$4,
       ascending$4,
       descending$4,
       between$4,
       clamp_exn$4,
       clamp$4,
       validate_lbound$4,
       validate_ubound$4,
       validate_bound$4,
       Replace_polymorphic_compare$4,
       comparator$8,
       Map$6,
       Set$6,
       hash_fold_t$20,
       hash$18,
       hashable$4,
       Table$5,
       Hash_set$5,
       Hash_queue$4,
       _KI_,
       _KJ_,
       _KK_,
       _KL_,
       _KM_,
       _KO_,
       _KN_];
    caml_register_global(4378,Core_kernel_Int64,"Core_kernel__Int64");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$197);
    caml_call1(Expect_test_collector[4][1],cst_src_int_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$198,cst$69);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$199);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Int_intf=[0];
    caml_register_global(4379,Core_kernel_Int_intf,"Core_kernel__Int_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$200);
    caml_call1(Expect_test_collector[4][1],cst_src_int63_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$201,cst$70);
    var
     of_binable$1=Base_Int63_emul[110][1],
     to_binable$1=Base_Int63_emul[110][2],
     include$60=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$60,
           bin_size_t$46,
           bin_write_t$46,
           bin_read_t$94,
           bin_read_t$95]),
        [0,to_binable$1,of_binable$1]),
     bin_size_t$47=include$60[1],
     bin_write_t$47=include$60[2],
     bin_read_t$96=include$60[3],
     bin_read_t$97=include$60[4],
     bin_shape_t$62=include$60[5],
     bin_writer_t$55=include$60[6],
     bin_reader_t$55=include$60[7],
     bin_t$55=include$60[8],
     Bin_emulated=
      [0,
       bin_size_t$47,
       bin_write_t$47,
       bin_read_t$96,
       bin_read_t$97,
       bin_shape_t$62,
       bin_writer_t$55,
       bin_reader_t$55,
       bin_t$55];
    function binable_of_repr(param)
     {return 0 === param
              ?[0,
                bin_size_t$44,
                bin_write_t$44,
                bin_read_t$90,
                bin_read_t$91,
                bin_shape_t$54,
                bin_writer_t$47,
                bin_reader_t$47,
                bin_t$47]
              :Bin_emulated}
    var
     binable=binable_of_repr(include$61[113][2]),
     bin_size_t$48=binable[1],
     bin_write_t$48=binable[2],
     bin_read_t$98=binable[3],
     bin_read_t$99=binable[4],
     bin_writer_t$56=binable[6],
     bin_reader_t$56=binable[7],
     bin_t$56=binable[8],
     bin_shape_t$63=Bin_prot_Shape[32],
     t_of_sexp$41=include$61[7],
     sexp_of_t$50=include$61[8],
     comparator$9=include$61[26],
     compare$38=include$61[18],
     include$62=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$48,
         bin_write_t$48,
         bin_read_t$98,
         bin_read_t$99,
         bin_shape_t$63,
         bin_writer_t$56,
         bin_reader_t$56,
         bin_t$56,
         compare$38,
         t_of_sexp$41,
         sexp_of_t$50,
         comparator$9]),
     Map$7=include$62[1],
     Set$7=include$62[2],
     _KP_=
      [0,
       bin_size_t$48,
       bin_write_t$48,
       bin_read_t$98,
       bin_read_t$99,
       bin_shape_t$63,
       bin_writer_t$56,
       bin_reader_t$56,
       bin_t$56],
     _KQ_=
      [0,
       include$61[5],
       include$61[6],
       include$61[7],
       include$61[8],
       include$61[9],
       include$61[10],
       include$61[11],
       include$61[12],
       include$61[13],
       include$61[14],
       include$61[15],
       include$61[16],
       include$61[17],
       include$61[18],
       include$61[19],
       include$61[20],
       include$61[21],
       include$61[22],
       include$61[23],
       include$61[24],
       include$61[25],
       include$61[26],
       include$61[27],
       include$61[28],
       include$61[29],
       include$61[30]],
     _KR_=function(_bao_){return _A2_(_KQ_,_bao_)}(_KP_),
     bin_size_t$49=_KR_[1],
     bin_write_t$49=_KR_[2],
     bin_read_t$100=_KR_[3],
     bin_read_t$101=_KR_[4],
     bin_shape_t$64=_KR_[5],
     bin_writer_t$57=_KR_[6],
     bin_reader_t$57=_KR_[7],
     bin_t$57=_KR_[8],
     Map$8=_KR_[34],
     Set$8=_KR_[35],
     hashable$5=_KR_[38],
     Table$6=_KR_[39],
     Hash_set$6=_KR_[40],
     Hash_queue$5=_KR_[41],
     include$63=
      [0,
       include$61[11],
       include$61[12],
       include$61[13],
       include$61[14],
       include$61[15],
       include$61[16],
       include$61[17],
       include$61[18],
       include$61[19],
       include$61[20]],
     of_float$4=include$61[1],
     to_float$3=include$61[2],
     of_int_exn$2=include$61[3],
     to_int_exn$2=include$61[4],
     hash_fold_t$22=include$61[5],
     _KS_=include$61[6],
     _KT_=include$61[7],
     _KU_=include$61[8],
     _KV_=include$61[9],
     _KW_=include$61[10],
     symbol$93=include$61[11],
     symbol$94=include$61[12],
     symbol$95=include$61[13],
     symbol$96=include$61[14],
     symbol$97=include$61[15],
     symbol$98=include$61[16],
     equal$22=include$61[17],
     compare$39=include$61[18],
     min$5=include$61[19],
     max$5=include$61[20],
     ascending$5=include$61[21],
     descending$5=include$61[22],
     between$5=include$61[23],
     clamp_exn$5=include$61[24],
     clamp$5=include$61[25],
     comparator$10=include$61[26],
     validate_lbound$5=include$61[27],
     validate_ubound$5=include$61[28],
     validate_bound$5=include$61[29],
     pp$4=include$61[30],
     validate_positive$3=include$61[31],
     validate_non_negative$3=include$61[32],
     validate_negative$3=include$61[33],
     validate_non_positive$3=include$61[34],
     is_positive$3=include$61[35],
     is_non_negative$3=include$61[36],
     is_negative$3=include$61[37],
     is_non_positive$3=include$61[38],
     sign$4=include$61[39],
     Hex$3=include$61[40],
     zero$4=include$61[42],
     one$2=include$61[43],
     minus_one$2=include$61[44],
     symbol$99=include$61[45],
     symbol$100=include$61[46],
     symbol$101=include$61[47],
     symbol$102=include$61[48],
     neg$4=include$61[49],
     symbol$103=include$61[50],
     symbol$104=include$61[51],
     symbol$105=include$61[52],
     symbol$106=include$61[53],
     rem$2=include$61[54],
     symbol$107=include$61[55],
     land$2=include$61[56],
     lor$2=include$61[57],
     lxor$2=include$61[58],
     lnot$2=include$61[59],
     lsl$2=include$61[60],
     asr$2=include$61[61],
     round$2=include$61[62],
     round_towards_zero$2=include$61[63],
     round_down$2=include$61[64],
     round_up$2=include$61[65],
     round_nearest$2=include$61[66],
     abs$4=include$61[67],
     succ$1=include$61[68],
     pred$1=include$61[69],
     pow$2=include$61[70],
     bit_and$2=include$61[71],
     bit_or$2=include$61[72],
     bit_xor$2=include$61[73],
     bit_not$2=include$61[74],
     popcount$2=include$61[75],
     shift_left$2=include$61[76],
     shift_right$2=include$61[77],
     decr$3=include$61[78],
     incr$3=include$61[79],
     of_int32_exn$2=include$61[80],
     to_int32_exn$2=include$61[81],
     of_int64_exn$2=include$61[82],
     to_int64$2=include$61[83],
     of_nativeint_exn$2=include$61[84],
     to_nativeint_exn$2=include$61[85],
     of_float_unchecked$2=include$61[86],
     num_bits$2=include$61[87],
     max_value$2=include$61[88],
     min_value$2=include$61[89],
     lsr$2=include$61[90],
     shift_right_logical$2=include$61[91],
     ceil_pow2$2=include$61[92],
     floor_pow2$2=include$61[93],
     ceil_log2$2=include$61[94],
     is_pow2$2=include$61[95],
     of_int$3=include$61[98],
     to_int$2=include$61[99],
     of_int32$2=include$61[100],
     to_int32$2=include$61[101],
     of_int64$2=include$61[102],
     of_nativeint$2=include$61[103],
     to_nativeint$2=include$61[104],
     to_int_trunc$1=include$61[105],
     to_int32_trunc$1=include$61[106],
     of_int64_trunc$1=include$61[107],
     of_nativeint_trunc$1=include$61[108],
     to_nativeint_trunc$0=include$61[109],
     random=include$61[110],
     random_incl=include$61[111],
     floor_log2$2=include$61[112],
     t_of_sexp$42=Hex$3[1],
     sexp_of_t$51=Hex$3[2],
     compare$40=Hex$3[3],
     hash_fold_t$23=Hex$3[4],
     hash$20=Hex$3[5],
     of_string$8=Hex$3[6],
     to_string$9=Hex$3[7],
     to_string_hum$6=Hex$3[8],
     _KX_=include$61[41],
     Typename_of_t$15=caml_call1(Typerep_lib_Make_typename[1],[0,name$24]),
     typename_of_t$14=Typename_of_t$15[2],
     name_of_t$11=Typename_of_t$15[1],
     typerep_of_t$15=[9,[0,name_of_t$11,[0,_fo_]]],
     _KY_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$134),0,bin_shape_t$64],0],
     _KZ_=caml_call1(Bin_prot_Shape[4][1],cst_src_int63_ml_76_2),
     group$66=caml_call2(Bin_prot_Shape[6],_KZ_,_KY_),
     _K0_=caml_call1(Bin_prot_Shape[2][1],cst_t$135),
     bin_shape_t$65=caml_call1(caml_call2(Bin_prot_Shape[14],group$66,_K0_),0),
     bin_writer_t$58=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_t$58=[0,bin_read_t$100,bin_read_t$101],
     bin_t$58=[0,bin_shape_t$65,bin_writer_t$58,bin_reader_t$58],
     quickcheck_generator$8=Base_quickcheck_Generator[7],
     quickcheck_observer$7=Base_quickcheck_Observer[8],
     quickcheck_shrinker$7=Base_quickcheck_Shrinker[8],
     _K1_=Base_quickcheck_Generator[62],
     _K2_=Base_quickcheck_Generator[67],
     _K3_=Base_quickcheck_Generator[77],
     _K4_=Base_quickcheck_Generator[72];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$202);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Stable$5=
      [0,
       [0,
        bin_size_t$48,
        bin_write_t$48,
        bin_read_t$98,
        bin_read_t$99,
        bin_shape_t$63,
        bin_writer_t$56,
        bin_reader_t$56,
        bin_t$56,
        compare$38,
        t_of_sexp$41,
        sexp_of_t$50,
        comparator$9,
        Map$7,
        Set$7]],
     Hex$4=
      [0,
       bin_size_t$49,
       bin_write_t$49,
       bin_read_t$100,
       bin_read_t$101,
       bin_shape_t$65,
       bin_writer_t$58,
       bin_reader_t$58,
       bin_t$58,
       t_of_sexp$42,
       sexp_of_t$51,
       compare$40,
       hash_fold_t$23,
       hash$20,
       typerep_of_t$15,
       typename_of_t$14,
       of_string$8,
       to_string$9,
       to_string_hum$6],
     include$64=
      [0,
       of_float$4,
       to_float$3,
       of_int_exn$2,
       to_int_exn$2,
       validate_positive$3,
       validate_non_negative$3,
       validate_negative$3,
       validate_non_positive$3,
       is_positive$3,
       is_non_negative$3,
       is_negative$3,
       is_non_positive$3,
       sign$4,
       _KX_,
       zero$4,
       one$2,
       minus_one$2,
       symbol$99,
       symbol$100,
       symbol$101,
       symbol$102,
       neg$4,
       symbol$103,
       symbol$104,
       symbol$105,
       symbol$106,
       rem$2,
       symbol$107,
       land$2,
       lor$2,
       lxor$2,
       lnot$2,
       lsl$2,
       asr$2,
       round$2,
       round_towards_zero$2,
       round_down$2,
       round_up$2,
       round_nearest$2,
       abs$4,
       succ$1,
       pred$1,
       pow$2,
       bit_and$2,
       bit_or$2,
       bit_xor$2,
       bit_not$2,
       popcount$2,
       shift_left$2,
       shift_right$2,
       decr$3,
       incr$3,
       of_int32_exn$2,
       to_int32_exn$2,
       of_int64_exn$2,
       to_int64$2,
       of_nativeint_exn$2,
       to_nativeint_exn$2,
       of_float_unchecked$2,
       num_bits$2,
       max_value$2,
       min_value$2,
       lsr$2,
       shift_right_logical$2,
       ceil_pow2$2,
       floor_pow2$2,
       ceil_log2$2,
       is_pow2$2,
       of_int$3,
       to_int$2,
       of_int32$2,
       to_int32$2,
       of_int64$2,
       of_nativeint$2,
       to_nativeint$2,
       to_int_trunc$1,
       to_int32_trunc$1,
       of_int64_trunc$1,
       of_nativeint_trunc$1,
       to_nativeint_trunc$0,
       random,
       random_incl,
       floor_log2$2,
       _fo_,
       _e3_,
       Hex$4,
       bin_size_t$49,
       bin_write_t$49,
       bin_read_t$100,
       bin_read_t$101,
       bin_shape_t$64,
       bin_writer_t$57,
       bin_reader_t$57,
       bin_t$57,
       _KT_,
       _KU_,
       _KV_,
       _KW_,
       pp$4,
       symbol$93,
       symbol$94,
       symbol$95,
       symbol$96,
       symbol$97,
       symbol$98,
       equal$22,
       compare$39,
       min$5,
       max$5,
       ascending$5,
       descending$5,
       between$5,
       clamp_exn$5,
       clamp$5,
       validate_lbound$5,
       validate_ubound$5,
       validate_bound$5,
       include$63,
       comparator$10,
       Map$8,
       Set$8,
       hash_fold_t$22,
       _KS_,
       hashable$5,
       Table$6,
       Hash_set$6,
       Hash_queue$5,
       quickcheck_generator$8,
       quickcheck_observer$7,
       quickcheck_shrinker$7,
       _K1_,
       _K2_,
       _K4_,
       _K3_,
       Stable$5];
    caml_register_global(4382,include$64,"Core_kernel__Int63");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$203);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_int63able_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$204,cst$71);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$205);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Stable_int63able=[0];
    caml_register_global
     (4383,Core_kernel_Stable_int63able,"Core_kernel__Stable_int63able");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$206);
    caml_call1(Expect_test_collector[4][1],cst_src_unit_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$207,cst$72);
    var
     _K5_=Bin_prot_Std[45],
     _K6_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$136),0,_K5_],0],
     _K7_=caml_call1(Bin_prot_Shape[4][1],cst_src_unit_ml_7_6),
     group$67=caml_call2(Bin_prot_Shape[6],_K7_,_K6_),
     _K8_=caml_call1(Bin_prot_Shape[2][1],cst_t$137),
     bin_shape_t$66=caml_call1(caml_call2(Bin_prot_Shape[14],group$67,_K8_),0),
     bin_size_t$50=Bin_prot_Std[1],
     bin_write_t$50=Bin_prot_Std[47],
     bin_writer_t$59=[0,bin_size_t$50,bin_write_t$50],
     bin_read_t$102=Bin_prot_Std[50],
     bin_read_t$103=Bin_prot_Std[49],
     bin_reader_t$59=[0,bin_read_t$103,bin_read_t$102],
     bin_t$59=[0,bin_shape_t$66,bin_writer_t$59,bin_reader_t$59],
     compare$41=Base[86][72],
     t_of_sexp$43=Base[86][76],
     sexp_of_t$52=Base[86][77],
     include$65=caml_call1(_hu_[1][2],[0,compare$41,sexp_of_t$52]),
     _K9_=include$65[1],
     Expect_test_collector$1=
      caml_call1
       (Expect_test_collector[2],
        [0,
         Expect_test_config[2],
         Expect_test_config[3],
         Expect_test_config[4],
         Expect_test_config[5],
         Expect_test_config[6],
         Expect_test_config[7]]);
    function _K__(param)
     {var
       _bal_=caml_call1(Bin_prot_Shape[21],bin_shape_t$66),
       _bam_=caml_call1(Bin_prot_Shape[18][4],_bal_);
      caml_call1(Stdlib[46],_bam_);
      var
       _ban_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_unit_ml$0),
         15,
         289,
         297,
         303];
      return caml_call1(Expect_test_collector$1[1],_ban_)}
    var
     _K$_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_unit_ml$1),
       15,
       289,
       304,
       342],
     _Lc_=
      [0,
       [0,
        _Lb_,
        _La_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_unit_ml$2),
         15,
         289,
         297,
         303],
        _K$_],
       0],
     _Ld_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_unit_ml$4),
       13,
       227,
       231,
       343],
     _Le_=
      caml_call1
       (Expect_test_common_File[4][3],cst_a7cce5982e04b068cd882d40ef8853b5);
    caml_call9
     (Expect_test_collector$1[3],
      _Le_,
      _Ld_,
      cst_src_unit_ml$3,
      0,
      0,
      _Lc_,
      0,
      Inline_test_config,
      _K__);
    var
     _Lf_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$138),0,_bZ_],0],
     _Lg_=caml_call1(Bin_prot_Shape[4][1],cst_src_unit_ml_25_6),
     group$68=caml_call2(Bin_prot_Shape[6],_Lg_,_Lf_),
     _Lh_=caml_call1(Bin_prot_Shape[2][1],cst_t$139),
     bin_shape_t$67=caml_call1(caml_call2(Bin_prot_Shape[14],group$68,_Lh_),0),
     bin_writer_t$60=[0,_bm_,_b1_],
     bin_reader_t$60=[0,_b3_,_b4_],
     bin_t$60=[0,bin_shape_t$67,bin_writer_t$60,bin_reader_t$60],
     _Li_=
      [0,
       _bm_,
       _b1_,
       _b3_,
       _b4_,
       bin_shape_t$67,
       bin_writer_t$60,
       bin_reader_t$60,
       bin_t$60],
     _Lj_=
      [0,
       include$66[2],
       include$66[3],
       include$66[4],
       include$66[5],
       include$66[6],
       include$66[7],
       include$66[8],
       include$66[9],
       include$66[10],
       include$66[11],
       include$66[12],
       include$66[13],
       include$66[14],
       include$66[15],
       include$66[16],
       include$66[17],
       include$66[18],
       include$66[19],
       include$66[20],
       include$66[21],
       include$66[22],
       include$66[23],
       include$66[24],
       include$66[25],
       include$66[26],
       include$66[27]],
     _Lk_=function(_bak_){return _A2_(_Lj_,_bak_)}(_Li_),
     bin_size_t$51=_Lk_[1],
     bin_write_t$51=_Lk_[2],
     bin_read_t$104=_Lk_[3],
     bin_read_t$105=_Lk_[4],
     bin_shape_t$68=_Lk_[5],
     bin_writer_t$61=_Lk_[6],
     bin_reader_t$61=_Lk_[7],
     bin_t$61=_Lk_[8],
     Replace_polymorphic_compare$5=_Lk_[32],
     Map$9=_Lk_[34],
     Set$9=_Lk_[35],
     hashable$6=_Lk_[38],
     Table$7=_Lk_[39],
     Hash_set$7=_Lk_[40],
     Hash_queue$6=_Lk_[41],
     all$1=include$66[1],
     hash_fold_t$24=include$66[2],
     hash$21=include$66[3],
     t_of_sexp$44=include$66[4],
     sexp_of_t$53=include$66[5],
     of_string$9=include$66[6],
     to_string$10=include$66[7],
     symbol$108=include$66[8],
     symbol$109=include$66[9],
     symbol$110=include$66[10],
     symbol$111=include$66[11],
     symbol$112=include$66[12],
     symbol$113=include$66[13],
     equal$23=include$66[14],
     compare$42=include$66[15],
     min$6=include$66[16],
     max$6=include$66[17],
     ascending$6=include$66[18],
     descending$6=include$66[19],
     between$6=include$66[20],
     clamp_exn$6=include$66[21],
     clamp$6=include$66[22],
     comparator$11=include$66[23],
     validate_lbound$6=include$66[24],
     validate_ubound$6=include$66[25],
     validate_bound$6=include$66[26],
     pp$5=include$66[27],
     invariant$4=include$66[28],
     Typename_of_t$16=caml_call1(Typerep_lib_Make_typename[1],[0,name$25]),
     typename_of_t$15=Typename_of_t$16[2],
     name_of_t$12=Typename_of_t$16[1],
     typerep_of_t$16=[9,[0,name_of_t$12,[0,_fi_]]],
     _Ll_=Base_quickcheck_Generator[1],
     _Lm_=Base_quickcheck_Observer[2],
     _Ln_=Base_quickcheck_Shrinker[2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$208);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Unit=
      [0,
       typerep_of_t$16,
       typename_of_t$15,
       all$1,
       invariant$4,
       bin_size_t$51,
       bin_write_t$51,
       bin_read_t$104,
       bin_read_t$105,
       bin_shape_t$68,
       bin_writer_t$61,
       bin_reader_t$61,
       bin_t$61,
       t_of_sexp$44,
       sexp_of_t$53,
       of_string$9,
       to_string$10,
       pp$5,
       symbol$108,
       symbol$109,
       symbol$110,
       symbol$111,
       symbol$112,
       symbol$113,
       equal$23,
       compare$42,
       min$6,
       max$6,
       ascending$6,
       descending$6,
       between$6,
       clamp_exn$6,
       clamp$6,
       validate_lbound$6,
       validate_ubound$6,
       validate_bound$6,
       Replace_polymorphic_compare$5,
       comparator$11,
       Map$9,
       Set$9,
       hash_fold_t$24,
       hash$21,
       hashable$6,
       Table$7,
       Hash_set$7,
       Hash_queue$6,
       _Ll_,
       _Lm_,
       _Ln_,
       [0,
        [0,
         bin_size_t$50,
         bin_write_t$50,
         bin_read_t$103,
         bin_read_t$102,
         bin_shape_t$66,
         bin_writer_t$59,
         bin_reader_t$59,
         bin_t$59,
         compare$41,
         t_of_sexp$43,
         sexp_of_t$52,
         _K9_]]];
    caml_register_global(4385,Core_kernel_Unit,"Core_kernel__Unit");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$209);
    caml_call1(Expect_test_collector[4][1],cst_src_interfaces_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$210,cst$73);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$211);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Interfaces=[0];
    caml_register_global
     (4386,Core_kernel_Interfaces,"Core_kernel__Interfaces");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$212);
    caml_call1(Expect_test_collector[4][1],cst_src_lazy_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$213,cst$74);
    var
     _Lo_=caml_call1(Bin_prot_Shape[3][1],cst_a$55),
     _Lp_=caml_call1(Bin_prot_Shape[4][1],cst_src_lazy_ml_7_16),
     _Lq_=caml_call1(_c7_,caml_call2(Bin_prot_Shape[15],_Lp_,_Lo_)),
     _Lr_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$56),0],
     _Ls_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$140),_Lr_,_Lq_],0],
     _Lt_=caml_call1(Bin_prot_Shape[4][1],cst_src_lazy_ml_7_4),
     group$69=caml_call2(Bin_prot_Shape[6],_Lt_,_Ls_);
    function bin_shape_t$69(a)
     {var _baj_=caml_call1(Bin_prot_Shape[2][1],cst_t$141);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$69,_baj_),[0,a,0])}
    function bin_size_t$52(size_of_a,v){return caml_call2(_bu_,size_of_a,v)}
    function bin_write_t$52(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_c9_,write_a),buf,pos,v)}
    function bin_writer_t$62(bin_writer_a)
     {function _baf_(v)
       {var _bag_=bin_writer_a[2];
        return function(_bah_,_bai_)
         {return bin_write_t$52(_bag_,v,_bah_,_bai_)}}
      return [0,function(v){return bin_size_t$52(bin_writer_a[1],v)},_baf_]}
    function bin_read_t$106(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_da_,of_a),buf,pos_ref,vint)}
    function bin_read_t$107(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_c$_,of_a),buf,pos_ref)}
    function bin_reader_t$62(bin_reader_a)
     {function _bae_(buf,pos_ref,vtag)
       {return bin_read_t$106(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$107(bin_reader_a[1],buf,pos_ref)},
              _bae_]}
    function bin_t$62(bin_a)
     {var _bac_=bin_reader_t$62(bin_a[3]),_bad_=bin_writer_t$62(bin_a[2]);
      return [0,bin_shape_t$69(bin_a[1]),_bad_,_bac_]}
    var
     t_of_sexp$45=Sexplib_Std[24],
     sexp_of_t$54=Sexplib_Std[23],
     Typename_of_t$17=caml_call1(Typerep_lib_Make_typename[2],[0,name$26]),
     typename_of_t$16=Typename_of_t$17[2];
    function typerep_of_t$17(of_a)
     {var name_of_t=caml_call1(Typename_of_t$17[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_bab_){return caml_call1(_fd_,of_a)}]]]]}
    var
     map$20=include$67[10],
     compare$43=include$67[1],
     _Lu_=include$67[1],
     _Lv_=include$67[2],
     _Lw_=include$67[3],
     _Lx_=include$67[4],
     _Ly_=include$67[5],
     _Lz_=include$67[6],
     _LA_=include$67[7],
     _LB_=include$67[8],
     _LC_=include$67[9],
     _LD_=include$67[10],
     _LE_=include$67[11],
     _LF_=include$67[12],
     _LG_=include$67[13],
     _LH_=include$67[14],
     _LI_=include$67[15],
     _LL_=include$67[18],
     _LM_=include$67[19],
     _LJ_=include$67[16],
     _LK_=include$67[17],
     _LN_=include$67[20],
     _LO_=include$67[21];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$214);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$68=
      [0,
       bin_shape_t$69,
       bin_size_t$52,
       bin_write_t$52,
       bin_read_t$107,
       bin_read_t$106,
       bin_writer_t$62,
       bin_reader_t$62,
       bin_t$62,
       typerep_of_t$17,
       typename_of_t$16,
       _Lu_,
       _Lv_,
       _Lw_,
       _Lx_,
       _Ly_,
       _Lz_,
       _LA_,
       _LB_,
       _LC_,
       _LD_,
       _LE_,
       _LF_,
       _LG_,
       _LH_,
       _LI_,
       _LJ_,
       _LK_,
       _LL_,
       _LM_,
       _LN_,
       _LO_,
       [0,
        [0,
         bin_shape_t$69,
         bin_size_t$52,
         bin_write_t$52,
         bin_read_t$107,
         bin_read_t$106,
         bin_writer_t$62,
         bin_reader_t$62,
         bin_t$62,
         compare$43,
         t_of_sexp$45,
         sexp_of_t$54,
         map$20]]];
    caml_register_global(4389,include$68,"Core_kernel__Lazy");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$215);
    caml_call1(Expect_test_collector[4][1],cst_src_nativeint_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$216,cst$75);
    var
     _LP_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$142),0,_cT_],0],
     _LQ_=caml_call1(Bin_prot_Shape[4][1],cst_src_nativeint_ml_6_6),
     group$70=caml_call2(Bin_prot_Shape[6],_LQ_,_LP_),
     _LR_=caml_call1(Bin_prot_Shape[2][1],cst_t$143),
     bin_shape_t$70=caml_call1(caml_call2(Bin_prot_Shape[14],group$70,_LR_),0),
     bin_writer_t$63=[0,_br_,_cV_],
     bin_reader_t$63=[0,_cX_,_cY_],
     bin_t$63=[0,bin_shape_t$70,bin_writer_t$63,bin_reader_t$63],
     _LS_=
      [0,
       _br_,
       _cV_,
       _cX_,
       _cY_,
       bin_shape_t$70,
       bin_writer_t$63,
       bin_reader_t$63,
       bin_t$63],
     _LT_=
      [0,
       include$69[5],
       include$69[6],
       include$69[7],
       include$69[8],
       include$69[9],
       include$69[10],
       include$69[11],
       include$69[12],
       include$69[13],
       include$69[14],
       include$69[15],
       include$69[16],
       include$69[17],
       include$69[18],
       include$69[19],
       include$69[20],
       include$69[21],
       include$69[22],
       include$69[23],
       include$69[24],
       include$69[25],
       include$69[26],
       include$69[27],
       include$69[28],
       include$69[29],
       include$69[30]],
     _LU_=function(_baa_){return _A2_(_LT_,_baa_)}(_LS_),
     bin_size_t$53=_LU_[1],
     bin_write_t$53=_LU_[2],
     bin_read_t$108=_LU_[3],
     bin_read_t$109=_LU_[4],
     bin_shape_t$71=_LU_[5],
     bin_writer_t$64=_LU_[6],
     bin_reader_t$64=_LU_[7],
     bin_t$64=_LU_[8],
     Replace_polymorphic_compare$6=_LU_[32],
     Map$10=_LU_[34],
     Set$10=_LU_[35],
     hashable$7=_LU_[38],
     Table$8=_LU_[39],
     Hash_set$8=_LU_[40],
     Hash_queue$7=_LU_[41],
     of_float$5=include$69[1],
     to_float$4=include$69[2],
     of_int_exn$3=include$69[3],
     to_int_exn$3=include$69[4],
     hash_fold_t$25=include$69[5],
     hash$22=include$69[6],
     t_of_sexp$46=include$69[7],
     sexp_of_t$55=include$69[8],
     of_string$10=include$69[9],
     to_string$11=include$69[10],
     symbol$114=include$69[11],
     symbol$115=include$69[12],
     symbol$116=include$69[13],
     symbol$117=include$69[14],
     symbol$118=include$69[15],
     symbol$119=include$69[16],
     equal$24=include$69[17],
     compare$44=include$69[18],
     min$7=include$69[19],
     max$7=include$69[20],
     ascending$7=include$69[21],
     descending$7=include$69[22],
     between$7=include$69[23],
     clamp_exn$7=include$69[24],
     clamp$7=include$69[25],
     comparator$12=include$69[26],
     validate_lbound$7=include$69[27],
     validate_ubound$7=include$69[28],
     validate_bound$7=include$69[29],
     pp$6=include$69[30],
     validate_positive$4=include$69[31],
     validate_non_negative$4=include$69[32],
     validate_negative$4=include$69[33],
     validate_non_positive$4=include$69[34],
     is_positive$4=include$69[35],
     is_non_negative$4=include$69[36],
     is_negative$4=include$69[37],
     is_non_positive$4=include$69[38],
     sign$5=include$69[39],
     Hex$5=include$69[40],
     to_string_hum$7=include$69[41],
     zero$5=include$69[42],
     one$3=include$69[43],
     minus_one$3=include$69[44],
     symbol$120=include$69[45],
     symbol$121=include$69[46],
     symbol$122=include$69[47],
     symbol$123=include$69[48],
     neg$5=include$69[49],
     symbol$124=include$69[50],
     symbol$125=include$69[51],
     symbol$126=include$69[52],
     symbol$127=include$69[53],
     rem$3=include$69[54],
     symbol$128=include$69[55],
     land$3=include$69[56],
     lor$3=include$69[57],
     lxor$3=include$69[58],
     lnot$3=include$69[59],
     lsl$3=include$69[60],
     asr$3=include$69[61],
     round$3=include$69[62],
     round_towards_zero$3=include$69[63],
     round_down$3=include$69[64],
     round_up$3=include$69[65],
     round_nearest$3=include$69[66],
     abs$5=include$69[67],
     succ$2=include$69[68],
     pred$2=include$69[69],
     pow$3=include$69[70],
     bit_and$3=include$69[71],
     bit_or$3=include$69[72],
     bit_xor$3=include$69[73],
     bit_not$3=include$69[74],
     popcount$3=include$69[75],
     shift_left$3=include$69[76],
     shift_right$3=include$69[77],
     decr$4=include$69[78],
     incr$4=include$69[79],
     of_int32_exn$3=include$69[80],
     to_int32_exn$3=include$69[81],
     of_int64_exn$3=include$69[82],
     to_int64$3=include$69[83],
     of_nativeint_exn$3=include$69[84],
     to_nativeint_exn$3=include$69[85],
     of_float_unchecked$3=include$69[86],
     num_bits$3=include$69[87],
     max_value$3=include$69[88],
     min_value$3=include$69[89],
     lsr$3=include$69[90],
     shift_right_logical$3=include$69[91],
     ceil_pow2$3=include$69[92],
     floor_pow2$3=include$69[93],
     ceil_log2$3=include$69[94],
     floor_log2$3=include$69[95],
     is_pow2$3=include$69[96],
     of_int$4=include$69[98],
     to_int$3=include$69[99],
     of_int32$3=include$69[100],
     to_int32$3=include$69[101],
     of_nativeint$3=include$69[102],
     to_nativeint$3=include$69[103],
     of_int64$3=include$69[104],
     to_int_trunc$2=include$69[105],
     to_int32_trunc$2=include$69[106],
     of_int64_trunc$2=include$69[107],
     Typename_of_t$18=caml_call1(Typerep_lib_Make_typename[1],[0,name$27]),
     typename_of_t$17=Typename_of_t$18[2],
     name_of_t$13=Typename_of_t$18[1],
     typerep_of_t$18=[9,[0,name_of_t$13,[0,_fp_]]],
     t_of_sexp$47=Hex$5[1],
     sexp_of_t$56=Hex$5[2],
     compare$45=Hex$5[3],
     hash_fold_t$26=Hex$5[4],
     hash$23=Hex$5[5],
     of_string$11=Hex$5[6],
     to_string$12=Hex$5[7],
     to_string_hum$8=Hex$5[8],
     Typename_of_t$19=caml_call1(Typerep_lib_Make_typename[1],[0,name$28]),
     typename_of_t$18=Typename_of_t$19[2],
     name_of_t$14=Typename_of_t$19[1],
     typerep_of_t$19=[9,[0,name_of_t$14,[0,typerep_of_t$18]]],
     _LV_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$144),0,bin_shape_t$71],0],
     _LW_=caml_call1(Bin_prot_Shape[4][1],cst_src_nativeint_ml_16_2),
     group$71=caml_call2(Bin_prot_Shape[6],_LW_,_LV_),
     _LX_=caml_call1(Bin_prot_Shape[2][1],cst_t$145),
     bin_shape_t$72=caml_call1(caml_call2(Bin_prot_Shape[14],group$71,_LX_),0),
     bin_writer_t$65=[0,bin_size_t$53,bin_write_t$53],
     bin_reader_t$65=[0,bin_read_t$108,bin_read_t$109],
     bin_t$65=[0,bin_shape_t$72,bin_writer_t$65,bin_reader_t$65],
     _LY_=Base_quickcheck_Generator[9],
     _LZ_=Base_quickcheck_Observer[10],
     _L0_=Base_quickcheck_Shrinker[10],
     _L1_=Base_quickcheck_Generator[64],
     _L2_=Base_quickcheck_Generator[69],
     _L3_=Base_quickcheck_Generator[79],
     _L4_=Base_quickcheck_Generator[74];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$217);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Nativeint=
      [0,
       of_float$5,
       to_float$4,
       of_int_exn$3,
       to_int_exn$3,
       validate_positive$4,
       validate_non_negative$4,
       validate_negative$4,
       validate_non_positive$4,
       is_positive$4,
       is_non_negative$4,
       is_negative$4,
       is_non_positive$4,
       sign$5,
       to_string_hum$7,
       zero$5,
       one$3,
       minus_one$3,
       symbol$120,
       symbol$121,
       symbol$122,
       symbol$123,
       neg$5,
       symbol$124,
       symbol$125,
       symbol$126,
       symbol$127,
       rem$3,
       symbol$128,
       land$3,
       lor$3,
       lxor$3,
       lnot$3,
       lsl$3,
       asr$3,
       round$3,
       round_towards_zero$3,
       round_down$3,
       round_up$3,
       round_nearest$3,
       abs$5,
       succ$2,
       pred$2,
       pow$3,
       bit_and$3,
       bit_or$3,
       bit_xor$3,
       bit_not$3,
       popcount$3,
       shift_left$3,
       shift_right$3,
       decr$4,
       incr$4,
       of_int32_exn$3,
       to_int32_exn$3,
       of_int64_exn$3,
       to_int64$3,
       of_nativeint_exn$3,
       to_nativeint_exn$3,
       of_float_unchecked$3,
       num_bits$3,
       max_value$3,
       min_value$3,
       lsr$3,
       shift_right_logical$3,
       ceil_pow2$3,
       floor_pow2$3,
       ceil_log2$3,
       floor_log2$3,
       is_pow2$3,
       of_int$4,
       to_int$3,
       of_int32$3,
       to_int32$3,
       of_nativeint$3,
       to_nativeint$3,
       of_int64$3,
       to_int_trunc$2,
       to_int32_trunc$2,
       of_int64_trunc$2,
       typerep_of_t$18,
       typename_of_t$17,
       [0,
        bin_size_t$53,
        bin_write_t$53,
        bin_read_t$108,
        bin_read_t$109,
        bin_shape_t$72,
        bin_writer_t$65,
        bin_reader_t$65,
        bin_t$65,
        t_of_sexp$47,
        sexp_of_t$56,
        compare$45,
        hash_fold_t$26,
        hash$23,
        typerep_of_t$19,
        typename_of_t$18,
        of_string$11,
        to_string$12,
        to_string_hum$8],
       bin_size_t$53,
       bin_write_t$53,
       bin_read_t$108,
       bin_read_t$109,
       bin_shape_t$71,
       bin_writer_t$64,
       bin_reader_t$64,
       bin_t$64,
       t_of_sexp$46,
       sexp_of_t$55,
       of_string$10,
       to_string$11,
       pp$6,
       symbol$114,
       symbol$115,
       symbol$116,
       symbol$117,
       symbol$118,
       symbol$119,
       equal$24,
       compare$44,
       min$7,
       max$7,
       ascending$7,
       descending$7,
       between$7,
       clamp_exn$7,
       clamp$7,
       validate_lbound$7,
       validate_ubound$7,
       validate_bound$7,
       Replace_polymorphic_compare$6,
       comparator$12,
       Map$10,
       Set$10,
       hash_fold_t$25,
       hash$22,
       hashable$7,
       Table$8,
       Hash_set$8,
       Hash_queue$7,
       _LY_,
       _LZ_,
       _L0_,
       _L1_,
       _L2_,
       _L4_,
       _L3_];
    caml_register_global(4391,Core_kernel_Nativeint,"Core_kernel__Nativeint");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$218);
    caml_call1(Expect_test_collector[4][1],cst_src_nothing_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$219,cst$76);
    var
     _L5_=caml_call1(Bin_prot_Shape[9],0),
     _L6_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$146),0,_L5_],0],
     _L7_=caml_call1(Bin_prot_Shape[4][1],cst_src_nothing_ml_8_6),
     group$72=caml_call2(Bin_prot_Shape[6],_L7_,_L6_),
     _L8_=caml_call1(Bin_prot_Shape[2][1],cst_t$147),
     bin_shape_t$73=caml_call1(caml_call2(Bin_prot_Shape[14],group$72,_L8_),0);
    function never_returns(param){throw [0,Match_failure,_L9_]}
    var tp_loc$16=caml_call2(_a7_,_L__[1],cst_Stable_V1_t),all$2=0;
    function hash_fold_t$27(param,t){return never_returns(t)}
    function compare$46(a,param){return never_returns(a)}
    function bin_write_t$54(buf,param,t){return never_returns(t)}
    var bin_writer_t$66=[0,never_returns,bin_write_t$54];
    function bin_read_t$110(buf,pos_ref,param)
     {return caml_call2(Bin_prot_Common[19],tp_loc$16,pos_ref[1])}
    function bin_read_t$111(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[18],[6,tp_loc$16],pos_ref[1])}
    var
     bin_reader_t$66=[0,bin_read_t$111,bin_read_t$110],
     bin_t$66=[0,bin_shape_t$73,bin_writer_t$66,bin_reader_t$66];
    function t_of_sexp$48(sexp)
     {return caml_call2(Sexplib_Conv_error[26],tp_loc$16,sexp)}
    function to_string$13(param){throw [0,Match_failure,_L$_]}
    function of_string$12(param)
     {return caml_call1(_a__,cst_Nothing_of_string_not_supported)}
    var
     include$70=
      _A6_
       ([0,
         never_returns,
         bin_write_t$54,
         bin_read_t$111,
         bin_read_t$110,
         bin_shape_t$73,
         bin_writer_t$66,
         bin_reader_t$66,
         bin_t$66,
         compare$46,
         hash_fold_t$27,
         never_returns,
         t_of_sexp$48,
         never_returns,
         of_string$12,
         to_string$13,
         module_name$6]),
     _Mj_=include$70[10],
     _Ma_=include$70[1],
     _Mb_=include$70[2],
     _Mc_=include$70[3],
     _Md_=include$70[4],
     _Me_=include$70[5],
     _Mf_=include$70[6],
     _Mg_=include$70[7],
     _Mh_=include$70[8],
     _Mi_=include$70[9],
     _Mk_=include$70[11],
     _Ml_=include$70[12],
     _Mm_=include$70[13],
     _Mn_=include$70[14],
     _Mo_=include$70[15],
     _Mp_=include$70[16],
     _Mq_=include$70[17],
     _Mr_=include$70[18],
     _Ms_=include$70[19],
     _Mt_=include$70[20],
     _Mu_=include$70[21],
     _Mv_=include$70[22],
     _Mw_=include$70[23],
     _Mx_=include$70[24],
     _My_=include$70[25],
     _Mz_=include$70[26],
     _MA_=include$70[27],
     _MB_=include$70[28],
     _MC_=include$70[29],
     _MD_=include$70[30],
     _ME_=include$70[31],
     _MF_=include$70[32],
     _MG_=include$70[33],
     _MH_=include$70[34],
     _MI_=include$70[35],
     _MJ_=include$70[36],
     _MK_=include$70[37],
     _ML_=include$70[38],
     _MM_=include$70[39],
     _MN_=include$70[40],
     _MO_=include$70[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$220);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Nothing=
      [0,
       all$2,
       never_returns,
       _Ma_,
       _Mb_,
       _Mc_,
       _Md_,
       _Me_,
       _Mf_,
       _Mg_,
       _Mh_,
       _Mi_,
       _Mj_,
       _Mk_,
       _Ml_,
       _Mm_,
       _Mn_,
       _Mo_,
       _Mp_,
       _Mq_,
       _Mr_,
       _Ms_,
       _Mt_,
       _Mu_,
       _Mv_,
       _Mw_,
       _Mx_,
       _My_,
       _Mz_,
       _MA_,
       _MB_,
       _MC_,
       _MD_,
       _ME_,
       _MF_,
       _MG_,
       _MH_,
       _MI_,
       _MJ_,
       _MK_,
       _ML_,
       _MM_,
       _MN_,
       _MO_,
       [0,
        [0,
         t_of_sexp$48,
         never_returns,
         never_returns,
         bin_write_t$54,
         bin_read_t$111,
         bin_read_t$110,
         bin_shape_t$73,
         bin_writer_t$66,
         bin_reader_t$66,
         bin_t$66,
         compare$46,
         hash_fold_t$27,
         never_returns]]];
    caml_register_global(4394,Core_kernel_Nothing,"Core_kernel__Nothing");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$221);
    caml_call1(Expect_test_collector[4][1],cst_src_never_returns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$222,cst$77);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$223);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Never_returns=[0,_Mj_,never_returns];
    caml_register_global
     (4395,Core_kernel_Never_returns,"Core_kernel__Never_returns");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$224);
    caml_call1(Expect_test_collector[4][1],cst_src_ordering_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$225,cst$78);
    var
     _MQ_=caml_call1(Bin_prot_Shape[9],_MP_),
     _MR_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$148),0,_MQ_],0],
     _MS_=caml_call1(Bin_prot_Shape[4][1],cst_src_ordering_ml_3_0),
     group$73=caml_call2(Bin_prot_Shape[6],_MS_,_MR_),
     _MT_=caml_call1(Bin_prot_Shape[2][1],cst_t$149),
     bin_shape_t$74=caml_call1(caml_call2(Bin_prot_Shape[14],group$73,_MT_),0);
    function bin_size_t$54(param){return 1}
    function bin_write_t$55(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,2)}}
    var bin_writer_t$67=[0,bin_size_t$54,bin_write_t$55];
    function bin_read_t$112(buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[19],cst_src_ordering_ml_t,pos_ref[1])}
    function bin_read_t$113(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_MU_,pos_ref[1]);
      switch(match){case 0:return 0;case 1:return 1;default:return 2}}
    var
     bin_reader_t$67=[0,bin_read_t$113,bin_read_t$112],
     bin_t$67=[0,bin_shape_t$74,bin_writer_t$67,bin_reader_t$67],
     _MV_=include$71[1],
     _MW_=include$71[2],
     _MX_=include$71[3],
     _MY_=include$71[4],
     _MZ_=include$71[5],
     _M0_=include$71[6],
     _M1_=include$71[7],
     _M2_=include$71[8],
     _M3_=include$71[9],
     _M4_=include$71[10];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$226);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Ordering=
      [0,
       bin_size_t$54,
       bin_write_t$55,
       bin_read_t$113,
       bin_read_t$112,
       bin_shape_t$74,
       bin_writer_t$67,
       bin_reader_t$67,
       bin_t$67,
       _MV_,
       _MW_,
       _MX_,
       _MY_,
       _MZ_,
       _M0_,
       _M1_,
       _M2_,
       _M3_,
       _M4_];
    caml_register_global(4397,Core_kernel_Ordering,"Core_kernel__Ordering");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$227);
    caml_call1(Expect_test_collector[4][1],cst_src_ref_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$228,cst$79);
    var
     _M5_=include$72[1],
     _M6_=include$72[2],
     _M7_=include$72[3],
     _M8_=include$72[4],
     _M9_=include$72[5],
     _M__=include$72[6],
     _M$_=include$72[7],
     _Na_=caml_call1(Bin_prot_Shape[3][1],cst_a$57),
     _Nb_=caml_call1(Bin_prot_Shape[4][1],cst_src_ref_ml_8_16),
     _Nc_=caml_call1(_c0_,caml_call2(Bin_prot_Shape[15],_Nb_,_Na_)),
     _Nd_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$58),0],
     _Ne_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$150),_Nd_,_Nc_],0],
     _Nf_=caml_call1(Bin_prot_Shape[4][1],cst_src_ref_ml_8_4),
     group$74=caml_call2(Bin_prot_Shape[6],_Nf_,_Ne_);
    function bin_shape_t$75(a)
     {var _a$$_=caml_call1(Bin_prot_Shape[2][1],cst_t$151);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$74,_a$$_),[0,a,0])}
    function bin_size_t$55(size_of_a,v){return caml_call2(_bt_,size_of_a,v)}
    function bin_write_t$56(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_c2_,write_a),buf,pos,v)}
    function bin_writer_t$68(bin_writer_a)
     {function _a$7_(v)
       {var _a$8_=bin_writer_a[2];
        return function(_a$9_,_a$__)
         {return bin_write_t$56(_a$8_,v,_a$9_,_a$__)}}
      return [0,function(v){return bin_size_t$55(bin_writer_a[1],v)},_a$7_]}
    function bin_read_t$114(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_c5_,of_a),buf,pos_ref,vint)}
    function bin_read_t$115(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_c4_,of_a),buf,pos_ref)}
    function bin_reader_t$68(bin_reader_a)
     {function _a$6_(buf,pos_ref,vtag)
       {return bin_read_t$114(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$115(bin_reader_a[1],buf,pos_ref)},
              _a$6_]}
    function bin_t$68(bin_a)
     {var _a$4_=bin_reader_t$68(bin_a[3]),_a$5_=bin_writer_t$68(bin_a[2]);
      return [0,bin_shape_t$75(bin_a[1]),_a$5_,_a$4_]}
    var
     Typename_of_t$20=caml_call1(Typerep_lib_Make_typename[2],[0,name$29]),
     typename_of_t$19=Typename_of_t$20[2];
    function typerep_of_t$20(of_a)
     {var name_of_t=caml_call1(Typename_of_t$20[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_a$3_){return caml_call1(_fc_,of_a)}]]]]}
    var
     _Ng_=caml_call1(Bin_prot_Shape[3][1],cst_a$59),
     _Nh_=caml_call1(Bin_prot_Shape[4][1],cst_src_ref_ml_21_25),
     _Ni_=bin_shape_t$75(caml_call2(Bin_prot_Shape[15],_Nh_,_Ng_)),
     _Nj_=[0,caml_call1(Bin_prot_Shape[3][1],cst_perms$4),0],
     _Nk_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$60),_Nj_],
     _Nl_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$152),_Nk_,_Ni_],0],
     _Nm_=caml_call1(Bin_prot_Shape[4][1],cst_src_ref_ml_21_2),
     group$75=caml_call2(Bin_prot_Shape[6],_Nm_,_Nl_);
    function bin_shape_t$76(a,perms)
     {var _a$2_=caml_call1(Bin_prot_Shape[2][1],cst_t$153);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$75,_a$2_),
               [0,a,[0,perms,0]])}
    function bin_size_t$56(size_of_a,size_of_perms,v)
     {return bin_size_t$55(size_of_a,v)}
    function bin_write_t$57(write_a,write_perms,buf,pos,v)
     {return bin_write_t$56(write_a,buf,pos,v)}
    function bin_writer_t$69(bin_writer_a,bin_writer_perms)
     {function _a$X_(v)
       {var _a$Y_=bin_writer_perms[2],_a$Z_=bin_writer_a[2];
        return function(_a$0_,_a$1_)
         {return bin_write_t$57(_a$Z_,_a$Y_,v,_a$0_,_a$1_)}}
      return [0,
              function(v)
               {return bin_size_t$56(bin_writer_a[1],bin_writer_perms[1],v)},
              _a$X_]}
    function bin_read_t$116(of_a,of_perms,buf,pos_ref,vint)
     {return bin_read_t$114(of_a,buf,pos_ref,vint)}
    function bin_read_t$117(of_a,of_perms,buf,pos_ref)
     {return bin_read_t$115(of_a,buf,pos_ref)}
    function bin_reader_t$69(bin_reader_a,bin_reader_perms)
     {function _a$W_(buf,pos_ref,vtag)
       {return bin_read_t$116
                (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$117
                        (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref)},
              _a$W_]}
    function bin_t$69(bin_a,bin_perms)
     {var
       _a$U_=bin_reader_t$69(bin_a[3],bin_perms[3]),
       _a$V_=bin_writer_t$69(bin_a[2],bin_perms[2]);
      return [0,bin_shape_t$76(bin_a[1],bin_perms[1]),_a$V_,_a$U_]}
    function t_of_sexp$49(of_a,of_perms,t){return caml_call2(_M7_,of_a,t)}
    function sexp_of_t$57(of_a,of_perms,v){return caml_call2(_M8_,of_a,v)}
    function read_only(_a$T_){return _a$T_}
    function of_ref(_a$S_){return _a$S_}
    function to_ref(_a$R_){return _a$R_}
    function set$7(_a$Q_,_a$P_){_a$Q_[1] = _a$P_;return 0}
    function get$2(_a$O_){return _a$O_[1]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$229);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _Nn_(_a$N_,_a$M_){_a$N_[1] = _a$M_;return 0}
    function _No_(_a$L_){return _a$L_[1]}
    var
     Core_kernel_Ref=
      [0,
       bin_shape_t$75,
       bin_size_t$55,
       bin_write_t$56,
       bin_read_t$115,
       bin_read_t$114,
       bin_writer_t$68,
       bin_reader_t$68,
       bin_t$68,
       typerep_of_t$20,
       typename_of_t$19,
       _M5_,
       _M6_,
       _M7_,
       _M8_,
       _M9_,
       _M__,
       _M$_,
       [0,
        t_of_sexp$49,
        sexp_of_t$57,
        bin_shape_t$76,
        bin_size_t$56,
        bin_write_t$57,
        bin_read_t$117,
        bin_read_t$116,
        bin_writer_t$69,
        bin_reader_t$69,
        bin_t$69,
        function(_a$K_){return [0,_a$K_]},
        read_only,
        _No_,
        get$2,
        set$7,
        _Nn_,
        of_ref,
        to_ref,
        _M9_,
        _M__,
        _M$_]];
    caml_register_global(4399,Core_kernel_Ref,"Core_kernel__Ref");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$230);
    caml_call1(Expect_test_collector[4][1],cst_src_std_internal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$231,cst$80);
    var
     _Np_=Replace_polymorphic_compare$2[1],
     _Nq_=Replace_polymorphic_compare$2[2],
     _Nr_=Replace_polymorphic_compare$2[3],
     _Ns_=Replace_polymorphic_compare$2[4],
     _Nt_=Replace_polymorphic_compare$2[5],
     _Nu_=Replace_polymorphic_compare$2[6],
     _Nv_=Replace_polymorphic_compare$2[7],
     _Nw_=Replace_polymorphic_compare$2[8],
     _Nx_=Replace_polymorphic_compare$2[9],
     _Ny_=Replace_polymorphic_compare$2[10],
     _Nz_=Base_quickcheck_Export[1],
     _NA_=Base_quickcheck_Export[2],
     _NB_=Base_quickcheck_Export[3],
     _NC_=Base_quickcheck_Export[4],
     _ND_=Base_quickcheck_Export[5],
     _NE_=Base_quickcheck_Export[6],
     _NF_=Base_quickcheck_Export[7],
     _NG_=Base_quickcheck_Export[8],
     _NH_=Base_quickcheck_Export[9],
     _NI_=Base_quickcheck_Export[10],
     _NJ_=Base_quickcheck_Export[11],
     _NK_=Base_quickcheck_Export[12],
     _NL_=Base_quickcheck_Export[13],
     _NM_=Base_quickcheck_Export[14],
     _NN_=Base_quickcheck_Export[15],
     _NO_=Base_quickcheck_Export[16],
     _NP_=Base_quickcheck_Export[17],
     _NQ_=Base_quickcheck_Export[18],
     _NR_=Base_quickcheck_Export[19],
     _NS_=Base_quickcheck_Export[20],
     _NT_=Base_quickcheck_Export[21],
     _NU_=Base_quickcheck_Export[22],
     _NV_=Base_quickcheck_Export[23],
     _NW_=Base_quickcheck_Export[24],
     _NX_=Base_quickcheck_Export[25],
     _NY_=Base_quickcheck_Export[26],
     _NZ_=Base_quickcheck_Export[27],
     _N0_=Base_quickcheck_Export[28],
     _N1_=Base_quickcheck_Export[29],
     _N2_=Base_quickcheck_Export[30],
     _N3_=Base_quickcheck_Export[31],
     _N4_=Base_quickcheck_Export[32],
     _N5_=Base_quickcheck_Export[33],
     _N6_=include[1],
     _N7_=include[2],
     _N8_=include[3],
     _N9_=include[4],
     _N__=include[5],
     _N$_=include[6],
     _Oa_=include[7],
     _Ob_=include[8],
     _Oc_=include[9],
     _Od_=include[10],
     _Oe_=include[11],
     _Of_=include[12],
     _Og_=include[13],
     _Oh_=include$23[141][1],
     _Oi_=_ht_[1],
     _Oj_=_ht_[2],
     _Ok_=_ht_[3],
     _Ol_=_ht_[4],
     _Om_=_ht_[5],
     _On_=_ht_[6],
     _Oo_=_ht_[7],
     _Op_=_ht_[8],
     _Oq_=_ht_[9],
     _Or_=_ht_[10],
     _Os_=_ht_[11],
     _Ot_=_ht_[12],
     _Ou_=_ht_[13],
     _Ov_=_ht_[14],
     _Ow_=_ht_[15],
     _Ox_=_ht_[16],
     _Oy_=_ht_[17],
     _Oz_=_ht_[18],
     _OA_=_ht_[19],
     _OB_=_ht_[20],
     _OC_=_ht_[21],
     _OD_=_ht_[22],
     _OE_=_ht_[23],
     _OF_=_ht_[24],
     _OG_=_ht_[25],
     _OH_=_ht_[26],
     _OI_=_ht_[27],
     _OJ_=_ht_[28],
     _OK_=_ht_[29],
     _OL_=_ht_[30],
     _OM_=_ht_[31],
     _ON_=_ht_[32],
     _OO_=_ht_[33],
     _OP_=_ht_[34],
     _OQ_=_ht_[35],
     _OR_=_ht_[36],
     _OS_=_ht_[37],
     _OT_=_ht_[38],
     _OU_=_ht_[39],
     _OV_=_ht_[40],
     _OW_=_ht_[41],
     _OX_=_ht_[42],
     _OY_=_ht_[43],
     _OZ_=_ht_[44],
     _O0_=_ht_[45],
     _O1_=_ht_[46],
     _O2_=_ht_[47],
     _O3_=_ht_[48],
     _O4_=_ht_[49],
     _O5_=_ht_[50],
     _O6_=_ht_[51],
     _O7_=_ht_[52],
     _O8_=_ht_[53],
     _O9_=_ht_[54],
     _O__=_ht_[55],
     _O$_=_ht_[56],
     _Pa_=_im_[1],
     _Pb_=_im_[2],
     Bug=[248,cst_Core_kernel_Std_internal_Bug,caml_fresh_oo_id(0)];
    function _Pc_(param)
     {if(param[1] === Bug)
       {var v0=param[2],v0$0=caml_call1(_ak_,v0);
        return [1,[0,_Pd_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_Pe_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Bug,_Pc_);
    var
     C_malloc_exn=
      [248,cst_Core_kernel_Std_internal_C_malloc_exn,caml_fresh_oo_id(0)];
    caml_call2(Stdlib_callback[2],cst_C_malloc_exn,[0,C_malloc_exn,0,0]);
    var _Pf_=Base_Exn[3];
    function fst3(param){var x=param[1];return x}
    function snd3(param){var y=param[2];return y}
    function trd3(param){var z=param[3];return z}
    function uw(param){if(param){var x=param[1];return x}throw include$0[103]}
    function phys_same(a,b){return caml_call2(_bb_,a,b)}
    function symbol$129(a,b){var _a$I_=1 - a,_a$J_=_a$I_ || b;return _a$J_}
    var _Pg_=include$4[6];
    function force(_a$G_)
     {var _a$H_=caml_obj_tag(_a$G_);
      return 250 === _a$H_
              ?_a$G_[1]
              :246 === _a$H_?caml_call1(CamlinternalLazy[2],_a$G_):_a$G_}
    function ident(_a$F_){return _a$F_}
    var
     _Ph_=include$4[7],
     _Pi_=Base[208],
     _Pj_=Stdio[5],
     _Pk_=Stdio[6],
     _Pl_=Base_Exn[12],
     _Pm_=Base_Exn[11],
     _Pn_=Base[200],
     _Po_=Base_Staged[1],
     _Pp_=Base_Staged[2],
     _Pq_=Base_With_return[1],
     _Pr_=Base_With_return[2],
     _Ps_=include$73[1],
     _Pt_=include$73[6],
     _Pu_=include$73[13],
     _Pv_=include$73[19],
     _Pw_=include$73[20],
     _Px_=include$73[21],
     _Py_=include$73[22],
     _Pz_=include$73[23],
     _PA_=include$73[24],
     _PB_=include$73[29],
     _PC_=include$73[41],
     _PD_=include$73[42],
     _PE_=include$73[43],
     _PF_=include$73[44],
     _PG_=include$73[45],
     _PH_=include$73[46],
     _PI_=caml_call1(Bin_prot_Shape[3][1],cst_a$61),
     _PJ_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_99_18),
     _PK_=bin_shape_t$12(caml_call2(Bin_prot_Shape[15],_PJ_,_PI_)),
     _PL_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$62),0],
     _PM_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_array),_PL_,_PK_],0],
     _PN_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_99_2),
     group$76=caml_call2(Bin_prot_Shape[6],_PN_,_PM_);
    function bin_shape_array(a)
     {var _a$E_=caml_call1(Bin_prot_Shape[2][1],cst_array$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$76,_a$E_),[0,a,0])}
    function bin_size_array(size_of_a,v){return bin_size_t$16(size_of_a,v)}
    function bin_write_array(write_a,buf,pos,v)
     {return bin_write_t$16(write_a,buf,pos,v)}
    function bin_writer_array(bin_writer_a)
     {function _a$A_(v)
       {var _a$B_=bin_writer_a[2];
        return function(_a$C_,_a$D_)
         {return bin_write_array(_a$B_,v,_a$C_,_a$D_)}}
      return [0,function(v){return bin_size_array(bin_writer_a[1],v)},_a$A_]}
    function bin_read_array(of_a,buf,pos_ref,vint)
     {return bin_read_t$35(of_a,buf,pos_ref,vint)}
    function bin_read_array$0(of_a,buf,pos_ref)
     {return bin_read_t$36(of_a,buf,pos_ref)}
    function bin_reader_array(bin_reader_a)
     {function _a$z_(buf,pos_ref,vtag)
       {return bin_read_array(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_array$0(bin_reader_a[1],buf,pos_ref)},
              _a$z_]}
    function bin_array(bin_a)
     {var _a$x_=bin_reader_array(bin_a[3]),_a$y_=bin_writer_array(bin_a[2]);
      return [0,bin_shape_array(bin_a[1]),_a$y_,_a$x_]}
    var
     Typename_of_array=caml_call1(Typerep_lib_Make_typename[2],[0,name$30]),
     _PO_=Typename_of_array[2];
    function typerep_of_array(of_a)
     {var name_of_array=caml_call1(Typename_of_array[1],of_a);
      return [9,
              [0,
               name_of_array,
               [0,[246,function(_a$w_){return typerep_of_t(of_a)}]]]]}
    var
     _PP_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_bool),0,_Bi_],0],
     _PQ_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_100_2),
     group$77=caml_call2(Bin_prot_Shape[6],_PQ_,_PP_),
     _PR_=caml_call1(Bin_prot_Shape[2][1],cst_bool$0),
     bin_shape_bool=caml_call1(caml_call2(Bin_prot_Shape[14],group$77,_PR_),0),
     bin_writer_bool=[0,_Be_,_Bf_],
     bin_reader_bool=[0,_Bg_,_Bh_],
     bin_bool=[0,bin_shape_bool,bin_writer_bool,bin_reader_bool];
    function hash_bool(x){return caml_call1(_BR_,x)}
    var
     Typename_of_bool=caml_call1(Typerep_lib_Make_typename[1],[0,name$31]),
     typename_of_bool=Typename_of_bool[2],
     name_of_bool=Typename_of_bool[1],
     typerep_of_bool=[9,[0,name_of_bool,[0,typerep_of_t$3]]],
     _PS_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_char),0,_Fd_],0],
     _PT_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_101_2),
     group$78=caml_call2(Bin_prot_Shape[6],_PT_,_PS_),
     _PU_=caml_call1(Bin_prot_Shape[2][1],cst_char$0),
     bin_shape_char=caml_call1(caml_call2(Bin_prot_Shape[14],group$78,_PU_),0),
     bin_writer_char=[0,_E$_,_Fa_],
     bin_reader_char=[0,_Fb_,_Fc_],
     bin_char=[0,bin_shape_char,bin_writer_char,bin_reader_char];
    function hash_char(x){return caml_call1(_F3_,x)}
    var
     Typename_of_char=caml_call1(Typerep_lib_Make_typename[1],[0,name$32]),
     typename_of_char=Typename_of_char[2],
     name_of_char=Typename_of_char[1],
     typerep_of_char=[9,[0,name_of_char,[0,typerep_of_t$6]]],
     _PV_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_float),0,bin_shape_t$50],0],
     _PW_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_102_2),
     group$79=caml_call2(Bin_prot_Shape[6],_PW_,_PV_),
     _PX_=caml_call1(Bin_prot_Shape[2][1],cst_float$0),
     bin_shape_float=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$79,_PX_),0),
     bin_writer_float=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_float=[0,bin_read_t$5,bin_read_t$6],
     bin_float=[0,bin_shape_float,bin_writer_float,bin_reader_float];
    function hash_float(x){return caml_call1(hash$13,x)}
    var
     Typename_of_float=caml_call1(Typerep_lib_Make_typename[1],[0,name$33]),
     typename_of_float=Typename_of_float[2],
     name_of_float=Typename_of_float[1],
     typerep_of_float=[9,[0,name_of_float,[0,typerep_of_t$8]]],
     _PY_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_int),0,bin_shape_t$54],0],
     _PZ_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_103_2),
     group$80=caml_call2(Bin_prot_Shape[6],_PZ_,_PY_),
     _P0_=caml_call1(Bin_prot_Shape[2][1],cst_int$0),
     bin_shape_int=caml_call1(caml_call2(Bin_prot_Shape[14],group$80,_P0_),0),
     bin_writer_int=[0,bin_size_t$44,bin_write_t$44],
     bin_reader_int=[0,bin_read_t$90,bin_read_t$91],
     bin_int=[0,bin_shape_int,bin_writer_int,bin_reader_int];
    function hash_int(x){return caml_call1(hash$14,x)}
    var
     Typename_of_int=caml_call1(Typerep_lib_Make_typename[1],[0,name$34]),
     typename_of_int=Typename_of_int[2],
     name_of_int=Typename_of_int[1],
     typerep_of_int=[9,[0,name_of_int,[0,typerep_of_t$9]]],
     _P1_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_int32),0,bin_shape_t$57],0],
     _P2_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_104_2),
     group$81=caml_call2(Bin_prot_Shape[6],_P2_,_P1_),
     _P3_=caml_call1(Bin_prot_Shape[2][1],cst_int32$0),
     bin_shape_int32=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$81,_P3_),0),
     bin_writer_int32=[0,bin_size_t$45,bin_write_t$45],
     bin_reader_int32=[0,bin_read_t$92,bin_read_t$93],
     bin_int32=[0,bin_shape_int32,bin_writer_int32,bin_reader_int32];
    function hash_int32(x){return caml_call1(hash$16,x)}
    var
     Typename_of_int32=caml_call1(Typerep_lib_Make_typename[1],[0,name$35]),
     typename_of_int32=Typename_of_int32[2],
     name_of_int32=Typename_of_int32[1],
     typerep_of_int32=[9,[0,name_of_int32,[0,typerep_of_t$11]]],
     _P4_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_int64),0,bin_shape_t$60],0],
     _P5_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_105_2),
     group$82=caml_call2(Bin_prot_Shape[6],_P5_,_P4_),
     _P6_=caml_call1(Bin_prot_Shape[2][1],cst_int64$0),
     bin_shape_int64=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$82,_P6_),0),
     bin_writer_int64=[0,bin_size_t$46,bin_write_t$46],
     bin_reader_int64=[0,bin_read_t$94,bin_read_t$95],
     bin_int64=[0,bin_shape_int64,bin_writer_int64,bin_reader_int64];
    function hash_int64(x){return caml_call1(hash$18,x)}
    var
     Typename_of_int64=caml_call1(Typerep_lib_Make_typename[1],[0,name$36]),
     typename_of_int64=Typename_of_int64[2],
     name_of_int64=Typename_of_int64[1],
     typerep_of_int64=[9,[0,name_of_int64,[0,typerep_of_t$13]]],
     _P7_=caml_call1(Bin_prot_Shape[3][1],cst_a$63),
     _P8_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_106_19),
     _P9_=bin_shape_t$69(caml_call2(Bin_prot_Shape[15],_P8_,_P7_)),
     _P__=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$64),0],
     _P$_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_lazy_t),_P__,_P9_],0],
     _Qa_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_106_2),
     group$83=caml_call2(Bin_prot_Shape[6],_Qa_,_P$_);
    function bin_shape_lazy_t(a)
     {var _a$v_=caml_call1(Bin_prot_Shape[2][1],cst_lazy_t$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$83,_a$v_),[0,a,0])}
    function bin_size_lazy_t(size_of_a,v){return bin_size_t$52(size_of_a,v)}
    function bin_write_lazy_t(write_a,buf,pos,v)
     {return bin_write_t$52(write_a,buf,pos,v)}
    function bin_writer_lazy_t(bin_writer_a)
     {function _a$r_(v)
       {var _a$s_=bin_writer_a[2];
        return function(_a$t_,_a$u_)
         {return bin_write_lazy_t(_a$s_,v,_a$t_,_a$u_)}}
      return [0,function(v){return bin_size_lazy_t(bin_writer_a[1],v)},_a$r_]}
    function bin_read_lazy_t(of_a,buf,pos_ref,vint)
     {return bin_read_t$106(of_a,buf,pos_ref,vint)}
    function bin_read_lazy_t$0(of_a,buf,pos_ref)
     {return bin_read_t$107(of_a,buf,pos_ref)}
    function bin_reader_lazy_t(bin_reader_a)
     {function _a$q_(buf,pos_ref,vtag)
       {return bin_read_lazy_t(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_lazy_t$0(bin_reader_a[1],buf,pos_ref)},
              _a$q_]}
    function bin_lazy_t(bin_a)
     {var _a$o_=bin_reader_lazy_t(bin_a[3]),_a$p_=bin_writer_lazy_t(bin_a[2]);
      return [0,bin_shape_lazy_t(bin_a[1]),_a$p_,_a$o_]}
    var
     Typename_of_lazy_t=caml_call1(Typerep_lib_Make_typename[2],[0,name$37]),
     _Qb_=Typename_of_lazy_t[2];
    function typerep_of_lazy_t(of_a)
     {var name_of_lazy_t=caml_call1(Typename_of_lazy_t[1],of_a);
      return [9,
              [0,
               name_of_lazy_t,
               [0,[246,function(_a$n_){return typerep_of_t$17(of_a)}]]]]}
    var
     _Qc_=caml_call1(Bin_prot_Shape[3][1],cst_a$65),
     _Qd_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_107_17),
     _Qe_=bin_shape_t$24(caml_call2(Bin_prot_Shape[15],_Qd_,_Qc_)),
     _Qf_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$66),0],
     _Qg_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_list),_Qf_,_Qe_],0],
     _Qh_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_107_2),
     group$84=caml_call2(Bin_prot_Shape[6],_Qh_,_Qg_);
    function bin_shape_list(a)
     {var _a$m_=caml_call1(Bin_prot_Shape[2][1],cst_list$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$84,_a$m_),[0,a,0])}
    function bin_size_list(size_of_a,v){return bin_size_t$26(size_of_a,v)}
    function bin_write_list(write_a,buf,pos,v)
     {return bin_write_t$26(write_a,buf,pos,v)}
    function bin_writer_list(bin_writer_a)
     {function _a$i_(v)
       {var _a$j_=bin_writer_a[2];
        return function(_a$k_,_a$l_)
         {return bin_write_list(_a$j_,v,_a$k_,_a$l_)}}
      return [0,function(v){return bin_size_list(bin_writer_a[1],v)},_a$i_]}
    function bin_read_list(of_a,buf,pos_ref,vint)
     {return bin_read_t$54(of_a,buf,pos_ref,vint)}
    function bin_read_list$0(of_a,buf,pos_ref)
     {return bin_read_t$55(of_a,buf,pos_ref)}
    function bin_reader_list(bin_reader_a)
     {function _a$h_(buf,pos_ref,vtag)
       {return bin_read_list(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_list$0(bin_reader_a[1],buf,pos_ref)},
              _a$h_]}
    function bin_list(bin_a)
     {var _a$f_=bin_reader_list(bin_a[3]),_a$g_=bin_writer_list(bin_a[2]);
      return [0,bin_shape_list(bin_a[1]),_a$g_,_a$f_]}
    var
     Typename_of_list=caml_call1(Typerep_lib_Make_typename[2],[0,name$38]),
     _Qi_=Typename_of_list[2];
    function typerep_of_list(of_a)
     {var name_of_list=caml_call1(Typename_of_list[1],of_a);
      return [9,
              [0,
               name_of_list,
               [0,[246,function(_a$e_){return typerep_of_t$1(of_a)}]]]]}
    var
     _Qj_=
      [0,
       [0,caml_call1(Bin_prot_Shape[2][1],cst_nativeint),0,bin_shape_t$71],
       0],
     _Qk_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_108_2),
     group$85=caml_call2(Bin_prot_Shape[6],_Qk_,_Qj_),
     _Ql_=caml_call1(Bin_prot_Shape[2][1],cst_nativeint$0),
     bin_shape_nativeint=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$85,_Ql_),0),
     bin_writer_nativeint=[0,bin_size_t$53,bin_write_t$53],
     bin_reader_nativeint=[0,bin_read_t$108,bin_read_t$109],
     bin_nativeint=
      [0,bin_shape_nativeint,bin_writer_nativeint,bin_reader_nativeint];
    function hash_nativeint(x){return caml_call1(hash$22,x)}
    var
     Typename_of_nativeint=
      caml_call1(Typerep_lib_Make_typename[1],[0,name$39]),
     typename_of_nativeint=Typename_of_nativeint[2],
     name_of_nativeint=Typename_of_nativeint[1],
     typerep_of_nativeint=[9,[0,name_of_nativeint,[0,typerep_of_t$18]]],
     _Qm_=caml_call1(Bin_prot_Shape[3][1],cst_a$67),
     _Qn_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_109_19),
     _Qo_=bin_shape_t$35(caml_call2(Bin_prot_Shape[15],_Qn_,_Qm_)),
     _Qp_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$68),0],
     _Qq_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_option),_Qp_,_Qo_],0],
     _Qr_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_109_2),
     group$86=caml_call2(Bin_prot_Shape[6],_Qr_,_Qq_);
    function bin_shape_option(a)
     {var _a$d_=caml_call1(Bin_prot_Shape[2][1],cst_option$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$86,_a$d_),[0,a,0])}
    function bin_size_option(size_of_a,v){return bin_size_t$37(size_of_a,v)}
    function bin_write_option(write_a,buf,pos,v)
     {return bin_write_t$37(write_a,buf,pos,v)}
    function bin_writer_option(bin_writer_a)
     {function _a_$_(v)
       {var _a$a_=bin_writer_a[2];
        return function(_a$b_,_a$c_)
         {return bin_write_option(_a$a_,v,_a$b_,_a$c_)}}
      return [0,function(v){return bin_size_option(bin_writer_a[1],v)},_a_$_]}
    function bin_read_option(of_a,buf,pos_ref,vint)
     {return bin_read_t$76(of_a,buf,pos_ref,vint)}
    function bin_read_option$0(of_a,buf,pos_ref)
     {return bin_read_t$77(of_a,buf,pos_ref)}
    function bin_reader_option(bin_reader_a)
     {function _a___(buf,pos_ref,vtag)
       {return bin_read_option(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_option$0(bin_reader_a[1],buf,pos_ref)},
              _a___]}
    function bin_option(bin_a)
     {var _a_8_=bin_reader_option(bin_a[3]),_a_9_=bin_writer_option(bin_a[2]);
      return [0,bin_shape_option(bin_a[1]),_a_9_,_a_8_]}
    var
     Typename_of_option=caml_call1(Typerep_lib_Make_typename[2],[0,name$40]),
     _Qs_=Typename_of_option[2];
    function typerep_of_option(of_a)
     {var name_of_option=caml_call1(Typename_of_option[1],of_a);
      return [9,
              [0,
               name_of_option,
               [0,[246,function(_a_7_){return typerep_of_t$2(of_a)}]]]]}
    var
     _Qt_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_string),0,bin_shape_t$46],0],
     _Qu_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_110_2),
     group$87=caml_call2(Bin_prot_Shape[6],_Qu_,_Qt_),
     _Qv_=caml_call1(Bin_prot_Shape[2][1],cst_string$0),
     bin_shape_string=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$87,_Qv_),0),
     bin_writer_string=[0,bin_size_t$42,bin_write_t$42],
     bin_reader_string=[0,bin_read_t$86,bin_read_t$87],
     bin_string=[0,bin_shape_string,bin_writer_string,bin_reader_string];
    function hash_string(x){return caml_call1(hash$11,x)}
    var
     Typename_of_string=caml_call1(Typerep_lib_Make_typename[1],[0,name$41]),
     typename_of_string=Typename_of_string[2],
     name_of_string=Typename_of_string[1],
     typerep_of_string=[9,[0,name_of_string,[0,typerep_of_t$4]]],
     _Qw_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_bytes),0,bin_shape_t$47],0],
     _Qx_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_111_2),
     group$88=caml_call2(Bin_prot_Shape[6],_Qx_,_Qw_),
     _Qy_=caml_call1(Bin_prot_Shape[2][1],cst_bytes$0),
     bin_shape_bytes=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$88,_Qy_),0),
     bin_writer_bytes=[0,bin_size_t$0,bin_write_t$0],
     bin_reader_bytes=[0,bin_read_t$1,bin_read_t$2],
     bin_bytes=[0,bin_shape_bytes,bin_writer_bytes,bin_reader_bytes],
     Typename_of_bytes=caml_call1(Typerep_lib_Make_typename[1],[0,name$42]),
     typename_of_bytes=Typename_of_bytes[2],
     name_of_bytes=Typename_of_bytes[1],
     typerep_of_bytes=[9,[0,name_of_bytes,[0,typerep_of_t$5]]],
     _Qz_=caml_call1(Bin_prot_Shape[3][1],cst_a$69),
     _QA_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_112_16),
     _QB_=bin_shape_t$75(caml_call2(Bin_prot_Shape[15],_QA_,_Qz_)),
     _QC_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$70),0],
     _QD_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_ref),_QC_,_QB_],0],
     _QE_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_112_2),
     group$89=caml_call2(Bin_prot_Shape[6],_QE_,_QD_);
    function bin_shape_ref(a)
     {var _a_6_=caml_call1(Bin_prot_Shape[2][1],cst_ref$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$89,_a_6_),[0,a,0])}
    function bin_size_ref(size_of_a,v){return bin_size_t$55(size_of_a,v)}
    function bin_write_ref(write_a,buf,pos,v)
     {return bin_write_t$56(write_a,buf,pos,v)}
    function bin_writer_ref(bin_writer_a)
     {function _a_2_(v)
       {var _a_3_=bin_writer_a[2];
        return function(_a_4_,_a_5_)
         {return bin_write_ref(_a_3_,v,_a_4_,_a_5_)}}
      return [0,function(v){return bin_size_ref(bin_writer_a[1],v)},_a_2_]}
    function bin_read_ref(of_a,buf,pos_ref,vint)
     {return bin_read_t$114(of_a,buf,pos_ref,vint)}
    function bin_read_ref$0(of_a,buf,pos_ref)
     {return bin_read_t$115(of_a,buf,pos_ref)}
    function bin_reader_ref(bin_reader_a)
     {function _a_1_(buf,pos_ref,vtag)
       {return bin_read_ref(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_ref$0(bin_reader_a[1],buf,pos_ref)},
              _a_1_]}
    function bin_ref(bin_a)
     {var _a_Z_=bin_reader_ref(bin_a[3]),_a_0_=bin_writer_ref(bin_a[2]);
      return [0,bin_shape_ref(bin_a[1]),_a_0_,_a_Z_]}
    var
     Typename_of_ref=caml_call1(Typerep_lib_Make_typename[2],[0,name$43]),
     _QF_=Typename_of_ref[2];
    function typerep_of_ref(of_a)
     {var name_of_ref=caml_call1(Typename_of_ref[1],of_a);
      return [9,
              [0,
               name_of_ref,
               [0,[246,function(_a_Y_){return typerep_of_t$20(of_a)}]]]]}
    var
     _QG_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_unit),0,bin_shape_t$68],0],
     _QH_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_113_2),
     group$90=caml_call2(Bin_prot_Shape[6],_QH_,_QG_),
     _QI_=caml_call1(Bin_prot_Shape[2][1],cst_unit$0),
     bin_shape_unit=caml_call1(caml_call2(Bin_prot_Shape[14],group$90,_QI_),0),
     bin_writer_unit=[0,bin_size_t$51,bin_write_t$51],
     bin_reader_unit=[0,bin_read_t$104,bin_read_t$105],
     bin_unit=[0,bin_shape_unit,bin_writer_unit,bin_reader_unit];
    function hash_unit(x){return caml_call1(hash$21,x)}
    var
     Typename_of_unit=caml_call1(Typerep_lib_Make_typename[1],[0,name$44]),
     typename_of_unit=Typename_of_unit[2],
     name_of_unit=Typename_of_unit[1],
     typerep_of_unit=[9,[0,name_of_unit,[0,typerep_of_t$16]]],
     _QJ_=Bin_prot_Std[94],
     _QK_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_float_array),0,_QJ_],0],
     _QL_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_116_2),
     group$91=caml_call2(Bin_prot_Shape[6],_QL_,_QK_),
     _QM_=caml_call1(Bin_prot_Shape[2][1],cst_float_array$0),
     bin_shape_float_array=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$91,_QM_),0),
     bin_size_float_array=Bin_prot_Std[28],
     bin_write_float_array=Bin_prot_Std[96],
     bin_writer_float_array=[0,bin_size_float_array,bin_write_float_array],
     bin_read_float_array=Bin_prot_Std[99],
     bin_read_float_array$0=Bin_prot_Std[98],
     bin_reader_float_array=[0,bin_read_float_array$0,bin_read_float_array],
     bin_float_array=
      [0,bin_shape_float_array,bin_writer_float_array,bin_reader_float_array];
    function compare_float_array(a_077,b_078)
     {return caml_call3(_lf_,compare$30,a_077,b_078)}
    function float_array_of_sexp(t){return caml_call2(_lh_,_IA_,t)}
    function sexp_of_float_array(v){return caml_call2(_lg_,sexp_of_t$42,v)}
    var
     Typename_of_float_array=
      caml_call1(Typerep_lib_Make_typename[1],[0,name$45]),
     typename_of_float_array=Typename_of_float_array[2],
     name_of_float_array=Typename_of_float_array[1],
     typerep_of_float_array=
      [9,
       [0,
        name_of_float_array,
        [0,[246,function(_a_X_){return typerep_of_array(typerep_of_t$8)}]]]],
     _QN_=Base_Exn[1],
     _QO_=caml_call1(Bin_prot_Shape[3][1],cst_a$71),
     _QP_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_171_23),
     _QQ_=bin_shape_array(caml_call2(Bin_prot_Shape[15],_QP_,_QO_)),
     _QR_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$72),0],
     _QS_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_array),_QR_,_QQ_],0],
     _QT_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_171_2),
     group$92=caml_call2(Bin_prot_Shape[6],_QT_,_QS_);
    function bin_shape_sexp_array(a)
     {var _a_W_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_array$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$92,_a_W_),[0,a,0])}
    function bin_size_sexp_array(size_of_a,v)
     {return bin_size_array(size_of_a,v)}
    function bin_write_sexp_array(write_a,buf,pos,v)
     {return bin_write_array(write_a,buf,pos,v)}
    function bin_writer_sexp_array(bin_writer_a)
     {function _a_S_(v)
       {var _a_T_=bin_writer_a[2];
        return function(_a_U_,_a_V_)
         {return bin_write_sexp_array(_a_T_,v,_a_U_,_a_V_)}}
      return [0,
              function(v){return bin_size_sexp_array(bin_writer_a[1],v)},
              _a_S_]}
    function bin_read_sexp_array(of_a,buf,pos_ref,vint)
     {return bin_read_array(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_array$0(of_a,buf,pos_ref)
     {return bin_read_array$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_array(bin_reader_a)
     {function _a_R_(buf,pos_ref,vtag)
       {return bin_read_sexp_array(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_array$0(bin_reader_a[1],buf,pos_ref)},
              _a_R_]}
    function bin_sexp_array(bin_a)
     {var
       _a_P_=bin_reader_sexp_array(bin_a[3]),
       _a_Q_=bin_writer_sexp_array(bin_a[2]);
      return [0,bin_shape_sexp_array(bin_a[1]),_a_Q_,_a_P_]}
    var
     Typename_of_sexp_array=
      caml_call1(Typerep_lib_Make_typename[2],[0,name$46]),
     _QU_=Typename_of_sexp_array[2];
    function typerep_of_sexp_array(of_a)
     {var name_of_sexp_array=caml_call1(Typename_of_sexp_array[1],of_a);
      return [9,
              [0,
               name_of_sexp_array,
               [0,[246,function(_a_O_){return typerep_of_array(of_a)}]]]]}
    var
     _QV_=
      [0,
       [0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_bool),0,bin_shape_bool],
       0],
     _QW_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_175_2),
     group$93=caml_call2(Bin_prot_Shape[6],_QW_,_QV_),
     _QX_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_bool$0),
     bin_shape_sexp_bool=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$93,_QX_),0),
     bin_writer_sexp_bool=[0,_Be_,_Bf_],
     bin_reader_sexp_bool=[0,_Bg_,_Bh_],
     bin_sexp_bool=
      [0,bin_shape_sexp_bool,bin_writer_sexp_bool,bin_reader_sexp_bool];
    function hash_sexp_bool(x){return hash_bool(x)}
    var
     Typename_of_sexp_bool=
      caml_call1(Typerep_lib_Make_typename[1],[0,name$47]),
     typename_of_sexp_bool=Typename_of_sexp_bool[2],
     name_of_sexp_bool=Typename_of_sexp_bool[1],
     typerep_of_sexp_bool=[9,[0,name_of_sexp_bool,[0,typerep_of_bool]]],
     _QY_=caml_call1(Bin_prot_Shape[3][1],cst_a$73),
     _QZ_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_179_22),
     _Q0_=bin_shape_list(caml_call2(Bin_prot_Shape[15],_QZ_,_QY_)),
     _Q1_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$74),0],
     _Q2_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_list),_Q1_,_Q0_],0],
     _Q3_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_179_2),
     group$94=caml_call2(Bin_prot_Shape[6],_Q3_,_Q2_);
    function bin_shape_sexp_list(a)
     {var _a_N_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_list$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$94,_a_N_),[0,a,0])}
    function bin_size_sexp_list(size_of_a,v)
     {return bin_size_list(size_of_a,v)}
    function bin_write_sexp_list(write_a,buf,pos,v)
     {return bin_write_list(write_a,buf,pos,v)}
    function bin_writer_sexp_list(bin_writer_a)
     {function _a_J_(v)
       {var _a_K_=bin_writer_a[2];
        return function(_a_L_,_a_M_)
         {return bin_write_sexp_list(_a_K_,v,_a_L_,_a_M_)}}
      return [0,
              function(v){return bin_size_sexp_list(bin_writer_a[1],v)},
              _a_J_]}
    function bin_read_sexp_list(of_a,buf,pos_ref,vint)
     {return bin_read_list(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_list$0(of_a,buf,pos_ref)
     {return bin_read_list$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_list(bin_reader_a)
     {function _a_I_(buf,pos_ref,vtag)
       {return bin_read_sexp_list(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_list$0(bin_reader_a[1],buf,pos_ref)},
              _a_I_]}
    function bin_sexp_list(bin_a)
     {var
       _a_G_=bin_reader_sexp_list(bin_a[3]),
       _a_H_=bin_writer_sexp_list(bin_a[2]);
      return [0,bin_shape_sexp_list(bin_a[1]),_a_H_,_a_G_]}
    var
     Typename_of_sexp_list=
      caml_call1(Typerep_lib_Make_typename[2],[0,name$48]),
     _Q4_=Typename_of_sexp_list[2];
    function typerep_of_sexp_list(of_a)
     {var name_of_sexp_list=caml_call1(Typename_of_sexp_list[1],of_a);
      return [9,
              [0,
               name_of_sexp_list,
               [0,[246,function(_a_F_){return typerep_of_list(of_a)}]]]]}
    var
     _Q5_=caml_call1(Bin_prot_Shape[3][1],cst_a$75),
     _Q6_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_183_24),
     _Q7_=bin_shape_option(caml_call2(Bin_prot_Shape[15],_Q6_,_Q5_)),
     _Q8_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$76),0],
     _Q9_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_option),_Q8_,_Q7_],0],
     _Q__=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_183_2),
     group$95=caml_call2(Bin_prot_Shape[6],_Q__,_Q9_);
    function bin_shape_sexp_option(a)
     {var _a_E_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_option$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$95,_a_E_),[0,a,0])}
    function bin_size_sexp_option(size_of_a,v)
     {return bin_size_option(size_of_a,v)}
    function bin_write_sexp_option(write_a,buf,pos,v)
     {return bin_write_option(write_a,buf,pos,v)}
    function bin_writer_sexp_option(bin_writer_a)
     {function _a_A_(v)
       {var _a_B_=bin_writer_a[2];
        return function(_a_C_,_a_D_)
         {return bin_write_sexp_option(_a_B_,v,_a_C_,_a_D_)}}
      return [0,
              function(v){return bin_size_sexp_option(bin_writer_a[1],v)},
              _a_A_]}
    function bin_read_sexp_option(of_a,buf,pos_ref,vint)
     {return bin_read_option(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_option$0(of_a,buf,pos_ref)
     {return bin_read_option$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_option(bin_reader_a)
     {function _a_z_(buf,pos_ref,vtag)
       {return bin_read_sexp_option(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_option$0(bin_reader_a[1],buf,pos_ref)},
              _a_z_]}
    function bin_sexp_option(bin_a)
     {var
       _a_x_=bin_reader_sexp_option(bin_a[3]),
       _a_y_=bin_writer_sexp_option(bin_a[2]);
      return [0,bin_shape_sexp_option(bin_a[1]),_a_y_,_a_x_]}
    var
     Typename_of_sexp_option=
      caml_call1(Typerep_lib_Make_typename[2],[0,name$49]),
     _Q$_=Typename_of_sexp_option[2];
    function typerep_of_sexp_option(of_a)
     {var name_of_sexp_option=caml_call1(Typename_of_sexp_option[1],of_a);
      return [9,
              [0,
               name_of_sexp_option,
               [0,[246,function(_a_w_){return typerep_of_option(of_a)}]]]]}
    var
     _Ra_=caml_call1(Bin_prot_Shape[3][1],cst_a$77),
     _Rb_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_187_24),
     _Rc_=caml_call2(Bin_prot_Shape[15],_Rb_,_Ra_),
     _Rd_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$78),0],
     _Re_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_opaque$1),_Rd_,_Rc_],0],
     _Rf_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_187_2),
     group$96=caml_call2(Bin_prot_Shape[6],_Rf_,_Re_);
    function bin_shape_sexp_opaque$0(a)
     {var _a_v_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_opaque$2);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$96,_a_v_),[0,a,0])}
    function bin_size_sexp_opaque$0(size_of_a){return size_of_a}
    function bin_write_sexp_opaque$0(write_a){return write_a}
    function bin_writer_sexp_opaque$0(bin_writer_a)
     {function _a_u_(v){return caml_call1(bin_writer_a[2],v)}
      return [0,function(v){return caml_call1(bin_writer_a[1],v)},_a_u_]}
    function bin_read_sexp_opaque$1(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[18],_Rg_,pos_ref[1])}
    function bin_read_sexp_opaque$2(of_a){return of_a}
    function bin_reader_sexp_opaque$0(bin_reader_a)
     {function _a_t_(buf,pos_ref,vtag)
       {return bin_read_sexp_opaque$1(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2(bin_reader_a[1],buf,pos_ref)},
              _a_t_]}
    function bin_sexp_opaque$0(bin_a)
     {var
       _a_r_=bin_reader_sexp_opaque$0(bin_a[3]),
       _a_s_=bin_writer_sexp_opaque$0(bin_a[2]);
      return [0,bin_shape_sexp_opaque$0(bin_a[1]),_a_s_,_a_r_]}
    function compare_sexp_opaque$0(cmp_a,a_095,b_096)
     {return caml_call2(cmp_a,a_095,b_096)}
    function hash_fold_sexp_opaque$0(hash_fold_a,hsv,arg)
     {return caml_call2(hash_fold_a,hsv,arg)}
    var
     Typename_of_sexp_opaque$0=
      caml_call1(Typerep_lib_Make_typename[2],[0,name$50]),
     typename_of_sexp_opaque$0=Typename_of_sexp_opaque$0[2];
    function typerep_of_sexp_opaque$0(of_a)
     {var name_of_sexp_opaque=caml_call1(Typename_of_sexp_opaque$0[1],of_a);
      return [9,[0,name_of_sexp_opaque,[0,of_a]]]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$232);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Std_internal=
      [0,
       _Gf_,
       _Gg_,
       _Gh_,
       _Gk_,
       _Gl_,
       _Gm_,
       _Gn_,
       _Go_,
       _Gp_,
       _Gq_,
       _Gr_,
       _Gs_,
       _Gt_,
       _Gu_,
       _Gv_,
       _Gw_,
       _Gx_,
       _Gy_,
       _Gz_,
       _GB_,
       _GC_,
       _GD_,
       _GE_,
       _GF_,
       _GG_,
       _GH_,
       _GI_,
       _GJ_,
       _GK_,
       _GL_,
       _GM_,
       _GN_,
       _GO_,
       _GP_,
       _GQ_,
       _GR_,
       _GS_,
       _GT_,
       _GU_,
       _GV_,
       _GW_,
       _GX_,
       _GY_,
       _GZ_,
       _G0_,
       _G1_,
       _G2_,
       _G3_,
       _G4_,
       _G5_,
       _G6_,
       _G7_,
       _G8_,
       _G9_,
       _G__,
       _G$_,
       _Ha_,
       _Hb_,
       _Hc_,
       _Hd_,
       _He_,
       _Hf_,
       _Hg_,
       _Hh_,
       _Hi_,
       _Hj_,
       _Hk_,
       _Hl_,
       _Hm_,
       _Hn_,
       _Ho_,
       _Hp_,
       _Hq_,
       _Hr_,
       _Hs_,
       _Ht_,
       _Hu_,
       _Hv_,
       _Hw_,
       _Hx_,
       _Hy_,
       _Hz_,
       _HA_,
       _Np_,
       _Nq_,
       _Nr_,
       _Ns_,
       _Nt_,
       _Nu_,
       _Nv_,
       _Nw_,
       _Nx_,
       _Ny_,
       _Nz_,
       _NA_,
       _NB_,
       _NC_,
       _ND_,
       _NE_,
       _NF_,
       _NG_,
       _NH_,
       _NI_,
       _NJ_,
       _NK_,
       _NL_,
       _NM_,
       _NN_,
       _NO_,
       _NP_,
       _NQ_,
       _NR_,
       _NS_,
       _NT_,
       _NU_,
       _NV_,
       _NW_,
       _NX_,
       _NY_,
       _NZ_,
       _N0_,
       _N1_,
       _N2_,
       _N3_,
       _N4_,
       _N5_,
       symbol,
       _N6_,
       _N7_,
       _N8_,
       _N9_,
       _N__,
       _N$_,
       _Oa_,
       _Ob_,
       _Oc_,
       _Od_,
       _Oe_,
       _Of_,
       _Og_,
       _Oh_,
       _Mj_,
       never_returns,
       _Oi_,
       _Oj_,
       _Ok_,
       _Ol_,
       _Om_,
       _On_,
       _Oo_,
       _Op_,
       _Oq_,
       _Or_,
       _Os_,
       _Ot_,
       _Ou_,
       _Ov_,
       _Ow_,
       _Ox_,
       _Oy_,
       _Oz_,
       _OA_,
       _OB_,
       _OC_,
       _OD_,
       _OE_,
       _OF_,
       _OG_,
       _OH_,
       _OI_,
       _OJ_,
       _OK_,
       _OL_,
       _OM_,
       _ON_,
       _OO_,
       _OP_,
       _OQ_,
       _OR_,
       _OS_,
       _OT_,
       _OU_,
       _OV_,
       _OW_,
       _OX_,
       _OY_,
       _OZ_,
       _O0_,
       _O1_,
       _O2_,
       _O3_,
       _O4_,
       _O5_,
       _O6_,
       _O7_,
       _O8_,
       _O9_,
       _O__,
       _O$_,
       _Pa_,
       _Pb_,
       Bug,
       C_malloc_exn,
       _Pf_,
       fst3,
       snd3,
       trd3,
       uw,
       symbol$60,
       symbol$59,
       symbol$62,
       symbol$129,
       _fF_,
       _iD_,
       _fJ_,
       _ua_,
       _ub_,
       _Pg_,
       failwithp,
       failwiths,
       force,
       _fK_,
       ident,
       _Ph_,
       _fD_,
       _yi_,
       _yj_,
       _fG_,
       _t9_,
       _Pi_,
       phys_same,
       _Pj_,
       _Pk_,
       _fM_,
       _Pl_,
       _Pm_,
       _on_,
       _I3_,
       _Pn_,
       _fE_,
       _Po_,
       _Pp_,
       _Pq_,
       _Pr_,
       _Ps_,
       _Pt_,
       _Pu_,
       _Pv_,
       _Pw_,
       _Px_,
       _Py_,
       _Pz_,
       _PA_,
       _PB_,
       _PC_,
       _PD_,
       _PE_,
       _PF_,
       _PG_,
       _PH_,
       bin_shape_array,
       bin_size_array,
       bin_write_array,
       bin_writer_array,
       bin_read_array$0,
       bin_read_array,
       bin_reader_array,
       bin_array,
       _lf_,
       equal$0,
       _lg_,
       _lh_,
       typerep_of_array,
       _PO_,
       bin_shape_bool,
       _Be_,
       _Bf_,
       bin_writer_bool,
       _Bg_,
       _Bh_,
       bin_reader_bool,
       bin_bool,
       _BF_,
       _BG_,
       _BS_,
       hash_bool,
       _BP_,
       _BQ_,
       typerep_of_bool,
       typename_of_bool,
       bin_shape_char,
       _E$_,
       _Fa_,
       bin_writer_char,
       _Fb_,
       _Fc_,
       bin_reader_char,
       bin_char,
       _FR_,
       _FS_,
       _F4_,
       hash_char,
       _F1_,
       _F2_,
       typerep_of_char,
       typename_of_char,
       bin_shape_float,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_float,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_float,
       bin_float,
       compare$30,
       equal$18,
       hash_fold_t$15,
       hash_float,
       sexp_of_t$42,
       _IA_,
       typerep_of_float,
       typename_of_float,
       bin_shape_int,
       bin_size_t$44,
       bin_write_t$44,
       bin_writer_int,
       bin_read_t$90,
       bin_read_t$91,
       bin_reader_int,
       bin_int,
       compare$32,
       equal$19,
       hash_fold_t$16,
       hash_int,
       sexp_of_t$44,
       t_of_sexp$35,
       typerep_of_int,
       typename_of_int,
       bin_shape_int32,
       bin_size_t$45,
       bin_write_t$45,
       bin_writer_int32,
       bin_read_t$92,
       bin_read_t$93,
       bin_reader_int32,
       bin_int32,
       compare$34,
       equal$20,
       hash_fold_t$18,
       hash_int32,
       sexp_of_t$46,
       t_of_sexp$37,
       typerep_of_int32,
       typename_of_int32,
       bin_shape_int64,
       bin_size_t$46,
       bin_write_t$46,
       bin_writer_int64,
       bin_read_t$94,
       bin_read_t$95,
       bin_reader_int64,
       bin_int64,
       compare$36,
       equal$21,
       hash_fold_t$20,
       hash_int64,
       sexp_of_t$48,
       t_of_sexp$39,
       typerep_of_int64,
       typename_of_int64,
       bin_shape_lazy_t,
       bin_size_lazy_t,
       bin_write_lazy_t,
       bin_writer_lazy_t,
       bin_read_lazy_t$0,
       bin_read_lazy_t,
       bin_reader_lazy_t,
       bin_lazy_t,
       _Lu_,
       _Lv_,
       _Lx_,
       _Lw_,
       typerep_of_lazy_t,
       _Qb_,
       bin_shape_list,
       bin_size_list,
       bin_write_list,
       bin_writer_list,
       bin_read_list$0,
       bin_read_list,
       bin_reader_list,
       bin_list,
       compare_sexp_list,
       _rk_,
       hash_fold_sexp_list,
       _pf_,
       _pe_,
       typerep_of_list,
       _Qi_,
       bin_shape_nativeint,
       bin_size_t$53,
       bin_write_t$53,
       bin_writer_nativeint,
       bin_read_t$108,
       bin_read_t$109,
       bin_reader_nativeint,
       bin_nativeint,
       compare$44,
       equal$24,
       hash_fold_t$25,
       hash_nativeint,
       sexp_of_t$55,
       t_of_sexp$46,
       typerep_of_nativeint,
       typename_of_nativeint,
       bin_shape_option,
       bin_size_option,
       bin_write_option,
       bin_writer_option,
       bin_read_option$0,
       bin_read_option,
       bin_reader_option,
       bin_option,
       _xO_,
       _x9_,
       _xP_,
       _xR_,
       _xQ_,
       typerep_of_option,
       _Qs_,
       bin_shape_string,
       bin_size_t$42,
       bin_write_t$42,
       bin_writer_string,
       bin_read_t$86,
       bin_read_t$87,
       bin_reader_string,
       bin_string,
       compare$28,
       equal$17,
       hash_fold_t$13,
       hash_string,
       sexp_of_t$40,
       t_of_sexp$32,
       typerep_of_string,
       typename_of_string,
       bin_shape_bytes,
       bin_size_t$0,
       bin_write_t$0,
       bin_writer_bytes,
       bin_read_t$1,
       bin_read_t$2,
       bin_reader_bytes,
       bin_bytes,
       _Er_,
       _Eq_,
       _Ee_,
       _Ed_,
       typerep_of_bytes,
       typename_of_bytes,
       bin_shape_ref,
       bin_size_ref,
       bin_write_ref,
       bin_writer_ref,
       bin_read_ref$0,
       bin_read_ref,
       bin_reader_ref,
       bin_ref,
       _M5_,
       _M6_,
       _M8_,
       _M7_,
       typerep_of_ref,
       _QF_,
       bin_shape_unit,
       bin_size_t$51,
       bin_write_t$51,
       bin_writer_unit,
       bin_read_t$104,
       bin_read_t$105,
       bin_reader_unit,
       bin_unit,
       compare$42,
       equal$23,
       hash_fold_t$24,
       hash_unit,
       sexp_of_t$53,
       t_of_sexp$44,
       typerep_of_unit,
       typename_of_unit,
       bin_shape_float_array,
       bin_size_float_array,
       bin_write_float_array,
       bin_writer_float_array,
       bin_read_float_array$0,
       bin_read_float_array,
       bin_reader_float_array,
       bin_float_array,
       compare_float_array,
       sexp_of_float_array,
       float_array_of_sexp,
       typerep_of_float_array,
       typename_of_float_array,
       _QN_,
       bin_shape_sexp_array,
       bin_size_sexp_array,
       bin_write_sexp_array,
       bin_writer_sexp_array,
       bin_read_sexp_array,
       bin_read_sexp_array$0,
       bin_reader_sexp_array,
       bin_sexp_array,
       _lf_,
       Typename_of_sexp_array,
       _QU_,
       typerep_of_sexp_array,
       bin_shape_sexp_bool,
       _Be_,
       _Bf_,
       bin_writer_sexp_bool,
       _Bh_,
       _Bg_,
       bin_reader_sexp_bool,
       bin_sexp_bool,
       _BF_,
       _BS_,
       hash_sexp_bool,
       Typename_of_sexp_bool,
       typename_of_sexp_bool,
       typerep_of_sexp_bool,
       bin_shape_sexp_list,
       bin_size_sexp_list,
       bin_write_sexp_list,
       bin_writer_sexp_list,
       bin_read_sexp_list,
       bin_read_sexp_list$0,
       bin_reader_sexp_list,
       bin_sexp_list,
       compare_sexp_list,
       hash_fold_sexp_list,
       Typename_of_sexp_list,
       _Q4_,
       typerep_of_sexp_list,
       bin_shape_sexp_option,
       bin_size_sexp_option,
       bin_write_sexp_option,
       bin_writer_sexp_option,
       bin_read_sexp_option,
       bin_read_sexp_option$0,
       bin_reader_sexp_option,
       bin_sexp_option,
       _xO_,
       _xP_,
       Typename_of_sexp_option,
       _Q$_,
       typerep_of_sexp_option,
       bin_shape_sexp_opaque$0,
       bin_size_sexp_opaque$0,
       bin_write_sexp_opaque$0,
       bin_writer_sexp_opaque$0,
       bin_read_sexp_opaque$1,
       bin_read_sexp_opaque$2,
       bin_reader_sexp_opaque$0,
       bin_sexp_opaque$0,
       compare_sexp_opaque$0,
       hash_fold_sexp_opaque$0,
       Typename_of_sexp_opaque$0,
       typename_of_sexp_opaque$0,
       typerep_of_sexp_opaque$0];
    caml_register_global
     (4403,Core_kernel_Std_internal,"Core_kernel__Std_internal");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$233);
    caml_call1(Expect_test_collector[4][1],cst_src_byte_units_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$234,cst$81);
    function hash$24(x){return caml_call1(_KS_,x)}
    function of_bytes_int63(_a_q_){return _a_q_}
    function bytes_int63(_a_p_){return _a_p_}
    function to_string$14(n)
     {var
       kib=caml_call1(of_int$3,1024),
       mib=caml_call2(symbol$101,kib,kib),
       gib=caml_call2(symbol$101,kib,mib),
       n_abs=caml_call1(abs$4,n);
      if(caml_call2(symbol$97,n_abs,kib))
       return caml_call2(_fE_,_Rh_,caml_call1(to_int_exn$2,n));
      if(caml_call2(symbol$97,n_abs,mib))
       {var _a_m_=caml_call1(to_float$3,kib);
        return caml_call2(_fE_,_Ri_,caml_call1(to_float$3,n) / _a_m_)}
      if(caml_call2(symbol$97,n_abs,gib))
       {var _a_n_=caml_call1(to_float$3,mib);
        return caml_call2(_fE_,_Rj_,caml_call1(to_float$3,n) / _a_n_)}
      var _a_o_=caml_call1(to_float$3,gib);
      return caml_call2(_fE_,_Rk_,caml_call1(to_float$3,n) / _a_o_)}
    function sexp_of_t$58(n){return [0,to_string$14(n)]}
    var
     _Rl_=Make_plain$1([0,compare$39,sexp_of_t$58]),
     symbol$130=_Rl_[1],
     symbol$131=_Rl_[2],
     symbol$132=_Rl_[3],
     symbol$133=_Rl_[4],
     symbol$134=_Rl_[5],
     symbol$135=_Rl_[6],
     equal$25=_Rl_[7],
     min$8=_Rl_[9],
     max$8=_Rl_[10],
     ascending$8=_Rl_[11],
     descending$8=_Rl_[12],
     between$8=_Rl_[13],
     clamp_exn$8=_Rl_[14],
     clamp$8=_Rl_[15],
     comparator$13=_Rl_[16],
     validate_lbound$8=_Rl_[17],
     validate_ubound$8=_Rl_[18],
     validate_bound$8=_Rl_[19],
     Replace_polymorphic_compare$7=_Rl_[20],
     Map$11=_Rl_[21],
     Set$11=_Rl_[22],
     include$74=
      Make_plain$2([0,hash_fold_t$22,compare$39,sexp_of_t$58,hash$24]),
     compare$47=include$74[1],
     hash_fold_t$28=include$74[2],
     hash$25=include$74[3],
     hashable$8=include$74[4],
     Table$9=include$74[5],
     Hash_set$9=include$74[6],
     Hash_queue$8=include$74[7];
    function symbol$136(a,b){return caml_call2(symbol$100,a,b)}
    function symbol$137(a,b){return caml_call2(symbol$99,a,b)}
    function symbol$138(a,b){return caml_call2(symbol$107,a,b)}
    function symbol$139(t,s)
     {return caml_call1(of_float$4,caml_call1(to_float$3,t) / s)}
    function scale$0(t,s)
     {return caml_call1(of_float$4,caml_call1(to_float$3,t) * s)}
    function iscale(t,s)
     {return caml_call2(symbol$101,t,caml_call1(of_int$3,s))}
    function bytes_int_exn(t){return caml_call1(to_int_exn$2,t)}
    function bytes_int64(t){return caml_call1(to_int64$2,t)}
    function bytes(t){return caml_call1(to_float$3,t)}
    function of_bytes_int(b){return caml_call1(of_int$3,b)}
    function of_bytes_int64_exn(b){return caml_call1(of_int64_exn$2,b)}
    function of_bytes(b){return caml_call1(of_float$4,b)}
    var
     kilobyte=of_bytes_int(1024),
     megabyte=iscale(kilobyte,1024),
     gigabyte=iscale(megabyte,1024),
     terabyte=iscale(gigabyte,1024),
     petabyte=iscale(terabyte,1024),
     exabyte=iscale(petabyte,1024),
     word=0 === Base_Word_size[3]?of_bytes_int(4):of_bytes_int(8);
    function kilobytes(t){return symbol$138(t,kilobyte)}
    function megabytes(t){return symbol$138(t,megabyte)}
    function gigabytes(t){return symbol$138(t,gigabyte)}
    function terabytes(t){return symbol$138(t,terabyte)}
    function petabytes(t){return symbol$138(t,petabyte)}
    function exabytes(t){return symbol$138(t,exabyte)}
    function words_int_exn(t)
     {return caml_call1(to_int_exn$2,caml_call2(symbol$106,t,word))}
    function words(t){return symbol$138(t,word)}
    function of_kilobytes(t){return scale$0(kilobyte,t)}
    function of_megabytes(t){return scale$0(megabyte,t)}
    function of_gigabytes(t){return scale$0(gigabyte,t)}
    function of_terabytes(t){return scale$0(terabyte,t)}
    function of_petabytes(t){return scale$0(petabyte,t)}
    function of_exabytes(t){return scale$0(exabyte,t)}
    function of_words_int(t){return iscale(word,t)}
    function of_words(t){return scale$0(word,t)}
    function of_string$13(s)
     {var length=caml_ml_string_length(s);
      if(caml_call2(symbol$52,length,2))caml_call3(_Ph_,_Rm_,s,0);
      var
       base_str=caml_call3(_Ca_,s,0,length - 1 | 0),
       ext_char=caml_call1(_Fz_,caml_string_get(s,length - 1 | 0));
      try
       {var _a_k_=caml_call1(_IB_,base_str),base=_a_k_}
      catch(_a_l_){var base=caml_call4(_Ph_,_Rn_,s,base_str,0)}
      var switcher=ext_char - 98 | 0;
      if(! (21 < switcher >>> 0))
       switch(switcher)
        {case 0:return of_bytes(base);
         case 3:return of_exabytes(base);
         case 5:return of_gigabytes(base);
         case 9:return of_kilobytes(base);
         case 11:return of_megabytes(base);
         case 14:return of_petabytes(base);
         case 18:return of_terabytes(base);
         case 21:return of_words(base)
         }
      return caml_call4(_Ph_,_Ro_,s,ext_char,0)}
    function largest_measure(t)
     {var t_abs=caml_call1(abs$4,t);
      return caml_call2(symbol$130,t_abs,exabyte)
              ?-287410883
              :caml_call2(symbol$130,t_abs,petabyte)
                ?-632836503
                :caml_call2(symbol$130,t_abs,terabyte)
                  ?-756914965
                  :caml_call2(symbol$130,t_abs,gigabyte)
                    ?939376143
                    :caml_call2(symbol$130,t_abs,megabyte)
                      ?-992187495
                      :caml_call2(symbol$130,t_abs,kilobyte)?-324157174:-792364981}
    function no_match(param)
     {return caml_call1(_Gg_,cst_Not_a_recognized_Byte_units_t_representation)}
    function of_value_sexp_and_unit_name(val_sexp,param)
     {if(caml_string_notequal(param,cst_Bytes))
       return caml_string_notequal(param,cst_Exabytes)
               ?caml_string_notequal(param,cst_Gigabytes)
                 ?caml_string_notequal(param,cst_Kilobytes)
                   ?caml_string_notequal(param,cst_Megabytes)
                     ?caml_string_notequal(param,cst_Petabytes)
                       ?caml_string_notequal(param,cst_Terabytes)
                         ?caml_string_notequal(param,cst_Words)
                           ?no_match(0)
                           :of_words(caml_call1(_IA_,val_sexp))
                         :of_terabytes(caml_call1(_IA_,val_sexp))
                       :of_petabytes(caml_call1(_IA_,val_sexp))
                     :of_megabytes(caml_call1(_IA_,val_sexp))
                   :of_kilobytes(caml_call1(_IA_,val_sexp))
                 :of_gigabytes(caml_call1(_IA_,val_sexp))
               :of_exabytes(caml_call1(_IA_,val_sexp));
      try
       {var _a_i_=caml_call1(_KT_,val_sexp);return _a_i_}
      catch(_a_j_){return of_bytes(caml_call1(_IA_,val_sexp))}}
    function _Rp_(param)
     {if(0 === param[0]){var str=param[1];return of_string$13(str)}
      var _a_f_=param[1];
      if(_a_f_)
       {var _a_g_=_a_f_[1];
        if(0 === _a_g_[0])
         {var _a_h_=_a_f_[2];
          if(_a_h_)
           if(! _a_h_[2])
            {var value=_a_h_[1],unit_name=_a_g_[1];
             return of_value_sexp_and_unit_name(value,unit_name)}}}
      return no_match(0)}
    function t_of_sexp$50(sexp)
     {try
       {var _a_e_=_Rp_(sexp);return _a_e_}
      catch(exn)
       {exn = caml_wrap_exception(exn);throw [0,Of_sexp_error,exn,sexp]}}
    var
     _Rq_=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$50,
           bin_size_t$2,
           bin_write_t$2,
           bin_read_t$5,
           bin_read_t$6]),
        [0,bytes,of_bytes]),
     _Rr_=_Rq_[1],
     _Rs_=_Rq_[2],
     _Rt_=_Rq_[3],
     _Ru_=_Rq_[4],
     _Rv_=_Rq_[5],
     _Rw_=_Rq_[6],
     _Rx_=_Rq_[7],
     _Ry_=_Rq_[8];
    function sexp_of_t$59(t)
     {var match=largest_measure(t);
      return -756914965 <= match
              ?-324157174 === match
                ?[1,[0,_Rz_,[0,caml_call1(sexp_of_t$42,kilobytes(t)),0]]]
                :[1,[0,_RA_,[0,caml_call1(sexp_of_t$42,gigabytes(t)),0]]]
              :-792364981 <= match
                ?[1,[0,_RB_,[0,caml_call1(sexp_of_t$42,bytes(t)),0]]]
                :[1,[0,_RC_,[0,caml_call1(sexp_of_t$42,megabytes(t)),0]]]}
    function to_string$15(t){return caml_call1(_CB_,to_string$14(t))}
    var
     Expect_test_collector$2=
      caml_call1
       (Expect_test_collector[2],
        [0,
         Expect_test_config[2],
         Expect_test_config[3],
         Expect_test_config[4],
         Expect_test_config[5],
         Expect_test_config[6],
         Expect_test_config[7]]);
    function _RD_(param)
     {var _a9P_=of_bytes_int(1000),_a9Q_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _RE_,
          function(param,custom_printf_005)
           {return to_string$15(custom_printf_005)},
          _a9Q_],
         cst$82],
        _a9P_);
      var
       _a9R_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$0),
         225,
         6745,
         6753,
         6759];
      caml_call1(Expect_test_collector$2[1],_a9R_);
      var _a9S_=of_bytes_int(1023),_a9T_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _RF_,
          function(param,custom_printf_006)
           {return to_string$15(custom_printf_006)},
          _a9T_],
         cst$83],
        _a9S_);
      var
       _a9U_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$1),
         227,
         6815,
         6823,
         6829];
      caml_call1(Expect_test_collector$2[1],_a9U_);
      var _a9V_=of_bytes_int(1024),_a9W_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _RG_,
          function(param,custom_printf_007)
           {return to_string$15(custom_printf_007)},
          _a9W_],
         cst$84],
        _a9V_);
      var
       _a9X_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$2),
         229,
         6885,
         6893,
         6899];
      caml_call1(Expect_test_collector$2[1],_a9X_);
      var _a9Y_=of_bytes_int(1025),_a9Z_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _RH_,
          function(param,custom_printf_008)
           {return to_string$15(custom_printf_008)},
          _a9Z_],
         cst$85],
        _a9Y_);
      var
       _a90_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$3),
         231,
         6952,
         6960,
         6966];
      caml_call1(Expect_test_collector$2[1],_a90_);
      var _a91_=of_bytes_int(1500),_a92_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _RI_,
          function(param,custom_printf_009)
           {return to_string$15(custom_printf_009)},
          _a92_],
         cst$86],
        _a91_);
      var
       _a93_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$4),
         233,
         7025,
         7033,
         7039];
      caml_call1(Expect_test_collector$2[1],_a93_);
      var _a94_=of_bytes_int(10000),_a95_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _RJ_,
          function(param,custom_printf_010)
           {return to_string$15(custom_printf_010)},
          _a95_],
         cst$87],
        _a94_);
      var
       _a96_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$5),
         235,
         7099,
         7107,
         7113];
      caml_call1(Expect_test_collector$2[1],_a96_);
      var _a97_=of_bytes_int(100000),_a98_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _RK_,
          function(param,custom_printf_011)
           {return to_string$15(custom_printf_011)},
          _a98_],
         cst$88],
        _a97_);
      var
       _a99_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$6),
         237,
         7174,
         7182,
         7188];
      caml_call1(Expect_test_collector$2[1],_a99_);
      var _a9__=of_bytes_int(1000000),_a9$_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _RL_,
          function(param,custom_printf_012)
           {return to_string$15(custom_printf_012)},
          _a9$_],
         cst$89],
        _a9__);
      var
       _a_a_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$7),
         239,
         7250,
         7258,
         7264];
      caml_call1(Expect_test_collector$2[1],_a_a_);
      var _a_b_=of_bytes_int(10000000),_a_c_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _RM_,
          function(param,custom_printf_013)
           {return to_string$15(custom_printf_013)},
          _a_c_],
         cst$90],
        _a_b_);
      var
       _a_d_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$8),
         241,
         7327,
         7335,
         7341];
      return caml_call1(Expect_test_collector$2[1],_a_d_)}
    var
     _RN_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$9),
       225,
       6745,
       6760,
       6771],
     _RQ_=
      [0,
       [0,
        _RP_,
        _RO_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$10),
         225,
         6745,
         6753,
         6759],
        _RN_],
       0],
     _RR_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$11),
       227,
       6815,
       6830,
       6841],
     _RU_=
      [0,
       [0,
        _RT_,
        _RS_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$12),
         227,
         6815,
         6823,
         6829],
        _RR_],
       _RQ_],
     _RV_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$13),
       229,
       6885,
       6900,
       6908],
     _RY_=
      [0,
       [0,
        _RX_,
        _RW_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$14),
         229,
         6885,
         6893,
         6899],
        _RV_],
       _RU_],
     _RZ_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$15),
       231,
       6952,
       6967,
       6981],
     _R2_=
      [0,
       [0,
        _R1_,
        _R0_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$16),
         231,
         6952,
         6960,
         6966],
        _RZ_],
       _RY_],
     _R3_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$17),
       233,
       7025,
       7040,
       7054],
     _R6_=
      [0,
       [0,
        _R5_,
        _R4_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$18),
         233,
         7025,
         7033,
         7039],
        _R3_],
       _R2_],
     _R7_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$19),
       235,
       7099,
       7114,
       7128],
     _R__=
      [0,
       [0,
        _R9_,
        _R8_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$20),
         235,
         7099,
         7107,
         7113],
        _R7_],
       _R6_],
     _R$_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$21),
       237,
       7174,
       7189,
       7203],
     _Sc_=
      [0,
       [0,
        _Sb_,
        _Sa_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$22),
         237,
         7174,
         7182,
         7188],
        _R$_],
       _R__],
     _Sd_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$23),
       239,
       7250,
       7265,
       7279],
     _Sg_=
      [0,
       [0,
        _Sf_,
        _Se_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$24),
         239,
         7250,
         7258,
         7264],
        _Sd_],
       _Sc_],
     _Sh_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$25),
       241,
       7327,
       7342,
       7356],
     _Sk_=
      [0,
       [0,
        _Sj_,
        _Si_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$26),
         241,
         7327,
         7335,
         7341],
        _Sh_],
       _Sg_],
     _Sm_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$28),
       223,
       6663,
       6667,
       7357],
     _Sn_=
      caml_call1
       (Expect_test_common_File[4][3],cst_8871416feb9323353e45ec7757d2a358);
    caml_call9
     (Expect_test_collector$2[3],
      _Sn_,
      _Sm_,
      cst_src_byte_units_ml$27,
      0,
      _Sl_,
      _Sk_,
      0,
      Inline_test_config,
      _RD_);
    function t_of_sexp$51(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _a9O_=of_string$13(s);return _a9O_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Stdlib[6])
           {var msg=exn[2];return caml_call2(_Of_,msg,sexp)}
          throw exn}}
      return t_of_sexp$50(sexp)}
    var
     _So_=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$64,
           bin_size_t$49,
           bin_write_t$49,
           bin_read_t$100,
           bin_read_t$101]),
        [0,bytes_int63,of_bytes_int63]),
     bin_size_t$57=_So_[1],
     bin_write_t$58=_So_[2],
     bin_read_t$118=_So_[3],
     bin_read_t$119=_So_[4],
     bin_shape_t$77=_So_[5],
     bin_writer_t$70=_So_[6],
     bin_reader_t$70=_So_[7],
     bin_t$70=_So_[8];
    function sexp_of_t$60(t){return [1,[0,_Sp_,[0,caml_call1(_KU_,t),0]]]}
    function to_string_short(t)
     {function to_units_str(to_unit,ext)
       {var f=caml_call1(to_unit,t),f_abs=caml_call1(abs,f);
        return caml_call2(include$53[2],f_abs,100.)
                ?caml_call3(_fE_,_Sq_,f,ext)
                :caml_call2(include$53[2],f_abs,10.)
                  ?caml_call3(_fE_,_Sr_,f,ext)
                  :caml_call3(_fE_,_Ss_,f,ext)}
      var match=largest_measure(t);
      return -632836503 <= match
              ?-287410883 <= match
                ?939376143 <= match
                  ?to_units_str(gigabytes,71)
                  :to_units_str(exabytes,69)
                :-324157174 <= match
                  ?to_units_str(kilobytes,75)
                  :to_units_str(petabytes,80)
              :-792364981 === match
                ?caml_call2(_fE_,_St_,bytes_int_exn(t))
                :-756914965 <= match
                  ?to_units_str(terabytes,84)
                  :to_units_str(megabytes,77)}
    var
     Expect_test_collector$3=
      caml_call1
       (Expect_test_collector[2],
        [0,
         Expect_test_config[2],
         Expect_test_config[3],
         Expect_test_config[4],
         Expect_test_config[5],
         Expect_test_config[6],
         Expect_test_config[7]]);
    function _Su_(param)
     {var _a9b_=of_bytes_int(1000),_a9c_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _Sv_,
          function(param,custom_printf_016)
           {return to_string_short(custom_printf_016)},
          _a9c_],
         cst_short],
        _a9b_);
      var
       _a9d_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$29),
         295,
         8704,
         8708,
         8714];
      caml_call1(Expect_test_collector$3[1],_a9d_);
      var _a9e_=of_bytes_int(1023),_a9f_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _Sw_,
          function(param,custom_printf_017)
           {return to_string_short(custom_printf_017)},
          _a9f_],
         cst_short$0],
        _a9e_);
      var
       _a9g_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$30),
         297,
         8772,
         8776,
         8782];
      caml_call1(Expect_test_collector$3[1],_a9g_);
      var _a9h_=of_bytes_int(1024),_a9i_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _Sx_,
          function(param,custom_printf_018)
           {return to_string_short(custom_printf_018)},
          _a9i_],
         cst_short$1],
        _a9h_);
      var
       _a9j_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$31),
         299,
         8840,
         8844,
         8850];
      caml_call1(Expect_test_collector$3[1],_a9j_);
      var _a9k_=of_bytes_int(1025),_a9l_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _Sy_,
          function(param,custom_printf_019)
           {return to_string_short(custom_printf_019)},
          _a9l_],
         cst_short$2],
        _a9k_);
      var
       _a9m_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$32),
         301,
         8908,
         8912,
         8918];
      caml_call1(Expect_test_collector$3[1],_a9m_);
      var _a9n_=of_bytes_int(10000),_a9o_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _Sz_,
          function(param,custom_printf_020)
           {return to_string_short(custom_printf_020)},
          _a9o_],
         cst_short$3],
        _a9n_);
      var
       _a9p_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$33),
         303,
         8977,
         8981,
         8987];
      caml_call1(Expect_test_collector$3[1],_a9p_);
      var _a9q_=of_bytes_int(100000),_a9r_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _SA_,
          function(param,custom_printf_021)
           {return to_string_short(custom_printf_021)},
          _a9r_],
         cst_short$4],
        _a9q_);
      var
       _a9s_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$34),
         305,
         9047,
         9051,
         9057];
      caml_call1(Expect_test_collector$3[1],_a9s_);
      var _a9t_=of_bytes_int(1000000),_a9u_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _SB_,
          function(param,custom_printf_022)
           {return to_string_short(custom_printf_022)},
          _a9u_],
         cst_short$5],
        _a9t_);
      var
       _a9v_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$35),
         307,
         9118,
         9122,
         9128];
      caml_call1(Expect_test_collector$3[1],_a9v_);
      var _a9w_=of_bytes_int(10000000),_a9x_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _SC_,
          function(param,custom_printf_023)
           {return to_string_short(custom_printf_023)},
          _a9x_],
         cst_short$6],
        _a9w_);
      var
       _a9y_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$36),
         309,
         9189,
         9193,
         9199];
      caml_call1(Expect_test_collector$3[1],_a9y_);
      var _a9z_=of_bytes(10000000000.),_a9A_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _SD_,
          function(param,custom_printf_024)
           {return to_string_short(custom_printf_024)},
          _a9A_],
         cst_short$7],
        _a9z_);
      var
       _a9B_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$37),
         311,
         9261,
         9265,
         9271];
      caml_call1(Expect_test_collector$3[1],_a9B_);
      var _a9C_=of_bytes(1000000000000.),_a9D_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _SE_,
          function(param,custom_printf_025)
           {return to_string_short(custom_printf_025)},
          _a9D_],
         cst_short$8],
        _a9C_);
      var
       _a9E_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$38),
         313,
         9335,
         9339,
         9345];
      caml_call1(Expect_test_collector$3[1],_a9E_);
      var _a9F_=of_bytes(100000000000000.),_a9G_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _SF_,
          function(param,custom_printf_026)
           {return to_string_short(custom_printf_026)},
          _a9G_],
         cst_short$9],
        _a9F_);
      var
       _a9H_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$39),
         315,
         9410,
         9414,
         9420];
      caml_call1(Expect_test_collector$3[1],_a9H_);
      var _a9I_=of_bytes(100000000000000000.),_a9J_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _SG_,
          function(param,custom_printf_027)
           {return to_string_short(custom_printf_027)},
          _a9J_],
         cst_short$10],
        _a9I_);
      var
       _a9K_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$40),
         317,
         9489,
         9493,
         9499];
      caml_call1(Expect_test_collector$3[1],_a9K_);
      var _a9L_=of_bytes(3000000000000000000.),_a9M_=0;
      caml_call2
       (_fM_,
        [0,
         [24,
          _SH_,
          function(param,custom_printf_028)
           {return to_string_short(custom_printf_028)},
          _a9M_],
         cst_short$11],
        _a9L_);
      var
       _a9N_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$41),
         319,
         9569,
         9573,
         9579];
      caml_call1(Expect_test_collector$3[1],_a9N_);
      return 0}
    var
     _SI_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$42),
       295,
       8704,
       8715,
       8726],
     _SL_=
      [0,
       [0,
        _SK_,
        _SJ_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$43),
         295,
         8704,
         8708,
         8714],
        _SI_],
       0],
     _SM_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$44),
       297,
       8772,
       8783,
       8794],
     _SP_=
      [0,
       [0,
        _SO_,
        _SN_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$45),
         297,
         8772,
         8776,
         8782],
        _SM_],
       _SL_],
     _SQ_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$46),
       299,
       8840,
       8851,
       8862],
     _ST_=
      [0,
       [0,
        _SS_,
        _SR_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$47),
         299,
         8840,
         8844,
         8850],
        _SQ_],
       _SP_],
     _SU_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$48),
       301,
       8908,
       8919,
       8930],
     _SX_=
      [0,
       [0,
        _SW_,
        _SV_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$49),
         301,
         8908,
         8912,
         8918],
        _SU_],
       _ST_],
     _SY_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$50),
       303,
       8977,
       8988,
       8999],
     _S1_=
      [0,
       [0,
        _S0_,
        _SZ_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$51),
         303,
         8977,
         8981,
         8987],
        _SY_],
       _SX_],
     _S2_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$52),
       305,
       9047,
       9058,
       9069],
     _S5_=
      [0,
       [0,
        _S4_,
        _S3_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$53),
         305,
         9047,
         9051,
         9057],
        _S2_],
       _S1_],
     _S6_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$54),
       307,
       9118,
       9129,
       9139],
     _S9_=
      [0,
       [0,
        _S8_,
        _S7_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$55),
         307,
         9118,
         9122,
         9128],
        _S6_],
       _S5_],
     _S__=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$56),
       309,
       9189,
       9200,
       9211],
     _Tb_=
      [0,
       [0,
        _Ta_,
        _S$_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$57),
         309,
         9189,
         9193,
         9199],
        _S__],
       _S9_],
     _Tc_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$58),
       311,
       9261,
       9272,
       9283],
     _Tf_=
      [0,
       [0,
        _Te_,
        _Td_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$59),
         311,
         9261,
         9265,
         9271],
        _Tc_],
       _Tb_],
     _Tg_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$60),
       313,
       9335,
       9346,
       9356],
     _Tj_=
      [0,
       [0,
        _Ti_,
        _Th_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$61),
         313,
         9335,
         9339,
         9345],
        _Tg_],
       _Tf_],
     _Tk_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$62),
       315,
       9410,
       9421,
       9432],
     _Tn_=
      [0,
       [0,
        _Tm_,
        _Tl_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$63),
         315,
         9410,
         9414,
         9420],
        _Tk_],
       _Tj_],
     _To_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$64),
       317,
       9489,
       9500,
       9511],
     _Tr_=
      [0,
       [0,
        _Tq_,
        _Tp_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$65),
         317,
         9489,
         9493,
         9499],
        _To_],
       _Tn_],
     _Ts_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$66),
       319,
       9569,
       9580,
       9591],
     _Tv_=
      [0,
       [0,
        _Tu_,
        _Tt_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$67),
         319,
         9569,
         9573,
         9579],
        _Ts_],
       _Tr_],
     _Tw_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$69),
       293,
       8641,
       8641,
       9598],
     _Tx_=
      caml_call1
       (Expect_test_common_File[4][3],cst_8871416feb9323353e45ec7757d2a358$0);
    caml_call9
     (Expect_test_collector$3[3],
      _Tx_,
      _Tw_,
      cst_src_byte_units_ml$68,
      0,
      0,
      _Tv_,
      0,
      Inline_test_config,
      _Su_);
    function create$12(units,value)
     {return -792364981 === units
              ?of_bytes(value)
              :-324157174 <= units
                ?939376143 <= units?of_gigabytes(value):of_kilobytes(value)
                :-510525623 <= units?of_words(value):of_megabytes(value)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$235);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Byte_units=
      [0,
       sexp_of_t$58,
       create$12,
       symbol$130,
       symbol$131,
       symbol$132,
       symbol$133,
       symbol$134,
       symbol$135,
       equal$25,
       min$8,
       max$8,
       ascending$8,
       descending$8,
       between$8,
       clamp_exn$8,
       clamp$8,
       comparator$13,
       validate_lbound$8,
       validate_ubound$8,
       validate_bound$8,
       Replace_polymorphic_compare$7,
       Map$11,
       Set$11,
       compare$47,
       hash_fold_t$28,
       hash$25,
       hashable$8,
       Table$9,
       Hash_set$9,
       Hash_queue$8,
       of_string$13,
       to_string$14,
       of_bytes,
       of_bytes_int,
       of_bytes_int63,
       of_bytes_int64_exn,
       of_bytes,
       of_kilobytes,
       of_megabytes,
       of_gigabytes,
       of_terabytes,
       of_petabytes,
       of_exabytes,
       of_words,
       of_words_int,
       of_words,
       to_string$14,
       to_string_short,
       bytes,
       bytes_int_exn,
       bytes_int63,
       bytes_int64,
       bytes,
       kilobytes,
       megabytes,
       gigabytes,
       terabytes,
       petabytes,
       exabytes,
       words,
       words_int_exn,
       words,
       zero$4,
       scale$0,
       [0,symbol$136,symbol$137,symbol$139,symbol$138],
       [0,
        [0,
         _Rr_,
         _Rs_,
         _Rt_,
         _Ru_,
         _Rv_,
         _Rw_,
         _Rx_,
         _Ry_,
         compare$47,
         t_of_sexp$51,
         sexp_of_t$59],
        [0,
         bin_size_t$57,
         bin_write_t$58,
         bin_read_t$118,
         bin_read_t$119,
         bin_shape_t$77,
         bin_writer_t$70,
         bin_reader_t$70,
         bin_t$70,
         compare$47,
         t_of_sexp$50,
         sexp_of_t$60]]];
    caml_register_global
     (4404,Core_kernel_Byte_units,"Core_kernel__Byte_units");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$236);
    caml_call1(Expect_test_collector[4][1],cst_src_bigstring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$237,cst$91);
    var
     _Ty_=include$75[1],
     _Tz_=include$75[2],
     _TA_=include$75[3],
     _TB_=include$75[4],
     _TC_=include$75[5],
     _TD_=include$75[6],
     _TE_=include$75[7],
     _TF_=include$75[8],
     _TJ_=include$75[12],
     _TL_=include$75[14],
     _TM_=include$75[15],
     _TO_=include$75[17],
     _TP_=include$75[18],
     _TQ_=include$75[19],
     _TS_=include$75[21],
     _TV_=include$75[24],
     _TY_=include$75[27],
     _TZ_=include$75[28],
     _T0_=include$75[29],
     _TG_=include$75[9],
     _TH_=include$75[10],
     _TI_=include$75[11],
     _TK_=include$75[13],
     _TN_=include$75[16],
     _TR_=include$75[20],
     _TT_=include$75[22],
     _TU_=include$75[23],
     _TW_=include$75[25],
     _TX_=include$75[26],
     _T1_=include$75[30],
     _T2_=include$75[31],
     _T3_=include$75[32],
     _T4_=include$75[33],
     _T5_=include$75[34],
     _T6_=include$75[35],
     _T7_=include$75[36],
     _T8_=include$75[37],
     _T9_=include$75[38],
     _T__=include$75[39],
     _T$_=include$75[40],
     _Ua_=include$75[41],
     _Ub_=include$75[42],
     _Uc_=include$75[43],
     _Ud_=include$75[44],
     _Ue_=include$75[45],
     _Uf_=include$75[46],
     _Ug_=include$75[47],
     _Uh_=include$75[48],
     _Ui_=include$75[49],
     _Uj_=include$75[50],
     _Uk_=include$75[51],
     _Ul_=include$75[52],
     _Um_=include$75[53],
     _Un_=include$75[54],
     _Uo_=include$75[55],
     _Up_=include$75[56],
     _Uq_=include$75[57],
     _Ur_=include$75[58],
     _Us_=include$75[59],
     _Ut_=include$75[60],
     _Uu_=include$75[61],
     _Uv_=include$75[62],
     _Uw_=include$75[63],
     _Ux_=include$75[64],
     _Uy_=include$75[65],
     _Uz_=include$75[66],
     _UA_=include$75[67],
     _UB_=include$75[68],
     _UC_=include$75[69],
     _UD_=include$75[70],
     _UE_=include$75[71],
     _UF_=include$75[72],
     _UG_=include$75[73],
     _UH_=include$75[74],
     _UI_=include$75[75],
     _UJ_=include$75[76],
     _UK_=include$75[77],
     _UL_=include$75[78],
     _UM_=include$75[79],
     _UN_=include$75[80],
     _UO_=include$75[81],
     _UP_=include$75[82],
     _UQ_=include$75[83],
     _UR_=include$75[84],
     _US_=include$75[85],
     _UT_=include$75[86],
     _UU_=include$75[87],
     _UV_=include$75[88],
     _UW_=include$75[89],
     _UX_=include$75[90],
     _UY_=include$75[91],
     _UZ_=include$75[92],
     _U0_=include$75[93],
     _U1_=include$75[94],
     _U2_=include$75[95],
     _U3_=include$75[96],
     _U4_=include$75[97],
     _U5_=include$75[98],
     _U6_=include$75[99],
     _U7_=include$75[100],
     _U8_=include$75[101],
     _U9_=include$75[102],
     _U__=include$75[103],
     _U$_=include$75[104],
     _Va_=include$75[105],
     _Vb_=include$75[106],
     _Vc_=include$75[107],
     _Vd_=include$75[108],
     _Ve_=include$75[109],
     _Vf_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$154),0,_dL_],0],
     _Vg_=caml_call1(Bin_prot_Shape[4][1],cst_src_bigstring_ml_13_6),
     group$97=caml_call2(Bin_prot_Shape[6],_Vg_,_Vf_),
     _Vh_=caml_call1(Bin_prot_Shape[2][1],cst_t$155),
     bin_shape_t$78=caml_call1(caml_call2(Bin_prot_Shape[14],group$97,_Vh_),0),
     bin_writer_t$71=[0,bin_size_t$3,bin_write_t$3],
     bin_reader_t$71=[0,bin_read_t$7,bin_read_t$8],
     bin_t$71=[0,bin_shape_t$78,bin_writer_t$71,bin_reader_t$71],
     _Vi_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t_frozen),0,bin_shape_t$78],0],
     _Vj_=caml_call1(Bin_prot_Shape[4][1],cst_src_bigstring_ml_18_4),
     group$98=caml_call2(Bin_prot_Shape[6],_Vj_,_Vi_),
     _Vk_=caml_call1(Bin_prot_Shape[2][1],cst_t_frozen$0),
     bin_shape_t_frozen=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$98,_Vk_),0),
     bin_writer_t_frozen=[0,bin_size_t$3,bin_write_t$3],
     bin_reader_t_frozen=[0,bin_read_t$7,bin_read_t$8],
     bin_t_frozen=
      [0,bin_shape_t_frozen,bin_writer_t_frozen,bin_reader_t_frozen];
    function arg(max_mem_waiting_gc,size)
     {var
       max_mem_waiting_gc_in_bytes=
        caml_call2(_yd_,max_mem_waiting_gc,bytes_int_exn);
      return caml_call2(_TH_,max_mem_waiting_gc_in_bytes,size)}
    function sub_shared(opt,len,bstr)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      var len$0=caml_call3(_TP_,bstr,pos,len);
      return runtime.caml_ba_sub(bstr,pos,len$0)}
    function read_bin_prot_verbose_errors(t,opt,len,reader)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      var len$0=caml_call3(_TP_,t,pos,len),limit=pos + len$0 | 0;
      caml_call4(_TO_,cst_read_bin_prot_verbose_errors,pos,len$0,t);
      function invalid_data(message,a,sexp_of_a)
       {return [0,-810630190,caml_call5(_oc_,0,0,message,a,sexp_of_a)]}
      function read(bin_reader,pos,len)
       {if(caml_call2(_Ns_,len,limit - pos | 0))return 658743757;
        var pos_ref=[0,pos];
        try
         {var _a9a_=[0,17724,caml_call2(bin_reader,t,pos_ref)],_a8__=_a9a_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          var _a8__=[0,-810630190,caml_call2(_oj_,0,exn)]}
        if(17724 <= _a8__[1])
         {var result=_a8__[2],expected_pos=pos + len | 0;
          if(caml_call2(_Nr_,pos_ref[1],expected_pos))
           return [0,17724,[0,result,expected_pos]];
          var
           _a8$_=
            function(param)
             {var
               v1=param[2],
               v0=param[1],
               v0$0=caml_call1(sexp_of_t$44,v0),
               v1$0=caml_call1(sexp_of_t$44,v1);
              return [1,[0,v0$0,[0,v1$0,0]]]};
          return invalid_data
                  (cst_pos_ref_expected_pos,[0,pos_ref[1],expected_pos],_a8$_)}
        return _a8__}
      var x=read(Bin_prot_Utils[2],pos,Bin_prot_Utils[1]);
      if(typeof x !== "number")
       if(17724 <= x[1])
        {var match=x[2],pos$0=match[2],element_length=match[1];
         return caml_call2(_Nt_,element_length,0)
                 ?invalid_data
                   (cst_negative_element_length_d,element_length,sexp_of_t$44)
                 :read(reader[1],pos$0,element_length)}
      return x}
    function read_bin_prot(t,pos,len,reader)
     {var match=read_bin_prot_verbose_errors(t,pos,len,reader);
      if(typeof match === "number")
       return caml_call1(_uc_,cst_not_enough_data);
      if(17724 <= match[1]){var x=match[2];return [0,x]}
      var e=match[2];
      return [1,caml_call2(_of_,e,cst_Invalid_data)]}
    function write_bin_prot(t,opt,writer,v)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      var
       data_len=caml_call1(writer[1],v),
       total_len=data_len + Bin_prot_Utils[1] | 0;
      if(caml_call2(_Nt_,pos,0))
       failwiths
        (0,_Vl_,cst_Bigstring_write_bin_prot_negative_pos,pos,sexp_of_t$44);
      if(caml_call2(_Ns_,pos + total_len | 0,caml_call1(_TQ_,t)))
       {var
         _a88_=
          function(param)
           {var
             v2=param[3],
             v1=param[2],
             v0=param[1],
             v0$0=v0[2],
             v0$1=[1,[0,_Vm_,[0,caml_call1(sexp_of_t$44,v0$0),0]]],
             v0$2=v1[2],
             v1$0=[1,[0,_Vn_,[0,caml_call1(sexp_of_t$44,v0$2),0]]],
             v0$3=v2[2],
             v2$0=[1,[0,_Vo_,[0,caml_call1(sexp_of_t$44,v0$3),0]]];
            return [1,[0,v0$1,[0,v1$0,[0,v2$0,0]]]]};
        failwiths
         (0,
          _Vp_,
          cst_Bigstring_write_bin_prot_not_enough_room,
          [0,
           [0,5594516,pos],
           [0,179941454,pos + total_len | 0],
           [0,-978093804,caml_call1(_TQ_,t)]],
          _a88_)}
      var
       pos_after_size_header=caml_call3(Bin_prot_Utils[3],t,pos,data_len),
       pos_after_data=caml_call3(writer[2],t,pos_after_size_header,v);
      if(caml_call2(_Nu_,pos_after_data - pos | 0,total_len))
       {var
         _a89_=
          function(param)
           {var
             v4=param[5],
             v3=param[4],
             v2=param[3],
             v1=param[2],
             v0=param[1],
             v0$0=v0[2],
             v0$1=[1,[0,_Vq_,[0,caml_call1(sexp_of_t$44,v0$0),0]]],
             v0$2=v1[2],
             v1$0=[1,[0,_Vr_,[0,caml_call1(sexp_of_t$44,v0$2),0]]],
             v0$3=v2[2],
             v2$0=[1,[0,_Vs_,[0,caml_call1(sexp_of_t$44,v0$3),0]]],
             v0$4=v3[2],
             v3$0=[1,[0,_Vt_,[0,caml_call1(sexp_of_t$44,v0$4),0]]],
             v0$5=v4[2],
             v4$0=[1,[0,_Vu_,[0,caml_call1(sexp_of_t$44,v0$5),0]]];
            return [1,[0,v0$1,[0,v1$0,[0,v2$0,[0,v3$0,[0,v4$0,0]]]]]]};
        failwiths
         (0,
          _Vv_,
          cst_Bigstring_write_bin_prot_bug,
          [0,
           [0,187782776,pos_after_data],
           [0,221966327,pos],
           [0,-494937222,Bin_prot_Utils[1]],
           [0,330843136,data_len],
           [0,-251717990,total_len]],
          _a89_)}
      return pos_after_data}
    var
     get$3=caml_ba_get_1,
     include$76=_B$_([0,_TQ_,get$3]),
     _Vw_=include$76[1];
    function get_tail_padded_fixed_string(padding,t,pos$1,len,param)
     {var pos$2=pos$1 + len | 0,pos=pos$2;
      for(;;)
       {var pos$0=pos - 1 | 0;
        if(caml_call2(_Np_,pos$0,pos$1))
         if(caml_call2(_FW_,caml_ba_get_1(t,pos$0),padding))
          {var pos=pos$0;continue}
        return caml_call3(_TL_,[0,pos$1],[0,pos - pos$1 | 0],t)}}
    function set_tail_padded_fixed_string(padding,t,pos,len,value)
     {var slen=caml_ml_string_length(value);
      if(caml_call2(_Ns_,slen,len))caml_call4(failwithf,_Vx_,value,len,0);
      caml_call5(_TY_[1],value,0,t,pos,slen);
      var _a85_=pos + slen | 0,_a86_=(pos + len | 0) - 1 | 0;
      if(! (_a86_ < _a85_))
       {var i=_a85_;
        for(;;)
         {caml_ba_set_1(t,i,padding);
          var _a87_=i + 1 | 0;
          if(_a86_ !== i){var i=_a87_;continue}
          break}}
      return 0}
    function set_head_padded_fixed_string(padding,t,pos,len,value)
     {var slen=caml_ml_string_length(value);
      if(caml_call2(_Ns_,slen,len))caml_call4(failwithf,_Vy_,value,len,0);
      caml_call5(_TY_[1],value,0,t,(pos + len | 0) - slen | 0,slen);
      var _a83_=((pos + len | 0) - slen | 0) - 1 | 0;
      if(! (_a83_ < pos))
       {var i=pos;
        for(;;)
         {caml_ba_set_1(t,i,padding);
          var _a84_=i + 1 | 0;
          if(_a83_ !== i){var i=_a84_;continue}
          break}}
      return 0}
    function get_head_padded_fixed_string(padding,t,pos$1,len,param)
     {var max_pos=(pos$1 + len | 0) - 1 | 0,pos=pos$1;
      for(;;)
       {if(caml_call2(_Nq_,pos,max_pos))
         if(caml_call2(_FW_,caml_ba_get_1(t,pos),padding))
          {var pos$0=caml_call1(next$0,pos),pos=pos$0;continue}
        return caml_call3(_TL_,[0,pos],[0,len - (pos - pos$1 | 0) | 0],t)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$238);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bigstring=
      [0,
       _Ty_,
       _Tz_,
       _TA_,
       _TB_,
       _TC_,
       _TD_,
       _TE_,
       _TF_,
       _TG_,
       _TI_,
       _TJ_,
       _TK_,
       _TL_,
       _TM_,
       _TN_,
       _TO_,
       _TP_,
       _TQ_,
       _TR_,
       _TS_,
       _TT_,
       _TU_,
       _TV_,
       _TW_,
       _TX_,
       _TY_,
       _TZ_,
       _T0_,
       _T1_,
       _T2_,
       _T3_,
       _T4_,
       _T5_,
       _T6_,
       _T7_,
       _T8_,
       _T9_,
       _T__,
       _T$_,
       _Ua_,
       _Ub_,
       _Uc_,
       _Ud_,
       _Ue_,
       _Uf_,
       _Ug_,
       _Uh_,
       _Ui_,
       _Uj_,
       _Uk_,
       _Ul_,
       _Um_,
       _Un_,
       _Uo_,
       _Up_,
       _Uq_,
       _Ur_,
       _Us_,
       _Ut_,
       _Uu_,
       _Uv_,
       _Uw_,
       _Ux_,
       _Uy_,
       _Uz_,
       _UA_,
       _UB_,
       _UC_,
       _UD_,
       _UE_,
       _UF_,
       _UG_,
       _UH_,
       _UI_,
       _UJ_,
       _UK_,
       _UL_,
       _UM_,
       _UN_,
       _UO_,
       _UP_,
       _UQ_,
       _UR_,
       _US_,
       _UT_,
       _UU_,
       _UV_,
       _UW_,
       _UX_,
       _UY_,
       _UZ_,
       _U0_,
       _U1_,
       _U2_,
       _U3_,
       _U4_,
       _U5_,
       _U6_,
       _U7_,
       _U8_,
       _U9_,
       _U__,
       _U$_,
       _Va_,
       _Vb_,
       _Vc_,
       _Vd_,
       _Ve_,
       _Vw_,
       arg,
       sub_shared,
       write_bin_prot,
       read_bin_prot,
       read_bin_prot_verbose_errors,
       get_tail_padded_fixed_string,
       set_tail_padded_fixed_string,
       get_head_padded_fixed_string,
       set_head_padded_fixed_string,
       [0,
        bin_size_t$3,
        bin_write_t$3,
        bin_read_t$7,
        bin_read_t$8,
        bin_shape_t$78,
        bin_writer_t$71,
        bin_reader_t$71,
        bin_t$71,
        _Ty_,
        _TA_,
        bin_shape_t_frozen,
        bin_size_t$3,
        bin_write_t$3,
        bin_writer_t_frozen,
        bin_read_t$7,
        bin_read_t$8,
        bin_reader_t_frozen,
        bin_t_frozen,
        _TB_,
        _TC_,
        _TD_,
        _TE_],
       [0,
        [0,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$7,
         bin_read_t$8,
         bin_shape_t$78,
         bin_writer_t$71,
         bin_reader_t$71,
         bin_t$71,
         _Ty_,
         _Tz_,
         _TA_,
         bin_shape_t_frozen,
         bin_size_t$3,
         bin_write_t$3,
         bin_writer_t_frozen,
         bin_read_t$7,
         bin_read_t$8,
         bin_reader_t_frozen,
         bin_t_frozen,
         _TB_,
         _TC_,
         _TD_,
         _TE_,
         _TF_]]];
    caml_register_global(4406,Core_kernel_Bigstring,"Core_kernel__Bigstring");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$239);
    caml_call1(Expect_test_collector[4][1],cst_src_core_bin_prot_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$240,cst$92);
    function to_string$16(t,v)
     {var len=caml_call1(t[1],v),buf=arg(0,len),pos=caml_call3(t[2],buf,0,v);
      if(caml_call2(_aS_,pos,caml_call1(_TQ_,buf)))
       {var str=caml_call3(_TL_,0,0,buf);
        runtime.bigstring_destroy_stub(buf);
        return str}
      throw [0,Assert_failure,_Vz_]}
    function to_bytes(t,v)
     {var len=caml_call1(t[1],v),buf=arg(0,len),pos=caml_call3(t[2],buf,0,v);
      if(caml_call2(_aS_,pos,caml_call1(_TQ_,buf)))
       {var str=caml_call3(_TM_,0,0,buf);
        runtime.bigstring_destroy_stub(buf);
        return str}
      throw [0,Assert_failure,_VA_]}
    var Writer=[0,to_string$16,to_bytes];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$241);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Core_bin_prot=[0,Writer];
    caml_register_global
     (4407,Core_kernel_Core_bin_prot,"Core_kernel__Core_bin_prot");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$242);
    caml_call1(Expect_test_collector[4][1],cst_src_md5_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$243,cst$93);
    var
     to_hex=Bin_prot_Md5[6],
     of_hex_exn=Bin_prot_Md5[7],
     compare$48=Bin_prot_Md5[8],
     to_binable$2=Bin_prot_Md5[9],
     of_binable$2=Bin_prot_Md5[10];
    function sexp_of_t$61(t)
     {return caml_call1(sexp_of_t$40,caml_call1(to_hex,t))}
    function t_of_sexp$52(s)
     {return caml_call1(of_hex_exn,caml_call1(t_of_sexp$32,s))}
    function hash_fold_t$29(accum,t)
     {return caml_call2(hash_fold_t$13,accum,caml_call1(to_binable$2,t))}
    function hash$26(t){return caml_call1(hash$11,caml_call1(to_binable$2,t))}
    function sexp_of_t$62(x)
     {return caml_call1(sexp_of_t$40,caml_call1(to_binable$2,x))}
    function t_of_sexp$53(x)
     {return caml_call1(of_binable$2,caml_call1(t_of_sexp$32,x))}
    var
     include$77=
      caml_call1
       (Bin_prot_Utils[7],
        [0,
         [0,
          bin_shape_t$46,
          bin_size_t$42,
          bin_write_t$42,
          bin_read_t$86,
          bin_read_t$87],
         to_binable$2,
         of_binable$2]),
     bin_size_t$58=include$77[1],
     bin_write_t$59=include$77[2],
     bin_read_t$120=include$77[3],
     bin_read_t$121=include$77[4],
     bin_shape_t$79=include$77[5],
     bin_writer_t$72=include$77[6],
     bin_reader_t$72=include$77[7],
     bin_t$72=include$77[8],
     _VB_=Make$2([0,compare$48,t_of_sexp$53,sexp_of_t$62]),
     symbol$140=_VB_[1],
     symbol$141=_VB_[2],
     symbol$142=_VB_[3],
     symbol$143=_VB_[4],
     symbol$144=_VB_[5],
     symbol$145=_VB_[6],
     equal$26=_VB_[7],
     min$9=_VB_[9],
     max$9=_VB_[10],
     ascending$9=_VB_[11],
     descending$9=_VB_[12],
     between$9=_VB_[13],
     clamp_exn$9=_VB_[14],
     clamp$9=_VB_[15],
     comparator$14=_VB_[16],
     validate_lbound$9=_VB_[17],
     validate_ubound$9=_VB_[18],
     validate_bound$9=_VB_[19],
     Replace_polymorphic_compare$8=_VB_[20],
     Map$12=_VB_[21],
     Set$12=_VB_[22],
     include$78=
      Make$4([0,hash_fold_t$29,t_of_sexp$53,compare$48,sexp_of_t$62,hash$26]),
     compare$49=include$78[1],
     hash_fold_t$30=include$78[2],
     hash$27=include$78[3],
     hashable$9=include$78[4],
     Table$10=include$78[5],
     Hash_set$10=include$78[6],
     Hash_queue$9=include$78[7];
    function to_binable$3(_a82_){return _a82_}
    function of_binable$3(_a81_){return _a81_}
    var
     include$79=
      caml_call1
       (Bin_prot_Utils[7],
        [0,
         [0,
          Bin_prot_Md5[1],
          Bin_prot_Md5[2],
          Bin_prot_Md5[3],
          Bin_prot_Md5[4],
          Bin_prot_Md5[5]],
         to_binable$3,
         of_binable$3]),
     bin_size_t$59=include$79[1],
     bin_write_t$60=include$79[2],
     bin_read_t$122=include$79[3],
     bin_read_t$123=include$79[4],
     bin_shape_t$80=include$79[5],
     bin_writer_t$73=include$79[6],
     bin_reader_t$73=include$79[7],
     bin_t$73=include$79[8];
    function string(s){return caml_call1(Md5_lib[8],s)}
    var
     _VC_=Make$2([0,compare$48,t_of_sexp$52,sexp_of_t$61]),
     _VD_=_VC_[1],
     _VE_=_VC_[2],
     _VF_=_VC_[3],
     _VG_=_VC_[4],
     _VH_=_VC_[5],
     _VI_=_VC_[6],
     _VJ_=_VC_[7],
     _VK_=_VC_[9],
     _VL_=_VC_[10],
     _VM_=_VC_[11],
     _VN_=_VC_[12],
     _VO_=_VC_[13],
     _VP_=_VC_[14],
     _VQ_=_VC_[15],
     _VR_=_VC_[16],
     _VS_=_VC_[17],
     _VT_=_VC_[18],
     _VU_=_VC_[19],
     _VV_=_VC_[20],
     _VW_=_VC_[21],
     _VX_=_VC_[22],
     include$80=
      Make$4([0,hash_fold_t$29,t_of_sexp$52,compare$48,sexp_of_t$61,hash$26]),
     _V5_=Md5_lib[9],
     _VY_=include$80[1],
     _VZ_=include$80[2],
     _V0_=include$80[3],
     _V1_=include$80[4],
     _V2_=include$80[5],
     _V3_=include$80[6],
     _V4_=include$80[7],
     digest_num_bytes=16;
    function file(path)
     {var
       _a8X_=runtime.caml_sys_close,
       _a8Y_=runtime.caml_sys_open(path,_V6_,0);
      function _a8Z_(_a80_){return runtime.core_md5_fd(_a80_)}
      return caml_call1
              (of_binable$2,caml_call3(Base_Exn[11],_a8Z_,_a8Y_,_a8X_))}
    function digest_channel_blocking_without_releasing_runtime_lock
     (channel,len)
     {return caml_call1(of_binable$2,runtime.caml_md5_chan(channel,len))}
    function channel(channel,len)
     {return digest_channel_blocking_without_releasing_runtime_lock
              (channel,len)}
    function output_blocking(t,oc)
     {var _a8W_=caml_call1(to_binable$2,t);
      return caml_call2(Stdlib_digest[8],oc,_a8W_)}
    function output$0(oc,t){return output_blocking(t,oc)}
    function input(ic)
     {return caml_call1(of_binable$2,caml_call1(Stdlib_digest[9],ic))}
    var _V7_=Md5_lib[10];
    function subbytes(s,pos,len){return caml_call3(_V7_,s,pos,len)}
    function digest_bin_prot(writer,value)
     {return string(caml_call2(Writer[1],writer,value))}
    function unsafe_digest_subbigstring(buf,pos,len)
     {var res=caml_call1(_EG_,16);
      runtime.core_md5_digest_subbigstring(buf,pos,len,res);
      var _a8V_=caml_call1(_EZ_,res);
      return caml_call1(Md5_lib[5],_a8V_)}
    function digest_subbigstring(buf,pos,len)
     {caml_call3(_iL_,pos,len,caml_call1(_TQ_,buf));
      return unsafe_digest_subbigstring(buf,pos,len)}
    function digest_bigstring(buf)
     {return unsafe_digest_subbigstring(buf,0,caml_call1(_TQ_,buf))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$244);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _V8_=
      [0,
       [0,
        [0,
         t_of_sexp$53,
         sexp_of_t$62,
         bin_size_t$58,
         bin_write_t$59,
         bin_read_t$120,
         bin_read_t$121,
         bin_shape_t$79,
         bin_writer_t$72,
         bin_reader_t$72,
         bin_t$72,
         compare$48,
         hash_fold_t$29,
         hash$26]],
       t_of_sexp$53,
       sexp_of_t$62,
       symbol$140,
       symbol$141,
       symbol$142,
       symbol$143,
       symbol$144,
       symbol$145,
       equal$26,
       min$9,
       max$9,
       ascending$9,
       descending$9,
       between$9,
       clamp_exn$9,
       clamp$9,
       comparator$14,
       validate_lbound$9,
       validate_ubound$9,
       validate_bound$9,
       Replace_polymorphic_compare$8,
       Map$12,
       Set$12,
       bin_size_t$58,
       bin_write_t$59,
       bin_read_t$120,
       bin_read_t$121,
       bin_shape_t$79,
       bin_writer_t$72,
       bin_reader_t$72,
       bin_t$72,
       compare$49,
       hash_fold_t$30,
       hash$27,
       hashable$9,
       Table$10,
       Hash_set$10,
       Hash_queue$9],
     Core_kernel_Md5=
      [0,
       [0,
        [0,
         t_of_sexp$52,
         sexp_of_t$61,
         bin_size_t$59,
         bin_write_t$60,
         bin_read_t$122,
         bin_read_t$123,
         bin_shape_t$80,
         bin_writer_t$73,
         bin_reader_t$73,
         bin_t$73,
         compare$48,
         hash_fold_t$29,
         hash$26]],
       _V8_,
       t_of_sexp$52,
       sexp_of_t$61,
       _VD_,
       _VE_,
       _VF_,
       _VG_,
       _VH_,
       _VI_,
       _VJ_,
       _VK_,
       _VL_,
       _VM_,
       _VN_,
       _VO_,
       _VP_,
       _VQ_,
       _VR_,
       _VS_,
       _VT_,
       _VU_,
       _VV_,
       _VW_,
       _VX_,
       bin_size_t$59,
       bin_write_t$60,
       bin_read_t$122,
       bin_read_t$123,
       bin_shape_t$80,
       bin_writer_t$73,
       bin_reader_t$73,
       bin_t$73,
       _VY_,
       _VZ_,
       _V0_,
       _V1_,
       _V2_,
       _V3_,
       _V4_,
       digest_num_bytes,
       to_binable$2,
       of_binable$2,
       to_hex,
       of_hex_exn,
       string,
       _V5_,
       _V7_,
       file,
       digest_channel_blocking_without_releasing_runtime_lock,
       input,
       output_blocking,
       string,
       _V5_,
       subbytes,
       of_hex_exn,
       file,
       channel,
       output$0,
       input,
       digest_bin_prot,
       digest_bigstring,
       digest_subbigstring];
    caml_register_global(4411,Core_kernel_Md5,"Core_kernel__Md5");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$245);
    caml_call1(Expect_test_collector[4][1],cst_src_zone_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$246,cst$94);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$247);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Zone_intf=[0];
    caml_register_global(4412,Core_kernel_Zone_intf,"Core_kernel__Zone_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$248);
    caml_call1(Expect_test_collector[4][1],cst_src_binable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$249,cst$95);
    function of_string$14(m,string)
     {return of_bigstring(m,caml_call3(_TJ_,0,0,string))}
    function to_string$17(m,t)
     {return caml_call3(_TL_,0,0,to_bigstring(0,m,t))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$250);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _V9_=Stable$0[2][1],
     _V__=Stable$0[1][1],
     Core_kernel_Binable=
      [0,
       Minimal,
       _V__,
       _V9_,
       Stable$0[3][1],
       Stable$0[4][1],
       Stable$0[5][1],
       Stable$0[6][1],
       of_bigstring,
       to_bigstring,
       of_string$14,
       to_string$17,
       Stable$0];
    caml_register_global(4413,Core_kernel_Binable,"Core_kernel__Binable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$251);
    caml_call1(Expect_test_collector[4][1],cst_src_zone_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$252,cst$96);
    var
     Invalid_file_format=
      [248,cst_Core_kernel_Zone_Invalid_file_format,caml_fresh_oo_id(0)];
    function _V$_(param)
     {if(param[1] === Invalid_file_format)
       {var v0=param[2],v0$0=caml_call1(sexp_of_t$40,v0);
        return [1,[0,_Wa_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_Wb_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Invalid_file_format,_V$_);
    var before_first_transition=-1;
    function to_external(t)
     {return caml_call2(Replace_polymorphic_compare$2[10],0,t)}
    function of_external(param){return -1}
    var
     include$81=
      caml_call1
       (caml_call1
         (_V__,
          [0,
           bin_shape_t$54,
           bin_size_t$44,
           bin_write_t$44,
           bin_read_t$90,
           bin_read_t$91]),
        [0,to_external,of_external]),
     bin_size_t$60=include$81[1],
     bin_write_t$61=include$81[2],
     bin_read_t$124=include$81[3],
     bin_shape_t$81=include$81[5],
     include$82=
      caml_call1
       (caml_call1(Base_Sexpable[1],[0,t_of_sexp$35,sexp_of_t$44]),
        [0,to_external,of_external]),
     t_of_sexp$54=include$82[1],
     sexp_of_t$63=include$82[2],
     _Wc_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_utc_offset_in_seconds,Stable$5[1][5]],
         [0,
          [0,cst_is_dst,bin_shape_bool],
          [0,[0,cst_abbrv,bin_shape_string],0]]]),
     _Wd_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$156),0,_Wc_],0],
     _We_=caml_call1(Bin_prot_Shape[4][1],cst_src_zone_ml_62_8),
     group$99=caml_call2(Bin_prot_Shape[6],_We_,_Wd_),
     _Wf_=caml_call1(Bin_prot_Shape[2][1],cst_t$157),
     bin_shape_t$82=caml_call1(caml_call2(Bin_prot_Shape[14],group$99,_Wf_),0);
    function bin_size_t$61(param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _a8S_=caml_call1(Stable$5[1][1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_a8S_),
       _a8T_=caml_call1(_Be_,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_a8T_),
       _a8U_=caml_call1(bin_size_t$42,v3);
      return caml_call2(Bin_prot_Common[23],size$0,_a8U_)}
    function bin_write_t$62(buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(Stable$5[1][2],buf,pos,v1),
       pos$1=caml_call3(_Bf_,buf,pos$0,v2);
      return caml_call3(bin_write_t$42,buf,pos$1,v3)}
    function bin_read_t$125(buf,pos_ref)
     {var
       v_utc_offset_in_seconds=caml_call2(Stable$5[1][3],buf,pos_ref),
       v_is_dst=caml_call2(_Bg_,buf,pos_ref),
       v_abbrv=caml_call2(bin_read_t$86,buf,pos_ref);
      return [0,v_utc_offset_in_seconds,v_is_dst,v_abbrv]}
    function t_of_sexp$55(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$17,sexp);
      var
       field_sexps=sexp[1],
       utc_offset_in_seconds_field=[0,0],
       is_dst_field=[0,0],
       abbrv_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _a8K_=param[1];
          if(1 === _a8K_[0])
           {var _a8L_=_a8K_[1];
            if(_a8L_)
             {var _a8M_=_a8L_[1];
              if(0 === _a8M_[0])
               {var _a8N_=_a8L_[2],_a8O_=_a8M_[1];
                if(! _a8N_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a8O_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _a8N_[2])
                 {var tail=param[2],field_sexp=_a8N_[1];
                  if(caml_string_notequal(_a8O_,cst_abbrv$0))
                   if(caml_string_notequal(_a8O_,cst_is_dst$0))
                    if(caml_string_notequal(_a8O_,cst_utc_offset_in_seconds$0))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a8O_,extra[1]]}
                    else
                     if(utc_offset_in_seconds_field[1])
                      duplicates[1] = [0,_a8O_,duplicates[1]];
                     else
                      {var fvalue=caml_call1(Stable$5[1][10],field_sexp);
                       utc_offset_in_seconds_field[1] = [0,fvalue]}
                   else
                    if(is_dst_field[1])
                     duplicates[1] = [0,_a8O_,duplicates[1]];
                    else
                     {var fvalue$0=caml_call1(_BQ_,field_sexp);
                      is_dst_field[1] = [0,fvalue$0]}
                  else
                   if(abbrv_field[1])
                    duplicates[1] = [0,_a8O_,duplicates[1]];
                   else
                    {var fvalue$1=caml_call1(t_of_sexp$32,field_sexp);
                     abbrv_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$17,_a8K_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$17,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$17,extra[1],sexp);
        var
         _a8P_=utc_offset_in_seconds_field[1],
         _a8Q_=is_dst_field[1],
         _a8R_=abbrv_field[1];
        if(_a8P_)
         if(_a8Q_)
          if(_a8R_)
           {var
             abbrv_value=_a8R_[1],
             is_dst_value=_a8Q_[1],
             utc_offset_in_seconds_value=_a8P_[1];
            return [0,utc_offset_in_seconds_value,is_dst_value,abbrv_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$17,
                 sexp,
                 [0,
                  [0,
                   0 === utc_offset_in_seconds_field[1]?1:0,
                   cst_utc_offset_in_seconds$1],
                  [0,
                   [0,0 === is_dst_field[1]?1:0,cst_is_dst$1],
                   [0,[0,0 === abbrv_field[1]?1:0,cst_abbrv$1],0]]])}}
    function sexp_of_t$64(param)
     {var
       v_abbrv=param[3],
       v_is_dst=param[2],
       v_utc_offset_in_seconds=param[1],
       arg=caml_call1(sexp_of_t$40,v_abbrv),
       bnds=[0,[1,[0,_Wg_,[0,arg,0]]],0],
       arg$0=caml_call1(_BP_,v_is_dst),
       bnds$0=[0,[1,[0,_Wh_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(Stable$5[1][11],v_utc_offset_in_seconds),
       bnds$1=[0,[1,[0,_Wi_,[0,arg$1,0]]],bnds$0];
      return [1,bnds$1]}
    var
     _Wj_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_time_in_seconds_since_epoch,Stable$5[1][5]],
         [0,[0,cst_seconds,bin_shape_int],0]]),
     _Wk_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$158),0,_Wj_],0],
     _Wl_=caml_call1(Bin_prot_Shape[4][1],cst_src_zone_ml_74_8),
     group$100=caml_call2(Bin_prot_Shape[6],_Wl_,_Wk_),
     _Wm_=caml_call1(Bin_prot_Shape[2][1],cst_t$159),
     bin_shape_t$83=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$100,_Wm_),0);
    function bin_size_t$62(param)
     {var
       v2=param[2],
       v1=param[1],
       _a8I_=caml_call1(Stable$5[1][1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_a8I_),
       _a8J_=caml_call1(bin_size_t$44,v2);
      return caml_call2(Bin_prot_Common[23],size,_a8J_)}
    function bin_write_t$63(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(Stable$5[1][2],buf,pos,v1);
      return caml_call3(bin_write_t$44,buf,pos$0,v2)}
    function bin_read_t$126(buf,pos_ref)
     {var
       v_time_in_seconds_since_epoch=caml_call2(Stable$5[1][3],buf,pos_ref),
       v_seconds=caml_call2(bin_read_t$90,buf,pos_ref);
      return [0,v_time_in_seconds_since_epoch,v_seconds]}
    function t_of_sexp$56(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$18,sexp);
      var
       field_sexps=sexp[1],
       time_in_seconds_since_epoch_field=[0,0],
       seconds_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _a8B_=param[1];
          if(1 === _a8B_[0])
           {var _a8C_=_a8B_[1];
            if(_a8C_)
             {var _a8D_=_a8C_[1];
              if(0 === _a8D_[0])
               {var _a8E_=_a8C_[2],_a8F_=_a8D_[1];
                if(! _a8E_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a8F_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _a8E_[2])
                 {var tail=param[2],field_sexp=_a8E_[1];
                  if(caml_string_notequal(_a8F_,cst_seconds$0))
                   if
                    (caml_string_notequal
                      (_a8F_,cst_time_in_seconds_since_epoch$0))
                    {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a8F_,extra[1]]}
                   else
                    if(time_in_seconds_since_epoch_field[1])
                     duplicates[1] = [0,_a8F_,duplicates[1]];
                    else
                     {var fvalue=caml_call1(Stable$5[1][10],field_sexp);
                      time_in_seconds_since_epoch_field[1] = [0,fvalue]}
                  else
                   if(seconds_field[1])
                    duplicates[1] = [0,_a8F_,duplicates[1]];
                   else
                    {var fvalue$0=caml_call1(t_of_sexp$35,field_sexp);
                     seconds_field[1] = [0,fvalue$0]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$18,_a8B_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$18,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$18,extra[1],sexp);
        var _a8G_=time_in_seconds_since_epoch_field[1],_a8H_=seconds_field[1];
        if(_a8G_)
         if(_a8H_)
          {var
            seconds_value=_a8H_[1],
            time_in_seconds_since_epoch_value=_a8G_[1];
           return [0,time_in_seconds_since_epoch_value,seconds_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$18,
                 sexp,
                 [0,
                  [0,
                   0 === time_in_seconds_since_epoch_field[1]?1:0,
                   cst_time_in_seconds_since_epoch$1],
                  [0,[0,0 === seconds_field[1]?1:0,cst_seconds$1],0]])}}
    function sexp_of_t$65(param)
     {var
       v_seconds=param[2],
       v_time_in_seconds_since_epoch=param[1],
       arg=caml_call1(sexp_of_t$44,v_seconds),
       bnds=[0,[1,[0,_Wn_,[0,arg,0]]],0],
       arg$0=caml_call1(Stable$5[1][11],v_time_in_seconds_since_epoch),
       bnds$0=[0,[1,[0,_Wo_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    var
     _Wp_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_start_time_in_seconds_since_epoch,Stable$5[1][5]],
         [0,[0,cst_new_regime,bin_shape_t$82],0]]),
     _Wq_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$160),0,_Wp_],0],
     _Wr_=caml_call1(Bin_prot_Shape[4][1],cst_src_zone_ml_82_8),
     group$101=caml_call2(Bin_prot_Shape[6],_Wr_,_Wq_),
     _Ws_=caml_call1(Bin_prot_Shape[2][1],cst_t$161),
     bin_shape_t$84=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$101,_Ws_),0);
    function bin_size_t$63(param)
     {var
       v2=param[2],
       v1=param[1],
       _a8z_=caml_call1(Stable$5[1][1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_a8z_),
       _a8A_=bin_size_t$61(v2);
      return caml_call2(Bin_prot_Common[23],size,_a8A_)}
    function bin_write_t$64(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(Stable$5[1][2],buf,pos,v1);
      return bin_write_t$62(buf,pos$0,v2)}
    function bin_read_t$127(buf,pos_ref)
     {var
       v_start_time_in_seconds_since_epoch=
        caml_call2(Stable$5[1][3],buf,pos_ref),
       v_new_regime=bin_read_t$125(buf,pos_ref);
      return [0,v_start_time_in_seconds_since_epoch,v_new_regime]}
    function t_of_sexp$57(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$19,sexp);
      var
       field_sexps=sexp[1],
       start_time_in_seconds_since_epoch_field=[0,0],
       new_regime_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _a8s_=param[1];
          if(1 === _a8s_[0])
           {var _a8t_=_a8s_[1];
            if(_a8t_)
             {var _a8u_=_a8t_[1];
              if(0 === _a8u_[0])
               {var _a8v_=_a8t_[2],_a8w_=_a8u_[1];
                if(! _a8v_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a8w_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _a8v_[2])
                 {var tail=param[2],field_sexp=_a8v_[1];
                  if(caml_string_notequal(_a8w_,cst_new_regime$0))
                   if
                    (caml_string_notequal
                      (_a8w_,cst_start_time_in_seconds_since_epoch$0))
                    {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a8w_,extra[1]]}
                   else
                    if(start_time_in_seconds_since_epoch_field[1])
                     duplicates[1] = [0,_a8w_,duplicates[1]];
                    else
                     {var fvalue=caml_call1(Stable$5[1][10],field_sexp);
                      start_time_in_seconds_since_epoch_field[1] = [0,fvalue]}
                  else
                   if(new_regime_field[1])
                    duplicates[1] = [0,_a8w_,duplicates[1]];
                   else
                    {var fvalue$0=t_of_sexp$55(field_sexp);
                     new_regime_field[1] = [0,fvalue$0]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$19,_a8s_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$19,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$19,extra[1],sexp);
        var
         _a8x_=start_time_in_seconds_since_epoch_field[1],
         _a8y_=new_regime_field[1];
        if(_a8x_)
         if(_a8y_)
          {var
            new_regime_value=_a8y_[1],
            start_time_in_seconds_since_epoch_value=_a8x_[1];
           return [0,start_time_in_seconds_since_epoch_value,new_regime_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$19,
                 sexp,
                 [0,
                  [0,
                   0 === start_time_in_seconds_since_epoch_field[1]?1:0,
                   cst_start_time_in_seconds_since_epoch$1],
                  [0,[0,0 === new_regime_field[1]?1:0,cst_new_regime$1],0]])}}
    function sexp_of_t$66(param)
     {var
       v_new_regime=param[2],
       v_start_time_in_seconds_since_epoch=param[1],
       arg=sexp_of_t$64(v_new_regime),
       bnds=[0,[1,[0,_Wt_,[0,arg,0]]],0],
       arg$0=caml_call1(Stable$5[1][11],v_start_time_in_seconds_since_epoch),
       bnds$0=[0,[1,[0,_Wu_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    var
     _Wv_=
      [0,
       [0,cst_last_regime_index,bin_shape_t$81],
       [0,
        [0,cst_default_local_time_type,bin_shape_t$82],
        [0,[0,cst_leap_seconds,bin_shape_list(bin_shape_t$83)],0]]],
     _Ww_=[0,[0,cst_transitions,bin_shape_array(bin_shape_t$84)],_Wv_],
     _Wx_=[0,[0,cst_digest,bin_shape_option(_V8_[29])],_Ww_],
     _Wy_=
      [0,
       [0,cst_name,bin_shape_string],
       [0,[0,cst_original_filename,bin_shape_option(bin_shape_string)],_Wx_]],
     _Wz_=caml_call1(Bin_prot_Shape[8],_Wy_),
     _WA_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$162),0,_Wz_],0],
     _WB_=caml_call1(Bin_prot_Shape[4][1],cst_src_zone_ml_89_6),
     group$102=caml_call2(Bin_prot_Shape[6],_WB_,_WA_),
     _WC_=caml_call1(Bin_prot_Shape[2][1],cst_t$163),
     bin_shape_t$85=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$102,_WC_),0);
    function bin_size_t$64(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       v5=param[5],
       v7=param[7],
       v6=param[6],
       _a8l_=caml_call1(bin_size_t$42,v1),
       size=caml_call2(Bin_prot_Common[23],0,_a8l_),
       _a8m_=bin_size_option(bin_size_t$42,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_a8m_),
       _a8n_=bin_size_option(_V8_[25],v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_a8n_),
       _a8o_=bin_size_array(bin_size_t$63,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_a8o_),
       _a8p_=caml_call1(bin_size_t$60,v5),
       size$3=caml_call2(Bin_prot_Common[23],size$2,_a8p_),
       _a8q_=bin_size_t$61(v6),
       size$4=caml_call2(Bin_prot_Common[23],size$3,_a8q_),
       _a8r_=bin_size_list(bin_size_t$62,v7);
      return caml_call2(Bin_prot_Common[23],size$4,_a8r_)}
    function bin_write_t$65(buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       v5=param[5],
       v7=param[7],
       v6=param[6],
       pos$0=caml_call3(bin_write_t$42,buf,pos,v1),
       pos$3=bin_write_option(bin_write_t$42,buf,pos$0,v2),
       pos$4=bin_write_option(_V8_[26],buf,pos$3,v3),
       pos$5=bin_write_array(bin_write_t$64,buf,pos$4,v4),
       pos$1=caml_call3(bin_write_t$61,buf,pos$5,v5),
       pos$2=bin_write_t$62(buf,pos$1,v6);
      return bin_write_list(bin_write_t$63,buf,pos$2,v7)}
    var bin_writer_t$74=[0,bin_size_t$64,bin_write_t$65];
    function bin_read_t$128(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_zone_ml_Stable_Full_data_V1_t,
               pos_ref[1])}
    function bin_read_t$129(buf,pos_ref)
     {var
       v_name=caml_call2(bin_read_t$86,buf,pos_ref),
       v_original_filename=bin_read_option$0(bin_read_t$86,buf,pos_ref),
       v_digest=bin_read_option$0(_V8_[27],buf,pos_ref),
       v_transitions=bin_read_array$0(bin_read_t$127,buf,pos_ref),
       v_last_regime_index=caml_call2(bin_read_t$124,buf,pos_ref),
       v_default_local_time_type=bin_read_t$125(buf,pos_ref),
       v_leap_seconds=bin_read_list$0(bin_read_t$126,buf,pos_ref);
      return [0,
              v_name,
              v_original_filename,
              v_digest,
              v_transitions,
              v_last_regime_index,
              v_default_local_time_type,
              v_leap_seconds]}
    var
     bin_reader_t$74=[0,bin_read_t$129,bin_read_t$128],
     bin_t$74=[0,bin_shape_t$85,bin_writer_t$74,bin_reader_t$74];
    function t_of_sexp$58(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$20,sexp);
      var
       field_sexps=sexp[1],
       name_field=[0,0],
       original_filename_field=[0,0],
       digest_field=[0,0],
       transitions_field=[0,0],
       last_regime_index_field=[0,0],
       default_local_time_type_field=[0,0],
       leap_seconds_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _a7$_=param[1];
          if(1 === _a7$_[0])
           {var _a8a_=_a7$_[1];
            if(_a8a_)
             {var _a8b_=_a8a_[1];
              if(0 === _a8b_[0])
               {var _a8c_=_a8a_[2],_a8d_=_a8b_[1];
                if(! _a8c_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a8d_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _a8c_[2])
                 {var tail=param[2],field_sexp=_a8c_[1];
                  if
                   (caml_string_notequal(_a8d_,cst_default_local_time_type$0))
                   if(caml_string_notequal(_a8d_,cst_digest$0))
                    if(caml_string_notequal(_a8d_,cst_last_regime_index$0))
                     if(caml_string_notequal(_a8d_,cst_leap_seconds$0))
                      if(caml_string_notequal(_a8d_,cst_name$0))
                       if(caml_string_notequal(_a8d_,cst_original_filename$0))
                        if(caml_string_notequal(_a8d_,cst_transitions$0))
                         {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a8d_,extra[1]]}
                        else
                         if(transitions_field[1])
                          duplicates[1] = [0,_a8d_,duplicates[1]];
                         else
                          {var fvalue=caml_call2(_lh_,t_of_sexp$57,field_sexp);
                           transitions_field[1] = [0,fvalue]}
                       else
                        if(original_filename_field[1])
                         duplicates[1] = [0,_a8d_,duplicates[1]];
                        else
                         {var fvalue$0=caml_call2(_xQ_,t_of_sexp$32,field_sexp);
                          original_filename_field[1] = [0,fvalue$0]}
                      else
                       if(name_field[1])
                        duplicates[1] = [0,_a8d_,duplicates[1]];
                       else
                        {var fvalue$1=caml_call1(t_of_sexp$32,field_sexp);
                         name_field[1] = [0,fvalue$1]}
                     else
                      if(leap_seconds_field[1])
                       duplicates[1] = [0,_a8d_,duplicates[1]];
                      else
                       {var fvalue$2=caml_call2(_pe_,t_of_sexp$56,field_sexp);
                        leap_seconds_field[1] = [0,fvalue$2]}
                    else
                     if(last_regime_index_field[1])
                      duplicates[1] = [0,_a8d_,duplicates[1]];
                     else
                      {var fvalue$3=caml_call1(t_of_sexp$54,field_sexp);
                       last_regime_index_field[1] = [0,fvalue$3]}
                   else
                    if(digest_field[1])
                     duplicates[1] = [0,_a8d_,duplicates[1]];
                    else
                     {var fvalue$4=caml_call2(_xQ_,_V8_[2],field_sexp);
                      digest_field[1] = [0,fvalue$4]}
                  else
                   if(default_local_time_type_field[1])
                    duplicates[1] = [0,_a8d_,duplicates[1]];
                   else
                    {var fvalue$5=t_of_sexp$55(field_sexp);
                     default_local_time_type_field[1] = [0,fvalue$5]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$20,_a7$_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$20,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$20,extra[1],sexp);
        var
         _a8e_=name_field[1],
         _a8f_=original_filename_field[1],
         _a8g_=digest_field[1],
         _a8h_=transitions_field[1],
         _a8i_=last_regime_index_field[1],
         _a8j_=default_local_time_type_field[1],
         _a8k_=leap_seconds_field[1];
        if(_a8e_)
         if(_a8f_)
          if(_a8g_)
           if(_a8h_)
            if(_a8i_)
             if(_a8j_)
              if(_a8k_)
               {var
                 leap_seconds_value=_a8k_[1],
                 default_local_time_type_value=_a8j_[1],
                 last_regime_index_value=_a8i_[1],
                 transitions_value=_a8h_[1],
                 digest_value=_a8g_[1],
                 original_filename_value=_a8f_[1],
                 name_value=_a8e_[1];
                return [0,
                        name_value,
                        original_filename_value,
                        digest_value,
                        transitions_value,
                        last_regime_index_value,
                        default_local_time_type_value,
                        leap_seconds_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$20,
                 sexp,
                 [0,
                  [0,0 === name_field[1]?1:0,cst_name$1],
                  [0,
                   [0,
                    0 === original_filename_field[1]?1:0,
                    cst_original_filename$1],
                   [0,
                    [0,0 === digest_field[1]?1:0,cst_digest$1],
                    [0,
                     [0,0 === transitions_field[1]?1:0,cst_transitions$1],
                     [0,
                      [0,
                       0 === last_regime_index_field[1]?1:0,
                       cst_last_regime_index$1],
                      [0,
                       [0,
                        0 === default_local_time_type_field[1]?1:0,
                        cst_default_local_time_type$1],
                       [0,[0,0 === leap_seconds_field[1]?1:0,cst_leap_seconds$1],0]]]]]]])}}
    function sexp_of_t$67(param)
     {var
       v_transitions=param[4],
       v_digest=param[3],
       v_original_filename=param[2],
       v_name=param[1],
       v_last_regime_index=param[5],
       v_leap_seconds=param[7],
       v_default_local_time_type=param[6],
       arg=caml_call2(_pf_,sexp_of_t$65,v_leap_seconds),
       bnds=[0,[1,[0,_WD_,[0,arg,0]]],0],
       arg$0=sexp_of_t$64(v_default_local_time_type),
       bnds$0=[0,[1,[0,_WE_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$63,v_last_regime_index),
       bnds$1=[0,[1,[0,_WF_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call2(_lg_,sexp_of_t$66,v_transitions),
       bnds$2=[0,[1,[0,_WG_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call2(_xR_,_V8_[3],v_digest),
       bnds$3=[0,[1,[0,_WH_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call2(_xR_,sexp_of_t$40,v_original_filename),
       bnds$4=[0,[1,[0,_WI_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(sexp_of_t$40,v_name),
       bnds$5=[0,[1,[0,_WJ_,[0,arg$5,0]]],bnds$4];
      return [1,bnds$5]}
    function compare$50(t1,t2){return caml_call2(compare$28,t1[1],t2[1])}
    function original_filename(zone){return zone[2]}
    function digest(zone){return zone[3]}
    function bool_of_int(i)
     {return caml_call2(Replace_polymorphic_compare$2[6],i,0)}
    var long$0=caml_call1(_EG_,4);
    function int32_of_char(chr){return caml_call1(of_int_exn$0,chr)}
    function input_long_as_int32(ic)
     {caml_call4(Stdio_In_channel[8],ic,long$0,0,4);
      var
       sb1=
        caml_call2(shift_left$0,int32_of_char(caml_call2(_EO_,long$0,0)),24),
       sb2=
        caml_call2(shift_left$0,int32_of_char(caml_call2(_EO_,long$0,1)),16),
       sb3=caml_call2(shift_left$0,int32_of_char(caml_call2(_EO_,long$0,2)),8),
       sb4=int32_of_char(caml_call2(_EO_,long$0,3)),
       _a7__=caml_call2(bit_or$0,sb3,sb4);
      return caml_call2(bit_or$0,caml_call2(bit_or$0,sb1,sb2),_a7__)}
    function input_long_as_int(ic)
     {return caml_call1(to_int_exn$0,input_long_as_int32(ic))}
    function input_long_as_int63(ic)
     {return caml_call1(of_int32$2,input_long_as_int32(ic))}
    function input_long_long_as_int63(ic)
     {function int63_of_char(chr){return caml_call1(of_int_exn$2,chr)}
      function shift(c,bits)
       {return caml_call2(shift_left$2,int63_of_char(c),bits)}
      var long_long=caml_call1(_EG_,8);
      caml_call4(Stdio_In_channel[8],ic,long_long,0,8);
      var
       result=shift(caml_call2(_EO_,long_long,0),56),
       result$0=
        caml_call2(bit_or$2,result,shift(caml_call2(_EO_,long_long,1),48)),
       result$1=
        caml_call2(bit_or$2,result$0,shift(caml_call2(_EO_,long_long,2),40)),
       result$2=
        caml_call2(bit_or$2,result$1,shift(caml_call2(_EO_,long_long,3),32)),
       result$3=
        caml_call2(bit_or$2,result$2,shift(caml_call2(_EO_,long_long,4),24)),
       result$4=
        caml_call2(bit_or$2,result$3,shift(caml_call2(_EO_,long_long,5),16)),
       result$5=
        caml_call2(bit_or$2,result$4,shift(caml_call2(_EO_,long_long,6),8)),
       result$6=
        caml_call2
         (bit_or$2,result$5,int63_of_char(caml_call2(_EO_,long_long,7)));
      return result$6}
    function input_list(ic,c,f)
     {var c$0=c,lst=0;
      for(;;)
       {if(caml_call2(Replace_polymorphic_compare$2[4],c$0,0))
         {var
           lst$0=[0,caml_call1(f,ic),lst],
           c$1=c$0 - 1 | 0,
           c$0=c$1,
           lst=lst$0;
          continue}
        return caml_call1(parts,lst)}}
    function input_array(ic,len,f)
     {return caml_call1(of_list,input_list(ic,len,f))}
    function input_regime(ic)
     {var
       utc_offset_in_seconds=input_long_as_int63(ic),
       is_dst=
        bool_of_int
         (caml_call4(_yo_,0,0,0,caml_call1(Stdio_In_channel[10],ic))),
       abbrv_index=caml_call4(_yo_,0,0,0,caml_call1(Stdio_In_channel[10],ic));
      function lt(abbrv){return [0,utc_offset_in_seconds,is_dst,abbrv]}
      return [0,lt,abbrv_index]}
    function input_tz_file_gen(input_transition,input_leap_second,ic)
     {var
       utc_local_count=input_long_as_int(ic),
       std_wall_count=input_long_as_int(ic),
       leap_count=input_long_as_int(ic),
       transition_count=input_long_as_int(ic),
       type_count=input_long_as_int(ic),
       len=input_long_as_int(ic),
       transition_times=input_list(ic,transition_count,input_transition),
       transition_indices=
        input_list
         (ic,
          transition_count,
          function(ic)
           {return caml_call4(_yo_,0,0,0,caml_call1(Stdio_In_channel[10],ic))}),
       regimes=input_list(ic,type_count,input_regime),
       raw_abbrvs=
        input_list
         (ic,
          len,
          function(ic)
           {return caml_call4(_yo_,0,0,0,caml_call1(Stdio_In_channel[9],ic))}),
       buf=caml_call1(Stdlib_buffer[1],len);
      function _a78_(param,c)
       {var abbrvs=param[2],index=param[1];
        if(0 === c)
         {var
           data=caml_call1(Stdlib_buffer[2],buf),
           next_index=(index + caml_ml_string_length(data) | 0) + 1 | 0,
           abbrvs$0=caml_call3(set$2,abbrvs,index,data);
          caml_call1(Stdlib_buffer[8],buf);
          return [0,next_index,abbrvs$0]}
        caml_call2(Stdlib_buffer[10],buf,c);
        return [0,index,abbrvs]}
      var
       match=caml_call3(_pi_,raw_abbrvs,[0,0,_wB_[13]],_a78_),
       indexed_abbrvs=match[2],
       _a79_=caml_call1(Stdlib_buffer[7],buf);
      if(caml_call2(Replace_polymorphic_compare$2[6],_a79_,0))
       throw [0,
              Invalid_file_format,
              cst_missing_terminating_character_in_input_abbreviations];
      var leap_seconds=input_list(ic,leap_count,input_leap_second);
      input_array
       (ic,
        std_wall_count,
        function(ic)
         {return bool_of_int
                  (caml_call4(_yo_,0,0,0,caml_call1(Stdio_In_channel[10],ic)))});
      input_array
       (ic,
        utc_local_count,
        function(ic)
         {return bool_of_int
                  (caml_call4(_yo_,0,0,0,caml_call1(Stdio_In_channel[10],ic)))});
      var
       regimes$0=
        caml_call1
         (of_list,
          caml_call2
           (_qg_,
            regimes,
            function(param)
             {var
               abbrv_index=param[2],
               lt=param[1],
               abbrv=caml_call2(find_exn$2,indexed_abbrvs,abbrv_index);
              return caml_call1(lt,abbrv)})),
       l=
        caml_call3
         (_qn_,
          transition_times,
          transition_indices,
          function(time,index)
           {var regime=caml_check_bound(regimes$0,index)[1 + index];
            return [0,time,regime]}),
       acc=0,
       l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           match$0=l$0[1],
           new_regime=match$0[2],
           start_time_in_seconds_since_epoch=match$0[1],
           acc$0=[0,[0,start_time_in_seconds_since_epoch,new_regime],acc],
           acc=acc$0,
           l$0=l$1;
          continue}
        var
         transitions=caml_call1(of_list,caml_call1(parts,acc)),
         match$1=caml_call2(find,regimes$0,function(r){return 1 - r[2]});
        if(match$1)
         var ltt=match$1[1],default_local_time_type=ltt;
        else
         var default_local_time_type=caml_check_bound(regimes$0,0)[1];
        return function(name,original_filename,digest)
         {return [0,
                  name,
                  [0,original_filename],
                  [0,digest],
                  transitions,
                  before_first_transition,
                  default_local_time_type,
                  leap_seconds]}}}
    function input_leap_second_gen(input_leap_second,ic)
     {var
       time_in_seconds_since_epoch=caml_call1(input_leap_second,ic),
       seconds=input_long_as_int(ic);
      return [0,time_in_seconds_since_epoch,seconds]}
    function read_header(ic)
     {var buf=caml_call1(_EG_,4);
      caml_call4(Stdio_In_channel[8],ic,buf,0,4);
      var magic=caml_call1(_EZ_,buf);
      if(1 - caml_call2(equal$17,magic,cst_TZif))
       throw [0,Invalid_file_format,cst_magic_characters_TZif_not_present];
      var match=caml_call1(Stdio_In_channel[9],ic);
      if(match)
       {var _a75_=match[1],switcher=_a75_ - 50 | 0;
        if(1 < switcher >>> 0)
         {if(-49 <= switcher)
           throw [0,Invalid_file_format,caml_call2(_fE_,_WK_,_a75_)];
          var _a76_=19227}
        else
         var _a76_=0 === switcher?19228:19229;
        var _a77_=caml_call1(_EG_,15);
        caml_call4(Stdio_In_channel[8],ic,_a77_,0,15);
        return _a76_}
      throw [0,Invalid_file_format,cst_expected_version_found_nothing]}
    function input_tz_file_v1(ic)
     {function input_leap_second(_a74_)
       {return input_leap_second_gen(input_long_as_int63,_a74_)}
      return input_tz_file_gen(input_long_as_int63,input_leap_second,ic)}
    function input_tz_file(zonename,filename)
     {try
       {var
         _a7Z_=Stdio_In_channel[5],
         _a70_=caml_call2(Stdio_In_channel[3],0,filename),
         _a71_=
          caml_call3
           (_Pm_,
            function(ic)
             {var version=read_header(ic);
              if(19228 <= version)
               {input_tz_file_v1(ic);
                var x_001=read_header(ic);
                if(caml_call2(Ppx_compare_lib[1],x_001,version))
                 var match=0;
                else
                 {if(19228 === x_001)
                   if(19228 === version)
                    var match=0,switch$0=1;
                   else
                    var switch$0=0;
                  else
                   if(19229 <= x_001)
                    if(19229 === version)
                     var match=0,switch$0=1;
                    else
                     var switch$0=0;
                   else
                    if(19227 === version)
                     var match=0,switch$0=1;
                    else
                     var switch$0=0;
                  if(! switch$0)var match=caml_int_compare(x_001,version)}
                var _a72_=0 === match?1:0;
                if(! _a72_)throw [0,Assert_failure,_WL_];
                var
                 input_leap_second=
                  function(_a73_)
                   {return input_leap_second_gen
                            (input_long_long_as_int63,_a73_)},
                 make_zone=
                  input_tz_file_gen
                   (input_long_long_as_int63,input_leap_second,ic)}
              else
               var make_zone=input_tz_file_v1(ic);
              var
               digest=file(filename),
               r=caml_call3(make_zone,zonename,filename,digest);
              return r},
            _a70_,
            _a7Z_);
        return _a71_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Invalid_file_format)
         {var reason=exn[2];
          throw [0,Invalid_file_format,caml_call3(_fE_,_WM_,filename,reason)]}
        throw exn}}
    function of_utc_offset(offset)
     {if(caml_call2(Replace_polymorphic_compare$2[1],offset,-24))
       if(caml_call2(Replace_polymorphic_compare$2[2],offset,24))
        {if(caml_call2(Replace_polymorphic_compare$2[3],offset,0))
          var name=cst_UTC;
         else
          var
           _a7X_=caml_call1(_Gk_,offset),
           _a7Y_=
            caml_call2(Replace_polymorphic_compare$2[5],offset,0)
             ?cst$97
             :cst$98,
           name=caml_call3(_fE_,_WN_,_a7Y_,_a7X_);
         var
          utc_offset_in_seconds=
           caml_call1(of_int$3,(offset * 60 | 0) * 60 | 0);
         return [0,
                 name,
                 0,
                 0,
                 [0],
                 before_first_transition,
                 [0,utc_offset_in_seconds,0,name],
                 0]}
      throw [0,Assert_failure,_WO_]}
    function sexp_of_t$68(t){return [0,t[1]]}
    var likely_machine_zones=[0,_WP_],utc=of_utc_offset(0);
    function name$51(zone){return zone[1]}
    function reset_transition_cache(t)
     {t[5] = before_first_transition;return 0}
    function get_regime_exn(t,index)
     {return caml_call2(Replace_polymorphic_compare$2[5],index,0)
              ?t[6]
              :caml_check_bound(t[4],index)[1 + index][2]}
    function effective_start_time(mode,x)
     {return 0 === mode?x[1]:caml_call2(include$61[96][1],x[1],x[2][1])}
    function index_lower_bound_contains_seconds_since_epoch
     (t,index,mode,seconds)
     {var _a7W_=caml_call2(Replace_polymorphic_compare$2[5],index,0);
      return _a7W_
              ?_a7W_
              :caml_call2
                (symbol$93,
                 seconds,
                 effective_start_time
                  (mode,caml_check_bound(t[4],index)[1 + index]))}
    function index_upper_bound_contains_seconds_since_epoch
     (t,index,mode,seconds)
     {var
       _a7T_=caml_call1(length,t[4]),
       _a7U_=caml_call2(Replace_polymorphic_compare$2[1],index + 1 | 0,_a7T_);
      if(_a7U_)return _a7U_;
      var _a7V_=index + 1 | 0;
      return caml_call2
              (symbol$97,
               seconds,
               effective_start_time
                (mode,caml_check_bound(t[4],_a7V_)[1 + _a7V_]))}
    function binary_search_index_of_seconds_since_epoch(t,mode,seconds)
     {var _a7R_=125585502;
      function _a7S_(transition)
       {return caml_call2
                 (symbol$94,effective_start_time(mode,transition),seconds)
                ?847852583
                :-57574468}
      return caml_call2
              (_yn_,
               caml_call5(binary_search_segmented,0,0,t[4],_a7S_,_a7R_),
               before_first_transition)}
    function index_of_seconds_since_epoch(t,mode,seconds)
     {var index=t[5];
      if(index_lower_bound_contains_seconds_since_epoch(t,index,mode,seconds))
       if
        (index_upper_bound_contains_seconds_since_epoch(t,index,mode,seconds))
        var index$0=index;
       else
        var
         index$1=index + 1 | 0,
         index$2=
          index_upper_bound_contains_seconds_since_epoch
            (t,index$1,mode,seconds)
           ?index$1
           :binary_search_index_of_seconds_since_epoch(t,mode,seconds),
         index$0=index$2;
      else
       var
        index$3=index - 1 | 0,
        index$4=
         index_lower_bound_contains_seconds_since_epoch
           (t,index$3,mode,seconds)
          ?index$3
          :binary_search_index_of_seconds_since_epoch(t,mode,seconds),
        index$0=index$4;
      t[5] = index$0;
      return index$0}
    var
     Span=[0,ident,ident],
     Date_and_ofday=[0,ident,ident],
     Time_in_seconds=[0,Span,Date_and_ofday,ident,ident];
    function index(t,time)
     {var _a7Q_=caml_call1(Time_in_seconds[4],time);
      return index_of_seconds_since_epoch
              (t,0,caml_call1(Time_in_seconds[1][2],_a7Q_))}
    function index_of_date_and_ofday(t,time)
     {var _a7P_=caml_call1(Time_in_seconds[2][2],time);
      return index_of_seconds_since_epoch
              (t,1,caml_call1(Time_in_seconds[1][2],_a7P_))}
    function index_has_prev_clock_shift(t,index)
     {var _a7N_=caml_call2(Replace_polymorphic_compare$2[1],index,0);
      if(_a7N_)
       {var _a7O_=caml_call1(length,t[4]);
        return caml_call2(Replace_polymorphic_compare$2[5],index,_a7O_)}
      return _a7N_}
    function index_has_next_clock_shift(t,index)
     {return index_has_prev_clock_shift(t,index + 1 | 0)}
    function index_prev_clock_shift_time_exn(t,index)
     {var
       transition=caml_check_bound(t[4],index)[1 + index],
       _a7M_=caml_call1(Time_in_seconds[1][1],transition[1]);
      return caml_call1(Time_in_seconds[3],_a7M_)}
    function index_next_clock_shift_time_exn(t,index)
     {return index_prev_clock_shift_time_exn(t,index + 1 | 0)}
    function index_prev_clock_shift_amount_exn(t,index)
     {var
       transition=caml_check_bound(t[4],index)[1 + index],
       after=transition[2];
      if(caml_call2(Replace_polymorphic_compare$2[3],index,0))
       var before=t[6];
      else
       var
        _a7L_=index - 1 | 0,
        before=caml_check_bound(t[4],_a7L_)[1 + _a7L_][2];
      var _a7K_=caml_call2(symbol$100,after[1],before[1]);
      return caml_call1(Time_in_seconds[1][1],_a7K_)}
    function index_next_clock_shift_amount_exn(t,index)
     {return index_prev_clock_shift_amount_exn(t,index + 1 | 0)}
    function index_abbreviation_exn(t,index)
     {var regime=get_regime_exn(t,index);return regime[3]}
    function index_offset_from_utc_exn(t,index)
     {var regime=get_regime_exn(t,index);
      return caml_call1(Time_in_seconds[1][1],regime[1])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$253);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _WQ_=
      [0,
       [0,
        [0,
         bin_size_t$64,
         bin_write_t$65,
         bin_read_t$129,
         bin_read_t$128,
         bin_shape_t$85,
         bin_writer_t$74,
         bin_reader_t$74,
         bin_t$74,
         compare$50,
         t_of_sexp$58,
         sexp_of_t$67]]],
     Index=[0,next$0,prev$1],
     include$83=
      [0,
       sexp_of_t$68,
       compare$50,
       input_tz_file,
       likely_machine_zones,
       of_utc_offset,
       utc,
       name$51,
       original_filename,
       digest,
       Time_in_seconds,
       reset_transition_cache,
       Index,
       index,
       index_of_date_and_ofday,
       index_offset_from_utc_exn,
       index_abbreviation_exn,
       index_has_prev_clock_shift,
       index_prev_clock_shift_time_exn,
       index_prev_clock_shift_amount_exn,
       index_has_next_clock_shift,
       index_next_clock_shift_time_exn,
       index_next_clock_shift_amount_exn,
       _WQ_];
    caml_register_global(4417,include$83,"Core_kernel__Zone");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$254);
    caml_call1(Expect_test_collector[4][1],cst_src_source_code_position_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$255,cst$99);
    var
     _WR_=[0,_m5_,_m7_],
     _WS_=
      [0,
       include$17[4],
       include$17[5],
       include$17[6],
       include$17[7],
       include$17[8],
       include$17[9],
       include$17[10],
       include$17[11],
       include$17[12],
       include$17[13],
       include$17[14],
       include$17[15],
       include$17[16],
       include$17[17],
       include$17[18],
       include$17[19],
       include$17[20],
       include$17[21],
       include$17[22]],
     _WT_=function(_a7J_){return _xz_(_WS_,_a7J_)}(_WR_),
     _WU_=_WT_[1],
     _WV_=_WT_[2],
     _WW_=_WT_[3],
     _WX_=_WT_[4],
     _WY_=_WT_[5],
     _WZ_=_WT_[6],
     _W0_=_WT_[7],
     _W1_=_WT_[9],
     _W2_=_WT_[10],
     _W3_=_WT_[11],
     _W4_=_WT_[12],
     _W5_=_WT_[13],
     _W6_=_WT_[14],
     _W7_=_WT_[15],
     _W8_=_WT_[16],
     _W9_=_WT_[17],
     _W__=_WT_[18],
     _W$_=_WT_[19],
     _Xa_=_WT_[20],
     _Xb_=_WT_[21],
     _Xc_=_WT_[22],
     include$84=Make$4([0,_m3_,_m5_,_m2_,_m7_,_m4_]),
     _Xd_=include$84[1],
     _Xe_=include$84[2],
     _Xf_=include$84[3],
     _Xg_=include$84[4],
     _Xh_=include$84[5],
     _Xi_=include$84[6],
     _Xj_=include$84[7];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$256);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _Xk_=Stable$1[1],
     Core_kernel_Source_code_position=
      [0,
       _m7_,
       _m6_,
       _WU_,
       _WV_,
       _WW_,
       _WX_,
       _WY_,
       _WZ_,
       _W0_,
       _W1_,
       _W2_,
       _W3_,
       _W4_,
       _W5_,
       _W6_,
       _W7_,
       _W8_,
       _W9_,
       _W__,
       _W$_,
       _Xa_,
       _Xb_,
       _Xc_,
       _Xd_,
       _Xe_,
       _Xf_,
       _Xg_,
       _Xh_,
       _Xi_,
       _Xj_,
       [0,
        [0,
         _Xk_[21],
         _Xk_[22],
         _Xk_[25],
         _Xk_[24],
         _Xk_[20],
         _Xk_[23],
         _Xk_[26],
         _Xk_[27],
         _Xk_[28],
         _Xk_[31],
         _Xk_[32],
         _Xk_[15]]]];
    caml_register_global
     (4418,
      Core_kernel_Source_code_position,
      "Core_kernel__Source_code_position");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$257);
    caml_call1(Expect_test_collector[4][1],cst_src_validated_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$258,cst$100);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$259);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Validated_intf=[0];
    caml_register_global
     (4419,Core_kernel_Validated_intf,"Core_kernel__Validated_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$260);
    caml_call1(Expect_test_collector[4][1],cst_src_validated_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$261,cst$101);
    function raw(t){return t}
    function Make$8(Raw)
     {var sexp_of_t=Raw[2];
      function validation_failed(t,error)
       {function _a7I_(param)
         {var
           v2=param[3],
           v1=param[2],
           v0=param[1],
           v0$0=caml_call1(Raw[2],v0),
           v1$0=caml_call1(_n5_,v1),
           v2$0=caml_call1(_m7_,v2);
          return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]}
        return caml_call5
                (_oc_,0,0,cst_validation_failed,[0,t,error,Raw[3]],_a7I_)}
      function create_exn(t)
       {var
         _a7H_=caml_call1(Raw[4],t),
         match=caml_call1(Base_Validate[15],_a7H_);
        if(0 === match[0])return t;
        var error=match[1];
        return caml_call1(_om_,validation_failed(t,error))}
      function create(t)
       {var
         _a7G_=caml_call1(Raw[4],t),
         match=caml_call1(Base_Validate[15],_a7G_);
        if(0 === match[0])return [0,t];
        var error=match[1];
        return [1,validation_failed(t,error)]}
      function t_of_sexp(sexp){return create_exn(caml_call1(Raw[1],sexp))}
      function raw(t){return t}
      return [0,sexp_of_t,validation_failed,create_exn,create,t_of_sexp,raw]}
    function Add_bin_io(Raw,Validated)
     {function of_binable(raw)
       {return Raw[13]?caml_call1(Validated[4],raw):raw}
      function to_binable(_a7F_){return _a7F_}
      var
       include=
        caml_call1
         (caml_call1(_V__,[0,Raw[5],Raw[1],Raw[2],Raw[3],Raw[4]]),
          [0,to_binable,of_binable]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function Add_compare(Raw,Validated)
     {function compare(t1,t2){return caml_call2(Raw[1],t1,t2)}
      return [0,compare]}
    function Add_hash(Raw,Validated)
     {function hash_fold_t(state,t)
       {var _a7E_=caml_call1(Validated[5],t);
        return caml_call2(Raw[1],state,_a7E_)}
      function hash(t)
       {var _a7D_=caml_call1(Validated[5],t);return caml_call1(Raw[2],_a7D_)}
      return [0,hash_fold_t,hash]}
    function Make_binable$0(Raw)
     {var
       T0=Make$8([0,Raw[9],Raw[10],Raw[11],Raw[12]]),
       sexp_of_t=T0[1],
       validation_failed=T0[2],
       create_exn=T0[3],
       create=T0[4],
       t_of_sexp=T0[5],
       raw=T0[6],
       include=Add_bin_io(Raw,[0,T0[5],T0[1],T0[4],T0[3],T0[6]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              T0,
              sexp_of_t,
              validation_failed,
              create_exn,
              create,
              t_of_sexp,
              raw,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$262);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _Xl_(Raw,_a7C_)
     {var
       Typename_of_t=caml_call1(Typerep_lib_Make_typename[1],[0,name$52]),
       typename_of_t=Typename_of_t[2],
       name_of_t=Typename_of_t[1],
       typerep_of_t=[9,[0,name_of_t,[0,Raw[1]]]];
      return [0,typerep_of_t,typename_of_t]}
    function _Xm_(Raw)
     {var
       T=
        Make_binable$0
         ([0,
           Raw[4],
           Raw[5],
           Raw[6],
           Raw[7],
           Raw[8],
           Raw[9],
           Raw[10],
           Raw[11],
           Raw[12],
           Raw[13],
           Raw[14],
           Raw[15],
           Raw[16]]),
       sexp_of_t=T[2],
       create_exn=T[4],
       create=T[5],
       t_of_sexp=T[6],
       raw=T[7],
       bin_size_t=T[8],
       bin_write_t=T[9],
       bin_read_t=T[10],
       bin_read_t$0=T[11],
       bin_shape_t=T[12],
       bin_writer_t=T[13],
       bin_reader_t=T[14],
       bin_t=T[15],
       compare=
        Add_compare
          ([0,Raw[1],Raw[12],Raw[13],Raw[14],Raw[15]],
           [0,T[6],T[2],T[5],T[4],T[7]])
         [1],
       include=
        Add_hash
         ([0,Raw[2],Raw[3],Raw[12],Raw[13],Raw[14],Raw[15]],
          [0,T[6],T[2],T[5],T[4],T[7]]),
       hash_fold_t=include[1],
       hash=include[2];
      return [0,
              t_of_sexp,
              sexp_of_t,
              create,
              create_exn,
              raw,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              hash_fold_t,
              hash]}
    function _Xn_(_a7A_)
     {var _a7B_=Make_binable$0(_a7A_);
      return [0,
              _a7B_[6],
              _a7B_[2],
              _a7B_[5],
              _a7B_[4],
              _a7B_[7],
              _a7B_[8],
              _a7B_[9],
              _a7B_[10],
              _a7B_[11],
              _a7B_[12],
              _a7B_[13],
              _a7B_[14],
              _a7B_[15]]}
    var
     Core_kernel_Validated=
      [0,
       raw,
       function(_a7y_)
        {var _a7z_=Make$8(_a7y_);
         return [0,_a7z_[5],_a7z_[1],_a7z_[4],_a7z_[3],_a7z_[6]]},
       _Xn_,
       _Xm_,
       Add_bin_io,
       Add_compare,
       Add_hash,
       _Xl_];
    caml_register_global(4421,Core_kernel_Validated,"Core_kernel__Validated");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$263);
    caml_call1(Expect_test_collector[4][1],cst_src_type_equal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$264,cst$102);
    var
     refl=include$85[2],
     sym=include$85[3],
     trans=include$85[4],
     conv=include$85[5],
     detuple2=include$85[9],
     tuple2$2=include$85[10],
     Id=include$85[12],
     sexp_of_t$69=Id[1],
     uid=Id[3],
     create$13=Id[4],
     hash$28=Id[5],
     name$53=Id[6],
     to_sexp=Id[7],
     hash_fold_t$31=Id[8],
     same=Id[9],
     same_witness=Id[10],
     same_witness_exn=Id[11],
     include$86=include$85[12][2],
     t_of_sexp$59=include$86[3],
     sexp_of_t$70=include$86[4],
     t_of_sexp$60=include$85[12][2][3],
     sexp_of_t$71=include$85[12][2][4],
     _Xq_=include$85[12][2],
     _Xo_=include$85[1],
     _Xp_=[0,t_of_sexp$60,sexp_of_t$71],
     _Xr_=
      [0,
       _Xq_[5],
       _Xq_[6],
       _Xq_[7],
       _Xq_[8],
       _Xq_[9],
       _Xq_[10],
       _Xq_[11],
       _Xq_[12],
       _Xq_[13],
       _Xq_[14],
       _Xq_[15],
       _Xq_[16],
       _Xq_[17],
       _Xq_[18],
       _Xq_[19],
       _Xq_[20],
       _Xq_[21],
       _Xq_[22],
       _Xq_[23]],
     _Xs_=function(_a7x_){return _xz_(_Xr_,_a7x_)}(_Xp_),
     symbol$146=_Xs_[1],
     symbol$147=_Xs_[2],
     symbol$148=_Xs_[3],
     symbol$149=_Xs_[4],
     symbol$150=_Xs_[5],
     symbol$151=_Xs_[6],
     equal$27=_Xs_[7],
     min$10=_Xs_[9],
     max$10=_Xs_[10],
     ascending$10=_Xs_[11],
     descending$10=_Xs_[12],
     between$10=_Xs_[13],
     clamp_exn$10=_Xs_[14],
     clamp$10=_Xs_[15],
     comparator$15=_Xs_[16],
     validate_lbound$10=_Xs_[17],
     validate_ubound$10=_Xs_[18],
     validate_bound$10=_Xs_[19],
     Replace_polymorphic_compare$9=_Xs_[20],
     Map$13=_Xs_[21],
     Set$13=_Xs_[22],
     _Xt_=include$85[12][2],
     include$87=Make$4([0,_Xt_[1],_Xt_[3],_Xt_[12],_Xt_[4],_Xt_[2]]),
     compare$51=include$87[1],
     hash_fold_t$32=include$87[2],
     hash$29=include$87[3],
     hashable$10=include$87[4],
     Table$11=include$87[5],
     Hash_set$11=include$87[6],
     Hash_queue$10=include$87[7],
     Uid=
      [0,
       t_of_sexp$59,
       sexp_of_t$70,
       symbol$146,
       symbol$147,
       symbol$148,
       symbol$149,
       symbol$150,
       symbol$151,
       equal$27,
       min$10,
       max$10,
       ascending$10,
       descending$10,
       between$10,
       clamp_exn$10,
       clamp$10,
       comparator$15,
       validate_lbound$10,
       validate_ubound$10,
       validate_bound$10,
       Replace_polymorphic_compare$9,
       Map$13,
       Set$13,
       compare$51,
       hash_fold_t$32,
       hash$29,
       hashable$10,
       Table$11,
       Hash_set$11,
       Hash_queue$10],
     Id$0=
      [0,
       sexp_of_t$69,
       uid,
       create$13,
       hash$28,
       name$53,
       to_sexp,
       hash_fold_t$31,
       same,
       same_witness,
       same_witness_exn,
       Uid];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$265);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Type_equal=
      [0,_Xo_,refl,sym,trans,conv,detuple2,tuple2$2,Id$0];
    caml_register_global
     (4423,Core_kernel_Type_equal,"Core_kernel__Type_equal");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$266);
    caml_call1(Expect_test_collector[4][1],cst_src_type_equal_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$267,cst$103);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$268);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Type_equal_intf=[0];
    caml_register_global
     (4424,Core_kernel_Type_equal_intf,"Core_kernel__Type_equal_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$269);
    caml_call1(Expect_test_collector[4][1],cst_src_univ_map_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$270,cst$104);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$271);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Univ_map_intf=[0];
    caml_register_global
     (4425,Core_kernel_Univ_map_intf,"Core_kernel__Univ_map_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$272);
    caml_call1(Expect_test_collector[4][1],cst_src_univ_map_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$273,cst$105);
    function Make1$0(Data)
     {function sexp_of_t(sexp_of_a,param)
       {var data=param[2],key=param[1],_a7w_=caml_call1(Id$0[6],key);
        return caml_call3(Data[1],sexp_of_a,_a7w_,data)}
      function type_id_name(param)
       {var key=param[1];return caml_call1(Id$0[5],key)}
      function type_id_uid(param)
       {var key=param[1];return caml_call1(Id$0[2],key)}
      var Packed=[0,sexp_of_t,type_id_name,type_id_uid];
      function sexp_of_t$0(sexp_of_a,t)
       {function _a7s_(param,_a7v_)
         {var b=_a7v_[1],a=param[1];return caml_call2(compare$28,a,b)}
        function _a7t_(u){return [0,caml_call1(Packed[2],u),u]}
        var
         _a7u_=
          caml_call2(_p5_,caml_call2(_qg_,caml_call1(data$1,t),_a7t_),_a7s_);
        return caml_call1
                (caml_call1
                  (_pf_,
                   function(param)
                    {var
                      v1=param[2],
                      v0=param[1],
                      v0$0=caml_call1(sexp_of_t$40,v0),
                      v1$0=caml_call2(Packed[1],sexp_of_a,v1);
                     return [1,[0,v0$0,[0,v1$0,0]]]}),
                 _a7u_)}
      function invariant(t)
       {function _a7n_(param)
         {return caml_call2
                  (iteri$2,
                   t,
                   function(key,data)
                    {var _a7r_=caml_call1(Packed[3],data);
                     if(caml_call2(Id$0[11][9],key,_a7r_))return 0;
                     throw [0,Assert_failure,_Xu_]})}
        function _a7o_(param){return _Xv_}
        function _a7p_(_a7q_){return sexp_of_t$0(_a7o_,_a7q_)}
        return caml_call4(Base_Invariant[1],_Xw_,t,_a7p_,_a7n_)}
      function set(t,key,data)
       {return caml_call3(set$2,t,caml_call1(Id$0[2],key),[0,key,data])}
      function mem_by_id(t,id){return caml_call2(mem$3,t,id)}
      function mem(t,key){return mem_by_id(t,caml_call1(Id$0[2],key))}
      function remove_by_id(t,id){return caml_call2(remove$2,t,id)}
      function remove(t,key){return remove_by_id(t,caml_call1(Id$0[2],key))}
      var empty=Id$0[11][22][4];
      function find(t,key)
       {var match=caml_call2(find$3,t,caml_call1(Id$0[2],key));
        if(match)
         {var match$0=match[1],value=match$0[2],key$0=match$0[1];
          caml_call2(Id$0[10],key,key$0);
          return [0,value]}
        return 0}
      function find_exn(t,key)
       {var match=find(t,key);
        if(match){var data=match[1];return data}
        return caml_call3(_Pg_,_Xx_,caml_call1(Id$0[5],key),0)}
      function add(t,key,data)
       {return mem(t,key)?-1024851605:[0,17724,set(t,key,data)]}
      function add_exn(t,key,data)
       {var match=add(t,key,data);
        if(typeof match === "number")
         return caml_call3(_Pg_,_Xy_,caml_call1(Id$0[5],key),0);
        var t$0=match[2];
        return t$0}
      function change_exn(t,key,update)
       {var match=find(t,key);
        if(match){var data=match[1];return set(t,key,caml_call1(update,data))}
        return caml_call3(_Pg_,_Xz_,caml_call1(Id$0[5],key),0)}
      function change(t,key,update)
       {var orig=find(t,key),next=caml_call1(update,orig);
        if(next){var data=next[1];return set(t,key,data)}
        return caml_call1(_yi_,orig)?t:remove(t,key)}
      function update(t,key,f)
       {return change(t,key,function(data){return [0,caml_call1(f,data)]})}
      function to_alist(t){return caml_call1(data$1,t)}
      function of_alist_exn(t)
       {var
         _a7m_=
          caml_call2(_qg_,t,function(p){return [0,caml_call1(Packed[3],p),p]});
        return caml_call1(Id$0[11][22][8],_a7m_)}
      return [0,
              Packed,
              sexp_of_t$0,
              invariant,
              set,
              mem_by_id,
              mem,
              remove_by_id,
              remove,
              empty,
              is_empty$4,
              find,
              find_exn,
              add,
              add_exn,
              change_exn,
              change,
              update,
              to_alist,
              of_alist_exn]}
    function Make$9(Data)
     {function sexp_of_t(of_v_x_001,of_a,v){return caml_call2(Data[1],of_a,v)}
      var M=Make1$0([0,sexp_of_t]);
      function sexp_of_t$0(v){return caml_call2(M[2],sexp_of_t$53,v)}
      var
       invariant=M[3],
       empty=M[9],
       is_empty=M[10],
       set=M[4],
       mem=M[6],
       mem_by_id=M[5],
       find=M[11],
       find_exn=M[12],
       add=M[13],
       add_exn=M[14],
       change=M[16],
       change_exn=M[15],
       update=M[17],
       remove=M[8],
       remove_by_id=M[7],
       Packed=[0];
      function to_alist(t)
       {function _a7l_(param)
         {var data=param[2],key=param[1];return [0,key,data]}
        return caml_call2(_qg_,caml_call1(M[18],t),_a7l_)}
      function of_alist_exn(t)
       {var
         _a7k_=
          caml_call2
           (_qg_,
            t,
            function(param)
             {var data=param[2],key=param[1];return [0,key,data]});
        return caml_call1(M[19],_a7k_)}
      return [0,
              M,
              sexp_of_t$0,
              invariant,
              empty,
              is_empty,
              set,
              mem,
              mem_by_id,
              find,
              find_exn,
              add,
              add_exn,
              change,
              change_exn,
              update,
              remove,
              remove_by_id,
              Packed,
              to_alist,
              of_alist_exn]}
    function sexp_of_t$72(of_a,v){return caml_call1(of_a,v)}
    var
     include$88=Make$9([0,sexp_of_t$72]),
     sexp_of_t$73=include$88[2],
     invariant$5=include$88[3],
     empty$9=include$88[4],
     is_empty$12=include$88[5],
     set$8=include$88[6],
     mem$10=include$88[7],
     mem_by_id=include$88[8],
     find$10=include$88[9],
     find_exn$9=include$88[10],
     add$10=include$88[11],
     add_exn$4=include$88[12],
     change$4=include$88[13],
     change_exn=include$88[14],
     update$4=include$88[15],
     remove$10=include$88[16],
     remove_by_id=include$88[17],
     Packed=include$88[18],
     to_alist$4=include$88[19],
     of_alist_exn$4=include$88[20];
    function create$14(default$0,name,sexp_of)
     {return [0,caml_call2(Id$0[3],name,sexp_of),default$0]}
    function id(t){return t[1]}
    var Key=[0,create$14,id];
    function find$11(t,param)
     {var default$0=param[2],key=param[1];
      return caml_call2(_yn_,caml_call2(find$10,t,key),default$0)}
    function set$9(t,param,v)
     {var key=param[1];return caml_call3(set$8,t,key,v)}
    function change$5(t,k,update)
     {return set$9(t,k,caml_call1(update,find$11(t,k)))}
    function create$15(init,f,name,sexp_of)
     {return [0,caml_call3(Key[1],init,name,sexp_of),f]}
    function id$0(t){return caml_call1(Key[2],t[1])}
    var Key$0=[0,create$15,id$0];
    function find$12(t,param){var key=param[1];return find$11(t,key)}
    function set$10(t,param,v){var key=param[1];return set$9(t,key,v)}
    function change$6(t,param,update)
     {var key=param[1];return change$5(t,key,update)}
    function add$11(t,param,v)
     {var f=param[2],key=param[1];
      return change$5(t,key,function(acc){return caml_call2(f,acc,v)})}
    function create$16(name,sexp_of)
     {var _a7i_=caml_call1(_pf_,sexp_of);
      function _a7j_(xs,x){return [0,x,xs]}
      return caml_call4(Key$0[1],0,_a7j_,name,_a7i_)}
    var
     id$1=Key$0[2],
     Key$1=[0,create$16,id$1],
     Multi=[0,Key$1,set$10,find$12,add$11,change$6];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$274);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     With_fold=[0,Key$0,set$10,find$12,add$11,change$6],
     With_default=[0,Key,set$9,find$11,change$5];
    function Make1$1(_a7g_)
     {var _a7h_=Make1$0(_a7g_);
      return [0,
              _a7h_[2],
              _a7h_[3],
              _a7h_[9],
              _a7h_[10],
              _a7h_[4],
              _a7h_[6],
              _a7h_[5],
              _a7h_[11],
              _a7h_[12],
              _a7h_[13],
              _a7h_[14],
              _a7h_[16],
              _a7h_[15],
              _a7h_[17],
              _a7h_[8],
              _a7h_[7],
              [0],
              _a7h_[18],
              _a7h_[19]]}
    function Make$10(_a7e_)
     {var _a7f_=Make$9(_a7e_);
      return [0,
              _a7f_[2],
              _a7f_[3],
              _a7f_[4],
              _a7f_[5],
              _a7f_[6],
              _a7f_[7],
              _a7f_[8],
              _a7f_[9],
              _a7f_[10],
              _a7f_[11],
              _a7f_[12],
              _a7f_[13],
              _a7f_[14],
              _a7f_[15],
              _a7f_[16],
              _a7f_[17],
              _a7f_[18],
              _a7f_[19],
              _a7f_[20]]}
    var
     include$89=
      [0,
       sexp_of_t$73,
       invariant$5,
       empty$9,
       is_empty$12,
       set$8,
       mem$10,
       mem_by_id,
       find$10,
       find_exn$9,
       add$10,
       add_exn$4,
       change$4,
       change_exn,
       update$4,
       remove$10,
       remove_by_id,
       Packed,
       to_alist$4,
       of_alist_exn$4,
       Make$10,
       Make1$1,
       With_default,
       With_fold,
       Multi];
    caml_register_global(4427,include$89,"Core_kernel__Univ_map");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$275);
    caml_call1(Expect_test_collector[4][1],cst_src_unit_of_time_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$276,cst$106);
    function t_of_sexp$61(sexp)
     {if(0 === sexp[0])
       {var
         _a6__=sexp[1],
         _a6$_=caml_string_compare(_a6__,cst_day),
         switch$0=
          0 <= _a6$_
           ?0 < _a6$_
             ?caml_string_notequal(_a6__,cst_hour)
               ?caml_string_notequal(_a6__,cst_microsecond)
                 ?caml_string_notequal(_a6__,cst_millisecond)
                   ?caml_string_notequal(_a6__,cst_minute)
                     ?caml_string_notequal(_a6__,cst_nanosecond)
                       ?caml_string_notequal(_a6__,cst_second$1)?7:3
                       :0
                     :4
                   :2
                 :1
               :5
             :6
           :caml_string_notequal(_a6__,cst_Day)
             ?caml_string_notequal(_a6__,cst_Hour)
               ?caml_string_notequal(_a6__,cst_Microsecond)
                 ?caml_string_notequal(_a6__,cst_Millisecond)
                   ?caml_string_notequal(_a6__,cst_Minute)
                     ?caml_string_notequal(_a6__,cst_Nanosecond)
                       ?caml_string_notequal(_a6__,cst_Second$3)?7:3
                       :0
                     :4
                   :2
                 :1
               :5
             :6;
        switch(switch$0)
         {case 0:return 0;
          case 1:return 1;
          case 2:return 2;
          case 3:return 3;
          case 4:return 4;
          case 5:return 5;
          case 6:return 6
          }}
      else
       {var _a7a_=sexp[1];
        if(! _a7a_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$21,sexp);
        var _a7b_=_a7a_[1];
        if(0 !== _a7b_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$21,sexp);
        var
         _a7c_=_a7b_[1],
         _a7d_=caml_string_compare(_a7c_,cst_day$0),
         switch$1=
          0 <= _a7d_
           ?0 < _a7d_
             ?caml_string_notequal(_a7c_,cst_hour$0)
               ?caml_string_notequal(_a7c_,cst_microsecond$0)
                 ?caml_string_notequal(_a7c_,cst_millisecond$0)
                   ?caml_string_notequal(_a7c_,cst_minute$0)
                     ?caml_string_notequal(_a7c_,cst_nanosecond$0)
                       ?caml_string_notequal(_a7c_,cst_second$2)?7:3
                       :0
                     :4
                   :2
                 :1
               :5
             :6
           :caml_string_notequal(_a7c_,cst_Day$0)
             ?caml_string_notequal(_a7c_,cst_Hour$0)
               ?caml_string_notequal(_a7c_,cst_Microsecond$0)
                 ?caml_string_notequal(_a7c_,cst_Millisecond$0)
                   ?caml_string_notequal(_a7c_,cst_Minute$0)
                     ?caml_string_notequal(_a7c_,cst_Nanosecond$0)
                       ?caml_string_notequal(_a7c_,cst_Second$4)?7:3
                       :0
                     :4
                   :2
                 :1
               :5
             :6;
        switch(switch$1)
         {case 0:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp);
          case 1:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp);
          case 6:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$21,sexp)}
    function sexp_of_t$74(param)
     {switch(param)
       {case 0:return _XA_;
        case 1:return _XB_;
        case 2:return _XC_;
        case 3:return _XD_;
        case 4:return _XE_;
        case 5:return _XF_;
        default:return _XG_}}
    var compare$52=caml_int_compare;
    function hash_fold_t$33(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        case 3:return caml_call2(Base_Hash[3],hsv,3);
        case 4:return caml_call2(Base_Hash[3],hsv,4);
        case 5:return caml_call2(Base_Hash[3],hsv,5);
        default:return caml_call2(Base_Hash[3],hsv,6)}}
    function hash$30(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_a69_=hash_fold_t$33(hsv,x);
      return caml_call1(Base_Hash[9],_a69_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$277);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Unit_of_time=
      [0,
       t_of_sexp$61,
       sexp_of_t$74,
       compare$52,
       unit_of_time_list,
       hash_fold_t$33,
       hash$30];
    caml_register_global
     (4428,Core_kernel_Unit_of_time,"Core_kernel__Unit_of_time");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$278);
    caml_call1(Expect_test_collector[4][1],cst_src_unique_id_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$279,cst$107);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$280);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Unique_id_intf=[0];
    caml_register_global
     (4429,Core_kernel_Unique_id_intf,"Core_kernel__Unique_id_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$281);
    caml_call1(Expect_test_collector[4][1],cst_src_unique_id_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$282,cst$108);
    function race_free_create_loop(cell,make)
     {for(;;)
       {var x=cell[1],new_x=caml_call1(make,x);
        if(caml_call2(_Pi_,cell[1],x)){cell[1] = new_x;return x}
        continue}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$283);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _XH_(_a68_)
     {var current=[0,zero$4];
      function create(param){return race_free_create_loop(current,succ$1)}
      return [0,
              bin_size_t$49,
              bin_write_t$49,
              bin_read_t$100,
              bin_read_t$101,
              bin_shape_t$64,
              bin_writer_t$57,
              bin_reader_t$57,
              bin_t$57,
              _KT_,
              _KU_,
              _fo_,
              _e3_,
              symbol$93,
              symbol$94,
              symbol$95,
              symbol$96,
              symbol$97,
              symbol$98,
              equal$22,
              compare$39,
              min$5,
              max$5,
              ascending$5,
              descending$5,
              between$5,
              clamp_exn$5,
              clamp$5,
              validate_lbound$5,
              validate_ubound$5,
              validate_bound$5,
              include$63,
              comparator$10,
              Map$8,
              Set$8,
              hash_fold_t$22,
              _KS_,
              hashable$5,
              Table$6,
              Hash_set$6,
              Hash_queue$5,
              of_int_exn$2,
              to_int_exn$2,
              _KV_,
              _KW_,
              create]}
    var
     Core_kernel_Unique_id=
      [0,
       function(_a67_)
        {var current=[0,zero$1];
         function create(param){return race_free_create_loop(current,next$0)}
         return [0,
                 bin_size_t$44,
                 bin_write_t$44,
                 bin_read_t$90,
                 bin_read_t$91,
                 bin_shape_t$54,
                 bin_writer_t$47,
                 bin_reader_t$47,
                 bin_t$47,
                 t_of_sexp$35,
                 sexp_of_t$44,
                 typerep_of_t$9,
                 typename_of_t$8,
                 symbol$48,
                 symbol$49,
                 symbol$50,
                 symbol$51,
                 symbol$52,
                 symbol$53,
                 equal$19,
                 compare$32,
                 min$2,
                 max$2,
                 ascending$2,
                 descending$2,
                 between$2,
                 clamp_exn$2,
                 clamp$2,
                 validate_lbound$2,
                 validate_ubound$2,
                 validate_bound$2,
                 Replace_polymorphic_compare$2,
                 comparator$6,
                 Map$4,
                 Set$4,
                 hash_fold_t$16,
                 hash$14,
                 hashable$2,
                 Table$3,
                 Hash_set$3,
                 Hash_queue$2,
                 of_int_exn,
                 to_int_exn,
                 of_string$2,
                 to_string$3,
                 create]},
       _XH_];
    caml_register_global(4430,Core_kernel_Unique_id,"Core_kernel__Unique_id");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$284);
    caml_call1(Expect_test_collector[4][1],cst_src_uniform_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$285,cst$109);
    var
     t_of_sexp$62=include$90[1],
     sexp_of_t$75=include$90[2],
     invariant$6=include$90[3],
     empty$10=include$90[4],
     create$17=include$90[5],
     singleton$9=include$90[6],
     init$3=include$90[7],
     length$16=include$90[8],
     get$4=include$90[9],
     unsafe_get=include$90[10],
     set$11=include$90[11],
     unsafe_set=include$90[12],
     swap$1=include$90[13],
     unsafe_set_omit_phys_equal_check=include$90[14],
     map$21=include$90[15],
     iter$16=include$90[16],
     of_array$4=include$90[17],
     to_array$5=include$90[18],
     of_list$8=include$90[19],
     to_list$6=include$90[20],
     blit$2=include$90[21],
     blito$2=include$90[22],
     unsafe_blit$0=include$90[23],
     sub$2=include$90[24],
     subo$2=include$90[25],
     copy$3=include$90[26],
     unsafe_truncate$0=include$90[27],
     unsafe_create_uninitialized=include$90[28],
     create_obj_array=include$90[29],
     unsafe_set_assuming_currently_int=include$90[30],
     unsafe_set_int_assuming_currently_int=include$90[31],
     unsafe_set_int=include$90[32],
     unsafe_clear_if_pointer=include$90[33],
     exists$10=include$90[34],
     map2_exn$0=include$90[35],
     min_elt$9=include$90[36],
     max_elt$9=include$90[37],
     include$91=
      caml_call1
       (caml_call1
         (_V9_,
          [0,
           bin_shape_t$12,
           bin_size_t$16,
           bin_write_t$16,
           bin_read_t$36,
           bin_read_t$35]),
        [0,to_array$5,of_array$4]),
     _XI_=include$91[1],
     _XJ_=include$91[2],
     _XK_=include$91[3],
     _XL_=include$91[4],
     _XM_=include$91[5],
     _XN_=include$91[6],
     _XO_=include$91[7],
     _XP_=include$91[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$286);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Uniform_array=
      [0,
       _XI_,
       _XJ_,
       _XK_,
       _XL_,
       _XM_,
       _XN_,
       _XO_,
       _XP_,
       t_of_sexp$62,
       sexp_of_t$75,
       invariant$6,
       empty$10,
       create$17,
       singleton$9,
       init$3,
       length$16,
       get$4,
       unsafe_get,
       set$11,
       unsafe_set,
       swap$1,
       unsafe_set_omit_phys_equal_check,
       map$21,
       iter$16,
       of_array$4,
       to_array$5,
       of_list$8,
       to_list$6,
       blit$2,
       blito$2,
       unsafe_blit$0,
       sub$2,
       subo$2,
       copy$3,
       unsafe_truncate$0,
       unsafe_create_uninitialized,
       create_obj_array,
       unsafe_set_assuming_currently_int,
       unsafe_set_int_assuming_currently_int,
       unsafe_set_int,
       unsafe_clear_if_pointer,
       exists$10,
       map2_exn$0,
       min_elt$9,
       max_elt$9];
    caml_register_global
     (4432,Core_kernel_Uniform_array,"Core_kernel__Uniform_array");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$287);
    caml_call1(Expect_test_collector[4][1],cst_src_type_immediacy_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$288,cst$110);
    function hash$31(x){return x}
    var Key$2=[0,_x_,sexp_of_t$0,hash$31];
    function equal$28(x_005,x_006)
     {var match=caml_int_compare(x_005,x_006);return 0 === match?1:0}
    function to_string$18(param)
     {switch(param)
       {case 0:return cst_Always;
        case 1:return cst_Sometimes;
        default:return cst_Never}}
    function create$18(typename,immediacy,allowed_ints)
     {return [0,
              immediacy,
              allowed_ints,
              caml_call1(Typerep_lib_Typename[10],typename)]}
    function never_with_name(name){return [0,2,0,name]}
    function never(typename){return create$18(typename,2,0)}
    var
     option=[0,1,_XQ_,cst_option$1],
     list$0=[0,1,_XR_,cst_list$1],
     int32=never(_e6_),
     int64=never(_e5_),
     nativeint=never(_e4_),
     float$0=never(_e1_),
     string$0=never(_e0_),
     bytes$0=never(_eZ_),
     array=never_with_name(cst_array$1),
     ref=never_with_name(cst_ref$1),
     tuple2$3=never_with_name(cst_tuple2),
     tuple3$2=never_with_name(cst_tuple3),
     tuple4$2=never_with_name(cst_tuple4),
     tuple5$2=never_with_name(cst_tuple5),
     function$0=never_with_name(cst_function),
     int$2=create$18(_e7_,0,1),
     unit$0=create$18(_eX_,0,_XS_),
     bool$2=create$18(_eY_,0,_XT_),
     char$3=create$18(_e2_,0,_XU_),
     _XV_=caml_call1(Typerep_lib_Type_generic[1][1],[0]),
     Tag_internal=_XV_[1],
     Tag=_XV_[2],
     Variant_internal=_XV_[3],
     Variant=_XV_[4],
     Field_internal=_XV_[5],
     Field=_XV_[6],
     Record_internal=_XV_[7],
     Record=_XV_[8];
    function ref$0(param){return ref}
    function array$0(param){return array}
    function tuple2$4(param,_a66_){return tuple2$3}
    function tuple3$3(param,_a65_,_a64_){return tuple3$2}
    function tuple4$3(param,_a63_,_a62_,_a61_){return tuple4$2}
    function tuple5$3(param,_a60_,_a6Z_,_a6Y_,_a6X_){return tuple5$2}
    function function$1(param,_a6W_){return function$0}
    function option$0(param){return option}
    function list$1(param){return list$0}
    function lazy_t(t)
     {var match=t[1],immediacy=2 <= match?2:1;
      return [0,immediacy,t[2],cst_lazy_t$1]}
    function record(r){return never(caml_call1(Record[1],r))}
    function variant(variant)
     {function _a6R_(list,tag)
       {var t=tag[1];
        return caml_call2(_aS_,caml_call1(Tag[2],t),0)?[0,tag,list]:list}
      var
       _a6S_=caml_call3(Variant[6],variant,0,_a6R_),
       no_arg_list=caml_call1(include$23[35],_a6S_),
       no_arg_count=caml_call1(include$23[6],no_arg_list);
      if(caml_call2(_aS_,no_arg_count,0))
       return never(caml_call1(Variant[1],variant));
      if(caml_call1(Variant[4],variant))
       {var
         _a6T_=[0,caml_call2(_ay_,no_arg_count,2)],
         hash_set=caml_call3(include$22[2],0,_a6T_,Key$2),
         _a6U_=
          function(param)
           {var tag=param[1],match=caml_call1(Tag[6],tag);
            if(0 === match[0])throw [0,Assert_failure,_XW_];
            var _a6V_=caml_call1(Tag[5],tag);
            return caml_call2(include$22[22],hash_set,_a6V_)};
        caml_call2(include$23[8],no_arg_list,_a6U_);
        var allowed_ints=[0,hash_set]}
      else
       var allowed_ints=[1,caml_call2(_ax_,no_arg_count,1)];
      var
       immediacy=
        caml_call2(_aT_,caml_call1(Variant[2],variant),no_arg_count)?1:0;
      return create$18(caml_call1(Variant[1],variant),immediacy,allowed_ints)}
    var required=0;
    function create$19(param){return 0}
    var Context=[0,create$19];
    function init$4(param,name){return [0,create$18(name,1,0)]}
    function get_wip_computation(comp){return comp[1]}
    function set_final_computation(r,t){r[1] = t;return t}
    function share(param){return 1}
    var
     Named$2=
      [0,Context,init$4,get_wip_computation,set_final_computation,share],
     Generic=
      caml_call1
       (Typerep_lib_Type_generic[5],
        [0,
         name$54,
         required,
         Tag_internal,
         Tag,
         Variant_internal,
         Variant,
         Field_internal,
         Field,
         Record_internal,
         Record,
         int$2,
         int32,
         int64,
         nativeint,
         char$3,
         float$0,
         string$0,
         bytes$0,
         bool$2,
         unit$0,
         option$0,
         list$1,
         array$0,
         lazy_t,
         ref$0,
         function$1,
         tuple2$4,
         tuple3$3,
         tuple4$3,
         tuple5$3,
         record,
         variant,
         Named$2]);
    function of_typerep(typerep)
     {var match=caml_call1(Generic[10],typerep),t=match[2];return t}
    function For_all_parameters(M)
     {function witness(typerep1,typerep2)
       {var t1=of_typerep(typerep1),t2=of_typerep(typerep2),i1=t1[1],i2=t2[1];
        if(equal$28(i1,i2))
         {if(equal$28(i1,M[1]))return t1;
          var
           _a6N_=to_string$18(i1),
           _a6O_=to_string$18(M[1]),
           _a6P_=caml_call1(include$73[1][14],typerep1);
          return caml_call1
                  (_a__,
                   caml_call4
                    (_fE_,
                     _XX_,
                     caml_call1(Typerep_lib_Typename[10],_a6P_),
                     _a6O_,
                     _a6N_))}
        var _a6Q_=caml_call1(include$73[1][14],typerep1);
        return caml_call1
                (_a__,
                 caml_call2
                  (_fE_,_XY_,caml_call1(Typerep_lib_Typename[10],_a6Q_)))}
      var ra=0,rn=6;
      function For_all_parameters_S1(X)
       {var _a6M_=caml_call1(X[1],rn),t=witness(caml_call1(X[1],ra),_a6M_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S2(X)
       {var
         _a6L_=caml_call2(X[1],rn,rn),
         t=witness(caml_call2(X[1],ra,ra),_a6L_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S3(X)
       {var
         _a6K_=caml_call3(X[1],rn,rn,rn),
         t=witness(caml_call3(X[1],ra,ra,ra),_a6K_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S4(X)
       {var
         _a6J_=caml_call4(X[1],rn,rn,rn,rn),
         t=witness(caml_call4(X[1],ra,ra,ra,ra),_a6J_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S5(X)
       {var
         _a6I_=caml_call5(X[1],rn,rn,rn,rn,rn),
         t=witness(caml_call5(X[1],ra,ra,ra,ra,ra),_a6I_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      return [0,
              witness,
              ra,
              rn,
              For_all_parameters_S1,
              For_all_parameters_S2,
              For_all_parameters_S3,
              For_all_parameters_S4,
              For_all_parameters_S5]}
    function int_is_value(t,int$0)
     {var _a6H_=t[2];
      if(typeof _a6H_ === "number")
       return 0 === _a6H_?0:1;
      else
       {if(0 === _a6H_[0])
         {var hash_set=_a6H_[1];
          return caml_call2(include$22[20],hash_set,int$0)}
        var n=_a6H_[1],_a6G_=caml_call2(_aQ_,0,int$0);
        return _a6G_?caml_call2(_aQ_,int$0,n):_a6G_}}
    function int_as_value(t,int$0){return int_is_value(t,int$0)?[0,int$0]:0}
    function int_as_value_exn(t,int$0)
     {return int_is_value(t,int$0)
              ?int$0
              :caml_call1(_a__,caml_call3(_fE_,_XZ_,t[3],int$0))}
    function value_as_int_exn(t,a)
     {return typeof a === "number"
              ?a
              :caml_call1(_a__,caml_call2(_fE_,_X0_,t[3]))}
    function value_as_int(param,a){return typeof a === "number"?[0,a]:0}
    function value_is_int(param,a){return typeof a === "number"?1:0}
    var
     include$92=For_all_parameters([0,0]),
     For_all_parameters_S1=include$92[4],
     For_all_parameters_S2=include$92[5],
     For_all_parameters_S3=include$92[6],
     For_all_parameters_S4=include$92[7],
     For_all_parameters_S5=include$92[8];
    function of_typerep$0(typerep)
     {var t=of_typerep(typerep),match=t[1];return 0 === match?[0,t]:0}
    function of_typerep_exn(here,typerep)
     {return caml_call4(_yo_,[0,here],0,0,of_typerep$0(typerep))}
    function value_as_int$0(param,a){return a}
    var
     include$93=For_all_parameters([0,1]),
     For_all_parameters_S1$0=include$93[4],
     For_all_parameters_S2$0=include$93[5],
     For_all_parameters_S3$0=include$93[6],
     For_all_parameters_S4$0=include$93[7],
     For_all_parameters_S5$0=include$93[8];
    function of_typerep$1(typerep)
     {var t=of_typerep(typerep),match=t[1];return 1 === match?[0,t]:0}
    function of_typerep_exn$0(here,typerep)
     {return caml_call4(_yo_,[0,here],0,0,of_typerep$1(typerep))}
    var
     _X1_=For_all_parameters([0,2]),
     For_all_parameters_S1$1=_X1_[4],
     For_all_parameters_S2$1=_X1_[5],
     For_all_parameters_S3$1=_X1_[6],
     For_all_parameters_S4$1=_X1_[7],
     For_all_parameters_S5$1=_X1_[8];
    function of_typerep$2(typerep)
     {var t=of_typerep(typerep),match=t[1];return 2 <= match?[0,t]:0}
    function of_typerep_exn$1(here,typerep)
     {return caml_call4(_yo_,[0,here],0,0,of_typerep$2(typerep))}
    function dest(t)
     {var match=t[1];
      switch(match)
       {case 0:return [0,t];case 1:return [1,t];default:return [2,t]}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$289);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _X2_(_a6F_)
     {return [0,caml_call1(For_all_parameters_S5$1,_a6F_)[2]]}
    function _X3_(_a6E_)
     {return [0,caml_call1(For_all_parameters_S4$1,_a6E_)[2]]}
    function _X4_(_a6D_)
     {return [0,caml_call1(For_all_parameters_S3$1,_a6D_)[2]]}
    function _X5_(_a6C_)
     {return [0,caml_call1(For_all_parameters_S2$1,_a6C_)[2]]}
    var
     _X6_=
      [0,
       of_typerep$2,
       of_typerep_exn$1,
       function(_a6B_)
        {return [0,caml_call1(For_all_parameters_S1$1,_a6B_)[2]]},
       _X5_,
       _X4_,
       _X3_,
       _X2_,
       int32,
       int64,
       nativeint,
       float$0,
       string$0,
       bytes$0,
       array,
       ref,
       tuple2$3,
       tuple3$2,
       tuple4$2,
       tuple5$2];
    function _X7_(_a6A_)
     {return [0,caml_call1(For_all_parameters_S5$0,_a6A_)[2]]}
    function _X8_(_a6z_)
     {return [0,caml_call1(For_all_parameters_S4$0,_a6z_)[2]]}
    function _X9_(_a6y_)
     {return [0,caml_call1(For_all_parameters_S3$0,_a6y_)[2]]}
    function _X__(_a6x_)
     {return [0,caml_call1(For_all_parameters_S2$0,_a6x_)[2]]}
    var
     _X$_=
      [0,
       of_typerep$1,
       of_typerep_exn$0,
       int_as_value,
       int_as_value_exn,
       int_is_value,
       value_as_int,
       value_as_int_exn,
       value_is_int,
       function(_a6w_)
        {return [0,caml_call1(For_all_parameters_S1$0,_a6w_)[2]]},
       _X__,
       _X9_,
       _X8_,
       _X7_,
       option,
       list$0];
    function _Ya_(_a6v_)
     {return [0,caml_call1(For_all_parameters_S5,_a6v_)[2]]}
    function _Yb_(_a6u_)
     {return [0,caml_call1(For_all_parameters_S4,_a6u_)[2]]}
    function _Yc_(_a6t_)
     {return [0,caml_call1(For_all_parameters_S3,_a6t_)[2]]}
    function _Yd_(_a6s_)
     {return [0,caml_call1(For_all_parameters_S2,_a6s_)[2]]}
    var
     Core_kernel_Type_immediacy=
      [0,
       [0,
        of_typerep$0,
        of_typerep_exn,
        int_as_value,
        int_as_value_exn,
        int_is_value,
        value_as_int$0,
        function(_a6r_){return [0,caml_call1(For_all_parameters_S1,_a6r_)[2]]},
        _Yd_,
        _Yc_,
        _Yb_,
        _Ya_,
        int$2,
        char$3,
        bool$2,
        unit$0],
       _X$_,
       _X6_,
       of_typerep,
       dest,
       int_as_value,
       int_as_value_exn,
       int_is_value,
       value_as_int,
       value_as_int_exn,
       value_is_int];
    caml_register_global
     (4434,Core_kernel_Type_immediacy,"Core_kernel__Type_immediacy");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$290);
    caml_call1(Expect_test_collector[4][1],cst_src_tuple_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$291,cst$111);
    function Make$11(T1,T2){return [0]}
    function t_of_sexp$63(of_a,of_b,sexp)
     {if(1 === sexp[0])
       {var _a6p_=sexp[1];
        if(_a6p_)
         {var _a6q_=_a6p_[2];
          if(_a6q_)
           if(! _a6q_[2])
            {var
              v1=_a6q_[1],
              v0=_a6p_[1],
              v0$0=caml_call1(of_a,v0),
              v1$0=caml_call1(of_b,v1);
             return [0,v0$0,v1$0]}}}
      return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$22,2,sexp)}
    function sexp_of_t$76(of_a,of_b,param)
     {var
       v1=param[2],
       v0=param[1],
       v0$0=caml_call1(of_a,v0),
       v1$0=caml_call1(of_b,v1);
      return [1,[0,v0$0,[0,v1$0,0]]]}
    var
     Typename_of_t$21=caml_call1(Typerep_lib_Make_typename[3],[0,name$55]),
     typename_of_t$20=Typename_of_t$21[2];
    function typerep_of_t$21(of_a,of_b)
     {var name_of_t=caml_call2(Typename_of_t$21[1],of_a,of_b);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_a6o_){return caml_call2(_e$_,of_a,of_b)}]]]]}
    function create$20(a,b){return [0,a,b]}
    function curry(f){return function(a,b){return caml_call1(f,[0,a,b])}}
    function uncurry(f)
     {return function(param)
       {var b=param[2],a=param[1];return caml_call2(f,a,b)}}
    function map1(f,param)
     {var y=param[2],x=param[1];return [0,caml_call1(f,x),y]}
    function map2$0(f,param)
     {var y=param[2],x=param[1];return [0,x,caml_call1(f,y)]}
    function map_fst(param,f)
     {var y=param[2],x=param[1];return [0,caml_call1(f,x),y]}
    function map_snd(param,f)
     {var y=param[2],x=param[1];return [0,x,caml_call1(f,y)]}
    function compare$53(cmp1,cmp2,param,_a6n_)
     {var
       y=_a6n_[2],
       x=_a6n_[1],
       y$0=param[2],
       x$0=param[1],
       i=caml_call2(cmp1,x$0,x);
      return 0 === i?caml_call2(cmp2,y$0,y):i}
    function equal$29(eq1,eq2,param,_a6l_)
     {var
       y=_a6l_[2],
       x=_a6l_[1],
       y$0=param[2],
       x$0=param[1],
       _a6m_=caml_call2(eq1,x$0,x);
      return _a6m_?caml_call2(eq2,y$0,y):_a6m_}
    function swap$2(param){var b=param[2],a=param[1];return [0,b,a]}
    function compare$54(cmp1,cmp2)
     {return function(_a6j_,_a6k_){return compare$53(cmp1,cmp2,_a6j_,_a6k_)}}
    var
     include$94=caml_call1(Derived2,[0,compare$54,sexp_of_t$76]),
     comparator$16=include$94[1];
    function t_of_sexp$64(of_a,of_b,of_c,sexp)
     {if(1 === sexp[0])
       {var _a6g_=sexp[1];
        if(_a6g_)
         {var _a6h_=_a6g_[2];
          if(_a6h_)
           {var _a6i_=_a6h_[2];
            if(_a6i_)
             if(! _a6i_[2])
              {var
                v2=_a6i_[1],
                v1=_a6h_[1],
                v0=_a6g_[1],
                v0$0=caml_call1(of_a,v0),
                v1$0=caml_call1(of_b,v1),
                v2$0=caml_call1(of_c,v2);
               return [0,v0$0,v1$0,v2$0]}}}}
      return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$23,3,sexp)}
    function sexp_of_t$77(of_a,of_b,of_c,param)
     {var
       v2=param[3],
       v1=param[2],
       v0=param[1],
       v0$0=caml_call1(of_a,v0),
       v1$0=caml_call1(of_b,v1),
       v2$0=caml_call1(of_c,v2);
      return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]}
    var
     Typename_of_t$22=caml_call1(Typerep_lib_Make_typename[4],[0,name$56]),
     typename_of_t$21=Typename_of_t$22[2];
    function typerep_of_t$22(of_a,of_b,of_c)
     {var name_of_t=caml_call3(Typename_of_t$22[1],of_a,of_b,of_c);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,function(_a6f_){return caml_call3(_e__,of_a,of_b,of_c)}]]]]}
    function create$21(a,b,c){return [0,a,b,c]}
    function curry$0(f)
     {return function(a,b,c){return caml_call1(f,[0,a,b,c])}}
    function uncurry$0(f)
     {return function(param)
       {var c=param[3],b=param[2],a=param[1];return caml_call3(f,a,b,c)}}
    function map1$0(f,param)
     {var z=param[3],y=param[2],x=param[1];return [0,caml_call1(f,x),y,z]}
    function map2$1(f,param)
     {var z=param[3],y=param[2],x=param[1];return [0,x,caml_call1(f,y),z]}
    function map3$0(f,param)
     {var z=param[3],y=param[2],x=param[1];return [0,x,y,caml_call1(f,z)]}
    function map_fst$0(param,f)
     {var z=param[3],y=param[2],x=param[1];return [0,caml_call1(f,x),y,z]}
    function map_snd$0(param,f)
     {var z=param[3],y=param[2],x=param[1];return [0,x,caml_call1(f,y),z]}
    function map_trd(param,f)
     {var z=param[3],y=param[2],x=param[1];return [0,x,y,caml_call1(f,z)]}
    function get3(param){var a=param[3];return a}
    function compare$55(cmp1,cmp2,cmp3,param,_a6e_)
     {var
       z=_a6e_[3],
       y=_a6e_[2],
       x=_a6e_[1],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       c1=caml_call2(cmp1,x$0,x);
      if(caml_call2(_aR_,c1,0))return c1;
      var c2=caml_call2(cmp2,y$0,y);
      return caml_call2(_aR_,c2,0)?c2:caml_call2(cmp3,z$0,z)}
    function equal$30(eq1,eq2,eq3,param,_a6a_)
     {var
       z=_a6a_[3],
       y=_a6a_[2],
       x=_a6a_[1],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       _a6b_=caml_call2(eq1,x$0,x);
      if(_a6b_)
       {var _a6c_=caml_call2(eq2,y$0,y);
        if(_a6c_)return caml_call2(eq3,z$0,z);
        var _a6d_=_a6c_}
      else
       var _a6d_=_a6b_;
      return _a6d_}
    function Sexpable(S1,S2)
     {function t_of_sexp(sexp)
       {if(1 === sexp[0])
         {var _a5__=sexp[1];
          if(_a5__)
           {var _a5$_=_a5__[2];
            if(_a5$_)
             if(! _a5$_[2])
              {var
                v1=_a5$_[1],
                v0=_a5__[1],
                v0$0=caml_call1(S1[1],v0),
                v1$0=caml_call1(S2[1],v1);
               return [0,v0$0,v1$0]}}}
        return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$24,2,sexp)}
      function sexp_of_t(param)
       {var
         v1=param[2],
         v0=param[1],
         v0$0=caml_call1(S1[2],v0),
         v1$0=caml_call1(S2[2],v1);
        return [1,[0,v0$0,[0,v1$0,0]]]}
      return [0,t_of_sexp,sexp_of_t]}
    function Hasher(H1,H2)
     {function compare(a_001,b_002)
       {var
         t_004=a_001[2],
         t_003=a_001[1],
         t_006=b_002[2],
         t_005=b_002[1],
         n=caml_call2(H1[1],t_003,t_005);
        return 0 === n?caml_call2(H2[1],t_004,t_006):n}
      function hash_fold_t(hsv,arg)
       {var
         e1=arg[2],
         e0=arg[1],
         hsv$0=caml_call2(H1[2],hsv,e0),
         hsv$1=caml_call2(H2[2],hsv$0,e1);
        return hsv$1}
      function hash(x)
       {var hsv=caml_call2(Base_Hash[11],0,0),_a59_=hash_fold_t(hsv,x);
        return caml_call1(Base_Hash[9],_a59_)}
      function t_of_sexp(sexp)
       {if(1 === sexp[0])
         {var _a57_=sexp[1];
          if(_a57_)
           {var _a58_=_a57_[2];
            if(_a58_)
             if(! _a58_[2])
              {var
                v1=_a58_[1],
                v0=_a57_[1],
                v0$0=caml_call1(H1[4],v0),
                v1$0=caml_call1(H2[4],v1);
               return [0,v0$0,v1$0]}}}
        return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$25,2,sexp)}
      function sexp_of_t(param)
       {var
         v1=param[2],
         v0=param[1],
         v0$0=caml_call1(H1[5],v0),
         v1$0=caml_call1(H2[5],v1);
        return [1,[0,v0$0,[0,v1$0,0]]]}
      var
       T=[0,compare,hash_fold_t,hash,t_of_sexp,sexp_of_t],
       t_of_sexp$0=T[4],
       sexp_of_t$0=T[5],
       include=Make$4([0,T[2],T[4],T[1],T[5],T[3]]),
       compare$0=include[1],
       hash_fold_t$0=include[2],
       hash$0=include[3],
       hashable=include[4],
       Table=include[5],
       Hash_set=include[6],
       Hash_queue=include[7];
      return [0,
              T,
              t_of_sexp$0,
              sexp_of_t$0,
              compare$0,
              hash_fold_t$0,
              hash$0,
              hashable,
              Table,
              Hash_set,
              Hash_queue]}
    function Hasher_sexpable_of_hashable_sexpable(S)
     {var t_of_sexp=S[1],sexp_of_t=S[2],compare=S[3],hash=S[5];
      function hash_fold_t(state,t)
       {return caml_call2(_z_,state,caml_call1(hash,t))}
      return [0,compare,hash_fold_t,hash,t_of_sexp,sexp_of_t]}
    function Hashable_t(_a55_,_a54_)
     {var _a56_=Hasher_sexpable_of_hashable_sexpable(_a54_);
      return Hasher(Hasher_sexpable_of_hashable_sexpable(_a55_),_a56_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$292);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _Ye_(_a52_,_a51_)
     {var _a53_=Hasher(_a52_,_a51_);
      return [0,
              _a53_[2],
              _a53_[3],
              _a53_[4],
              _a53_[5],
              _a53_[6],
              _a53_[7],
              _a53_[8],
              _a53_[9],
              _a53_[10]]}
    function _Yf_(B1,B2)
     {var
       _a5V_=caml_call1(Bin_prot_Shape[7],[0,B1[5],[0,B2[5],0]]),
       _a5W_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$164),0,_a5V_],0],
       _a5X_=caml_call1(Bin_prot_Shape[4][1],cst_src_tuple_ml_112_2),
       group=caml_call2(Bin_prot_Shape[6],_a5X_,_a5W_),
       _a5Y_=caml_call1(Bin_prot_Shape[2][1],cst_t$165),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_a5Y_),0);
      function bin_size_t(param)
       {var
         v2=param[2],
         v1=param[1],
         _a5Z_=caml_call1(B1[1],v1),
         size=caml_call2(Bin_prot_Common[23],0,_a5Z_),
         _a50_=caml_call1(B2[1],v2);
        return caml_call2(Bin_prot_Common[23],size,_a50_)}
      function bin_write_t(buf,pos,param)
       {var v2=param[2],v1=param[1],pos$0=caml_call3(B1[2],buf,pos,v1);
        return caml_call3(B2[2],buf,pos$0,v2)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],cst_src_tuple_ml_Binable_t,pos_ref[1])}
      function bin_read_t$0(buf,pos_ref)
       {var v1=caml_call2(B1[3],buf,pos_ref),v2=caml_call2(B2[3],buf,pos_ref);
        return [0,v1,v2]}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _Yg_(_a5T_,_a5S_)
     {var _a5U_=Hashable_t(_a5T_,_a5S_);
      return [0,
              _a5U_[2],
              _a5U_[3],
              _a5U_[4],
              _a5U_[5],
              _a5U_[6],
              _a5U_[7],
              _a5U_[8],
              _a5U_[9],
              _a5U_[10]]}
    function _Yh_(_a5Q_,_a5P_)
     {var _a5R_=Hashable_t(_a5Q_,_a5P_);
      return [0,
              _a5R_[2],
              _a5R_[3],
              _a5R_[4],
              _a5R_[5],
              _a5R_[6],
              _a5R_[7],
              _a5R_[8],
              _a5R_[9],
              _a5R_[10]]}
    function _Yi_(S1,S2)
     {var
       include$0=Sexpable([0,S1[1],S1[2]],[0,S2[1],S2[2]]),
       t_of_sexp=include$0[1],
       sexp_of_t=include$0[2];
      function compare(param,_a5O_)
       {var
         s2=_a5O_[2],
         s1=_a5O_[1],
         s2$0=param[2],
         s1$0=param[1],
         x=caml_call2(S1[10],s1$0,s1);
        return 0 === x?caml_call2(S2[10],s2$0,s2):x}
      var
       include=Make$2([0,compare,t_of_sexp,sexp_of_t]),
       symbol=include[1],
       symbol$0=include[2],
       symbol$1=include[3],
       symbol$2=include[4],
       symbol$3=include[5],
       symbol$4=include[6],
       equal=include[7],
       compare$0=include[8],
       min=include[9],
       max=include[10],
       ascending=include[11],
       descending=include[12],
       between=include[13],
       clamp_exn=include[14],
       clamp=include[15],
       comparator=include[16],
       validate_lbound=include[17],
       validate_ubound=include[18],
       validate_bound=include[19],
       Replace_polymorphic_compare=include[20],
       Map=include[21],
       Set=include[22];
      return [0,
              t_of_sexp,
              sexp_of_t,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare$0,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    var
     Core_kernel_Tuple=
      [0,
       [0,
        t_of_sexp$63,
        sexp_of_t$76,
        typerep_of_t$21,
        typename_of_t$20,
        comparator$16,
        create$20,
        curry,
        uncurry,
        compare$53,
        equal$29,
        map1,
        map2$0,
        map_fst,
        map_snd,
        swap$2],
       [0,
        t_of_sexp$64,
        sexp_of_t$77,
        typerep_of_t$22,
        typename_of_t$21,
        create$21,
        curry$0,
        uncurry$0,
        equal$30,
        compare$55,
        get3,
        map1$0,
        map2$1,
        map3$0,
        map_fst$0,
        map_snd$0,
        map_trd],
       Make$11,
       function(_a5N_,_a5M_)
        {var
          comparator=caml_call2(comparator$16,_a5N_[16],_a5M_[16]),
          sexp_of_t=comparator[2],
          include=Make_plain_using_comparator$1([0,sexp_of_t,comparator]),
          symbol=include[1],
          symbol$0=include[2],
          symbol$1=include[3],
          symbol$2=include[4],
          symbol$3=include[5],
          symbol$4=include[6],
          equal=include[7],
          compare=include[8],
          min=include[9],
          max=include[10],
          ascending=include[11],
          descending=include[12],
          between=include[13],
          clamp_exn=include[14],
          clamp=include[15],
          comparator$0=include[16],
          validate_lbound=include[17],
          validate_ubound=include[18],
          validate_bound=include[19],
          Replace_polymorphic_compare=include[20],
          Map=include[21],
          Set=include[22];
         return [0,
                 symbol,
                 symbol$0,
                 symbol$1,
                 symbol$2,
                 symbol$3,
                 symbol$4,
                 equal,
                 compare,
                 min,
                 max,
                 ascending,
                 descending,
                 between,
                 clamp_exn,
                 clamp,
                 comparator$0,
                 validate_lbound,
                 validate_ubound,
                 validate_bound,
                 Replace_polymorphic_compare,
                 Map,
                 Set]},
       _Yi_,
       _Yh_,
       _Yg_,
       Sexpable,
       _Yf_,
       _Ye_];
    caml_register_global(4435,Core_kernel_Tuple,"Core_kernel__Tuple");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$293);
    caml_call1(Expect_test_collector[4][1],cst_src_day_of_week_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$294,cst$112);
    var
     _Yk_=caml_call1(Bin_prot_Shape[9],_Yj_),
     _Yl_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$166),0,_Yk_],0],
     _Ym_=caml_call1(Bin_prot_Shape[4][1],cst_src_day_of_week_ml_8_6),
     group$103=caml_call2(Bin_prot_Shape[6],_Ym_,_Yl_),
     _Yn_=caml_call1(Bin_prot_Shape[2][1],cst_t$167),
     bin_shape_t$86=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$103,_Yn_),0);
    function bin_size_t$65(param){return 1}
    function bin_write_t$66(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        case 2:return caml_call3(Bin_prot_Write[30],buf,pos,2);
        case 3:return caml_call3(Bin_prot_Write[30],buf,pos,3);
        case 4:return caml_call3(Bin_prot_Write[30],buf,pos,4);
        case 5:return caml_call3(Bin_prot_Write[30],buf,pos,5);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,6)}}
    var bin_writer_t$75=[0,bin_size_t$65,bin_write_t$66];
    function bin_read_t$130(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_day_of_week_ml_Stable_V1_T_t,
               pos_ref[1])}
    function bin_read_t$131(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(6 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_Yo_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    var
     bin_reader_t$75=[0,bin_read_t$131,bin_read_t$130],
     bin_t$75=[0,bin_shape_t$86,bin_writer_t$75,bin_reader_t$75],
     compare$56=caml_int_compare;
    function hash_fold_t$34(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        case 3:return caml_call2(Base_Hash[3],hsv,3);
        case 4:return caml_call2(Base_Hash[3],hsv,4);
        case 5:return caml_call2(Base_Hash[3],hsv,5);
        default:return caml_call2(Base_Hash[3],hsv,6)}}
    function hash$32(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_a5L_=hash_fold_t$34(hsv,x);
      return caml_call1(Base_Hash[9],_a5L_)}
    var _Yp_=0;
    function _Yq_(size_018,random_019){return 6}
    var _Yr_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_Yq_)],_Yp_];
    function _Ys_(size_016,random_017){return 5}
    var _Yt_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_Ys_)],_Yr_];
    function _Yu_(size_014,random_015){return 4}
    var _Yv_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_Yu_)],_Yt_];
    function _Yw_(size_012,random_013){return 3}
    var _Yx_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_Yw_)],_Yv_];
    function _Yy_(size_010,random_011){return 2}
    var _Yz_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_Yy_)],_Yx_];
    function _YA_(size_008,random_009){return 1}
    var _YB_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_YA_)],_Yz_];
    function _YC_(size_006,random_007){return 0}
    var
     _YD_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[108],_YC_)],_YB_],
     quickcheck_generator$9=caml_call1(Base_quickcheck_Generator[51],_YD_);
    function _YE_(x_003,size_004,hash_005)
     {switch(x_003)
       {case 0:
         var hash_005$0=caml_call2(Base[112],hash_005,0);return hash_005$0;
        case 1:
         var hash_005$1=caml_call2(Base[112],hash_005,1);return hash_005$1;
        case 2:
         var hash_005$2=caml_call2(Base[112],hash_005,2);return hash_005$2;
        case 3:
         var hash_005$3=caml_call2(Base[112],hash_005,3);return hash_005$3;
        case 4:
         var hash_005$4=caml_call2(Base[112],hash_005,4);return hash_005$4;
        case 5:
         var hash_005$5=caml_call2(Base[112],hash_005,5);return hash_005$5;
        default:
         var hash_005$6=caml_call2(Base[112],hash_005,6);return hash_005$6}}
    var quickcheck_observer$8=caml_call1(Base_quickcheck_Observer[27],_YE_);
    function _YF_(param)
     {switch(param)
       {case 0:return caml_call1(include$9[66],0);
        case 1:return caml_call1(include$9[66],0);
        case 2:return caml_call1(include$9[66],0);
        case 3:return caml_call1(include$9[66],0);
        case 4:return caml_call1(include$9[66],0);
        case 5:return caml_call1(include$9[66],0);
        default:return caml_call1(include$9[66],0)}}
    var quickcheck_shrinker$8=caml_call1(Base_quickcheck_Shrinker[25],_YF_);
    function to_string$19(t)
     {switch(t)
       {case 0:return cst_SUN;
        case 1:return cst_MON;
        case 2:return cst_TUE;
        case 3:return cst_WED;
        case 4:return cst_THU;
        case 5:return cst_FRI;
        default:return cst_SAT}}
    function to_string_long(t)
     {switch(t)
       {case 0:return cst_Sunday;
        case 1:return cst_Monday;
        case 2:return cst_Tuesday;
        case 3:return cst_Wednesday;
        case 4:return cst_Thursday;
        case 5:return cst_Friday;
        default:return cst_Saturday}}
    function of_string_internal(s)
     {var
       match=caml_call1(_CA_,s),
       _a5K_=caml_string_compare(match,cst_SUNDAY);
      if(0 <= _a5K_)
       if(0 < _a5K_)
        {if(caml_string_notequal(match,cst_THU$0))
          if(caml_string_notequal(match,cst_THURSDAY))
           {if(caml_string_notequal(match,cst_TUE$0))
             if(caml_string_notequal(match,cst_TUESDAY))
              {if(caml_string_notequal(match,cst_WED$0))
                if(caml_string_notequal(match,cst_WEDNESDAY))
                 var switch$0=0,switch$1=0,switch$2=0,switch$3=0;
                else
                 var switch$3=1;
               else
                var switch$3=1;
               if(switch$3)return 3}
             else
              var switch$2=1;
            else
             var switch$2=1;
            if(switch$2)return 2}
          else
           var switch$1=1;
         else
          var switch$1=1;
         if(switch$1)return 4}
       else
        var switch$0=1;
      else
       {if(caml_string_notequal(match,cst_FRI$0))
         if(caml_string_notequal(match,cst_FRIDAY))
          {if(caml_string_notequal(match,cst_MON$0))
            if(caml_string_notequal(match,cst_MONDAY))
             {if(caml_string_notequal(match,cst_SAT$0))
               if(caml_string_notequal(match,cst_SATURDAY))
                if(caml_string_notequal(match,cst_SUN$0))
                 var switch$0=0,switch$4=0,switch$5=0,switch$6=0;
                else
                 var switch$0=1,switch$4=0,switch$5=0,switch$6=0;
               else
                var switch$6=1;
              else
               var switch$6=1;
              if(switch$6)return 6}
            else
             var switch$5=1;
           else
            var switch$5=1;
           if(switch$5)return 1}
         else
          var switch$4=1;
        else
         var switch$4=1;
        if(switch$4)return 5}
      return switch$0?0:caml_call3(failwithf,_YG_,s,0)}
    function of_int_exn$4(i)
     {if(6 < i >>> 0)return caml_call3(failwithf,_YH_,i,0);
      switch(i)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    function of_string$15(s)
     {try
       {var _a5H_=of_string_internal(s);return _a5H_}
      catch(_a5I_)
       {try
         {var _a5G_=of_int_exn$4(caml_call1(of_string$2,s));return _a5G_}
        catch(_a5J_){return caml_call3(failwithf,_YI_,s,0)}}}
    var
     include$95=caml_call1(Stable[5][1],[0,of_string$15,to_string$19]),
     t_of_sexp$65=include$95[1],
     sexp_of_t$78=include$95[2],
     _YJ_=
      _xB_
       ([0,
         bin_size_t$65,
         bin_write_t$66,
         bin_read_t$131,
         bin_read_t$130,
         bin_shape_t$86,
         bin_writer_t$75,
         bin_reader_t$75,
         bin_t$75,
         compare$56,
         t_of_sexp$65,
         sexp_of_t$78]),
     symbol$152=_YJ_[1],
     symbol$153=_YJ_[2],
     symbol$154=_YJ_[3],
     symbol$155=_YJ_[4],
     symbol$156=_YJ_[5],
     symbol$157=_YJ_[6],
     equal$31=_YJ_[7],
     compare$57=_YJ_[8],
     min$11=_YJ_[9],
     max$11=_YJ_[10],
     ascending$11=_YJ_[11],
     descending$11=_YJ_[12],
     between$11=_YJ_[13],
     clamp_exn$11=_YJ_[14],
     clamp$11=_YJ_[15],
     validate_lbound$11=_YJ_[16],
     validate_ubound$11=_YJ_[17],
     validate_bound$11=_YJ_[18],
     Replace_polymorphic_compare$10=_YJ_[19],
     comparator$17=_YJ_[20],
     Map$14=_YJ_[21],
     Set$14=_YJ_[22],
     include$96=
      Make_binable
       ([0,
         hash_fold_t$34,
         bin_size_t$65,
         bin_write_t$66,
         bin_read_t$131,
         bin_read_t$130,
         bin_shape_t$86,
         bin_writer_t$75,
         bin_reader_t$75,
         bin_t$75,
         t_of_sexp$65,
         compare$56,
         sexp_of_t$78,
         hash$32]),
     hash_fold_t$35=include$96[1],
     hash$33=include$96[2],
     hashable$11=include$96[3],
     Table$12=include$96[4],
     Hash_set$12=include$96[5],
     Hash_queue$11=include$96[6],
     _YK_=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$65,
         bin_write_t$66,
         bin_read_t$131,
         bin_read_t$130,
         bin_shape_t$86,
         bin_writer_t$75,
         bin_reader_t$75,
         bin_t$75,
         compare$57,
         t_of_sexp$65,
         sexp_of_t$78,
         comparator$17]),
     Map$15=_YK_[1],
     Set$15=_YK_[2],
     include$97=
      caml_call1
       (Stable$3[1][1],
        [0,
         bin_size_t$65,
         bin_write_t$66,
         bin_read_t$131,
         bin_read_t$130,
         bin_shape_t$86,
         bin_writer_t$75,
         bin_reader_t$75,
         bin_t$75,
         t_of_sexp$65,
         compare$57,
         sexp_of_t$78,
         hash$33]),
     Table$13=include$97[1],
     Hash_set$13=include$97[2];
    function of_int$5(i)
     {try {var _a5E_=[0,of_int_exn$4(i)];return _a5E_}catch(_a5F_){return 0}}
    function to_int$4(t)
     {switch(t)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    function iso_8601_weekday_number(t)
     {switch(t)
       {case 0:return 7;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    var num_days_in_week=7;
    function shift(t,i)
     {return of_int_exn$4
              (caml_call2
                (symbol$60,caml_call2(_aw_,to_int$4(t),i),num_days_in_week))}
    function num_days(from,to)
     {var _a5D_=to_int$4(from),d=caml_call2(_ax_,to_int$4(to),_a5D_);
      return caml_call2(symbol$52,d,0)?caml_call2(_aw_,d,num_days_in_week):d}
    function is_sun_or_sat(t)
     {var _a5C_=caml_call2(symbol$154,t,0);
      return _a5C_?_a5C_:caml_call2(symbol$154,t,6)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$295);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Day_of_week=
      [0,
       bin_size_t$65,
       bin_write_t$66,
       bin_read_t$131,
       bin_read_t$130,
       bin_shape_t$86,
       bin_writer_t$75,
       bin_reader_t$75,
       bin_t$75,
       quickcheck_generator$9,
       quickcheck_observer$8,
       quickcheck_shrinker$8,
       t_of_sexp$65,
       sexp_of_t$78,
       symbol$152,
       symbol$153,
       symbol$154,
       symbol$155,
       symbol$156,
       symbol$157,
       equal$31,
       compare$57,
       min$11,
       max$11,
       ascending$11,
       descending$11,
       between$11,
       clamp_exn$11,
       clamp$11,
       validate_lbound$11,
       validate_ubound$11,
       validate_bound$11,
       Replace_polymorphic_compare$10,
       comparator$17,
       Map$14,
       Set$14,
       hash_fold_t$35,
       hash$33,
       hashable$11,
       Table$12,
       Hash_set$12,
       Hash_queue$11,
       of_string$15,
       to_string$19,
       to_string_long,
       of_int_exn$4,
       of_int$5,
       to_int$4,
       iso_8601_weekday_number,
       shift,
       num_days,
       is_sun_or_sat,
       all$3,
       weekdays,
       weekends,
       [0,
        [0,
         bin_size_t$65,
         bin_write_t$66,
         bin_read_t$131,
         bin_read_t$130,
         bin_shape_t$86,
         bin_writer_t$75,
         bin_reader_t$75,
         bin_t$75,
         t_of_sexp$65,
         sexp_of_t$78,
         compare$56,
         hash_fold_t$34,
         hash$32,
         Map$15,
         Set$15,
         Table$13,
         Hash_set$13]]];
    caml_register_global
     (4436,Core_kernel_Day_of_week,"Core_kernel__Day_of_week");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$296);
    caml_call1(Expect_test_collector[4][1],cst_src_day_of_week_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$297,cst$113);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$298);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Day_of_week_intf=[0];
    caml_register_global
     (4437,Core_kernel_Day_of_week_intf,"Core_kernel__Day_of_week_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$299);
    caml_call1(Expect_test_collector[4][1],cst_src_digit_string_helpers_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$300,cst$114);
    var compare$58=caml_int_compare;
    function sexp_of_t$79(param){return 0 === param?_YL_:_YM_}
    var
     Round=[0,compare$58,sexp_of_t$79],
     divisor=caml_call1(of_int$3,2),
     int63_ten=caml_call1(of_int$3,10),
     int63_twenty=caml_call1(of_int$3,20),
     int63_billion=caml_call1(of_int$3,1000000000),
     max_billions=caml_call2(symbol$106,max_value$2,int63_billion);
    function digits_of_positive_int63(n)
     {return caml_call2(symbol$97,n,int63_ten)
              ?1
              :caml_call1
                (next$0,
                 digits_of_positive_int63(caml_call2(symbol$106,n,int63_ten)))}
    var digits_of_int63_max_value=digits_of_positive_int63(max_value$2);
    function max_int63_with(digits)
     {var switcher=digits - 1 | 0;
      if(8 < switcher >>> 0)
       {if
         (caml_call2
           (Replace_polymorphic_compare$2[1],digits,digits_of_int63_max_value))
         return max_value$2;
        var billions=caml_call1(succ$1,max_int63_with(digits - 9 | 0));
        return caml_call1
                (pred$1,caml_call2(symbol$101,int63_billion,billions))}
      switch(switcher)
       {case 0:return caml_call1(of_int$3,9);
        case 1:return caml_call1(of_int$3,99);
        case 2:return caml_call1(of_int$3,999);
        case 3:return caml_call1(of_int$3,9999);
        case 4:return caml_call1(of_int$3,99999);
        case 5:return caml_call1(of_int$3,999999);
        case 6:return caml_call1(of_int$3,9999999);
        case 7:return caml_call1(of_int$3,99999999);
        default:return caml_call1(of_int$3,999999999)}}
    function digit_of_char(char$0){return caml_call1(_Fp_,char$0)}
    function write_1_digit_int(bytes,pos,int$0)
     {caml_bytes_unsafe_set
       (bytes,pos,caml_call1(_FB_,caml_call1(_FE_,48) + int$0 | 0));
      return 0}
    function return_tens_and_write_ones(bytes,pos,int$0)
     {var tens=int$0 / 10 | 0,ones=int$0 - (tens * 10 | 0) | 0;
      write_1_digit_int(bytes,pos,ones);
      return tens}
    function write_2_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 1 | 0,int$0);
      return write_1_digit_int(bytes,pos,tens)}
    function write_3_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 2 | 0,int$0);
      return write_2_digit_int(bytes,pos,tens)}
    function write_4_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 3 | 0,int$0);
      return write_3_digit_int(bytes,pos,tens)}
    function write_5_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 4 | 0,int$0);
      return write_4_digit_int(bytes,pos,tens)}
    function write_6_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 5 | 0,int$0);
      return write_5_digit_int(bytes,pos,tens)}
    function write_7_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 6 | 0,int$0);
      return write_6_digit_int(bytes,pos,tens)}
    function write_8_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 7 | 0,int$0);
      return write_7_digit_int(bytes,pos,tens)}
    function write_9_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 8 | 0,int$0);
      return write_8_digit_int(bytes,pos,tens)}
    function read_1_digit_int(string,pos)
     {return digit_of_char(caml_string_unsafe_get(string,pos))}
    function read_2_digit_int(string,pos)
     {var _a5B_=read_1_digit_int(string,pos + 1 | 0);
      return (read_1_digit_int(string,pos) * 10 | 0) + _a5B_ | 0}
    function read_3_digit_int(string,pos)
     {var _a5A_=read_1_digit_int(string,pos + 2 | 0);
      return (read_2_digit_int(string,pos) * 10 | 0) + _a5A_ | 0}
    function read_4_digit_int(string,pos)
     {var _a5z_=read_1_digit_int(string,pos + 3 | 0);
      return (read_3_digit_int(string,pos) * 10 | 0) + _a5z_ | 0}
    function read_5_digit_int(string,pos)
     {var _a5y_=read_1_digit_int(string,pos + 4 | 0);
      return (read_4_digit_int(string,pos) * 10 | 0) + _a5y_ | 0}
    function read_6_digit_int(string,pos)
     {var _a5x_=read_1_digit_int(string,pos + 5 | 0);
      return (read_5_digit_int(string,pos) * 10 | 0) + _a5x_ | 0}
    function read_7_digit_int(string,pos)
     {var _a5w_=read_1_digit_int(string,pos + 6 | 0);
      return (read_6_digit_int(string,pos) * 10 | 0) + _a5w_ | 0}
    function read_8_digit_int(string,pos)
     {var _a5v_=read_1_digit_int(string,pos + 7 | 0);
      return (read_7_digit_int(string,pos) * 10 | 0) + _a5v_ | 0}
    function read_9_digit_int(string,pos)
     {var _a5u_=read_1_digit_int(string,pos + 8 | 0);
      return (read_8_digit_int(string,pos) * 10 | 0) + _a5u_ | 0}
    function raise_int63_overflow(name)
     {return caml_call4(_Ph_,_YN_,module_name$7,name,0)}
    function read_int63(string,pos,digits)
     {var switcher=digits - 1 | 0;
      if(8 < switcher >>> 0)
       {var
         digits_of_billions=digits - 9 | 0,
         billions=read_int63(string,pos,digits_of_billions),
         remainder=
          caml_call1
           (of_int$3,read_9_digit_int(string,pos + digits_of_billions | 0));
        if(caml_call2(symbol$96,billions,max_billions))
         raise_int63_overflow(cst_read_int63);
        var
         sum=
          caml_call2
           (symbol$99,caml_call2(symbol$101,billions,int63_billion),remainder);
        if(caml_call2(symbol$97,sum,zero$4))
         raise_int63_overflow(cst_read_int63$0);
        return sum}
      switch(switcher)
       {case 0:return caml_call1(of_int$3,read_1_digit_int(string,pos));
        case 1:return caml_call1(of_int$3,read_2_digit_int(string,pos));
        case 2:return caml_call1(of_int$3,read_3_digit_int(string,pos));
        case 3:return caml_call1(of_int$3,read_4_digit_int(string,pos));
        case 4:return caml_call1(of_int$3,read_5_digit_int(string,pos));
        case 5:return caml_call1(of_int$3,read_6_digit_int(string,pos));
        case 6:return caml_call1(of_int$3,read_7_digit_int(string,pos));
        case 7:return caml_call1(of_int$3,read_8_digit_int(string,pos));
        default:return caml_call1(of_int$3,read_9_digit_int(string,pos))}}
    function divide_and_round_up(numerator,denominator)
     {var
       _a5s_=caml_call2(include$61[96][1],numerator,denominator),
       _a5t_=caml_call2(include$61[96][2],_a5s_,one$2);
      return caml_call2(include$61[96][17],_a5t_,denominator)}
    var max_scale=caml_call2(symbol$106,max_value$2,int63_twenty);
    function check_digits(name,digits)
     {var _a5r_=caml_call2(Replace_polymorphic_compare$2[5],digits,1);
      return _a5r_?caml_call5(_Ph_,_YQ_,module_name$7,name,digits,0):_a5r_}
    function check_pos(name,len,pos,digits)
     {var
       _a5p_=caml_call2(Replace_polymorphic_compare$2[5],pos,0),
       _a5q_=
        _a5p_
        ||
        caml_call2(Replace_polymorphic_compare$2[4],pos + digits | 0,len);
      if(_a5q_)
       {if(! caml_call2(Replace_polymorphic_compare$2[5],pos,0))
         if(! caml_call2(Replace_polymorphic_compare$2[1],pos,len))
          return caml_call7(_Ph_,_YT_,module_name$7,name,digits,pos,len,0);
        return caml_call6(_Ph_,_YS_,module_name$7,name,pos,len,0)}
      return _a5q_}
    function check_write(name,bytes,pos,digits,max,int$0)
     {var len=caml_call1(_EN_,bytes);
      check_pos(name,len,pos,digits);
      var
       _a5n_=caml_call2(Replace_polymorphic_compare$2[5],int$0,0),
       _a5o_=_a5n_ || caml_call2(Replace_polymorphic_compare$2[4],int$0,max);
      return _a5o_?caml_call6(_Ph_,_YU_,module_name$7,name,int$0,max,0):_a5o_}
    function write_1_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_1_digit_int,bytes,pos,1,9,int$0);
      return write_1_digit_int(bytes,pos,int$0)}
    function write_2_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_2_digit_int,bytes,pos,2,99,int$0);
      return write_2_digit_int(bytes,pos,int$0)}
    function write_3_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_3_digit_int,bytes,pos,3,999,int$0);
      return write_3_digit_int(bytes,pos,int$0)}
    function write_4_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_4_digit_int,bytes,pos,4,9999,int$0);
      return write_4_digit_int(bytes,pos,int$0)}
    function write_5_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_5_digit_int,bytes,pos,5,99999,int$0);
      return write_5_digit_int(bytes,pos,int$0)}
    function write_6_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_6_digit_int,bytes,pos,6,999999,int$0);
      return write_6_digit_int(bytes,pos,int$0)}
    function write_7_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_7_digit_int,bytes,pos,7,9999999,int$0);
      return write_7_digit_int(bytes,pos,int$0)}
    function write_8_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_8_digit_int,bytes,pos,8,99999999,int$0);
      return write_8_digit_int(bytes,pos,int$0)}
    function write_9_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_9_digit_int,bytes,pos,9,999999999,int$0);
      return write_9_digit_int(bytes,pos,int$0)}
    function write_int63(bytes,pos$0,digits$1,int63$1)
     {check_digits(name$58,digits$1);
      var max=max_int63_with(digits$1),len=caml_call1(_EN_,bytes);
      check_pos(name$58,len,pos$0,digits$1);
      var
       _a5l_=caml_call2(symbol$97,int63$1,zero$4),
       _a5m_=_a5l_ || caml_call2(symbol$96,int63$1,max);
      if(_a5m_)
       {var
         _a5j_=0,
         _a5k_=
          [11,
           cst_out_of_range_0,
           [24,
            _YW_,
            function(param,custom_printf_003)
             {return caml_call1(_KW_,custom_printf_003)},
            _YV_]];
        caml_call6
         (_Ph_,
          [0,
           [2,
            0,
            [12,
             46,
             [2,
              0,
              [11,
               cst$115,
               [24,
                _YX_,
                function(param,custom_printf_004)
                 {return caml_call1(_KW_,custom_printf_004)},
                _a5k_]]]]],
           cst_s_s_Int63_out_of_range_0_Int63],
          module_name$7,
          name$58,
          int63$1,
          max,
          _a5j_)}
      var digits=digits$1,int63$0=int63$1;
      for(;;)
       {var switcher=digits - 1 | 0;
        if(8 < switcher >>> 0)
         {var
           digits$0=digits - 9 | 0,
           pos=pos$0 + digits$0 | 0,
           int63=caml_call2(symbol$106,int63$0,int63_billion),
           remainder=
            caml_call2
             (symbol$100,int63$0,caml_call2(symbol$101,int63,int63_billion));
          write_9_digit_int(bytes,pos,caml_call1(to_int_exn$2,remainder));
          var digits=digits$0,int63$0=int63;
          continue}
        switch(switcher)
         {case 0:
           return write_1_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 1:
           return write_2_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 2:
           return write_3_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 3:
           return write_4_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 4:
           return write_5_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 5:
           return write_6_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 6:
           return write_7_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 7:
           return write_8_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          default:
           return write_9_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0))}}}
    function check_read(name,string,pos,digits)
     {var len=caml_ml_string_length(string);
      return check_pos(name,len,pos,digits)}
    function read_1_digit_int$0(string,pos)
     {check_read(cst_read_1_digit_int,string,pos,1);
      return read_1_digit_int(string,pos)}
    function read_2_digit_int$0(string,pos)
     {check_read(cst_read_2_digit_int,string,pos,2);
      return read_2_digit_int(string,pos)}
    function read_3_digit_int$0(string,pos)
     {check_read(cst_read_3_digit_int,string,pos,3);
      return read_3_digit_int(string,pos)}
    function read_4_digit_int$0(string,pos)
     {check_read(cst_read_4_digit_int,string,pos,4);
      return read_4_digit_int(string,pos)}
    function read_5_digit_int$0(string,pos)
     {check_read(cst_read_5_digit_int,string,pos,5);
      return read_5_digit_int(string,pos)}
    function read_6_digit_int$0(string,pos)
     {check_read(cst_read_6_digit_int,string,pos,6);
      return read_6_digit_int(string,pos)}
    function read_7_digit_int$0(string,pos)
     {check_read(cst_read_7_digit_int,string,pos,7);
      return read_7_digit_int(string,pos)}
    function read_8_digit_int$0(string,pos)
     {check_read(cst_read_8_digit_int,string,pos,8);
      return read_8_digit_int(string,pos)}
    function read_9_digit_int$0(string,pos)
     {check_read(cst_read_9_digit_int,string,pos,9);
      return read_9_digit_int(string,pos)}
    function read_int63$0(string,pos,digits)
     {check_digits(name$59,digits);
      var len=caml_ml_string_length(string);
      check_pos(name$59,len,pos,digits);
      return read_int63(string,pos,digits)}
    function read_int63_decimal
     (string,pos$0,decimals,scale$0,round_ties,allow_underscore)
     {var len=caml_ml_string_length(string);
      if(caml_call2(Replace_polymorphic_compare$2[5],decimals,0))
       caml_call5(_Ph_,_YP_,module_name$7,name$60,decimals,0);
      var
       _a5h_=caml_call2(symbol$97,scale$0,one$2),
       _a5i_=_a5h_ || caml_call2(symbol$96,scale$0,max_scale);
      if(_a5i_)
       {var
         _a5f_=caml_call1(to_int64$2,max_scale),
         _a5g_=caml_call1(to_int64$2,one$2);
        caml_call7
         (_Ph_,
          _YR_,
          module_name$7,
          name$60,
          caml_call1(to_int64$2,scale$0),
          _a5g_,
          _a5f_,
          0)}
      check_pos(name$60,len,pos$0,decimals);
      var
       scale=caml_call2(symbol$101,scale$0,divisor),
       until=caml_call2(symbol$54,pos$0,decimals),
       divisor$0=[0,divisor],
       round_at=[0,one$2],
       sum=[0,zero$4],
       pos=[0,pos$0];
      for(;;)
       {if(caml_call2(symbol$53,pos[1],until))
         if(caml_call2(include$61[96][11],round_at[1],scale))
          {var char$0=caml_string_unsafe_get(string,pos[1]);
           if(58 <= char$0)
            var switch$0=95 === char$0?allow_underscore?1:0:0;
           else
            if(48 <= char$0)
             {var digit=caml_call1(of_int$3,digit_of_char(char$0));
              divisor$0[1]
              =
              caml_call2(include$61[96][3],divisor$0[1],int63_ten);
              round_at[1]
              =
              caml_call2(include$61[96][3],round_at[1],int63_ten);
              var
               _a5c_=round_at[1],
               _a5d_=caml_call2(include$61[96][3],digit,scale),
               numerator=caml_call2(include$61[96][2],_a5d_,_a5c_),
               denominator=divisor$0[1],
               increment=divide_and_round_up(numerator,denominator),
               _a5e_=caml_call2(include$61[96][3],increment,denominator),
               remainder=caml_call2(include$61[96][2],numerator,_a5e_);
              round_at[1] = caml_call1(include$61[96][5],remainder);
              sum[1] = caml_call2(include$61[96][1],sum[1],increment);
              divisor$0[1] = caml_call2(min$5,denominator,scale);
              var switch$0=1}
            else
             var switch$0=0;
           if(! switch$0)caml_call4(_Ph_,_YO_,module_name$7,name$57,0);
           pos[1] = caml_call1(next$0,pos[1]);
           continue}
        if(caml_call2(include$61[96][9],round_at[1],include$61[96][15]))
         if(0 === round_ties)
          sum[1] = caml_call2(include$61[96][1],sum[1],one$2);
        return sum[1]}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$301);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Digit_string_helpers=
      [0,
       write_int63,
       write_1_digit_int$0,
       write_2_digit_int$0,
       write_3_digit_int$0,
       write_4_digit_int$0,
       write_5_digit_int$0,
       write_6_digit_int$0,
       write_7_digit_int$0,
       write_8_digit_int$0,
       write_9_digit_int$0,
       read_int63$0,
       read_1_digit_int$0,
       read_2_digit_int$0,
       read_3_digit_int$0,
       read_4_digit_int$0,
       read_5_digit_int$0,
       read_6_digit_int$0,
       read_7_digit_int$0,
       read_8_digit_int$0,
       read_9_digit_int$0,
       Round,
       read_int63_decimal,
       max_int63_with,
       [0,divide_and_round_up]];
    caml_register_global
     (4438,
      Core_kernel_Digit_string_helpers,
      "Core_kernel__Digit_string_helpers");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$302);
    caml_call1(Expect_test_collector[4][1],cst_src_month_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$303,cst$116);
    function t_of_sexp$66(sexp)
     {if(0 === sexp[0])
       {var _a44_=sexp[1],_a45_=caml_string_compare(_a44_,cst_apr);
        if(0 <= _a45_)
         if(0 < _a45_)
          var
           _a46_=caml_string_compare(_a44_,cst_jun),
           switch$0=
            0 <= _a46_
             ?0 < _a46_
               ?caml_string_notequal(_a44_,cst_mar)
                 ?caml_string_notequal(_a44_,cst_may)
                   ?caml_string_notequal(_a44_,cst_nov)
                     ?caml_string_notequal(_a44_,cst_oct)
                       ?caml_string_notequal(_a44_,cst_sep)?12:8
                       :9
                     :10
                   :4
                 :2
               :5
             :caml_string_notequal(_a44_,cst_aug)
               ?caml_string_notequal(_a44_,cst_dec)
                 ?caml_string_notequal(_a44_,cst_feb)
                   ?caml_string_notequal(_a44_,cst_jan)
                     ?caml_string_notequal(_a44_,cst_jul)?12:6
                     :0
                   :1
                 :11
               :7;
         else
          var switch$0=3;
        else
         var
          _a47_=caml_string_compare(_a44_,cst_Jun),
          switch$0=
           0 <= _a47_
            ?0 < _a47_
              ?caml_string_notequal(_a44_,cst_Mar)
                ?caml_string_notequal(_a44_,cst_May)
                  ?caml_string_notequal(_a44_,cst_Nov)
                    ?caml_string_notequal(_a44_,cst_Oct)
                      ?caml_string_notequal(_a44_,cst_Sep)?12:8
                      :9
                    :10
                  :4
                :2
              :5
            :caml_string_notequal(_a44_,cst_Apr)
              ?caml_string_notequal(_a44_,cst_Aug)
                ?caml_string_notequal(_a44_,cst_Dec)
                  ?caml_string_notequal(_a44_,cst_Feb)
                    ?caml_string_notequal(_a44_,cst_Jan)
                      ?caml_string_notequal(_a44_,cst_Jul)?12:6
                      :0
                    :1
                  :11
                :7
              :3;
        switch(switch$0)
         {case 0:return 0;
          case 1:return 1;
          case 2:return 2;
          case 3:return 3;
          case 4:return 4;
          case 5:return 5;
          case 6:return 6;
          case 7:return 7;
          case 8:return 8;
          case 9:return 9;
          case 10:return 10;
          case 11:return 11
          }}
      else
       {var _a48_=sexp[1];
        if(! _a48_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$26,sexp);
        var _a49_=_a48_[1];
        if(0 !== _a49_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$26,sexp);
        var _a4__=_a49_[1],_a4$_=caml_string_compare(_a4__,cst_apr$0);
        if(0 <= _a4$_)
         if(0 < _a4$_)
          var
           _a5a_=caml_string_compare(_a4__,cst_jun$0),
           switch$1=
            0 <= _a5a_
             ?0 < _a5a_
               ?caml_string_notequal(_a4__,cst_mar$0)
                 ?caml_string_notequal(_a4__,cst_may$0)
                   ?caml_string_notequal(_a4__,cst_nov$0)
                     ?caml_string_notequal(_a4__,cst_oct$0)
                       ?caml_string_notequal(_a4__,cst_sep$0)?12:8
                       :9
                     :10
                   :4
                 :2
               :5
             :caml_string_notequal(_a4__,cst_aug$0)
               ?caml_string_notequal(_a4__,cst_dec$0)
                 ?caml_string_notequal(_a4__,cst_feb$0)
                   ?caml_string_notequal(_a4__,cst_jan$0)
                     ?caml_string_notequal(_a4__,cst_jul$0)?12:6
                     :0
                   :1
                 :11
               :7;
         else
          var switch$1=3;
        else
         var
          _a5b_=caml_string_compare(_a4__,cst_Jun$0),
          switch$1=
           0 <= _a5b_
            ?0 < _a5b_
              ?caml_string_notequal(_a4__,cst_Mar$0)
                ?caml_string_notequal(_a4__,cst_May$0)
                  ?caml_string_notequal(_a4__,cst_Nov$0)
                    ?caml_string_notequal(_a4__,cst_Oct$0)
                      ?caml_string_notequal(_a4__,cst_Sep$0)?12:8
                      :9
                    :10
                  :4
                :2
              :5
            :caml_string_notequal(_a4__,cst_Apr$0)
              ?caml_string_notequal(_a4__,cst_Aug$0)
                ?caml_string_notequal(_a4__,cst_Dec$0)
                  ?caml_string_notequal(_a4__,cst_Feb$0)
                    ?caml_string_notequal(_a4__,cst_Jan$0)
                      ?caml_string_notequal(_a4__,cst_Jul$0)?12:6
                      :0
                    :1
                  :11
                :7
              :3;
        switch(switch$1)
         {case 0:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 1:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 6:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 7:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 8:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 9:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 10:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 11:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$26,sexp)}
    function sexp_of_t$80(param)
     {switch(param)
       {case 0:return _YY_;
        case 1:return _YZ_;
        case 2:return _Y0_;
        case 3:return _Y1_;
        case 4:return _Y2_;
        case 5:return _Y3_;
        case 6:return _Y4_;
        case 7:return _Y5_;
        case 8:return _Y6_;
        case 9:return _Y7_;
        case 10:return _Y8_;
        default:return _Y9_}}
    var compare$59=caml_int_compare;
    function hash_fold_t$36(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        case 3:return caml_call2(Base_Hash[3],hsv,3);
        case 4:return caml_call2(Base_Hash[3],hsv,4);
        case 5:return caml_call2(Base_Hash[3],hsv,5);
        case 6:return caml_call2(Base_Hash[3],hsv,6);
        case 7:return caml_call2(Base_Hash[3],hsv,7);
        case 8:return caml_call2(Base_Hash[3],hsv,8);
        case 9:return caml_call2(Base_Hash[3],hsv,9);
        case 10:return caml_call2(Base_Hash[3],hsv,10);
        default:return caml_call2(Base_Hash[3],hsv,11)}}
    function hash$34(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_a43_=hash_fold_t$36(hsv,x);
      return caml_call1(Base_Hash[9],_a43_)}
    var
     jan$0=[0,cst_Jan$1,0,0],
     feb$0=[0,cst_Feb$1,1,1],
     mar$0=[0,cst_Mar$1,2,2],
     apr$0=[0,cst_Apr$1,3,3],
     may$0=[0,cst_May$1,4,4],
     jun$0=[0,cst_Jun$1,5,5],
     jul$0=[0,cst_Jul$1,6,6],
     aug$0=[0,cst_Aug$1,7,7],
     sep$0=[0,cst_Sep$1,8,8],
     oct$0=[0,cst_Oct$1,9,9],
     nov$0=[0,cst_Nov$1,10,10],
     dec$0=[0,cst_Dec$1,11,11],
     jan=0,
     feb=1,
     mar=2,
     apr=3,
     may=4,
     jun=5,
     jul=6,
     aug=7,
     sep=8,
     oct=9,
     nov=10,
     dec=11;
    function fold$11
     (init,
      jan_fun,
      feb_fun,
      mar_fun,
      apr_fun,
      may_fun,
      jun_fun,
      jul_fun,
      aug_fun,
      sep_fun,
      oct_fun,
      nov_fun,
      dec_fun)
     {return caml_call2
              (dec_fun,
               caml_call2
                (nov_fun,
                 caml_call2
                  (oct_fun,
                   caml_call2
                    (sep_fun,
                     caml_call2
                      (aug_fun,
                       caml_call2
                        (jul_fun,
                         caml_call2
                          (jun_fun,
                           caml_call2
                            (may_fun,
                             caml_call2
                              (apr_fun,
                               caml_call2
                                (mar_fun,
                                 caml_call2(feb_fun,caml_call2(jan_fun,init,jan$0),feb$0),
                                 mar$0),
                               apr$0),
                             may$0),
                           jun$0),
                         jul$0),
                       aug$0),
                     sep$0),
                   oct$0),
                 nov$0),
               dec$0)}
    function iter$17
     (jan_fun,
      feb_fun,
      mar_fun,
      apr_fun,
      may_fun,
      jun_fun,
      jul_fun,
      aug_fun,
      sep_fun,
      oct_fun,
      nov_fun,
      dec_fun)
     {caml_call1(jan_fun,jan$0);
      caml_call1(feb_fun,feb$0);
      caml_call1(mar_fun,mar$0);
      caml_call1(apr_fun,apr$0);
      caml_call1(may_fun,may$0);
      caml_call1(jun_fun,jun$0);
      caml_call1(jul_fun,jul$0);
      caml_call1(aug_fun,aug$0);
      caml_call1(sep_fun,sep$0);
      caml_call1(oct_fun,oct$0);
      caml_call1(nov_fun,nov$0);
      return caml_call1(dec_fun,dec$0)}
    function map$22
     (t,
      jan_fun,
      feb_fun,
      mar_fun,
      apr_fun,
      may_fun,
      jun_fun,
      jul_fun,
      aug_fun,
      sep_fun,
      oct_fun,
      nov_fun,
      dec_fun)
     {switch(t)
       {case 0:return caml_call1(jan_fun,jan$0);
        case 1:return caml_call1(feb_fun,feb$0);
        case 2:return caml_call1(mar_fun,mar$0);
        case 3:return caml_call1(apr_fun,apr$0);
        case 4:return caml_call1(may_fun,may$0);
        case 5:return caml_call1(jun_fun,jun$0);
        case 6:return caml_call1(jul_fun,jul$0);
        case 7:return caml_call1(aug_fun,aug$0);
        case 8:return caml_call1(sep_fun,sep$0);
        case 9:return caml_call1(oct_fun,oct$0);
        case 10:return caml_call1(nov_fun,nov$0);
        default:return caml_call1(dec_fun,dec$0)}}
    function make_matcher
     (jan_fun,
      feb_fun,
      mar_fun,
      apr_fun,
      may_fun,
      jun_fun,
      jul_fun,
      aug_fun,
      sep_fun,
      oct_fun,
      nov_fun,
      dec_fun,
      compile_acc)
     {var
       match=caml_call2(jan_fun,jan$0,compile_acc),
       compile_acc$0=match[2],
       jan_gen=match[1],
       match$0=caml_call2(feb_fun,feb$0,compile_acc$0),
       compile_acc$1=match$0[2],
       feb_gen=match$0[1],
       match$1=caml_call2(mar_fun,mar$0,compile_acc$1),
       compile_acc$2=match$1[2],
       mar_gen=match$1[1],
       match$2=caml_call2(apr_fun,apr$0,compile_acc$2),
       compile_acc$3=match$2[2],
       apr_gen=match$2[1],
       match$3=caml_call2(may_fun,may$0,compile_acc$3),
       compile_acc$4=match$3[2],
       may_gen=match$3[1],
       match$4=caml_call2(jun_fun,jun$0,compile_acc$4),
       compile_acc$5=match$4[2],
       jun_gen=match$4[1],
       match$5=caml_call2(jul_fun,jul$0,compile_acc$5),
       compile_acc$6=match$5[2],
       jul_gen=match$5[1],
       match$6=caml_call2(aug_fun,aug$0,compile_acc$6),
       compile_acc$7=match$6[2],
       aug_gen=match$6[1],
       match$7=caml_call2(sep_fun,sep$0,compile_acc$7),
       compile_acc$8=match$7[2],
       sep_gen=match$7[1],
       match$8=caml_call2(oct_fun,oct$0,compile_acc$8),
       compile_acc$9=match$8[2],
       oct_gen=match$8[1],
       match$9=caml_call2(nov_fun,nov$0,compile_acc$9),
       compile_acc$10=match$9[2],
       nov_gen=match$9[1],
       match$10=caml_call2(dec_fun,dec$0,compile_acc$10),
       compile_acc$11=match$10[2],
       dec_gen=match$10[1];
      function _a4Q_(param){return caml_call1(jan_gen,0)}
      function _a4R_(param){return caml_call1(feb_gen,0)}
      function _a4S_(param){return caml_call1(mar_gen,0)}
      function _a4T_(param){return caml_call1(apr_gen,0)}
      function _a4U_(param){return caml_call1(may_gen,0)}
      function _a4V_(param){return caml_call1(jun_gen,0)}
      function _a4W_(param){return caml_call1(jul_gen,0)}
      function _a4X_(param){return caml_call1(aug_gen,0)}
      function _a4Y_(param){return caml_call1(sep_gen,0)}
      function _a4Z_(param){return caml_call1(oct_gen,0)}
      function _a40_(param){return caml_call1(nov_gen,0)}
      function _a41_(param){return caml_call1(dec_gen,0)}
      return [0,
              function(_a42_)
               {return map$22
                        (_a42_,
                         _a4Q_,
                         _a4R_,
                         _a4S_,
                         _a4T_,
                         _a4U_,
                         _a4V_,
                         _a4W_,
                         _a4X_,
                         _a4Y_,
                         _a4Z_,
                         _a40_,
                         _a41_)},
              compile_acc$11]}
    function to_rank(param)
     {switch(param)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        case 6:return 6;
        case 7:return 7;
        case 8:return 8;
        case 9:return 9;
        case 10:return 10;
        default:return 11}}
    function to_name(param)
     {switch(param)
       {case 0:return cst_Jan$2;
        case 1:return cst_Feb$2;
        case 2:return cst_Mar$2;
        case 3:return cst_Apr$2;
        case 4:return cst_May$2;
        case 5:return cst_Jun$2;
        case 6:return cst_Jul$2;
        case 7:return cst_Aug$2;
        case 8:return cst_Sep$2;
        case 9:return cst_Oct$2;
        case 10:return cst_Nov$2;
        default:return cst_Dec$2}}
    var
     Variants=
      [0,
       jan$0,
       feb$0,
       mar$0,
       apr$0,
       may$0,
       jun$0,
       jul$0,
       aug$0,
       sep$0,
       oct$0,
       nov$0,
       dec$0,
       fold$11,
       iter$17,
       map$22,
       make_matcher,
       to_rank,
       to_name,
       descriptions];
    function of_int_exn$5(i)
     {var switcher=i - 1 | 0;
      if(11 < switcher >>> 0)return caml_call3(failwithf,_Y__,i,0);
      switch(switcher)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        case 6:return 6;
        case 7:return 7;
        case 8:return 8;
        case 9:return 9;
        case 10:return 10;
        default:return 11}}
    function of_int$6(i)
     {try {var _a4O_=[0,of_int_exn$5(i)];return _a4O_}catch(_a4P_){return 0}}
    function to_int$5(t)
     {switch(t)
       {case 0:return 1;
        case 1:return 2;
        case 2:return 3;
        case 3:return 4;
        case 4:return 5;
        case 5:return 6;
        case 6:return 7;
        case 7:return 8;
        case 8:return 9;
        case 9:return 10;
        case 10:return 11;
        default:return 12}}
    function to_binable$4(t){return caml_call2(_ax_,to_int$5(t),1)}
    function of_binable$4(i){return of_int_exn$5(caml_call2(_aw_,i,1))}
    var
     include$98=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$54,
           bin_size_t$44,
           bin_write_t$44,
           bin_read_t$90,
           bin_read_t$91]),
        [0,to_binable$4,of_binable$4]),
     bin_size_t$66=include$98[1],
     bin_write_t$67=include$98[2],
     bin_read_t$132=include$98[3],
     bin_read_t$133=include$98[4],
     bin_shape_t$87=include$98[5],
     bin_writer_t$76=include$98[6],
     bin_reader_t$76=include$98[7],
     bin_t$76=include$98[8],
     _Y$_=
      Make_binable
       ([0,
         hash_fold_t$36,
         bin_size_t$66,
         bin_write_t$67,
         bin_read_t$132,
         bin_read_t$133,
         bin_shape_t$87,
         bin_writer_t$76,
         bin_reader_t$76,
         bin_t$76,
         t_of_sexp$66,
         compare$59,
         sexp_of_t$80,
         to_int$5]),
     hash_fold_t$37=_Y$_[1],
     hash$35=_Y$_[2],
     hashable$12=_Y$_[3],
     Table$14=_Y$_[4],
     Hash_set$14=_Y$_[5],
     Hash_queue$12=_Y$_[6],
     num_months=12;
    function t_of_sexp$67(sexp)
     {var
       match=
        caml_call1(_yv_,function(param){return caml_call1(t_of_sexp$35,sexp)});
      if(match){var i=match[1];return of_int_exn$5(caml_call2(_aw_,i,1))}
      return t_of_sexp$66(sexp)}
    var
     include$99=
      _xB_
       ([0,
         bin_size_t$66,
         bin_write_t$67,
         bin_read_t$132,
         bin_read_t$133,
         bin_shape_t$87,
         bin_writer_t$76,
         bin_reader_t$76,
         bin_t$76,
         compare$59,
         t_of_sexp$67,
         sexp_of_t$80]),
     symbol$158=include$99[1],
     symbol$159=include$99[2],
     symbol$160=include$99[3],
     symbol$161=include$99[4],
     symbol$162=include$99[5],
     symbol$163=include$99[6],
     equal$32=include$99[7],
     compare$60=include$99[8],
     min$12=include$99[9],
     max$12=include$99[10],
     ascending$12=include$99[11],
     descending$12=include$99[12],
     between$12=include$99[13],
     clamp_exn$12=include$99[14],
     clamp$12=include$99[15],
     validate_lbound$12=include$99[16],
     validate_ubound$12=include$99[17],
     validate_bound$12=include$99[18],
     Replace_polymorphic_compare$11=include$99[19],
     comparator$18=include$99[20],
     Map$16=include$99[21],
     Set$16=include$99[22];
    function shift$0(t,i)
     {return of_int_exn$5
              (caml_call2
                (_aw_,
                 1,
                 caml_call2
                  (symbol$60,
                   caml_call2(_aw_,caml_call2(_ax_,to_int$5(t),1),i),
                   num_months)))}
    var
     all_strings=
      [246,
       function(_a4N_)
        {return caml_call1
                 (of_list,
                  caml_call2
                   (_qg_,
                    all$4,
                    function(variant)
                     {return caml_call1(to_string$0,sexp_of_t$80(variant))}))}];
    function to_string$20(t)
     {var
       _a4L_=caml_obj_tag(all_strings),
       all_strings$0=
        250 === _a4L_
         ?all_strings[1]
         :246 === _a4L_
           ?caml_call1(CamlinternalLazy[2],all_strings)
           :all_strings,
       _a4M_=caml_call2(_ax_,to_int$5(t),1);
      return caml_check_bound(all_strings$0,_a4M_)[1 + _a4M_]}
    var
     table=
      [246,
       function(_a4F_)
        {var table=caml_call3(Table$1[4],0,[0,num_months],0);
         function _a4G_(i,s)
          {var t=of_int_exn$5(caml_call2(_aw_,i,1));
           caml_call3(Core_kernel_Hashtbl[34],table,s,t);
           var _a4J_=caml_call1(_CB_,s);
           caml_call3(Core_kernel_Hashtbl[34],table,_a4J_,t);
           var _a4K_=caml_call1(_CA_,s);
           return caml_call3(Core_kernel_Hashtbl[34],table,_a4K_,t)}
         var
          _a4H_=caml_obj_tag(all_strings),
          _a4I_=
           250 === _a4H_
            ?all_strings[1]
            :246 === _a4H_
              ?caml_call1(CamlinternalLazy[2],all_strings)
              :all_strings;
         caml_call2(iteri,_a4I_,_a4G_);
         return table}];
    function of_string$16(str)
     {var
       _a4D_=caml_obj_tag(table),
       _a4E_=
        250 === _a4D_
         ?table[1]
         :246 === _a4D_?caml_call1(CamlinternalLazy[2],table):table,
       match=caml_call2(Core_kernel_Hashtbl[52],_a4E_,str);
      if(match){var x=match[1];return x}
      return caml_call3(failwithf,_Za_,str,0)}
    var Export=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$304);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _Zb_=
      [0,
       [0,
        t_of_sexp$66,
        sexp_of_t$80,
        bin_size_t$66,
        bin_write_t$67,
        bin_read_t$132,
        bin_read_t$133,
        bin_shape_t$87,
        bin_writer_t$76,
        bin_reader_t$76,
        bin_t$76,
        compare$59,
        hash_fold_t$36,
        hash$34]],
     Core_kernel_Month=
      [0,
       bin_size_t$66,
       bin_write_t$67,
       bin_read_t$132,
       bin_read_t$133,
       bin_shape_t$87,
       bin_writer_t$76,
       bin_reader_t$76,
       bin_t$76,
       t_of_sexp$66,
       sexp_of_t$80,
       jan,
       feb,
       mar,
       apr,
       may,
       jun,
       jul,
       aug,
       sep,
       oct,
       nov,
       dec,
       Variants,
       symbol$158,
       symbol$159,
       symbol$160,
       symbol$161,
       symbol$162,
       symbol$163,
       equal$32,
       compare$60,
       min$12,
       max$12,
       ascending$12,
       descending$12,
       between$12,
       clamp_exn$12,
       clamp$12,
       validate_lbound$12,
       validate_ubound$12,
       validate_bound$12,
       Replace_polymorphic_compare$11,
       comparator$18,
       Map$16,
       Set$16,
       hash_fold_t$37,
       hash$35,
       hashable$12,
       Table$14,
       Hash_set$14,
       Hash_queue$12,
       of_string$16,
       to_string$20,
       all$4,
       of_int$6,
       of_int_exn$5,
       to_int$5,
       shift$0,
       Export,
       _Zb_];
    caml_register_global(4439,Core_kernel_Month,"Core_kernel__Month");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$305);
    caml_call1(Expect_test_collector[4][1],cst_src_month_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$306,cst$117);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$307);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Month_intf=[0];
    caml_register_global
     (4440,Core_kernel_Month_intf,"Core_kernel__Month_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$308);
    caml_call1(Expect_test_collector[4][1],cst_src_date0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$309,cst$118);
    function is_leap_year(year)
     {var
       _a4B_=caml_call2(_Nr_,year % 4 | 0,0),
       _a4C_=_a4B_?1 - caml_call2(_Nr_,year % 100 | 0,0):_a4B_;
      return _a4C_?_a4C_:caml_call2(_Nr_,year % 400 | 0,0)}
    function hash$36(x){return hash_int(x)}
    var
     Typename_of_t$23=caml_call1(Typerep_lib_Make_typename[1],[0,name$61]),
     typename_of_t$22=Typename_of_t$23[2],
     name_of_t$15=Typename_of_t$23[1],
     typerep_of_t$23=[9,[0,name_of_t$15,[0,typerep_of_int]]],
     _Zc_=
      caml_call1
       (Bin_prot_Shape[5][1],cst_899ee3e0_490a_11e6_a10a_a3734f733566),
     bin_shape_t$88=caml_call1(caml_call1(Bin_prot_Shape[16],_Zc_),0);
    function create0(year,month,day)
     {return year << 16 | to_int$5(month) << 8 | day}
    function year(t){return t >>> 16 | 0}
    function month(t){return of_int_exn$5((t >>> 8 | 0) & 255)}
    function day(t){return t & 255}
    function days_in_month(year,month)
     {switch(month)
       {case 1:return is_leap_year(year)?29:28;
        case 3:
        case 5:
        case 8:
        case 10:return 30;
        default:return 31}}
    function create_exn(year,month,day)
     {function invalid(year,month,day,msg)
       {var _a4A_=0;
        return caml_call6
                (_Ph_,
                 [0,
                  [11,
                   cst_Date_create_exn_y,
                   [4,
                    0,
                    0,
                    0,
                    [11,
                     cst_m,
                     [24,
                      _Ze_,
                      function(param,custom_printf_001)
                       {return to_string$20(custom_printf_001)},
                      _Zd_]]]],
                  cst_Date_create_exn_y_d_m_Month_d_d_error_s],
                 year,
                 month,
                 day,
                 msg,
                 _a4A_)}
      var
       _a4y_=caml_call2(_Nt_,year,0),
       _a4z_=_a4y_ || caml_call2(_Ns_,year,9999);
      if(_a4z_)invalid(year,month,day,cst_year_outside_of_0_9999);
      if(caml_call2(_Nq_,day,0))invalid(year,month,day,cst_day_0);
      var days_in_month$0=days_in_month(year,month);
      if(caml_call2(_Ns_,day,days_in_month$0))
       invalid(year,month,day,caml_call2(_fE_,_Zf_,days_in_month$0));
      return create0(year,month,day)}
    function bin_read_t$134(buf,pos_ref)
     {var
       year=caml_call2(bin_read_t$90,buf,pos_ref),
       month=caml_call2(_Zb_[1][5],buf,pos_ref),
       day=caml_call2(bin_read_t$90,buf,pos_ref);
      return create0(year,month,day)}
    function bin_read_t$135(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[19],cst_Date_t,pos_ref[1])}
    var bin_reader_t$77=[0,bin_read_t$134,bin_read_t$135];
    function bin_size_t$67(t)
     {var
       _a4w_=caml_call1(bin_size_t$44,t & 255),
       _a4x_=caml_call1(bin_size_t$66,month(t));
      return (caml_call1(bin_size_t$44,t >>> 16 | 0) + _a4x_ | 0) + _a4w_ | 0}
    function bin_write_t$68(buf,pos,t)
     {var
       pos$0=caml_call3(bin_write_t$44,buf,pos,t >>> 16 | 0),
       pos$1=caml_call3(bin_write_t$67,buf,pos$0,month(t));
      return caml_call3(bin_write_t$44,buf,pos$1,t & 255)}
    var
     bin_writer_t$77=[0,bin_size_t$67,bin_write_t$68],
     bin_t$77=[0,bin_shape_t$88,bin_writer_t$77,bin_reader_t$77];
    function to_int$6(t){return t}
    function of_int_exn$6(n){return create_exn(n >>> 16 | 0,month(n),n & 255)}
    function to_string$21(t)
     {var buf=caml_call1(_EG_,10);
      write_4_digit_int$0(buf,0,t >>> 16 | 0);
      caml_call3(_EP_,buf,4,45);
      write_2_digit_int$0(buf,5,to_int$5(month(t)));
      caml_call3(_EP_,buf,7,45);
      write_2_digit_int$0(buf,8,t & 255);
      return caml_call1(_EZ_,buf)}
    function to_string_iso8601_basic(t)
     {var buf=caml_call1(_EG_,8);
      write_4_digit_int$0(buf,0,t >>> 16 | 0);
      write_2_digit_int$0(buf,4,to_int$5(month(t)));
      write_2_digit_int$0(buf,6,t & 255);
      return caml_call1(_EZ_,buf)}
    function to_string_american(t)
     {var buf=caml_call1(_EG_,10);
      write_2_digit_int$0(buf,0,to_int$5(month(t)));
      caml_call3(_EP_,buf,2,47);
      write_2_digit_int$0(buf,3,t & 255);
      caml_call3(_EP_,buf,5,47);
      write_4_digit_int$0(buf,6,t >>> 16 | 0);
      return caml_call1(_EZ_,buf)}
    function parse_year4(str,pos){return read_4_digit_int$0(str,pos)}
    function parse_month(str,pos)
     {return of_int_exn$5(read_2_digit_int$0(str,pos))}
    function parse_day(str,pos){return read_2_digit_int$0(str,pos)}
    function of_string_iso8601_basic(str,pos)
     {if(caml_call2(_Ns_,pos + 8 | 0,caml_ml_string_length(str)))
       caml_call1(_Gf_,cst_Date_of_string_iso8601_basic_pos_8_string_length);
      var _a4u_=parse_day(str,pos + 6 | 0),_a4v_=parse_month(str,pos + 4 | 0);
      return create_exn(parse_year4(str,pos),_a4v_,_a4u_)}
    function _Zg_(s)
     {function invalid(param)
       {return caml_call1(_Gg_,caml_call2(_Gu_,cst_invalid_date,s))}
      function ensure(b){var _a4t_=1 - b;return _a4t_?invalid(0):_a4t_}
      function month_num(year,month,day)
       {var _a4r_=parse_day(s,day),_a4s_=parse_month(s,month);
        return create_exn(parse_year4(s,year),_a4s_,_a4r_)}
      function month_abrv(year,month,day)
       {var
         _a4p_=parse_day(s,day),
         _a4q_=of_string$16(caml_call3(_Ca_,s,month,3));
        return create_exn(parse_year4(s,year),_a4q_,_a4p_)}
      if(caml_call4(_Cz_,0,0,s,47))
       {var match=caml_call2(_C2_,s,47);
        if(match)
         {var _a4g_=match[2];
          if(_a4g_)
           {var _a4h_=_a4g_[2];
            if(_a4h_)
             if(_a4h_[2])
              var switch$0=0;
             else
              {var c=_a4h_[1],b=_a4g_[1],a=match[1];
               if(caml_call2(_Nr_,caml_ml_string_length(a),4))
                var y=a,m=b,d=c,switch$0=1;
               else
                var y=c,m=a,d=b,switch$0=1}
            else
             var switch$0=0}
          else
           var switch$0=0}
        else
         var switch$0=0;
        if(! switch$0)var _a4i_=invalid(0),y=_a4i_[1],m=_a4i_[2],d=_a4i_[3];
        var
         year=caml_call1(of_string$2,y),
         year$0=
          caml_call2(_Np_,year,100)
           ?year
           :caml_call2(_Nt_,year,75)?2000 + year | 0:1900 + year | 0,
         month=of_int_exn$5(caml_call1(of_string$2,m)),
         day=caml_call1(of_string$2,d);
        return create_exn(year$0,month,day)}
      if(caml_call4(_Cz_,0,0,s,45))
       {var _a4j_=caml_call2(_Nr_,caml_ml_string_length(s),10);
        if(_a4j_)
         var
          _a4k_=caml_call2(_FW_,caml_string_get(s,4),45),
          _a4l_=_a4k_?caml_call2(_FW_,caml_string_get(s,7),45):_a4k_;
        else
         var _a4l_=_a4j_;
        ensure(_a4l_);
        return month_num(0,5,8)}
      if(caml_call4(_Cz_,0,0,s,32))
       {if(caml_call2(_Nr_,caml_ml_string_length(s),11))
         if(caml_call2(_FW_,caml_string_get(s,2),32))
          if(caml_call2(_FW_,caml_string_get(s,6),32))
           return month_abrv(7,3,0);
        var _a4m_=caml_call2(_Nr_,caml_ml_string_length(s),11);
        if(_a4m_)
         var
          _a4n_=caml_call2(_FW_,caml_string_get(s,4),32),
          _a4o_=_a4n_?caml_call2(_FW_,caml_string_get(s,8),32):_a4n_;
        else
         var _a4o_=_a4m_;
        ensure(_a4o_);
        return month_abrv(0,5,9)}
      return caml_call2(_Nr_,caml_ml_string_length(s),9)
              ?month_abrv(5,2,0)
              :caml_call2(_Nr_,caml_ml_string_length(s),8)
                ?month_num(0,4,6)
                :invalid(0)}
    function of_string$17(s)
     {try
       {var _a4f_=_Zg_(s);return _a4f_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call4(_Ph_,_Zh_,s,caml_call1(Base_Exn[9],exn),0)}}
    function _Zi_(sexp)
     {if(0 === sexp[0]){var s=sexp[1];return of_string$17(s)}
      if(0 === sexp[0])
       var _a4e_=caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$27,sexp);
      else
       {var
         field_sexps=sexp[1],
         y_field=[0,0],
         m_field=[0,0],
         d_field=[0,0],
         duplicates=[0,0],
         extra=[0,0],
         param=field_sexps;
        for(;;)
         {if(param)
           {var _a36_=param[1];
            if(1 === _a36_[0])
             {var _a37_=_a36_[1];
              if(_a37_)
               {var _a38_=_a37_[1];
                if(0 === _a38_[0])
                 {var _a39_=_a37_[2],_a3__=_a38_[1];
                  if(! _a39_)
                   {var tail$0=param[2];
                    if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a3__,extra[1]];
                    var param=tail$0;
                    continue}
                  if(! _a39_[2])
                   {var tail=param[2],field_sexp=_a39_[1];
                    if(caml_string_notequal(_a3__,cst_d))
                     if(caml_string_notequal(_a3__,cst_m$0))
                      if(caml_string_notequal(_a3__,cst_y))
                       {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a3__,extra[1]]}
                      else
                       if(y_field[1])
                        duplicates[1] = [0,_a3__,duplicates[1]];
                       else
                        {var fvalue=caml_call1(t_of_sexp$35,field_sexp);
                         y_field[1] = [0,fvalue]}
                     else
                      if(m_field[1])
                       duplicates[1] = [0,_a3__,duplicates[1]];
                      else
                       {var fvalue$0=caml_call1(t_of_sexp$35,field_sexp);
                        m_field[1] = [0,fvalue$0]}
                    else
                     if(d_field[1])
                      duplicates[1] = [0,_a3__,duplicates[1]];
                     else
                      {var fvalue$1=caml_call1(t_of_sexp$35,field_sexp);
                       d_field[1] = [0,fvalue$1]}
                    var param=tail;
                    continue}}}}
            caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$27,_a36_)}
          if(duplicates[1])
           var
            _a4e_=
             caml_call3
              (Sexplib0_Sexp_conv_error[11],tp_loc$27,duplicates[1],sexp);
          else
           if(extra[1])
            var
             _a4e_=
              caml_call3(Sexplib0_Sexp_conv_error[12],tp_loc$27,extra[1],sexp);
           else
            {var _a3$_=y_field[1],_a4a_=m_field[1],_a4b_=d_field[1];
             if(_a3$_)
              if(_a4a_)
               if(_a4b_)
                var
                 d_value=_a4b_[1],
                 m_value=_a4a_[1],
                 y_value=_a3$_[1],
                 _a4e_=[0,y_value,m_value,d_value],
                 switch$0=1;
               else
                var switch$0=0;
              else
               var switch$0=0;
             else
              var switch$0=0;
             if(! switch$0)
              var
               _a4e_=
                caml_call3
                 (Sexplib0_Sexp_conv_error[14],
                  tp_loc$27,
                  sexp,
                  [0,
                   [0,0 === y_field[1]?1:0,cst_y$0],
                   [0,
                    [0,0 === m_field[1]?1:0,cst_m$1],
                    [0,[0,0 === d_field[1]?1:0,cst_d$0],0]]])}
          break}}
      var _a4c_=_a4e_[3],_a4d_=of_int_exn$5(_a4e_[2]);
      return create_exn(_a4e_[1],_a4d_,_a4c_)}
    function t_of_sexp$68(s)
     {try
       {var _a35_=_Zi_(s);return _a35_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === _Oe_)throw exn;
        if(exn[1] === Stdlib[6]){var a=exn[2];return caml_call2(_Of_,a,s)}
        throw exn}}
    function sexp_of_t$81(t){return [0,to_string$21(t)]}
    function compare$61(t1,t2)
     {var n=caml_call2(compare$32,t1 >>> 16 | 0,t2 >>> 16 | 0);
      if(caml_call2(_Nu_,n,0))return n;
      var _a34_=month(t2),n$0=caml_call2(compare$60,month(t1),_a34_);
      return caml_call2(_Nu_,n$0,0)
              ?n$0
              :caml_call2(compare$32,t1 & 255,t2 & 255)}
    var
     include$100=caml_call2(_hu_[1][1],compare$61,sexp_of_t$81),
     comparator$19=include$100[1],
     include$101=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$67,
         bin_write_t$68,
         bin_read_t$134,
         bin_read_t$135,
         bin_shape_t$88,
         bin_writer_t$77,
         bin_reader_t$77,
         bin_t$77,
         compare$61,
         t_of_sexp$68,
         sexp_of_t$81,
         comparator$19]),
     Map$17=include$101[1],
     Set$17=include$101[2],
     C$0=
      _xA_
       ([0,
         bin_size_t$67,
         bin_write_t$68,
         bin_read_t$134,
         bin_read_t$135,
         bin_shape_t$88,
         bin_writer_t$77,
         bin_reader_t$77,
         bin_t$77,
         t_of_sexp$68,
         sexp_of_t$81,
         comparator$19]),
     symbol$164=C$0[1],
     symbol$165=C$0[2],
     symbol$166=C$0[3],
     symbol$167=C$0[4],
     symbol$168=C$0[5],
     symbol$169=C$0[6],
     equal$33=C$0[7],
     compare$62=C$0[8],
     min$13=C$0[9],
     max$13=C$0[10],
     ascending$13=C$0[11],
     descending$13=C$0[12],
     between$13=C$0[13],
     clamp_exn$13=C$0[14],
     clamp$13=C$0[15],
     validate_lbound$13=C$0[16],
     validate_ubound$13=C$0[17],
     validate_bound$13=C$0[18],
     Replace_polymorphic_compare$12=C$0[19],
     comparator$20=C$0[20],
     Map$18=C$0[21],
     Set$18=C$0[22],
     symbol$170=C$0[6],
     symbol$171=C$0[5],
     symbol$172=C$0[4],
     symbol$173=C$0[3],
     symbol$174=C$0[2],
     symbol$175=C$0[1],
     O$1=[0,symbol$175,symbol$174,symbol$173,symbol$172,symbol$171,symbol$170];
    function compare$63(a,b){return caml_call2(compare$62,a,b)}
    var
     include$102=
      Make_binable
       ([0,
         hash_fold_t$16,
         bin_size_t$67,
         bin_write_t$68,
         bin_read_t$134,
         bin_read_t$135,
         bin_shape_t$88,
         bin_writer_t$77,
         bin_reader_t$77,
         bin_t$77,
         t_of_sexp$68,
         compare$63,
         sexp_of_t$81,
         hash$36]),
     hash_fold_t$38=include$102[1],
     hash$37=include$102[2],
     hashable$13=include$102[3],
     Table$15=include$102[4],
     Hash_set$15=include$102[5],
     Hash_queue$13=include$102[6],
     include$103=
      caml_call1(Base_Pretty_printer[2],[0,module_name$8,to_string$21]),
     _Zj_=include$103[1],
     unix_epoch=create_exn(1970,0,1);
    function of_year(y)
     {var
       _a31_=caml_call2(symbol$61,y,400),
       _a32_=caml_call2(symbol$61,y,100),
       _a33_=caml_call2(symbol$61,y,4);
      return caml_call2
              (symbol$54,
               caml_call2
                (symbol$55,
                 caml_call2(symbol$54,caml_call2(symbol$56,365,y),_a33_),
                 _a32_),
               _a31_)}
    function of_date(date)
     {var
       m=
        caml_call2(symbol$60,caml_call2(symbol$54,to_int$5(month(date)),9),12),
       y=caml_call2(symbol$55,date >>> 16 | 0,caml_call2(symbol$61,m,10)),
       _a3Z_=caml_call2(symbol$55,date & 255,1),
       _a30_=
        caml_call2
         (symbol$61,caml_call2(symbol$54,caml_call2(symbol$56,m,306),5),10);
      return caml_call2
              (symbol$54,caml_call2(symbol$54,of_year(y),_a30_),_a3Z_)}
    var
     c_10_000=caml_call1(of_int$3,10000),
     c_14_780=caml_call1(of_int$3,14780),
     c_3_652_425=caml_call1(of_int$3,3652425);
    function to_date(days)
     {var
       y=
        caml_call1
         (to_int_exn$2,
          caml_call2
           (symbol$106,
            caml_call2
             (symbol$99,
              caml_call2(symbol$101,c_10_000,caml_call1(of_int$3,days)),
              c_14_780),
            c_3_652_425)),
       ddd=caml_call2(symbol$55,days,of_year(y));
      if(caml_call2(symbol$52,ddd,0))
       var
        y$0=caml_call2(symbol$55,y,1),
        y$1=y$0,
        ddd$0=caml_call2(symbol$55,days,of_year(y$0));
      else
       var y$1=y,ddd$0=ddd;
      var
       mi=
        caml_call2
         (symbol$61,
          caml_call2(symbol$54,caml_call2(symbol$56,100,ddd$0),52),
          3060),
       y$2=
        caml_call2
         (symbol$54,y$1,caml_call2(symbol$61,caml_call2(symbol$54,mi,2),12)),
       m=
        caml_call2
         (symbol$54,caml_call2(symbol$60,caml_call2(symbol$54,mi,2),12),1),
       d=
        caml_call2
         (symbol$54,
          caml_call2
           (symbol$55,
            ddd$0,
            caml_call2
             (symbol$61,
              caml_call2(symbol$54,caml_call2(symbol$56,mi,306),5),
              10)),
          1);
      return create_exn(y$2,of_int_exn$5(m),d)}
    var unix_epoch$0=of_date(unix_epoch);
    function add_days(t,days){return caml_call2(symbol$54,t,days)}
    function diff$4(t1,t2){return caml_call2(symbol$55,t1,t2)}
    var Days=[0,of_date,to_date,diff$4,add_days,unix_epoch$0];
    function add_days$0(t,days)
     {var _a3X_=caml_call1(Days[1],t),_a3Y_=caml_call2(Days[4],_a3X_,days);
      return caml_call1(Days[2],_a3Y_)}
    function diff$5(t1,t2)
     {var _a3V_=caml_call1(Days[1],t2),_a3W_=caml_call1(Days[1],t1);
      return caml_call2(Days[3],_a3W_,_a3V_)}
    function add_months(t,n)
     {var
       total_months=to_int$5(month(t)) + n | 0,
       y=(t >>> 16 | 0) + caml_call2(symbol$59,total_months,12) | 0,
       m=caml_call2(symbol$60,total_months,12);
      if(caml_call2(symbol$50,m,0))
       var y$0=y - 1 | 0,m$0=m + 12 | 0;
      else
       var y$0=y,m$0=m;
      var m$1=of_int_exn$5(m$0);
      function try_create(d)
       {var d$0=d;
        for(;;)
         try
          {var _a3T_=create_exn(y$0,m$1,d$0);return _a3T_}
         catch(_a3U_)
          {if(caml_call2(symbol$48,d$0,1))
            {var d$1=d$0 - 1 | 0,d$0=d$1;continue}
           throw [0,Assert_failure,_Zk_]}}
      return try_create(t & 255)}
    function add_years(t,n){return add_months(t,n * 12 | 0)}
    var table$0=_Zl_.slice();
    function day_of_week(t)
     {var
       m=to_int$5(month(t)),
       y=caml_call2(symbol$52,m,3)?(t >>> 16 | 0) - 1 | 0:t >>> 16 | 0,
       _a3S_=m - 1 | 0;
      return of_int_exn$4
              (caml_call2
                (symbol$60,
                 ((((y + (y / 4 | 0) | 0) - (y / 100 | 0) | 0)
                   +
                   (y / 400 | 0)
                   |
                   0)
                  +
                  caml_check_bound(table$0,_a3S_)[1 + _a3S_]
                  |
                  0)
                 +
                 (t & 255)
                 |
                 0,
                 7))}
    var non_leap_year_table=_Zm_.slice(),leap_year_table=_Zn_.slice();
    function ordinal_date(t)
     {var
       table=is_leap_year(t >>> 16 | 0)?leap_year_table:non_leap_year_table,
       _a3R_=to_int$5(month(t)) - 1 | 0,
       offset=caml_check_bound(table,_a3R_)[1 + _a3R_];
      return (t & 255) + offset | 0}
    function last_week_of_year(y)
     {var first_of_year=create_exn(y,0,1);
      function is(t,day){return caml_call2(equal$31,day_of_week(t),day)}
      if(! is(first_of_year,4))
       {var switch$0=is_leap_year(y)?is(first_of_year,3)?0:1:1;
        if(switch$0)return 52}
      return 53}
    function call_with_week_and_year(t,f)
     {var
       ordinal=ordinal_date(t),
       weekday=iso_8601_weekday_number(day_of_week(t)),
       week=((ordinal - weekday | 0) + 10 | 0) / 7 | 0,
       year=t >>> 16 | 0;
      return caml_call2(symbol$52,week,1)
              ?caml_call2(f,last_week_of_year(year - 1 | 0),year - 1 | 0)
              :caml_call2(symbol$51,week,last_week_of_year(year))
                ?caml_call2(f,1,year + 1 | 0)
                :caml_call2(f,week,year)}
    function week_number_and_year(t)
     {return call_with_week_and_year
              (t,function(week,year){return [0,week,year]})}
    function week_number(t)
     {return call_with_week_and_year(t,function(week,param){return week})}
    function is_weekend(t){return is_sun_or_sat(day_of_week(t))}
    function is_weekday(t){return 1 - is_weekend(t)}
    function is_business_day(t,is_holiday)
     {var _a3P_=is_weekday(t),_a3Q_=_a3P_?1 - caml_call1(is_holiday,t):_a3P_;
      return _a3Q_}
    function diff_weekend_days(t1,t2)
     {if(caml_call2(symbol$168,t1,t2))return - diff_weekend_days(t2,t1) | 0;
      var
       diff=diff$5(t1,t2),
       d1=day_of_week(t1),
       d2=day_of_week(t2),
       _a3M_=to_int$4(d2),
       num_satsun_crossings=
        caml_call2(symbol$52,to_int$4(d1),_a3M_)
         ?1 + (diff / 7 | 0) | 0
         :diff / 7 | 0,
       _a3N_=caml_call2(symbol$154,d1,0)?-1:0,
       _a3O_=caml_call2(symbol$154,d2,0)?1:0;
      return ((num_satsun_crossings * 2 | 0) + _a3O_ | 0) + _a3N_ | 0}
    function diff_weekdays(t1,t2)
     {var _a3L_=diff_weekend_days(t1,t2);return diff$5(t1,t2) - _a3L_ | 0}
    function add_days_skipping(t,skip,n)
     {var
       step=caml_call2(symbol$48,n,0)?1:-1,
       k$1=caml_call1(_Gk_,n),
       t$0=t,
       k=k$1;
      for(;;)
       {var t$1=add_days$0(t$0,step);
        if(caml_call1(skip,t$0)){var t$0=t$1;continue}
        if(caml_call2(symbol$50,k,0))return t$0;
        var k$0=k - 1 | 0,t$0=t$1,k=k$0;
        continue}}
    function add_weekdays(t,n){return add_days_skipping(t,is_weekend,n)}
    function add_business_days(t,is_holiday,n)
     {return add_days_skipping
              (t,
               function(d)
                {var _a3K_=is_weekend(d);
                 return _a3K_?_a3K_:caml_call1(is_holiday,d)},
               n)}
    function dates_between(t1,t)
     {var t$0=t,l=0;
      for(;;)
       {if(caml_call2(symbol$168,t$0,t1))return l;
        var l$0=[0,t$0,l],t$1=add_days$0(t$0,-1),t$0=t$1,l=l$0;
        continue}}
    function weekdays_between(min,max)
     {var all_dates=dates_between(min,max);
      function _a3J_(first_date)
       {var
         first_weekday=day_of_week(first_date),
         date_and_weekdays=
          caml_call2
           (_qA_,
            all_dates,
            function(i,date){return [0,date,shift(first_weekday,i)]});
        return caml_call2
                (_q1_,
                 date_and_weekdays,
                 function(param)
                  {var weekday=param[2],date=param[1];
                   return is_sun_or_sat(weekday)?0:[0,date]})}
      return caml_call3(_yk_,caml_call1(_p8_,all_dates),0,_a3J_)}
    function business_dates_between(min,max,is_holiday)
     {function _a3I_(d){return 1 - caml_call1(is_holiday,d)}
      return caml_call2(_pX_,weekdays_between(min,max),_a3I_)}
    function previous_weekday(t)
     {var t$0=t;
      for(;;)
       {var t$1=add_days$0(t$0,-1);
        if(is_weekday(t$1))return t$1;
        var t$0=t$1;
        continue}}
    function following_weekday(t)
     {var t$0=t;
      for(;;)
       {var t$1=add_days$0(t$0,1);
        if(is_weekday(t$1))return t$1;
        var t$0=t$1;
        continue}}
    function first_strictly_after(t,dow)
     {var
       dow$0=to_int$4(dow),
       tplus1=add_days$0(t,1),
       cur=to_int$4(day_of_week(tplus1)),
       diff=((dow$0 + 7 | 0) - cur | 0) % 7 | 0;
      return add_days$0(tplus1,diff)}
    function gen_uniform_incl(d1,d2)
     {if(caml_call2(symbol$167,d1,d2))
       {var
         _a3E_=[0,[1,[0,_Zo_,[0,sexp_of_t$81(d2),0]]],0],
         _a3F_=[0,[1,[0,_Zp_,[0,sexp_of_t$81(d1),0]]],_a3E_];
        caml_call1
         (_on_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Date_gen_uniform_incl_bounds_are_crossed),
            _a3F_]])}
      function _a3G_(days){return add_days$0(d1,days)}
      var _a3H_=caml_call2(_Kg_,0,diff$5(d2,d1));
      return caml_call2(_vb_[10],_a3H_,_a3G_)}
    function gen_incl(d1,d2)
     {var
       _a3B_=[0,[0,18.,gen_uniform_incl(d1,d2)],0],
       _a3C_=[0,[0,1.,caml_call1(_vb_[9],d2)],_a3B_],
       _a3D_=[0,[0,1.,caml_call1(_vb_[9],d1)],_a3C_];
      return caml_call1(_vb_[64],_a3D_)}
    var
     _Zq_=of_string$17(cst_2100_01_01),
     quickcheck_generator$10=gen_incl(of_string$17(cst_1900_01_01),_Zq_);
    function _Zr_(t,param,hash){return caml_call2(hash_fold_t$38,hash,t)}
    var
     quickcheck_observer$9=caml_call1(_va_[1],_Zr_),
     quickcheck_shrinker$9=caml_call1(_u$_[3],0),
     Private$2=[0,leap_year_table,non_leap_year_table,ordinal_date];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$310);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Stable$6=
      [0,
       [0,
        hash_fold_t$16,
        hash$36,
        to_int$6,
        of_int_exn$6,
        bin_size_t$67,
        bin_write_t$68,
        bin_read_t$134,
        bin_read_t$135,
        bin_shape_t$88,
        bin_writer_t$77,
        bin_reader_t$77,
        bin_t$77,
        compare$61,
        t_of_sexp$68,
        sexp_of_t$81,
        comparator$19,
        Map$17,
        Set$17]],
     include$104=
      [0,
       bin_size_t$67,
       bin_write_t$68,
       bin_read_t$134,
       bin_read_t$135,
       bin_shape_t$88,
       bin_writer_t$77,
       bin_reader_t$77,
       bin_t$77,
       t_of_sexp$68,
       sexp_of_t$81,
       typerep_of_t$23,
       typename_of_t$22,
       hash_fold_t$38,
       hash$37,
       hashable$13,
       Table$15,
       Hash_set$15,
       Hash_queue$13,
       of_string$17,
       to_string$21,
       symbol$164,
       symbol$165,
       symbol$166,
       symbol$167,
       symbol$168,
       symbol$169,
       equal$33,
       compare$62,
       min$13,
       max$13,
       ascending$13,
       descending$13,
       between$13,
       clamp_exn$13,
       clamp$13,
       validate_lbound$13,
       validate_ubound$13,
       validate_bound$13,
       Replace_polymorphic_compare$12,
       comparator$20,
       Map$18,
       Set$18,
       _Zj_,
       create_exn,
       of_string_iso8601_basic,
       to_string_iso8601_basic,
       to_string_american,
       day,
       month,
       year,
       day_of_week,
       week_number_and_year,
       week_number,
       is_weekend,
       is_weekday,
       is_business_day,
       add_days$0,
       add_months,
       add_years,
       diff$5,
       diff_weekdays,
       diff_weekend_days,
       add_weekdays,
       add_business_days,
       add_days_skipping,
       dates_between,
       business_dates_between,
       weekdays_between,
       previous_weekday,
       following_weekday,
       first_strictly_after,
       days_in_month,
       is_leap_year,
       unix_epoch,
       quickcheck_generator$10,
       quickcheck_observer$9,
       quickcheck_shrinker$9,
       gen_incl,
       gen_uniform_incl,
       Days,
       Stable$6,
       O$1,
       Private$2];
    caml_register_global(4441,include$104,"Core_kernel__Date0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$311);
    caml_call1(Expect_test_collector[4][1],cst_src_date0_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$312,cst$119);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$313);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Date0_intf=[0];
    caml_register_global
     (4442,Core_kernel_Date0_intf,"Core_kernel__Date0_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$314);
    caml_call1(Expect_test_collector[4][1],cst_src_ofday_helpers_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$315,cst$120);
    function suffixes(char$0)
     {function _a3w_(suffix)
       {var _a3A_=[0,caml_call1(_CA_,suffix),0];
        return [0,caml_call1(_CB_,suffix),_a3A_]}
      var
       _a3x_=[0,caml_call2(_fE_,_Zs_,char$0),0],
       _a3y_=[0,caml_call2(_fE_,_Zt_,char$0),_a3x_],
       _a3z_=[0,caml_call2(_fE_,_Zu_,char$0),_a3y_];
      return caml_call2(_ql_,[0,caml_call2(_fE_,_Zv_,char$0),_a3z_],_a3w_)}
    var
     am_suffixes=[246,function(_a3v_){return suffixes(65)}],
     pm_suffixes=[246,function(_a3u_){return suffixes(80)}];
    function find_suffix(string,suffixes)
     {var suffixes$0=suffixes;
      for(;;)
       {if(suffixes$0)
         {var suffixes$1=suffixes$0[2],suffix=suffixes$0[1];
          if(caml_call2(_CW_,string,suffix))return suffix;
          var suffixes$0=suffixes$1;
          continue}
        return cst$121}}
    function has_colon(string,pos,until)
     {var _a3t_=caml_call2(_Nt_,pos,until);
      return _a3t_?caml_call2(_FS_,58,caml_string_get(string,pos)):_a3t_}
    function decrement_length_if_ends_in_space(string,len)
     {if(caml_call2(_Ns_,len,0))
       if(caml_call2(_FS_,32,caml_string_get(string,len - 1 | 0)))
        return len - 1 | 0;
      return len}
    function invalid_string(string,reason)
     {var
       _a3r_=[0,caml_call1(Sexplib0_Sexp_conv[7],reason),0],
       _a3s_=[0,caml_call1(Sexplib0_Sexp_conv[7],string),_a3r_];
      return caml_call1
              (_on_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Time_Ofday_invalid_string),
                 _a3s_]])}
    function parse$0(string,f)
     {var
       len=caml_ml_string_length(string),
       _a3i_=caml_obj_tag(am_suffixes),
       _a3j_=
        250 === _a3i_
         ?am_suffixes[1]
         :246 === _a3i_
           ?caml_call1(CamlinternalLazy[2],am_suffixes)
           :am_suffixes,
       match$0=find_suffix(string,_a3j_),
       _a3k_=caml_obj_tag(pm_suffixes),
       _a3l_=
        250 === _a3k_
         ?pm_suffixes[1]
         :246 === _a3k_
           ?caml_call1(CamlinternalLazy[2],pm_suffixes)
           :pm_suffixes,
       match$1=find_suffix(string,_a3l_);
      if(caml_string_notequal(match$0,cst$122))
       var switch$0=0;
      else
       if(caml_string_notequal(match$1,cst$125))
        var switch$0=0;
       else
        var am_or_pm=760146199,until=len,switch$0=1;
      if(! switch$0)
       if(caml_string_notequal(match$1,cst$123))
        {if(caml_string_notequal(match$0,cst$124))
          throw [0,Assert_failure,_Zw_];
         var
          am_or_pm=760152914,
          until=
           decrement_length_if_ends_in_space
            (string,len - caml_ml_string_length(match$1) | 0)}
       else
        var
         until$0=
          decrement_length_if_ends_in_space
           (string,len - caml_ml_string_length(match$0) | 0),
         am_or_pm=760149569,
         until=until$0;
      var pos$0=0;
      if(has_colon(string,1,until))
       var
        pos$1=2,
        hr=read_1_digit_int$0(string,pos$0),
        expect_minutes_and_seconds=1047113856;
      else
       if(has_colon(string,2,until))
        var
         pos$1=3,
         hr=read_2_digit_int$0(string,pos$0),
         expect_minutes_and_seconds=1047113856;
       else
        if(caml_call2(_Nr_,1,until))
         var
          pos$1=1,
          hr=read_1_digit_int$0(string,pos$0),
          expect_minutes_and_seconds=866457669;
        else
         if(caml_call2(_Nr_,2,until))
          var
           pos$1=2,
           hr=read_2_digit_int$0(string,pos$0),
           expect_minutes_and_seconds=866457669;
         else
          var
           hr$1=read_2_digit_int$0(string,pos$0),
           pos$1=2,
           hr=hr$1,
           expect_minutes_and_seconds=-316951979;
      if(866457669 === expect_minutes_and_seconds)
       var pos$2=pos$1,min=0,expect_seconds=0;
      else
       if(has_colon(string,pos$1 + 2 | 0,until))
        var
         _a3p_=
          1047113856 <= expect_minutes_and_seconds
           ?1
           :invalid_string(string,cst_expected_end_of_string_after_minutes),
         pos$2=pos$1 + 3 | 0,
         min=read_2_digit_int$0(string,pos$1),
         expect_seconds=_a3p_;
       else
        if(caml_call2(_Nr_,pos$1 + 2 | 0,until))
         var
          pos$2=pos$1 + 2 | 0,
          min=read_2_digit_int$0(string,pos$1),
          expect_seconds=0;
        else
         var
          _a3q_=
           invalid_string
            (string,
             cst_expected_colon_or_am_pm_suffix_with_optional_space_after_minutes),
          pos$2=_a3q_[1],
          min=_a3q_[2],
          expect_seconds=_a3q_[3];
      if(0 === expect_seconds)
       if(caml_call2(_Nr_,pos$2,until))
        var sec=0,subsec_pos=pos$2,subsec_len=0,subsec_nonzero=0;
       else
        var
         _a3m_=
          invalid_string(string,cst_BUG_did_not_expect_seconds_but_found_them),
         sec=_a3m_[1],
         subsec_pos=_a3m_[2],
         subsec_len=_a3m_[3],
         subsec_nonzero=_a3m_[4];
      else
       if(caml_call2(_Ns_,pos$2 + 2 | 0,until))
        var
         _a3n_=invalid_string(string,cst_expected_two_digits_of_seconds),
         sec=_a3n_[1],
         subsec_pos=_a3n_[2],
         subsec_len=_a3n_[3],
         subsec_nonzero=_a3n_[4];
       else
        {var sec$1=read_2_digit_int$0(string,pos$2),pos$3=pos$2 + 2 | 0;
         if(caml_call2(_Nr_,pos$3,until))
          var sec=sec$1,subsec_pos=pos$3,subsec_len=0,subsec_nonzero=0;
         else
          {if(caml_call2(_Nt_,pos$3,until))
            if(caml_call2(_FS_,46,caml_string_get(string,pos$3)))
             {var pos$4=pos$3 + 1 | 0,nonzero=[0,0],_a3g_=until - 1 | 0;
              if(! (_a3g_ < pos$4))
               {var pos=pos$4;
                for(;;)
                 {var
                   match=caml_string_get(string,pos),
                   switcher=match - 48 | 0,
                   switch$2=
                    9 < switcher >>> 0
                     ?47 === switcher
                       ?1
                       :(invalid_string
                          (string,
                           cst_expected_digits_and_or_underscores_after_decimal_point),
                         0)
                     :0 === switcher?1:(nonzero[1] = 1,0),
                   _a3h_=pos + 1 | 0;
                  if(_a3g_ !== pos){var pos=_a3h_;continue}
                  break}}
              var
               sec=sec$1,
               subsec_pos=pos$3,
               subsec_len=until - pos$3 | 0,
               subsec_nonzero=nonzero[1],
               switch$1=1}
            else
             var switch$1=0;
           else
            var switch$1=0;
           if(! switch$1)
            var
             _a3o_=
              invalid_string
               (string,
                cst_expected_decimal_point_or_am_pm_suffix_after_seconds),
             sec=_a3o_[1],
             subsec_pos=_a3o_[2],
             subsec_len=_a3o_[3],
             subsec_nonzero=_a3o_[4]}}
      if(760149569 === am_or_pm)
       {if(caml_call2(_Nt_,hr,1))
         var switch$3=0;
        else
         if(caml_call2(_Ns_,hr,12))
          var switch$3=0;
         else
          if(caml_call2(_Nr_,hr,12))
           var hr$0=0,switch$3=1;
          else
           var hr$0=hr,switch$3=1;
        if(! switch$3)var hr$0=invalid_string(string,cst_hours_out_of_bounds)}
      else
       if(760152914 <= am_or_pm)
        {if(caml_call2(_Nt_,hr,1))
          var switch$4=0;
         else
          if(caml_call2(_Ns_,hr,12))
           var switch$4=0;
          else
           if(caml_call2(_Nr_,hr,12))
            var hr$0=12,switch$4=1;
           else
            var hr$0=hr + 12 | 0,switch$4=1;
         if(! switch$4)
          var hr$0=invalid_string(string,cst_hours_out_of_bounds$0)}
       else
        if(866457669 === expect_minutes_and_seconds)
         var hr$0=invalid_string(string,cst_hours_without_minutes_or_AM_PM);
        else
         if(caml_call2(_Ns_,hr,24))
          var hr$0=invalid_string(string,cst_hours_out_of_bounds$1);
         else
          {if(caml_call2(_Nr_,hr,24))
            {if(caml_call2(_Ns_,min,0))
              var switch$6=1;
             else
              if(caml_call2(_Ns_,sec,0))
               var switch$6=1;
              else
               if(subsec_nonzero)
                var switch$6=1;
               else
                var switch$5=0,switch$6=0;
             if(switch$6)
              var
               hr$0=invalid_string(string,cst_time_is_past_24_00_00),
               switch$5=1}
           else
            var switch$5=0;
           if(! switch$5)var hr$0=hr}
      var
       min$0=
        caml_call2(_Ns_,min,59)
         ?invalid_string(string,cst_minutes_out_of_bounds)
         :min,
       sec$0=
        caml_call2(_Ns_,sec,60)
         ?invalid_string(string,cst_seconds_out_of_bounds)
         :sec;
      if(caml_call2(_Nr_,sec$0,60))
       var switch$7=0;
      else
       if(subsec_nonzero)
        var subsec_len$0=subsec_len,switch$7=1;
       else
        var switch$7=0;
      if(! switch$7)var subsec_len$0=0;
      return caml_call6(f,string,hr$0,min$0,sec$0,subsec_pos,subsec_len$0)}
    function parse_iso8601_extended(pos$0,len,str,f)
     {var match$0=caml_call4(_iJ_,pos$0,len,0,caml_ml_string_length(str));
      if(0 === match$0[0])
       var z=match$0[1],match$1=z;
      else
       var s=match$0[1],match$1=caml_call3(_Pg_,_Zy_,caml_call1(_n8_,s),0);
      var len$0=match$1[2],pos$1=match$1[1];
      if(caml_call2(_Nt_,len$0,2))return caml_call1(_Gg_,cst_len_2);
      var hr=read_2_digit_int$0(str,pos$1);
      if(caml_call2(_Ns_,hr,24))caml_call1(_Gg_,cst_hour_24);
      if(caml_call2(_Nr_,len$0,2))
       return caml_call6(f,str,hr,0,0,pos$1 + len$0 | 0,0);
      if(caml_call2(_Nt_,len$0,5))return caml_call1(_Gg_,cst_2_len_5);
      if(caml_call2(_FS_,caml_string_get(str,pos$1 + 2 | 0),58))
       {var min=read_2_digit_int$0(str,pos$1 + 3 | 0);
        if(caml_call2(_Np_,min,60))caml_call1(_Gg_,cst_minute_60);
        var
         _a3c_=caml_call2(_Nr_,hr,24),
         _a3d_=_a3c_?caml_call2(_Nu_,min,0):_a3c_;
        if(_a3d_)caml_call1(_Gg_,cst_24_hours_and_non_zero_minute);
        if(caml_call2(_Nr_,len$0,5))
         return caml_call6(f,str,hr,min,0,pos$1 + len$0 | 0,0);
        if(caml_call2(_Nt_,len$0,8))return caml_call1(_Gg_,cst_5_len_8);
        if(caml_call2(_FS_,caml_string_get(str,pos$1 + 5 | 0),58))
         {var sec=read_2_digit_int$0(str,pos$1 + 6 | 0);
          if(caml_call2(_Ns_,sec,60))caml_call3(_Pg_,_Zx_,sec,0);
          var
           _a3e_=caml_call2(_Nr_,hr,24),
           _a3f_=_a3e_?caml_call2(_Nu_,sec,0):_a3e_;
          if(_a3f_)caml_call1(_Gg_,cst_24_hours_and_non_zero_seconds);
          if(caml_call2(_Nr_,len$0,8))
           return caml_call6(f,str,hr,min,sec,pos$1 + len$0 | 0,0);
          if(caml_call2(_Nr_,len$0,9))return caml_call1(_Gg_,cst_length_9);
          var match$2=caml_string_get(str,pos$1 + 8 | 0);
          if(44 !== match$2)
           if(46 !== match$2)
            return caml_call1(_Gg_,cst_missing_subsecond_separator);
          var
           subsec_pos=pos$1 + 8 | 0,
           until=pos$1 + len$0 | 0,
           pos$2=subsec_pos + 1 | 0,
           nonzero=[0,0],
           _a3a_=until - 1 | 0;
          if(! (_a3a_ < pos$2))
           {var pos=pos$2;
            for(;;)
             {var
               match=caml_string_get(str,pos),
               switch$0=
                49 <= match?58 <= match?0:(nonzero[1] = 1,1):48 <= match?1:0;
              if(! switch$0)
               invalid_string(str,cst_expected_digits_after_decimal_point);
              var _a3b_=pos + 1 | 0;
              if(_a3a_ !== pos){var pos=_a3b_;continue}
              break}}
          if(0 === nonzero[1])
           var switch$1=0;
          else
           if(caml_call2(_Nr_,sec,60))
            var subsec_len=0,switch$1=1;
           else
            if(caml_call2(_Nr_,hr,24))
             var
              subsec_len=caml_call1(_Gg_,cst_24_hours_and_non_zero_subseconds),
              switch$1=1;
            else
             var switch$1=0;
          if(! switch$1)var subsec_len=len$0 - 8 | 0;
          return caml_call6(f,str,hr,min,sec,subsec_pos,subsec_len)}
        return caml_call1(_Gg_,cst_second_colon_missing)}
      return caml_call1(_Gg_,cst_first_colon_missing)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$316);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Ofday_helpers=
      [0,
       parse$0,
       parse_iso8601_extended,
       invalid_string,
       am_suffixes,
       pm_suffixes];
    caml_register_global
     (4443,Core_kernel_Ofday_helpers,"Core_kernel__Ofday_helpers");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$317);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_internal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$318,cst$126);
    var
     _Zz_=Bin_prot_Std[1],
     _ZA_=Bin_prot_Std[2],
     _ZB_=Bin_prot_Std[3],
     _ZC_=Bin_prot_Std[4],
     _ZD_=Bin_prot_Std[5],
     _ZE_=Bin_prot_Std[6],
     _ZF_=Bin_prot_Std[7],
     _ZG_=Bin_prot_Std[8],
     _ZH_=Bin_prot_Std[9],
     _ZI_=Bin_prot_Std[10],
     _ZJ_=Bin_prot_Std[11],
     _ZK_=Bin_prot_Std[12],
     _ZL_=Bin_prot_Std[13],
     _ZM_=Bin_prot_Std[14],
     _ZN_=Bin_prot_Std[15],
     _ZO_=Bin_prot_Std[16],
     _ZP_=Bin_prot_Std[17],
     _ZQ_=Bin_prot_Std[18],
     _ZR_=Bin_prot_Std[19],
     _ZS_=Bin_prot_Std[20],
     _ZT_=Bin_prot_Std[21],
     _ZU_=Bin_prot_Std[22],
     _ZV_=Bin_prot_Std[23],
     _ZW_=Bin_prot_Std[24],
     _ZX_=Bin_prot_Std[25],
     _ZY_=Bin_prot_Std[26],
     _ZZ_=Bin_prot_Std[27],
     _Z0_=Bin_prot_Std[28],
     _Z1_=Bin_prot_Std[29],
     _Z2_=Bin_prot_Std[30],
     _Z3_=Bin_prot_Std[31],
     _Z4_=Bin_prot_Std[32],
     _Z5_=Bin_prot_Std[33],
     _Z6_=Bin_prot_Std[34],
     _Z7_=Bin_prot_Std[35],
     _Z8_=Bin_prot_Std[36],
     _Z9_=Bin_prot_Std[37],
     _Z__=Bin_prot_Std[38],
     _Z$_=Bin_prot_Std[39],
     __a_=Bin_prot_Std[40],
     __b_=Bin_prot_Std[41],
     __c_=Bin_prot_Std[42],
     __d_=Bin_prot_Std[43],
     __e_=Bin_prot_Std[44],
     __f_=Bin_prot_Std[45],
     __g_=Bin_prot_Std[46],
     __h_=Bin_prot_Std[47],
     __i_=Bin_prot_Std[48],
     __j_=Bin_prot_Std[49],
     __k_=Bin_prot_Std[50],
     __l_=Bin_prot_Std[51],
     __m_=Bin_prot_Std[52],
     __n_=Bin_prot_Std[53],
     __o_=Bin_prot_Std[54],
     __p_=Bin_prot_Std[55],
     __q_=Bin_prot_Std[56],
     __r_=Bin_prot_Std[57],
     __s_=Bin_prot_Std[58],
     __t_=Bin_prot_Std[59],
     __u_=Bin_prot_Std[60],
     __v_=Bin_prot_Std[61],
     __w_=Bin_prot_Std[62],
     __x_=Bin_prot_Std[63],
     __y_=Bin_prot_Std[64],
     __z_=Bin_prot_Std[65],
     __A_=Bin_prot_Std[66],
     __B_=Bin_prot_Std[67],
     __C_=Bin_prot_Std[68],
     __D_=Bin_prot_Std[69],
     __E_=Bin_prot_Std[70],
     __F_=Bin_prot_Std[71],
     __G_=Bin_prot_Std[72],
     __H_=Bin_prot_Std[73],
     __I_=Bin_prot_Std[74],
     __J_=Bin_prot_Std[75],
     __K_=Bin_prot_Std[76],
     __L_=Bin_prot_Std[77],
     __M_=Bin_prot_Std[78],
     __N_=Bin_prot_Std[79],
     __O_=Bin_prot_Std[80],
     __P_=Bin_prot_Std[81],
     __Q_=Bin_prot_Std[82],
     __R_=Bin_prot_Std[83],
     __S_=Bin_prot_Std[84],
     __T_=Bin_prot_Std[85],
     __U_=Bin_prot_Std[86],
     __V_=Bin_prot_Std[87],
     __W_=Bin_prot_Std[88],
     __X_=Bin_prot_Std[89],
     __Y_=Bin_prot_Std[90],
     __Z_=Bin_prot_Std[91],
     __0_=Bin_prot_Std[92],
     __1_=Bin_prot_Std[93],
     __2_=Bin_prot_Std[94],
     __3_=Bin_prot_Std[95],
     __4_=Bin_prot_Std[96],
     __5_=Bin_prot_Std[97],
     __6_=Bin_prot_Std[98],
     __7_=Bin_prot_Std[99],
     __8_=Bin_prot_Std[100],
     __9_=Bin_prot_Std[101],
     ____=Bin_prot_Std[102],
     __$_=Bin_prot_Std[103],
     _$a_=Bin_prot_Std[104],
     _$b_=Bin_prot_Std[105],
     _$c_=Bin_prot_Std[106],
     _$d_=Bin_prot_Std[107],
     _$e_=Bin_prot_Std[108],
     _$f_=Bin_prot_Std[109],
     _$g_=Bin_prot_Std[110],
     _$h_=Bin_prot_Std[111],
     _$i_=Bin_prot_Std[112],
     _$j_=Bin_prot_Std[113],
     _$k_=Bin_prot_Std[114],
     _$l_=Bin_prot_Std[115],
     _$m_=Bin_prot_Std[116],
     _$n_=Bin_prot_Std[117],
     _$o_=Bin_prot_Std[118],
     _$p_=Bin_prot_Std[119],
     _$q_=Bin_prot_Std[120],
     _$r_=Bin_prot_Std[121],
     _$s_=Bin_prot_Std[122],
     _$t_=Bin_prot_Std[123],
     _$u_=Bin_prot_Std[124],
     _$v_=Bin_prot_Std[125],
     _$w_=Bin_prot_Std[126],
     _$x_=Bin_prot_Std[127],
     _$y_=Bin_prot_Std[128],
     _$z_=Bin_prot_Std[129],
     _$A_=Bin_prot_Std[130],
     _$B_=Bin_prot_Std[131],
     _$C_=Bin_prot_Std[132],
     _$D_=Bin_prot_Std[133],
     _$E_=Bin_prot_Std[134],
     _$F_=Bin_prot_Std[135],
     _$G_=Bin_prot_Std[136],
     _$H_=Bin_prot_Std[137],
     _$I_=Bin_prot_Std[138],
     _$J_=Bin_prot_Std[139],
     _$K_=Bin_prot_Std[140],
     _$L_=Bin_prot_Std[141],
     _$M_=Bin_prot_Std[142],
     _$N_=Bin_prot_Std[143],
     _$O_=Bin_prot_Std[144],
     _$P_=Bin_prot_Std[145],
     _$Q_=Bin_prot_Std[146],
     _$R_=Bin_prot_Std[147],
     _$S_=Bin_prot_Std[148],
     _$T_=Bin_prot_Std[149],
     _$U_=Bin_prot_Std[150],
     _$V_=Bin_prot_Std[151],
     _$W_=Bin_prot_Std[152],
     _$X_=Bin_prot_Std[153],
     _$Y_=Bin_prot_Std[154],
     _$Z_=Bin_prot_Std[155],
     _$0_=Bin_prot_Std[156],
     _$1_=Bin_prot_Std[157],
     _$2_=Bin_prot_Std[158],
     _$3_=Bin_prot_Std[159],
     _$4_=Bin_prot_Std[160],
     _$5_=Bin_prot_Std[161],
     _$6_=Bin_prot_Std[162],
     _$7_=Bin_prot_Std[163],
     _$8_=Bin_prot_Std[164],
     _$9_=Bin_prot_Std[165],
     _$__=Bin_prot_Std[166],
     _$$_=Bin_prot_Std[167],
     _aaa_=Bin_prot_Std[168],
     _aab_=Bin_prot_Std[169],
     _aac_=Bin_prot_Std[170],
     _aad_=Bin_prot_Std[171],
     _aae_=Bin_prot_Std[172],
     _aaf_=Bin_prot_Std[173],
     _aag_=Bin_prot_Std[174],
     _aah_=Bin_prot_Std[175],
     _aai_=Bin_prot_Std[176],
     _aaj_=Bin_prot_Std[177],
     _aak_=Bin_prot_Std[178],
     _aal_=Bin_prot_Std[179],
     _aam_=Bin_prot_Std[180],
     _aan_=Bin_prot_Std[181],
     _aao_=Bin_prot_Std[182],
     _aap_=Bin_prot_Std[183],
     _aaq_=Bin_prot_Std[184],
     _aar_=Bin_prot_Std[185],
     _aas_=Bin_prot_Std[186],
     _aat_=Bin_prot_Std[187],
     _aau_=Bin_prot_Std[188],
     _aav_=Bin_prot_Std[189],
     _aaw_=Bin_prot_Std[190],
     _aax_=Bin_prot_Std[191],
     _aay_=Bin_prot_Std[192],
     _aaz_=Bin_prot_Std[193],
     _aaA_=Bin_prot_Std[194],
     _aaB_=Bin_prot_Std[195],
     _aaC_=Bin_prot_Std[196],
     _aaD_=Bin_prot_Std[197],
     _aaE_=Bin_prot_Std[198],
     _aaF_=Bin_prot_Std[199],
     _aaG_=Bin_prot_Std[200],
     _aaH_=Bin_prot_Std[201],
     _aaI_=Bin_prot_Std[202],
     _aaJ_=Bin_prot_Std[203],
     _aaK_=Bin_prot_Std[204],
     _aaL_=Bin_prot_Std[205],
     _aaM_=Bin_prot_Std[206],
     _aaN_=Bin_prot_Std[207],
     _aaO_=Bin_prot_Std[208],
     _aaP_=Bin_prot_Std[209],
     _aaQ_=Bin_prot_Std[210],
     _aaR_=Bin_prot_Std[211],
     _aaS_=Bin_prot_Std[212],
     _aaT_=Bin_prot_Std[213],
     _aaU_=Bin_prot_Std[214],
     _aaV_=Bin_prot_Std[215],
     _aaW_=Bin_prot_Std[216],
     _aaX_=Bin_prot_Std[217],
     _aaY_=Bin_prot_Std[218],
     _aaZ_=Base_Hash[13],
     _aa0_=_aaZ_[1],
     _aa1_=_aaZ_[2],
     _aa2_=_aaZ_[3],
     _aa3_=_aaZ_[4],
     _aa4_=_aaZ_[5],
     _aa5_=_aaZ_[6],
     _aa6_=_aaZ_[7],
     hash_fold_t$39=_aaZ_[8],
     _aa7_=_aaZ_[9],
     _aa8_=_aaZ_[10],
     _aa9_=_aaZ_[11],
     _aa__=_aaZ_[12],
     _aa$_=_aaZ_[13],
     _aba_=_aaZ_[14],
     _abb_=_aaZ_[15],
     _abc_=_aaZ_[16],
     _abd_=_aaZ_[17],
     _abe_=_aaZ_[18],
     _abf_=_aaZ_[19],
     _abg_=_aaZ_[20],
     _abh_=_aaZ_[21],
     _abi_=_aaZ_[22],
     _abj_=_aaZ_[23],
     _abk_=Base[162],
     _abl_=Base[163],
     _abm_=Base[156],
     _abn_=Base[157],
     _abo_=Base[152],
     _abp_=Base[153],
     _abq_=Base[146],
     _abr_=Base[147],
     _abs_=Base[142],
     _abt_=Base[143],
     _abu_=Base[137],
     _abv_=Base[138],
     _abw_=Base[131],
     _abx_=Base[132],
     _aby_=Base[126],
     _abz_=Base[127],
     _abA_=Base[120],
     _abB_=Base[121],
     _abC_=Base[114],
     _abD_=Base[115],
     _abE_=Base[108],
     _abF_=Base[109],
     _abG_=Base[103],
     _abH_=Base[101],
     _abI_=Base[102],
     _abJ_=Base[95],
     _abK_=Base[96],
     _abL_=Base[89],
     _abM_=Base[90],
     _abN_=caml_call1(Bin_prot_Shape[3][1],cst_a$79),
     _abO_=caml_call1(Bin_prot_Shape[4][1],cst_src_stable_internal_ml_42_25),
     _abP_=bin_shape_sexp_option(caml_call2(Bin_prot_Shape[15],_abO_,_abN_)),
     _abQ_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$80),0],
     _abR_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_option$1),_abQ_,_abP_],0],
     _abS_=caml_call1(Bin_prot_Shape[4][1],cst_src_stable_internal_ml_42_2),
     group$104=caml_call2(Bin_prot_Shape[6],_abS_,_abR_);
    function bin_shape_sexp_option$0(a)
     {var _a2$_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_option$2);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$104,_a2$_),[0,a,0])}
    function bin_size_sexp_option$0(size_of_a,v)
     {return bin_size_sexp_option(size_of_a,v)}
    function bin_write_sexp_option$0(write_a,buf,pos,v)
     {return bin_write_sexp_option(write_a,buf,pos,v)}
    function bin_writer_sexp_option$0(bin_writer_a)
     {function _a27_(v)
       {var _a28_=bin_writer_a[2];
        return function(_a29_,_a2__)
         {return bin_write_sexp_option$0(_a28_,v,_a29_,_a2__)}}
      return [0,
              function(v){return bin_size_sexp_option$0(bin_writer_a[1],v)},
              _a27_]}
    function bin_read_sexp_option$1(of_a,buf,pos_ref,vint)
     {return bin_read_sexp_option(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_option$2(of_a,buf,pos_ref)
     {return bin_read_sexp_option$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_option$0(bin_reader_a)
     {function _a26_(buf,pos_ref,vtag)
       {return bin_read_sexp_option$1(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_option$2(bin_reader_a[1],buf,pos_ref)},
              _a26_]}
    function bin_sexp_option$0(bin_a)
     {var
       _a24_=bin_reader_sexp_option$0(bin_a[3]),
       _a25_=bin_writer_sexp_option$0(bin_a[2]);
      return [0,bin_shape_sexp_option$0(bin_a[1]),_a25_,_a24_]}
    var
     _abT_=caml_call1(Bin_prot_Shape[3][1],cst_a$81),
     _abU_=caml_call1(Bin_prot_Shape[4][1],cst_src_stable_internal_ml_45_23),
     _abV_=bin_shape_sexp_list(caml_call2(Bin_prot_Shape[15],_abU_,_abT_)),
     _abW_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$82),0],
     _abX_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_list$1),_abW_,_abV_],0],
     _abY_=caml_call1(Bin_prot_Shape[4][1],cst_src_stable_internal_ml_45_2),
     group$105=caml_call2(Bin_prot_Shape[6],_abY_,_abX_);
    function bin_shape_sexp_list$0(a)
     {var _a23_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_list$2);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$105,_a23_),[0,a,0])}
    function bin_size_sexp_list$0(size_of_a,v)
     {return bin_size_sexp_list(size_of_a,v)}
    function bin_write_sexp_list$0(write_a,buf,pos,v)
     {return bin_write_sexp_list(write_a,buf,pos,v)}
    function bin_writer_sexp_list$0(bin_writer_a)
     {function _a2Z_(v)
       {var _a20_=bin_writer_a[2];
        return function(_a21_,_a22_)
         {return bin_write_sexp_list$0(_a20_,v,_a21_,_a22_)}}
      return [0,
              function(v){return bin_size_sexp_list$0(bin_writer_a[1],v)},
              _a2Z_]}
    function bin_read_sexp_list$1(of_a,buf,pos_ref,vint)
     {return bin_read_sexp_list(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_list$2(of_a,buf,pos_ref)
     {return bin_read_sexp_list$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_list$0(bin_reader_a)
     {function _a2Y_(buf,pos_ref,vtag)
       {return bin_read_sexp_list$1(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_list$2(bin_reader_a[1],buf,pos_ref)},
              _a2Y_]}
    function bin_sexp_list$0(bin_a)
     {var
       _a2W_=bin_reader_sexp_list$0(bin_a[3]),
       _a2X_=bin_writer_sexp_list$0(bin_a[2]);
      return [0,bin_shape_sexp_list$0(bin_a[1]),_a2X_,_a2W_]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$319);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Stable_internal=
      [0,
       _Zz_,
       _ZA_,
       _ZB_,
       _ZC_,
       _ZD_,
       _ZE_,
       _ZF_,
       _ZG_,
       _ZH_,
       _ZI_,
       _ZJ_,
       _ZK_,
       _ZL_,
       _ZM_,
       _ZN_,
       _ZO_,
       _ZP_,
       _ZQ_,
       _ZR_,
       _ZS_,
       _ZT_,
       _ZU_,
       _ZV_,
       _ZW_,
       _ZX_,
       _ZY_,
       _ZZ_,
       _Z0_,
       _Z1_,
       _Z2_,
       _Z3_,
       _Z4_,
       _Z5_,
       _Z6_,
       _Z7_,
       _Z8_,
       _Z9_,
       _Z__,
       _Z$_,
       __a_,
       __b_,
       __c_,
       __d_,
       __e_,
       __f_,
       __g_,
       __h_,
       __i_,
       __j_,
       __k_,
       __l_,
       __m_,
       __n_,
       __o_,
       __p_,
       __q_,
       __r_,
       __s_,
       __t_,
       __u_,
       __v_,
       __w_,
       __x_,
       __y_,
       __z_,
       __A_,
       __B_,
       __C_,
       __D_,
       __E_,
       __F_,
       __G_,
       __H_,
       __I_,
       __J_,
       __K_,
       __L_,
       __M_,
       __N_,
       __O_,
       __P_,
       __Q_,
       __R_,
       __S_,
       __T_,
       __U_,
       __V_,
       __W_,
       __X_,
       __Y_,
       __Z_,
       __0_,
       __1_,
       __2_,
       __3_,
       __4_,
       __5_,
       __6_,
       __7_,
       __8_,
       __9_,
       ____,
       __$_,
       _$a_,
       _$b_,
       _$c_,
       _$d_,
       _$e_,
       _$f_,
       _$g_,
       _$h_,
       _$i_,
       _$j_,
       _$k_,
       _$l_,
       _$m_,
       _$n_,
       _$o_,
       _$p_,
       _$q_,
       _$r_,
       _$s_,
       _$t_,
       _$u_,
       _$v_,
       _$w_,
       _$x_,
       _$y_,
       _$z_,
       _$A_,
       _$B_,
       _$C_,
       _$D_,
       _$E_,
       _$F_,
       _$G_,
       _$H_,
       _$I_,
       _$J_,
       _$K_,
       _$L_,
       _$M_,
       _$N_,
       _$O_,
       _$P_,
       _$Q_,
       _$R_,
       _$S_,
       _$T_,
       _$U_,
       _$V_,
       _$W_,
       _$X_,
       _$Y_,
       _$Z_,
       _$0_,
       _$1_,
       _$2_,
       _$3_,
       _$4_,
       _$5_,
       _$6_,
       _$7_,
       _$8_,
       _$9_,
       _$__,
       _$$_,
       _aaa_,
       _aab_,
       _aac_,
       _aad_,
       _aae_,
       _aaf_,
       _aag_,
       _aah_,
       _aai_,
       _aaj_,
       _aak_,
       _aal_,
       _aam_,
       _aan_,
       _aao_,
       _aap_,
       _aaq_,
       _aar_,
       _aas_,
       _aat_,
       _aau_,
       _aav_,
       _aaw_,
       _aax_,
       _aay_,
       _aaz_,
       _aaA_,
       _aaB_,
       _aaC_,
       _aaD_,
       _aaE_,
       _aaF_,
       _aaG_,
       _aaH_,
       _aaI_,
       _aaJ_,
       _aaK_,
       _aaL_,
       _aaM_,
       _aaN_,
       _aaO_,
       _aaP_,
       _aaQ_,
       _aaR_,
       _aaS_,
       _aaT_,
       _aaU_,
       _aaV_,
       _aaW_,
       _aaX_,
       _aaY_,
       _aa0_,
       _aa1_,
       _aa2_,
       _aa3_,
       _aa4_,
       _aa5_,
       _aa6_,
       hash_fold_t$39,
       _aa7_,
       _aa8_,
       _aa9_,
       _aa__,
       _aa$_,
       _aba_,
       _abb_,
       _abc_,
       _abd_,
       _abe_,
       _abf_,
       _abg_,
       _abh_,
       _abi_,
       _abj_,
       _abM_,
       _abL_,
       _abK_,
       _abJ_,
       _abI_,
       _abH_,
       _abG_,
       _abF_,
       _abE_,
       _abD_,
       _abC_,
       _abB_,
       _abA_,
       _abz_,
       _aby_,
       _abx_,
       _abw_,
       _abv_,
       _abu_,
       _abt_,
       _abs_,
       _abr_,
       _abq_,
       _abp_,
       _abo_,
       _abn_,
       _abm_,
       _abl_,
       _abk_,
       bin_shape_sexp_option$0,
       bin_size_sexp_option$0,
       bin_write_sexp_option$0,
       bin_writer_sexp_option$0,
       bin_read_sexp_option$2,
       bin_read_sexp_option$1,
       bin_reader_sexp_option$0,
       bin_sexp_option$0,
       _xO_,
       _xP_,
       bin_shape_sexp_list$0,
       bin_size_sexp_list$0,
       bin_write_sexp_list$0,
       bin_writer_sexp_list$0,
       bin_read_sexp_list$2,
       bin_read_sexp_list$1,
       bin_reader_sexp_list$0,
       bin_sexp_list$0,
       compare_sexp_list,
       hash_fold_sexp_list];
    caml_register_global
     (4444,Core_kernel_Stable_internal,"Core_kernel__Stable_internal");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$320);
    caml_call1
     (Expect_test_collector[4][1],
      cst_src_float_with_finite_only_serialization_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$321,cst$127);
    var
     Nan_or_inf=
      [248,
       cst_Core_kernel_Float_with_finite_only_serialization_Stable_V1_Nan_or_inf,
       caml_fresh_oo_id(0)];
    function _abZ_(param)
     {if(param === Nan_or_inf)return _ab0_;throw [0,Assert_failure,_ab1_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Nan_or_inf,_abZ_);
    var compare$64=Ppx_compare_lib[4][3];
    function hash$38(x){return caml_call1(_abi_,x)}
    function verify(t)
     {var match=runtime.caml_classify_float(t);
      if(3 <= match)throw Nan_or_inf;
      return 0}
    function of_binable$5(t){verify(t);return t}
    function to_binable$5(t){verify(t);return t}
    var
     include$105=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$50,
           bin_size_t$2,
           bin_write_t$2,
           bin_read_t$5,
           bin_read_t$6]),
        [0,to_binable$5,of_binable$5]),
     bin_size_t$68=include$105[1],
     bin_write_t$69=include$105[2],
     bin_read_t$136=include$105[3],
     bin_read_t$137=include$105[4],
     bin_shape_t$89=include$105[5],
     bin_writer_t$78=include$105[6],
     bin_reader_t$78=include$105[7],
     bin_t$78=include$105[8];
    function t_of_sexp$69(sexp)
     {if(0 === sexp[0])
       {var t=caml_call1(_IA_,sexp);
        try
         {verify(t)}
        catch(e)
         {e = caml_wrap_exception(e);
          caml_call2(_eD_,caml_call1(Base_Exn[9],e),sexp)}
        return t}
      return caml_call2
              (_eD_,cst_Decimal_t_of_sexp_Expected_Atom_found_List,sexp)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$322);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Float_with_finite_only_serialization=
      [0,
       bin_size_t$68,
       bin_write_t$69,
       bin_read_t$136,
       bin_read_t$137,
       bin_shape_t$89,
       bin_writer_t$78,
       bin_reader_t$78,
       bin_t$78,
       t_of_sexp$69,
       sexp_of_t$42,
       compare$64,
       hash_fold_t$39,
       hash$38,
       [0,
        [0,
         bin_size_t$68,
         bin_write_t$69,
         bin_read_t$136,
         bin_read_t$137,
         bin_shape_t$89,
         bin_writer_t$78,
         bin_reader_t$78,
         bin_t$78,
         t_of_sexp$69,
         sexp_of_t$42,
         compare$64,
         hash_fold_t$39,
         hash$38]]];
    caml_register_global
     (4445,
      Core_kernel_Float_with_finite_only_serialization,
      "Core_kernel__Float_with_finite_only_serialization");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$323);
    caml_call1(Expect_test_collector[4][1],cst_src_percent_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$324,cst$128);
    function hash$39(x){return hash_float(x)}
    function of_mult(f){return f}
    function to_mult(t){return t}
    function of_percentage(f){return f / 100.}
    function to_percentage(t){return t * 100.}
    function of_bp(f){return f / 10000.}
    function to_bp(t){return t * 10000.}
    function of_bp_int(i){return caml_call1(_IY_,i) / 10000.}
    function to_bp_int(t){return caml_call1(_IZ_,t * 10000.)}
    function round_significant(p,significant_digits)
     {return caml_call2(_Jm_,p,significant_digits)}
    function round_decimal_mult(p,decimal_digits)
     {return caml_call2(_Jn_,p,decimal_digits)}
    function round_decimal_percentage(p,decimal_digits)
     {return caml_call2(_Jn_,p * 100.,decimal_digits) / 100.}
    function round_decimal_bp(p,decimal_digits)
     {return caml_call2(_Jn_,p * 10000.,decimal_digits) / 10000.}
    function sexp_of_t$82(param)
     {if(typeof param === "number")
       return _ab2_;
      else
       switch(param[0])
        {case 0:
          var v0=param[1],v0$0=caml_call1(sexp_of_t$44,v0);
          return [1,[0,_ab3_,[0,v0$0,0]]];
         case 1:
          var v0$1=param[1],v0$2=caml_call1(sexp_of_t$44,v0$1);
          return [1,[0,_ab4_,[0,v0$2,0]]];
         case 2:
          var v0$3=param[1],v0$4=caml_call1(sexp_of_t$44,v0$3);
          return [1,[0,_ab5_,[0,v0$4,0]]];
         case 3:
          var v0$5=param[1],v0$6=caml_call1(sexp_of_t$44,v0$5);
          return [1,[0,_ab6_,[0,v0$6,0]]];
         case 4:
          var v0$7=param[1],v0$8=caml_call1(sexp_of_t$44,v0$7);
          return [1,[0,_ab7_,[0,v0$8,0]]];
         case 5:
          var v0$9=param[1],v0$10=caml_call1(sexp_of_t$44,v0$9);
          return [1,[0,_ab8_,[0,v0$10,0]]];
         default:
          var v0$11=param[1],v0$12=caml_call1(sexp_of_t$44,v0$11);
          return [1,[0,_ab9_,[0,v0$12,0]]]}}
    function exponent(precision){return [0,precision]}
    function exponent_E(precision){return [1,precision]}
    function decimal(precision){return [2,precision]}
    var ocaml=0;
    function compact(precision){return [3,precision]}
    function compact_E(precision){return [4,precision]}
    function hex(precision){return [5,precision]}
    function hex_E(precision){return [6,precision]}
    function format(x,format)
     {var x_abs=caml_call1(abs,x);
      function string(float$0)
       {if(typeof format === "number")
         var _a2V_=caml_call1(_fE_,_ab__);
        else
         switch(format[0])
          {case 0:
            var precision=format[1],_a2V_=caml_call2(_fE_,_ab$_,precision);
            break;
           case 1:
            var
             precision$0=format[1],
             _a2V_=caml_call2(_fE_,_aca_,precision$0);
            break;
           case 2:
            var
             precision$1=format[1],
             _a2V_=caml_call2(_fE_,_acb_,precision$1);
            break;
           case 3:
            var
             precision$2=format[1],
             _a2V_=caml_call2(_fE_,_acc_,precision$2);
            break;
           case 4:
            var
             precision$3=format[1],
             _a2V_=caml_call2(_fE_,_acd_,precision$3);
            break;
           case 5:
            var
             precision$4=format[1],
             _a2V_=caml_call2(_fE_,_ace_,precision$4);
            break;
           default:
            var precision$5=format[1],_a2V_=caml_call2(_fE_,_acf_,precision$5)}
        return caml_call1(_a2V_,float$0)}
      return caml_call2(symbol$17,x_abs,0.)
              ?cst_0x
              :caml_call2(symbol$15,x_abs,1.)
                ?caml_call2(_Gu_,string(x * 1.),cst_x)
                :caml_call2(symbol$15,x_abs,0.01)
                  ?caml_call2(_Gu_,string(x * 100.),cst$129)
                  :caml_call2(_Gu_,string(x * 10000.),cst_bp)}
    function to_string$22(x)
     {var x_abs=caml_call1(abs,x);
      function string(float$0){return caml_call2(_fE_,_acg_,float$0)}
      return caml_call2(symbol$17,x_abs,0.)
              ?cst_0x$0
              :caml_call2(symbol$15,x_abs,1.)
                ?caml_call2(_Gu_,string(x * 1.),cst_x$0)
                :caml_call2(symbol$15,x_abs,0.01)
                  ?caml_call2(_Gu_,string(x * 100.),cst$130)
                  :caml_call2(_Gu_,string(x * 10000.),cst_bp$0)}
    function really_of_string(str,float_of_string)
     {var match=caml_call2(_Dh_,str,cst_x$1);
      if(match){var str$0=match[1];return caml_call1(float_of_string,str$0)}
      var match$0=caml_call2(_Dh_,str,cst$131);
      if(match$0)
       {var str$1=match$0[1];return caml_call1(float_of_string,str$1) * 0.01}
      var match$1=caml_call2(_Dh_,str,cst_bp$1);
      if(match$1)
       {var str$2=match$1[1];
        return caml_call1(float_of_string,str$2) / 10000.}
      return caml_call3(_Pg_,_ach_,str,0)}
    function of_string$18(str)
     {function float$0(str){return t_of_sexp$69([0,str])}
      return really_of_string(str,float$0)}
    var
     _aci_=caml_call1(Stable[5][1],[0,of_string$18,to_string$22]),
     _acj_=_aci_[1],
     _ack_=_aci_[2],
     _acl_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$168),0,bin_shape_t$50],0],
     _acm_=caml_call1(Bin_prot_Shape[4][1],cst_src_percent_ml_133_8),
     group$106=caml_call2(Bin_prot_Shape[6],_acm_,_acl_),
     _acn_=caml_call1(Bin_prot_Shape[2][1],cst_t$169),
     bin_shape_t$90=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$106,_acn_),0),
     bin_writer_t$79=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$79=[0,bin_read_t$5,bin_read_t$6],
     bin_t$79=[0,bin_shape_t$90,bin_writer_t$79,bin_reader_t$79];
    function t_of_sexp$70(sexp)
     {try
       {var float$0=caml_call1(_IA_,sexp);return float$0}
      catch(_a2U_){return caml_call1(_acj_,sexp)}}
    var
     include$106=
      _xB_
       ([0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$90,
         bin_writer_t$79,
         bin_reader_t$79,
         bin_t$79,
         compare$30,
         t_of_sexp$70,
         _ack_]),
     symbol$176=include$106[1],
     symbol$177=include$106[2],
     symbol$178=include$106[3],
     symbol$179=include$106[4],
     symbol$180=include$106[5],
     symbol$181=include$106[6],
     equal$34=include$106[7],
     compare$65=include$106[8],
     min$14=include$106[9],
     max$14=include$106[10],
     ascending$14=include$106[11],
     descending$14=include$106[12],
     between$14=include$106[13],
     clamp_exn$14=include$106[14],
     clamp$14=include$106[15],
     validate_lbound$14=include$106[16],
     validate_ubound$14=include$106[17],
     validate_bound$14=include$106[18],
     Replace_polymorphic_compare$13=include$106[19],
     comparator$21=include$106[20],
     Map$19=include$106[21],
     Set$19=include$106[22];
    function is_zero(t){return caml_call2(symbol$178,t,0.)}
    function apply$0(t,f){return t * f}
    function scale$1(t,f){return t * f}
    function of_string_allow_nan_and_inf(s){return really_of_string(s,_IB_)}
    function t_of_sexp_allow_nan_and_inf(sexp)
     {return of_string_allow_nan_and_inf(caml_call1(to_string$0,sexp))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$325);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Percent=
      [0,
       hash_fold_t$15,
       hash$39,
       of_string$18,
       to_string$22,
       _acj_,
       _ack_,
       bin_size_t$2,
       bin_write_t$2,
       bin_read_t$5,
       bin_read_t$6,
       bin_shape_t$50,
       bin_writer_t$43,
       bin_reader_t$43,
       bin_t$43,
       symbol$176,
       symbol$177,
       symbol$178,
       symbol$179,
       symbol$180,
       symbol$181,
       equal$34,
       compare$65,
       min$14,
       max$14,
       ascending$14,
       descending$14,
       between$14,
       clamp_exn$14,
       clamp$14,
       validate_lbound$14,
       validate_ubound$14,
       validate_bound$14,
       Replace_polymorphic_compare$13,
       comparator$21,
       Map$19,
       Set$19,
       validate_positive,
       validate_non_negative,
       validate_negative,
       validate_non_positive,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       symbol$24,
       symbol$25,
       symbol$26,
       symbol$27,
       symbol$28,
       symbol$29,
       robustly_compare,
       _JZ_,
       _NQ_,
       _NZ_,
       symbol$23,
       symbol$21,
       symbol$22,
       zero,
       neg,
       abs,
       is_zero,
       is_nan,
       is_inf,
       apply$0,
       scale$1,
       of_mult,
       to_mult,
       of_percentage,
       to_percentage,
       of_bp,
       to_bp,
       of_bp_int,
       to_bp_int,
       round_significant,
       round_decimal_mult,
       round_decimal_percentage,
       round_decimal_bp,
       t_of_sexp_allow_nan_and_inf,
       of_string_allow_nan_and_inf,
       [0,
        sexp_of_t$82,
        exponent,
        exponent_E,
        decimal,
        ocaml,
        compact,
        compact_E,
        hex,
        hex_E],
       format,
       _IE_,
       sign,
       sign,
       [0,
        [0,
         _acj_,
         _ack_,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$50,
         bin_writer_t$43,
         bin_reader_t$43,
         bin_t$43,
         compare$65,
         hash_fold_t$15,
         hash$39]]];
    caml_register_global(4446,Core_kernel_Percent,"Core_kernel__Percent");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$326);
    caml_call1(Expect_test_collector[4][1],cst_src_span_helpers_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$327,cst$132);
    function randomize(span,percent,scale)
     {var
       _a2Q_=caml_call2(symbol$19,percent,0.),
       _a2R_=_a2Q_ || caml_call2(symbol$18,percent,1.);
      if(_a2R_)
       {var _a2S_=[0,[1,[0,_aco_,[0,caml_call1(_ack_,percent),0]]],0];
        caml_call1
         (_on_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Span_randomize_percent_is_out_of_range_0x_1x),
            _a2S_]])}
      var
       _a2T_=caml_call2(_IX_,19067,1. + percent),
       factor=caml_call2(Base_Random[14],1. - percent,_a2T_);
      return caml_call2(scale,span,factor)}
    function format_decimal(n,tenths,units)
     {if(caml_call2(_Np_,tenths,0))
       if(caml_call2(_Nt_,tenths,10))
        {if(caml_call2(_Nt_,n,10))
          if(caml_call2(_Nu_,tenths,0))
           return caml_call4(_fE_,_acp_,n,tenths,units);
         return caml_call3(_fE_,_acq_,n,units)}
      throw [0,Assert_failure,_acr_]}
    function short_string(sign,hr,min,sec,ms,us,ns)
     {var
       s=
        caml_call2(_Np_,hr,24)
         ?format_decimal
           (hr / 24 | 0,
            caml_call1
             (of_float$1,caml_call1(_IY_,caml_call2(symbol$60,hr,24)) / 2.4),
            cst_d$1)
         :caml_call2(_Ns_,hr,0)
           ?format_decimal(hr,min / 6 | 0,cst_h)
           :caml_call2(_Ns_,min,0)
             ?format_decimal(min,sec / 6 | 0,cst_m$2)
             :caml_call2(_Ns_,sec,0)
               ?format_decimal(sec,ms / 100 | 0,cst_s$4)
               :caml_call2(_Ns_,ms,0)
                 ?format_decimal(ms,us / 100 | 0,cst_ms)
                 :caml_call2(_Ns_,us,0)
                   ?format_decimal(us,ns / 100 | 0,cst_us)
                   :caml_call2(_fE_,_acs_,ns);
      return 0 === sign?caml_call2(_Gu_,cst$133,s):s}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$328);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Span_helpers=[0,randomize,short_string];
    caml_register_global
     (4447,Core_kernel_Span_helpers,"Core_kernel__Span_helpers");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$329);
    caml_call1(Expect_test_collector[4][1],cst_src_span_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$330,cst$134);
    function compare$66(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(_Id_,a_001[1],b_002[1]);
      if(0 === n)
       {var n$0=caml_call2(compare$32,a_001[2],b_002[2]);
        if(0 === n$0)
         {var n$1=caml_call2(compare$32,a_001[3],b_002[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare$32,a_001[4],b_002[4]);
            if(0 === n$2)
             {var n$3=caml_call2(compare$32,a_001[5],b_002[5]);
              if(0 === n$3)
               {var n$4=caml_call2(compare$32,a_001[6],b_002[6]);
                return 0 === n$4?caml_call2(compare$32,a_001[7],b_002[7]):n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function t_of_sexp$71(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$28,sexp);
      var
       field_sexps=sexp[1],
       sign_field=[0,0],
       hr_field=[0,0],
       min_field=[0,0],
       sec_field=[0,0],
       ms_field=[0,0],
       us_field=[0,0],
       ns_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _a2E_=param[1];
          if(1 === _a2E_[0])
           {var _a2F_=_a2E_[1];
            if(_a2F_)
             {var _a2G_=_a2F_[1];
              if(0 === _a2G_[0])
               {var _a2H_=_a2F_[2],_a2I_=_a2G_[1];
                if(! _a2H_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a2I_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _a2H_[2])
                 {var tail=param[2],field_sexp=_a2H_[1];
                  if(caml_string_notequal(_a2I_,cst_hr))
                   if(caml_string_notequal(_a2I_,cst_min))
                    if(caml_string_notequal(_a2I_,cst_ms$0))
                     if(caml_string_notequal(_a2I_,cst_ns))
                      if(caml_string_notequal(_a2I_,cst_sec))
                       if(caml_string_notequal(_a2I_,cst_sign))
                        if(caml_string_notequal(_a2I_,cst_us$0))
                         {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a2I_,extra[1]]}
                        else
                         if(us_field[1])
                          duplicates[1] = [0,_a2I_,duplicates[1]];
                         else
                          {var fvalue=caml_call1(t_of_sexp$35,field_sexp);
                           us_field[1] = [0,fvalue]}
                       else
                        if(sign_field[1])
                         duplicates[1] = [0,_a2I_,duplicates[1]];
                        else
                         {var fvalue$0=caml_call1(_H3_,field_sexp);
                          sign_field[1] = [0,fvalue$0]}
                      else
                       if(sec_field[1])
                        duplicates[1] = [0,_a2I_,duplicates[1]];
                       else
                        {var fvalue$1=caml_call1(t_of_sexp$35,field_sexp);
                         sec_field[1] = [0,fvalue$1]}
                     else
                      if(ns_field[1])
                       duplicates[1] = [0,_a2I_,duplicates[1]];
                      else
                       {var fvalue$2=caml_call1(t_of_sexp$35,field_sexp);
                        ns_field[1] = [0,fvalue$2]}
                    else
                     if(ms_field[1])
                      duplicates[1] = [0,_a2I_,duplicates[1]];
                     else
                      {var fvalue$3=caml_call1(t_of_sexp$35,field_sexp);
                       ms_field[1] = [0,fvalue$3]}
                   else
                    if(min_field[1])
                     duplicates[1] = [0,_a2I_,duplicates[1]];
                    else
                     {var fvalue$4=caml_call1(t_of_sexp$35,field_sexp);
                      min_field[1] = [0,fvalue$4]}
                  else
                   if(hr_field[1])
                    duplicates[1] = [0,_a2I_,duplicates[1]];
                   else
                    {var fvalue$5=caml_call1(t_of_sexp$35,field_sexp);
                     hr_field[1] = [0,fvalue$5]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$28,_a2E_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$28,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$28,extra[1],sexp);
        var
         _a2J_=sign_field[1],
         _a2K_=hr_field[1],
         _a2L_=min_field[1],
         _a2M_=sec_field[1],
         _a2N_=ms_field[1],
         _a2O_=us_field[1],
         _a2P_=ns_field[1];
        if(_a2J_)
         if(_a2K_)
          if(_a2L_)
           if(_a2M_)
            if(_a2N_)
             if(_a2O_)
              if(_a2P_)
               {var
                 ns_value=_a2P_[1],
                 us_value=_a2O_[1],
                 ms_value=_a2N_[1],
                 sec_value=_a2M_[1],
                 min_value=_a2L_[1],
                 hr_value=_a2K_[1],
                 sign_value=_a2J_[1];
                return [0,
                        sign_value,
                        hr_value,
                        min_value,
                        sec_value,
                        ms_value,
                        us_value,
                        ns_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$28,
                 sexp,
                 [0,
                  [0,0 === sign_field[1]?1:0,cst_sign$0],
                  [0,
                   [0,0 === hr_field[1]?1:0,cst_hr$0],
                   [0,
                    [0,0 === min_field[1]?1:0,cst_min$0],
                    [0,
                     [0,0 === sec_field[1]?1:0,cst_sec$0],
                     [0,
                      [0,0 === ms_field[1]?1:0,cst_ms$1],
                      [0,
                       [0,0 === us_field[1]?1:0,cst_us$1],
                       [0,[0,0 === ns_field[1]?1:0,cst_ns$0],0]]]]]]])}}
    function sexp_of_t$83(param)
     {var
       v_ns=param[7],
       v_us=param[6],
       v_ms=param[5],
       v_sec=param[4],
       v_min=param[3],
       v_hr=param[2],
       v_sign=param[1],
       arg=caml_call1(sexp_of_t$44,v_ns),
       bnds=[0,[1,[0,_act_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$44,v_us),
       bnds$0=[0,[1,[0,_acu_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$44,v_ms),
       bnds$1=[0,[1,[0,_acv_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$44,v_sec),
       bnds$2=[0,[1,[0,_acw_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(sexp_of_t$44,v_min),
       bnds$3=[0,[1,[0,_acx_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$44,v_hr),
       bnds$4=[0,[1,[0,_acy_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(_H4_,v_sign),
       bnds$5=[0,[1,[0,_acz_,[0,arg$5,0]]],bnds$4];
      return [1,bnds$5]}
    var Parts=[0,compare$66,t_of_sexp$71,sexp_of_t$83];
    function next$1(t){return caml_call2(_IX_,19067,t)}
    function prev$2(t){return caml_call2(_IX_,759637122,t)}
    var
     include$107=caml_call1(Robust_compare[1],[0,1e-06]),
     robust_comparison_tolerance=include$107[1],
     symbol$182=include$107[2],
     symbol$183=include$107[3],
     symbol$184=include$107[4],
     symbol$185=include$107[5],
     symbol$186=include$107[6],
     symbol$187=include$107[7],
     robustly_compare$1=include$107[8],
     nanosecond=caml_call1(of_float,1e-09),
     microsecond=caml_call1(of_float,1e-06),
     millisecond=caml_call1(of_float,0.001),
     second$0=caml_call1(of_float,1.),
     minute=caml_call1(of_float,60.),
     hour=caml_call1(of_float,3600.),
     day$0=caml_call1(of_float,86400.);
    function to_parts(t)
     {var
       sign$0=caml_call1(sign,t),
       t$0=caml_call1(abs,t),
       integral=caml_call1(_I7_,t$0),
       fractional=t$0 - integral,
       seconds=caml_call1(_Je_,integral),
       nanoseconds=caml_call1(_Jg_,fractional * 1000000000.);
      if(caml_call2(equal$19,nanoseconds,1000000000))
       var seconds$0=caml_call1(next$0,seconds),nanoseconds$0=0;
      else
       var seconds$0=seconds,nanoseconds$0=nanoseconds;
      var
       sec=seconds$0 % 60 | 0,
       minutes=seconds$0 / 60 | 0,
       min=minutes % 60 | 0,
       hr=minutes / 60 | 0,
       ns=nanoseconds$0 % 1000 | 0,
       microseconds=nanoseconds$0 / 1000 | 0,
       us=microseconds % 1000 | 0,
       milliseconds=microseconds / 1000 | 0;
      return [0,sign$0,hr,min,sec,milliseconds,us,ns]}
    function symbol$188(t,f){return caml_call1(of_float,t / f)}
    function symbol$189(f,t){return f / t}
    function to_ns(x){return x * 1000000000.}
    function to_us(x){return x * 1000000.}
    function to_ms(x){return x * 1000.}
    function of_span_since_epoch(x){return x}
    function to_min(x){return x / minute}
    function to_hr(x){return x / hour}
    function to_day(x){return x / day$0}
    function to_int63_seconds_round_down_exn(x){return caml_call1(_Jh_,x)}
    function symbol$190(f,t){return caml_call1(of_float,f * t)}
    function of_ns(x){return caml_call1(of_float,x / 1000000000.)}
    function of_us(x){return caml_call1(of_float,x / 1000000.)}
    function of_ms(x){return caml_call1(of_float,x / 1000.)}
    function to_span_since_epoch(x){return caml_call1(of_float,x)}
    function of_int_sec(x){return to_span_since_epoch(caml_call1(_IY_,x))}
    function of_int32_seconds(sec)
     {return to_span_since_epoch(caml_call1(to_float$1,sec))}
    function of_int63_seconds(sec)
     {return to_span_since_epoch(caml_call1(to_float$3,sec))}
    function of_min(x){return symbol$190(x,minute)}
    function of_hr(x){return symbol$190(x,hour)}
    function of_day(x){return symbol$190(x,day$0)}
    function divide_by_unit_of_time(t,unit_of_time)
     {switch(unit_of_time)
       {case 0:return t * 1000000000.;
        case 1:return t * 1000000.;
        case 2:return t * 1000.;
        case 3:return t;
        case 4:return to_min(t);
        case 5:return to_hr(t);
        default:return to_day(t)}}
    function scale_by_unit_of_time(float$0,unit_of_time)
     {switch(unit_of_time)
       {case 0:return of_ns(float$0);
        case 1:return of_us(float$0);
        case 2:return of_ms(float$0);
        case 3:return to_span_since_epoch(float$0);
        case 4:return of_min(float$0);
        case 5:return of_hr(float$0);
        default:return of_day(float$0)}}
    function create$22(opt,_a2x_,_a2w_,_a2v_,_a2u_,_a2t_,_a2s_,_a2r_,param)
     {if(opt)var sth=opt[1],sign=sth;else var sign=2;
      if(_a2x_)var sth$0=_a2x_[1],day=sth$0;else var day=0;
      if(_a2w_)var sth$1=_a2w_[1],hr=sth$1;else var hr=0;
      if(_a2v_)var sth$2=_a2v_[1],min=sth$2;else var min=0;
      if(_a2u_)var sth$3=_a2u_[1],sec=sth$3;else var sec=0;
      if(_a2t_)var sth$4=_a2t_[1],ms=sth$4;else var ms=0;
      if(_a2s_)var sth$5=_a2s_[1],us=sth$5;else var us=0;
      if(_a2r_)var sth$6=_a2r_[1],ns=sth$6;else var ns=0;
      var
       _a2y_=of_ns(caml_call1(_IY_,ns)),
       _a2z_=of_us(caml_call1(_IY_,us)),
       _a2A_=of_ms(caml_call1(_IY_,ms)),
       _a2B_=to_span_since_epoch(caml_call1(_IY_,sec)),
       _a2C_=of_min(caml_call1(_IY_,min)),
       _a2D_=of_hr(caml_call1(_IY_,hr)),
       t=
        caml_call2
         (symbol$21,
          caml_call2
           (symbol$21,
            caml_call2
             (symbol$21,
              caml_call2
               (symbol$21,
                caml_call2
                 (symbol$21,
                  caml_call2(symbol$21,of_day(caml_call1(_IY_,day)),_a2D_),
                  _a2C_),
                _a2B_),
              _a2A_),
            _a2z_),
          _a2y_);
      return 0 === sign?caml_call2(symbol$22,zero,t):t}
    function randomize$0(t,percent){return randomize(t,percent,scale)}
    function to_short_string(t)
     {var
       match=to_parts(t),
       ns=match[7],
       us=match[6],
       ms=match[5],
       sec=match[4],
       min=match[3],
       hr=match[2],
       sign=match[1];
      return short_string(sign,hr,min,sec,ms,us,ns)}
    function of_sexp_error_exn(exn,sexp)
     {return caml_call2(_Of_,caml_call1(Base_Exn[9],exn),sexp)}
    var
     T_of_sexp=
      [248,cst_Core_kernel_Span_float_Stable_V1_T_of_sexp,caml_fresh_oo_id(0)];
    function _acB_(param)
     {if(param[1] === T_of_sexp)
       {var
         v1=param[3],
         v0=param[2],
         v0$0=caml_call1(sexp_of_t$35,v0),
         v1$0=caml_call1(_QN_,v1);
        return [1,[0,_acC_,[0,v0$0,[0,v1$0,0]]]]}
      throw [0,Assert_failure,_acD_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,T_of_sexp,_acB_);
    var
     T_of_sexp_expected_atom_but_got=
      [248,
       cst_Core_kernel_Span_float_Stable_V1_T_of_sexp_expected_atom_but_got,
       caml_fresh_oo_id(0)];
    function _acE_(param)
     {if(param[1] === T_of_sexp_expected_atom_but_got)
       {var v0=param[2],v0$0=caml_call1(sexp_of_t$35,v0);
        return [1,[0,_acF_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_acG_]}
    caml_call3
     (Sexplib0_Sexp_conv[51][2],0,T_of_sexp_expected_atom_but_got,_acE_);
    function t_of_sexp_v1_v2(sexp,is_v2)
     {if(0 === sexp[0])
       {var x=sexp[1];
        try
         {try
           {if(caml_string_notequal(x,cst$135))
             {var
               float$0=
                function(n)
                 {var s=caml_call2(_Dl_,x,n);
                  if(caml_string_notequal(s,cst$136))
                   {var v=caml_call1(_IB_,s),_a2q_=caml_call1(_IE_,v);
                    caml_call1(Base_Validate[17],_a2q_);
                    return v}
                  return caml_call1(_Gg_,cst_no_number_given)},
               len=caml_ml_string_length(x),
               match=caml_string_get(x,caml_call2(symbol$55,len,1)),
               switcher=match - 100 | 0;
              if(15 < switcher >>> 0)
               var switch$0=0;
              else
               {switch(switcher)
                 {case 0:var _a2o_=of_day(float$0(1)),switch$1=1;break;
                  case 4:var _a2o_=of_hr(float$0(1)),switch$1=1;break;
                  case 9:var _a2o_=of_min(float$0(1)),switch$1=1;break;
                  case 15:
                   if(caml_call2(symbol$48,len,2))
                    if
                     (caml_call2
                       (_FW_,caml_string_get(x,caml_call2(symbol$55,len,2)),109))
                     var _a2o_=of_ms(float$0(2)),switch$1=1,switch$2=0;
                    else
                     var switch$2=1;
                   else
                    var switch$2=1;
                   if(switch$2)
                    {if(is_v2)
                      if(caml_call2(symbol$48,len,2))
                       if
                        (caml_call2
                          (_FW_,caml_string_get(x,caml_call2(symbol$55,len,2)),117))
                        var _a2o_=of_us(float$0(2)),switch$1=1,switch$3=0;
                       else
                        var switch$3=1;
                      else
                       var switch$3=1;
                     else
                      var switch$3=1;
                     if(switch$3)
                      {if(is_v2)
                        if(caml_call2(symbol$48,len,2))
                         if
                          (caml_call2
                            (_FW_,caml_string_get(x,caml_call2(symbol$55,len,2)),110))
                          var _a2o_=of_ns(float$0(2)),switch$1=1,switch$4=0;
                         else
                          var switch$4=1;
                        else
                         var switch$4=1;
                       else
                        var switch$4=1;
                       if(switch$4)
                        var _a2o_=caml_call1(of_float,float$0(1)),switch$1=1}}
                   break;
                  default:var switch$0=0,switch$1=0}
                if(switch$1)var _a2m_=_a2o_,switch$0=1}
              if(! switch$0)
               var
                _a2m_=
                 is_v2
                  ?caml_call1
                    (_Gg_,cst_Time_spans_must_end_in_ns_us_ms_s_m_h_or_d)
                  :caml_call1(_Gg_,cst_Time_spans_must_end_in_ms_s_m_h_or_d);
              var _a2n_=_a2m_}
            else
             var _a2n_=caml_call1(_Gg_,cst_empty_string);
            var _a2p_=_a2n_}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var _a2p_=caml_call4(_Ph_,_acA_,x,caml_call1(Base_Exn[9],exn),0)}
          return _a2p_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return of_sexp_error_exn([0,T_of_sexp,sexp,exn],sexp)}}
      return of_sexp_error_exn([0,T_of_sexp_expected_atom_but_got,sexp],sexp)}
    function string$1(is_v2,suffix,float$0)
     {return is_v2
              ?caml_call2(_Gu_,caml_call1(Sexplib_Conv[1][1],float$0),suffix)
              :caml_call3(_fE_,_acH_,float$0,suffix)}
    function sexp_of_t_v1_v2(t,is_v2)
     {var match=caml_call1(_JF_,t);
      switch(match)
       {case 0:var _a2l_=caml_call2(symbol$18,t,zero)?cst_inf:cst_inf$0;break;
        case 1:var _a2l_=cst_nan;break;
        case 2:
         var abs_t=caml_call1(of_float,caml_call1(abs,t));
         if(is_v2)
          if(caml_call2(symbol$19,abs_t,microsecond))
           var _a2l_=string$1(is_v2,cst_ns$1,t * 1000000000.),switch$0=1;
          else
           var switch$0=0;
         else
          var switch$0=0;
         if(! switch$0)
          {if(is_v2)
            if(caml_call2(symbol$19,abs_t,millisecond))
             var _a2l_=string$1(is_v2,cst_us$2,t * 1000000.),switch$1=1;
            else
             var switch$1=0;
           else
            var switch$1=0;
           if(! switch$1)
            var
             _a2l_=
              caml_call2(symbol$19,abs_t,second$0)
               ?string$1(is_v2,cst_ms$2,t * 1000.)
               :caml_call2(symbol$19,abs_t,minute)
                 ?string$1(is_v2,cst_s$5,t)
                 :caml_call2(symbol$19,abs_t,hour)
                   ?string$1(is_v2,cst_m$3,to_min(t))
                   :caml_call2(symbol$19,abs_t,day$0)
                     ?string$1(is_v2,cst_h$0,to_hr(t))
                     :string$1(is_v2,cst_d$2,to_day(t))}
         break;
        default:var _a2l_=cst_0s}
      return [0,_a2l_]}
    function t_of_sexp$72(sexp){return t_of_sexp_v1_v2(sexp,0)}
    function sexp_of_t$84(t){return sexp_of_t_v1_v2(t,0)}
    function t_of_sexp$73(sexp){return t_of_sexp_v1_v2(sexp,1)}
    function sexp_of_t$85(t){return sexp_of_t_v1_v2(t,1)}
    function to_unit_of_time(t)
     {var abs_t=caml_call1(abs,t);
      return caml_call2(symbol$15,abs_t,day$0)
              ?6
              :caml_call2(symbol$15,abs_t,hour)
                ?5
                :caml_call2(symbol$15,abs_t,minute)
                  ?4
                  :caml_call2(symbol$15,abs_t,second$0)
                    ?3
                    :caml_call2(symbol$15,abs_t,millisecond)
                      ?2
                      :caml_call2(symbol$15,abs_t,microsecond)?1:0}
    function of_unit_of_time(param)
     {switch(param)
       {case 0:return nanosecond;
        case 1:return microsecond;
        case 2:return millisecond;
        case 3:return second$0;
        case 4:return minute;
        case 5:return hour;
        default:return day$0}}
    function suffix_of_unit_of_time(unit_of_time)
     {switch(unit_of_time)
       {case 0:return cst_ns$2;
        case 1:return cst_us$3;
        case 2:return cst_ms$3;
        case 3:return cst_s$6;
        case 4:return cst_m$4;
        case 5:return cst_h$1;
        default:return cst_d$3}}
    function invalid_string$0(string,reason)
     {var
       message=caml_call2(_Gu_,cst_Time_Span_of_string,reason),
       _a2k_=[0,caml_call1(Sexplib0_Sexp_conv[7],string),0];
      return caml_call1
              (_on_,[1,[0,caml_call1(Sexplib0_Sexp_conv[7],message),_a2k_]])}
    function parse_suffix(string,index)
     {var unit_of_time_list$0=unit_of_time_list;
      for(;;)
       {if(unit_of_time_list$0)
         {var
           rest=unit_of_time_list$0[2],
           unit_of_time=unit_of_time_list$0[1],
           suffix=suffix_of_unit_of_time(unit_of_time);
          if(caml_call3(_CT_,string,index,suffix))return unit_of_time;
          var unit_of_time_list$0=rest;
          continue}
        return invalid_string$0(string,cst_invalid_span_part_suffix)}}
    function state_is_final(param)
     {switch(param){case 1:case 3:case 6:return 1;default:return 0}}
    function invalid_string$1(string)
     {return invalid_string$0(string,cst_invalid_span_part_magnitude)}
    function of_string$19(string)
     {if(caml_string_notequal(string,cst_INFs))
       {if(caml_string_notequal(string,cst_INFs$0))
         {if(caml_string_notequal(string,cst_NANs))
           {var len=caml_ml_string_length(string);
            if(caml_call2(O$0[9],len,0))
             invalid_string$0(string,cst_empty_input);
            var match$0=caml_string_get(string,0),switcher$0=match$0 - 43 | 0;
            if(2 < switcher$0 >>> 0)
             var switch$0=0;
            else
             {switch(switcher$0)
               {case 0:var _a2j_=_acN_,switch$1=1;break;
                case 1:var switch$0=0,switch$1=0;break;
                default:var _a2j_=_acO_,switch$1=1}
              if(switch$1)var negative=_a2j_[1],index$3=_a2j_[2],switch$0=1}
            if(! switch$0)var negative=0,index$3=0;
            if(caml_call2(O$0[7],index$3,len))
             invalid_string$0(string,cst_empty_input$0);
            var magnitude=zero,index$1=index$3;
            a:
            for(;;)
             {if(caml_call2(equal$19,index$1,len))
               return negative?caml_call1(neg,magnitude):magnitude;
              var index=index$1,state=0;
              for(;;)
               {if(caml_call2(O$0[9],index,len))
                 var
                  suffix_index=
                   state_is_final(state)?index:invalid_string$1(string);
                else
                 {var param=caml_string_get(string,index);
                  if(70 <= param)
                   if(95 === param)
                    var match=_acI_,switch$2=2;
                   else
                    var switch$2=101 === param?1:0;
                  else
                   if(58 <= param)
                    var switch$2=69 <= param?1:0;
                   else
                    if(43 <= param)
                     {var switcher=param - 43 | 0;
                      switch(switcher)
                       {case 3:var match=_acL_,switch$2=2;break;
                        case 0:
                        case 2:var match=_acK_,switch$2=2;break;
                        case 1:
                        case 4:var switch$2=0;break;
                        default:var match=_acM_,switch$2=2}}
                    else
                     var switch$2=0;
                  switch(switch$2)
                   {case 0:var match=0;break;case 1:var match=_acJ_;break}
                  if(match)
                   {var token=match[1];
                    switch(state)
                     {case 0:
                       var
                        state$0=
                         1 === token?2:0 === token?1:invalid_string$1(string);
                       break;
                      case 1:
                       switch(token)
                        {case 1:var state$0=3;break;
                         case 3:var state$0=invalid_string$1(string);break;
                         case 4:var state$0=4;break;
                         default:var state$0=1}
                       break;
                      case 2:
                       var state$0=0 === token?3:invalid_string$1(string);break;
                      case 3:
                       switch(token)
                        {case 4:var state$0=4;break;
                         case 0:
                         case 2:var state$0=3;break;
                         default:var state$0=invalid_string$1(string)}
                       break;
                      case 4:
                       var
                        state$0=
                         3 === token?5:0 === token?6:invalid_string$1(string);
                       break;
                      case 5:
                       var state$0=0 === token?6:invalid_string$1(string);break;
                      default:
                       if(1 === token)
                        var switch$3=0;
                       else
                        if(3 <= token)var switch$3=0;else var state$0=6,switch$3=1;
                       if(! switch$3)var state$0=invalid_string$1(string)}
                    var
                     index$0=caml_call2(O$0[1],index,1),
                     index=index$0,
                     state=state$0;
                    continue}
                  var
                   suffix_index=
                    state_is_final(state)?index:invalid_string$1(string)}
                var
                 unit_of_time=parse_suffix(string,suffix_index),
                 index$2=
                  caml_call2
                   (symbol$54,
                    suffix_index,
                    caml_ml_string_length(suffix_of_unit_of_time(unit_of_time))),
                 float_string=
                  caml_call3
                   (_Ca_,
                    string,
                    index$1,
                    caml_call2(symbol$55,suffix_index,index$1)),
                 float$0=caml_call1(_IB_,float_string),
                 magnitude$0=
                  caml_call2
                   (symbol$21,
                    magnitude,
                    scale_by_unit_of_time(float$0,unit_of_time)),
                 magnitude=magnitude$0,
                 index$1=index$2;
                continue a}}}
          return to_span_since_epoch(_IF_)}
        return to_span_since_epoch(_IG_)}
      return to_span_since_epoch(_IH_)}
    function string_of_float_without_trailing_decimal(float$0)
     {var string=caml_call1(_Jx_,float$0);
      return caml_call2(_CW_,string,suffix)
              ?caml_call2(_Df_,string,suffix)
              :string}
    function sum$5(sum_t,unit_of_time,magnitude)
     {return caml_call2
              (symbol$21,sum_t,scale_by_unit_of_time(magnitude,unit_of_time))}
    function to_float_string(abs_t,unit_of_time,fixup_unit_of_time)
     {var
       magnitude=divide_by_unit_of_time(abs_t,unit_of_time),
       sum_t=sum$5(zero,unit_of_time,magnitude);
      if(caml_call2(symbol$17,sum_t,abs_t))
       {var _a2f_=suffix_of_unit_of_time(unit_of_time);
        return caml_call2
                (_Gu_,
                 string_of_float_without_trailing_decimal(magnitude),
                 _a2f_)}
      var
       magnitude$0=
        caml_call2(symbol$19,sum_t,abs_t)
         ?magnitude
         :divide_by_unit_of_time(prev$2(abs_t),unit_of_time),
       sum_t$0=sum$5(zero,unit_of_time,magnitude$0),
       rem_t=caml_call2(symbol$22,abs_t,sum_t$0),
       fixup_magnitude=divide_by_unit_of_time(rem_t,fixup_unit_of_time),
       _a2g_=suffix_of_unit_of_time(fixup_unit_of_time),
       _a2h_=caml_call2(_Gu_,caml_call2(_fE_,_acP_,fixup_magnitude),_a2g_),
       _a2i_=caml_call2(_Gu_,suffix_of_unit_of_time(unit_of_time),_a2h_);
      return caml_call2
              (_Gu_,
               string_of_float_without_trailing_decimal(magnitude$0),
               _a2i_)}
    function to_int_string_and_sum(unit_of_time,abs_t,sum_t)
     {var
       unit_span=of_unit_of_time(unit_of_time),
       rem_t=caml_call2(symbol$22,abs_t,sum_t),
       magnitude=caml_call1(_I7_,rem_t / unit_span),
       new_sum_t=sum$5(sum_t,unit_of_time,magnitude),
       new_rem_t=caml_call2(symbol$22,abs_t,new_sum_t);
      if(caml_call2(symbol$17,new_rem_t,zero))
       var magnitude$0=magnitude;
      else
       if(caml_call2(symbol$19,new_rem_t,zero))
        var magnitude$0=magnitude - 1.;
       else
        var
         next_magnitude=magnitude + 1.,
         next_sum_t=sum$5(sum_t,unit_of_time,next_magnitude),
         next_rem_t=caml_call2(symbol$22,abs_t,next_sum_t),
         magnitude$1=
          caml_call2(symbol$19,next_rem_t,zero)?magnitude:next_magnitude,
         magnitude$0=magnitude$1;
      if(caml_call2(symbol$16,magnitude$0,0.))return [0,cst$137,sum_t];
      var
       new_sum_t$0=sum$5(sum_t,unit_of_time,magnitude$0),
       _a2e_=suffix_of_unit_of_time(unit_of_time),
       string=
        caml_call2
         (_Gu_,caml_call1(_KW_,caml_call1(of_float$4,magnitude$0)),_a2e_);
      return [0,string,new_sum_t$0]}
    function symbol$191(x,y)
     {return caml_call1(_Cd_,x)?y:caml_call1(_Cd_,y)?x:caml_call2(_Gu_,x,y)}
    function to_string$23(t)
     {var float$0=caml_call1(to_float,t);
      if(caml_call1(_JG_,float$0))
       {if(caml_call2(symbol$17,t,zero))return cst_0s$0;
        var
         unit_of_time$0=to_unit_of_time(t),
         abs_t=caml_call1(abs,t),
         sign=caml_call2(symbol$19,t,zero)?cst$140:cst$141;
        if(4 <= unit_of_time$0)
         {if(6 <= unit_of_time$0)
           if
            (caml_call2
              (symbol$15,caml_call2(symbol$22,next$1(abs_t),abs_t),day$0))
            var
             magnitude_string=to_float_string(abs_t,unit_of_time$0,6),
             switch$0=1;
           else
            var switch$0=0;
          else
           var switch$0=0;
          if(! switch$0)
           {var
             match=to_int_string_and_sum(6,abs_t,zero),
             sum_t=match[2],
             day_string=match[1],
             match$0=to_int_string_and_sum(5,abs_t,sum_t),
             sum_t$0=match$0[2],
             hour_string=match$0[1],
             match$1=to_int_string_and_sum(4,abs_t,sum_t$0),
             sum_t$1=match$1[2],
             minute_string=match$1[1];
            if(caml_call2(symbol$15,sum_t$1,abs_t))
             var float_string=cst$138;
            else
             {var
               rem_t=caml_call2(symbol$22,abs_t,sum_t$1),
               unit_of_time=to_unit_of_time(rem_t),
               unit_span=of_unit_of_time(unit_of_time),
               magnitude=rem_t / unit_span,
               new_sum_t=sum$5(sum_t$1,unit_of_time,magnitude),
               new_rem_t=caml_call2(symbol$22,abs_t,new_sum_t),
               _a2c_=caml_call1(abs,new_rem_t);
              if(caml_call2(symbol$16,caml_call1(abs,rem_t),_a2c_))
               var float_string=cst$139;
              else
               var
                order_of_magnitude_of_first_digit=
                 caml_call1(_Je_,caml_log10_float(rem_t)),
                half_ulp=
                 symbol$188(caml_call2(symbol$22,abs_t,prev$2(abs_t)),2.),
                order_of_magnitude_of_final_digit=
                 caml_call1
                  (prev$1,caml_call1(_Jf_,caml_log10_float(half_ulp))),
                _a2d_=caml_call2(O$0[1],1,order_of_magnitude_of_first_digit),
                number_of_digits=
                 caml_call2(O$0[2],_a2d_,order_of_magnitude_of_final_digit),
                suffix=suffix_of_unit_of_time(unit_of_time),
                float_string=
                 caml_call2
                  (_Gu_,
                   caml_call3(_fE_,_acQ_,number_of_digits,magnitude),
                   suffix)}
            var
             magnitude_string=
              symbol$191
               (day_string,
                symbol$191(hour_string,symbol$191(minute_string,float_string)))}}
        else
         var magnitude_string=to_float_string(abs_t,unit_of_time$0,0);
        return symbol$191(sign,magnitude_string)}
      return caml_call1(is_nan,float$0)
              ?cst_NANs$0
              :caml_call1(is_negative,float$0)?cst_INFs$1:cst_INFs$2}
    function sexp_of_t$86(t){return [0,to_string$23(t)]}
    function t_of_sexp$74(s)
     {if(0 === s[0])
       {var x=s[1];
        try
         {var _a2b_=of_string$19(x);return _a2b_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return caml_call2(_Of_,caml_call1(Base_Exn[9],exn),s)}}
      return caml_call2
              (_Of_,cst_Time_Span_Stable_V3_t_of_sexp_sexp_must_be_an_Atom,s)}
    function to_string_hum$9(opt,_a2a_,_a1$_,unit_of_time,t)
     {if(opt)var sth=opt[1],delimiter=sth;else var delimiter=95;
      if(_a2a_)var sth$0=_a2a_[1],decimals=sth$0;else var decimals=3;
      if(_a1$_)
       var sth$1=_a1$_[1],align_decimal=sth$1;
      else
       var align_decimal=0;
      var match=caml_call2(_yn_,unit_of_time,to_unit_of_time(t));
      switch(match)
       {case 0:var match$0=[0,t * 1000000000.,cst_ns$3];break;
        case 1:var match$0=[0,t * 1000000.,cst_us$4];break;
        case 2:var match$0=[0,t * 1000.,cst_ms$4];break;
        case 3:var match$0=[0,t,cst_s$7];break;
        case 4:var match$0=[0,to_min(t),cst_m$5];break;
        case 5:var match$0=[0,to_hr(t),cst_h$2];break;
        default:var match$0=[0,to_day(t),cst_d$4]}
      var
       suffix=match$0[2],
       float$0=match$0[1],
       prefix=
        caml_call4
         (_Jy_,[0,delimiter],[0,decimals],[0,1 - align_decimal],float$0);
      if(align_decimal)
       if(caml_call2(symbol$50,caml_ml_string_length(suffix),1))
        var suffix$0=caml_call2(_Gu_,suffix,cst$142),switch$0=1;
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var suffix$0=suffix;
      return caml_call2(_Gu_,prefix,suffix$0)}
    function gen_incl$0(lo,hi)
     {var _a1__=caml_call2(_JX_,lo,hi);
      return caml_call2(_vb_[10],_a1__,to_span_since_epoch)}
    function gen_uniform_incl$0(lo,hi)
     {var _a19_=caml_call2(_JW_,lo,hi);
      return caml_call2(_vb_[10],_a19_,to_span_since_epoch)}
    var
     include$108=
      caml_call1(Base_Pretty_printer[2],[0,module_name$9,to_string$23]),
     _acR_=include$108[1],
     _acS_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$170),0,bin_shape_t$50],0],
     _acT_=caml_call1(Bin_prot_Shape[4][1],cst_src_span_float_ml_748_4),
     group$107=caml_call2(Bin_prot_Shape[6],_acT_,_acS_),
     _acU_=caml_call1(Bin_prot_Shape[2][1],cst_t$171),
     bin_shape_t$91=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$107,_acU_),0),
     bin_writer_t$80=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$80=[0,bin_read_t$5,bin_read_t$6],
     bin_t$80=[0,bin_shape_t$91,bin_writer_t$80,bin_reader_t$80];
    function hash$40(x){return caml_call1(hash$13,x)}
    function t_of_sexp$75(sexp)
     {try
       {var float$0=caml_call1(_IA_,sexp)}
      catch(_a18_){return t_of_sexp$74(sexp)}
      return caml_call1(of_float,float$0)}
    var
     include$109=
      Make_binable
       ([0,
         hash_fold_t$15,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$91,
         bin_writer_t$80,
         bin_reader_t$80,
         bin_t$80,
         t_of_sexp$75,
         compare$30,
         sexp_of_t$86,
         hash$40]),
     _acV_=include$109[1],
     _acW_=include$109[2],
     _acX_=include$109[3],
     _acY_=include$109[4],
     _acZ_=include$109[5],
     _ac0_=include$109[6],
     _ac1_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$172),0,bin_shape_t$50],0],
     _ac2_=caml_call1(Bin_prot_Shape[4][1],cst_src_span_float_ml_761_2),
     group$108=caml_call2(Bin_prot_Shape[6],_ac2_,_ac1_),
     _ac3_=caml_call1(Bin_prot_Shape[2][1],cst_t$173),
     bin_shape_t$92=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$108,_ac3_),0),
     bin_writer_t$81=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$81=[0,bin_read_t$5,bin_read_t$6],
     bin_t$81=[0,bin_shape_t$92,bin_writer_t$81,bin_reader_t$81];
    function t_of_sexp$76(sexp)
     {var
       match=
        caml_call1
         (_yv_,
          function(param){return caml_call1(of_float,caml_call1(_IA_,sexp))});
      if(match){var t=match[1];return t}
      return t_of_sexp$74(sexp)}
    var
     Map$20=
      _wv_
       ([0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$92,
         bin_writer_t$81,
         bin_reader_t$81,
         bin_t$81,
         t_of_sexp$76,
         sexp_of_t$86,
         comparator$4]),
     Set$20=
      _xl_
       ([0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$92,
         bin_writer_t$81,
         bin_reader_t$81,
         bin_t$81,
         t_of_sexp$76,
         sexp_of_t$86,
         comparator$4]);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$331);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Span_float=
      [0,
       bin_size_t$2,
       bin_write_t$2,
       bin_read_t$5,
       bin_read_t$6,
       bin_shape_t$50,
       bin_writer_t$43,
       bin_reader_t$43,
       bin_t$43,
       t_of_sexp$74,
       sexp_of_t$86,
       typerep_of_t$8,
       typename_of_t$7,
       Parts,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$18,
       compare$30,
       min$1,
       max$1,
       ascending$1,
       descending$1,
       between$1,
       clamp_exn$1,
       clamp$1,
       validate_lbound$1,
       validate_ubound$1,
       validate_bound$1,
       Replace_polymorphic_compare$1,
       comparator$4,
       Map$20,
       Set$20,
       validate_positive,
       validate_non_negative,
       validate_negative,
       validate_non_positive,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       _acV_,
       _acW_,
       _acX_,
       _acY_,
       _acZ_,
       _ac0_,
       _acR_,
       symbol$182,
       symbol$183,
       symbol$184,
       symbol$185,
       symbol$186,
       symbol$187,
       robustly_compare$1,
       quickcheck_generator$7,
       quickcheck_observer$6,
       quickcheck_shrinker$6,
       gen_incl$0,
       gen_uniform_incl$0,
       to_string$23,
       of_string$19,
       nanosecond,
       microsecond,
       millisecond,
       second$0,
       minute,
       hour,
       day$0,
       robust_comparison_tolerance,
       zero,
       create$22,
       to_parts,
       of_ns,
       of_us,
       of_ms,
       to_span_since_epoch,
       of_int_sec,
       of_int32_seconds,
       of_int63_seconds,
       of_min,
       of_hr,
       of_day,
       to_ns,
       to_us,
       to_ms,
       of_span_since_epoch,
       to_min,
       to_hr,
       to_day,
       to_int63_seconds_round_down_exn,
       to_float,
       symbol$21,
       symbol$22,
       abs,
       neg,
       scale,
       symbol$188,
       symbol$189,
       next$1,
       prev$2,
       to_short_string,
       to_unit_of_time,
       of_unit_of_time,
       to_string_hum$9,
       randomize$0,
       [0,
        [0,
         t_of_sexp$72,
         sexp_of_t$84,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$50,
         bin_writer_t$43,
         bin_reader_t$43,
         bin_t$43,
         compare$30,
         hash_fold_t$15,
         hash$13],
        [0,
         t_of_sexp$73,
         sexp_of_t$85,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$50,
         bin_writer_t$43,
         bin_reader_t$43,
         bin_t$43,
         compare$30,
         hash_fold_t$15,
         hash$13],
        [0,
         t_of_sexp$74,
         sexp_of_t$86,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$50,
         bin_writer_t$43,
         bin_reader_t$43,
         bin_t$43,
         compare$30,
         hash_fold_t$15,
         hash$13]],
       [0,parse_suffix,suffix_of_unit_of_time]];
    caml_register_global
     (4448,Core_kernel_Span_float,"Core_kernel__Span_float");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$332);
    caml_call1(Expect_test_collector[4][1],cst_src_span_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$333,cst$143);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$334);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Span_intf=[0];
    caml_register_global(4449,Core_kernel_Span_intf,"Core_kernel__Span_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$335);
    caml_call1(Expect_test_collector[4][1],cst_src_ofday_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$336,cst$144);
    var
     include$110=caml_call1(Robust_compare[1],[0,1e-06]),
     symbol$192=include$110[2],
     symbol$193=include$110[3],
     symbol$194=include$110[4],
     symbol$195=include$110[5],
     symbol$196=include$110[6],
     symbol$197=include$110[7],
     robustly_compare$2=include$110[8];
    function to_span_since_start_of_day(t){return to_span_since_epoch(t)}
    function is_valid(t)
     {var
       t$0=to_span_since_start_of_day(t),
       _a17_=caml_call2(symbol$16,zero,t$0);
      return _a17_?caml_call2(symbol$16,t$0,day$0):_a17_}
    function of_span_since_start_of_day_unchecked(span){return span}
    function span_since_start_of_day_is_valid(span){return is_valid(span)}
    function of_span_since_start_of_day(span)
     {var match=caml_call1(_JF_,span);
      if(1 === match)
       return caml_call1
               (_Gf_,cst_Ofday_of_span_since_start_of_day_exn_NaN_value);
      if(0 === match)
       return caml_call1
               (_Gf_,cst_Ofday_of_span_since_start_of_day_exn_infinite_value);
      if(is_valid(span))return span;
      var _a15_=0,_a16_=0;
      return caml_call3
              (_Ph_,
               [0,
                [11,
                 cst_Ofday_out_of_range,
                 [24,
                  _ac4_,
                  function(param,custom_printf_001)
                   {return to_string$23(custom_printf_001)},
                  _a16_]],
                cst_Ofday_out_of_range_Span],
               span,
               _a15_)}
    var start_of_next_day=of_span_since_start_of_day(day$0),start_of_day=0.;
    function add$12(t,span){var t$0=t + span;return is_valid(t$0)?[0,t$0]:0}
    function sub$3(t,span){var t$0=t - span;return is_valid(t$0)?[0,t$0]:0}
    function next$2(t)
     {var candidate=caml_call2(_IX_,19067,t);
      return is_valid(candidate)?[0,candidate]:0}
    function prev$3(t)
     {var candidate=caml_call2(_IX_,759637122,t);
      return is_valid(candidate)?[0,candidate]:0}
    function diff$6(t1,t2)
     {var _a14_=to_span_since_start_of_day(t2);
      return caml_call2(symbol$22,to_span_since_start_of_day(t1),_a14_)}
    var
     approximate_end_of_day=
      caml_call4(_yo_,0,0,0,sub$3(start_of_next_day,microsecond));
    function create$23(hr,min,sec,ms,us,ns,param)
     {if(sec)
       if(60 === sec[1])
        var ms$0=_ac7_,us$0=_ac6_,ns$0=_ac5_,switch$0=1;
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var ms$0=ms,us$0=us,ns$0=ns;
      return of_span_since_start_of_day
              (create$22(0,0,hr,min,sec,ms$0,us$0,ns$0,0))}
    function to_parts$0(t){return to_parts(to_span_since_start_of_day(t))}
    function to_string_gen(drop_ms,drop_us,trim,t)
     {var drop_us$0=drop_ms?drop_us:1;
      if(drop_us$0)
       {var
         float_sec=to_span_since_start_of_day(t),
         us=caml_call1(_Jj_,float_sec * 1000000.),
         us$0=
          caml_call1
           (to_int_exn$2,caml_call2(rem$2,us,caml_call1(of_int$3,1000))),
         ms=caml_call2(symbol$106,us,caml_call1(of_int$3,1000)),
         ms$0=
          caml_call1
           (to_int_exn$2,caml_call2(rem$2,ms,caml_call1(of_int$3,1000))),
         sec=caml_call2(symbol$106,ms,caml_call1(of_int$3,1000)),
         sec$0=
          caml_call1
           (to_int_exn$2,caml_call2(rem$2,sec,caml_call1(of_int$3,60))),
         min=caml_call2(symbol$106,sec,caml_call1(of_int$3,60)),
         min$0=
          caml_call1
           (to_int_exn$2,caml_call2(rem$2,min,caml_call1(of_int$3,60))),
         hr=caml_call2(symbol$106,min,caml_call1(of_int$3,60)),
         hr$0=caml_call1(to_int_exn$2,hr),
         dont_print_us=
          drop_us
          ||
          (trim?caml_call2(Replace_polymorphic_compare$2[3],us$0,0):trim);
        if(drop_ms)
         var dont_print_ms=drop_ms;
        else
         if(trim)
          var
           _a13_=caml_call2(Replace_polymorphic_compare$2[3],ms$0,0),
           dont_print_ms=_a13_?dont_print_us:_a13_;
         else
          var dont_print_ms=trim;
        if(trim)
         var
          _a12_=caml_call2(Replace_polymorphic_compare$2[3],sec$0,0),
          dont_print_s=_a12_?dont_print_ms:_a12_;
        else
         var dont_print_s=trim;
        var
         len=dont_print_s?5:dont_print_ms?8:dont_print_us?12:15,
         buf=caml_call1(_EG_,len);
        write_2_digit_int$0(buf,0,hr$0);
        caml_call3(_EP_,buf,2,58);
        write_2_digit_int$0(buf,3,min$0);
        if(! dont_print_s)
         {caml_call3(_EP_,buf,5,58);
          write_2_digit_int$0(buf,6,sec$0);
          if(! dont_print_ms)
           {caml_call3(_EP_,buf,8,46);
            write_3_digit_int$0(buf,9,ms$0);
            if(! dont_print_us)write_3_digit_int$0(buf,12,us$0)}}
        return caml_call1(_EZ_,buf)}
      throw [0,Assert_failure,_ac8_]}
    function to_string_trimmed(t){return to_string_gen(0,0,1,t)}
    function to_sec_string(t){return to_string_gen(1,1,0,t)}
    function to_millisec_string(t){return to_string_gen(0,1,0,t)}
    var hour$0=3600.;
    function small_diff(ofday1,ofday2)
     {var
       ofday1$0=to_span_since_start_of_day(ofday1),
       ofday2$0=to_span_since_start_of_day(ofday2),
       diff=ofday1$0 - ofday2$0,
       d1=caml_call2(_Ju_,diff,hour$0),
       d2=caml_call2(_Ju_,d1 + 3600.,hour$0),
       d=caml_call2(symbol$18,d2,1800.)?d2 - 3600.:d2;
      return to_span_since_epoch(d)}
    function to_string$24(t){return to_string_gen(0,0,0,t)}
    var
     include$111=
      caml_call1(Base_Pretty_printer[2],[0,module_name$10,to_string$24]),
     pp$7=include$111[1];
    function create_from_parsed(string,hr,min,sec,subsec_pos,subsec_len)
     {var
       subsec=
        caml_call2(equal$19,subsec_len,0)
         ?0.
         :caml_call1(_IB_,caml_call3(_Ca_,string,subsec_pos,subsec_len));
      return of_span_since_start_of_day
              (to_span_since_epoch
                (caml_call1
                  (_IY_,((hr * 3600 | 0) + (min * 60 | 0) | 0) + sec | 0)
                 +
                 subsec))}
    function of_string$20(s){return parse$0(s,create_from_parsed)}
    function t_of_sexp$77(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _a11_=of_string$20(s);return _a11_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Stdlib[6])
           {var s$0=exn[2];
            return caml_call2
                    (_Of_,caml_call2(_Gu_,cst_Ofday_t_of_sexp,s$0),sexp)}
          throw exn}}
      return caml_call2(_Of_,cst_Ofday_t_of_sexp$0,sexp)}
    function sexp_of_t$87(span){return [0,to_string$24(span)]}
    function of_string_iso8601_extended(pos,len,str)
     {try
       {var _a10_=parse_iso8601_extended(pos,len,str,create_from_parsed);
        return _a10_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var _a1Z_=caml_call1(Base_Exn[9],exn);
        return caml_call4(_Ph_,_ac9_,caml_call3(_Cb_,pos,len,str),_a1Z_,0)}}
    function gen_incl$1(lo,hi)
     {var
       _a1X_=to_span_since_start_of_day(hi),
       _a1Y_=gen_incl$0(to_span_since_start_of_day(lo),_a1X_);
      return caml_call2(_vb_[10],_a1Y_,of_span_since_start_of_day)}
    function gen_uniform_incl$1(lo,hi)
     {var
       _a1V_=to_span_since_start_of_day(hi),
       _a1W_=gen_uniform_incl$0(to_span_since_start_of_day(lo),_a1V_);
      return caml_call2(_vb_[10],_a1W_,of_span_since_start_of_day)}
    var
     quickcheck_generator$11=gen_incl$1(start_of_day,start_of_next_day),
     quickcheck_observer$10=
      caml_call2(_va_[18],quickcheck_observer$6,to_span_since_start_of_day),
     quickcheck_shrinker$10=caml_call1(_u$_[3],0),
     _ac__=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$174),0,bin_shape_t$50],0],
     _ac$_=caml_call1(Bin_prot_Shape[4][1],cst_src_ofday_float_ml_278_4),
     group$109=caml_call2(Bin_prot_Shape[6],_ac$_,_ac__),
     _ada_=caml_call1(Bin_prot_Shape[2][1],cst_t$175),
     bin_shape_t$93=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$109,_ada_),0),
     bin_writer_t$82=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$82=[0,bin_read_t$5,bin_read_t$6],
     bin_t$82=[0,bin_shape_t$93,bin_writer_t$82,bin_reader_t$82];
    function hash$41(x){return caml_call1(hash$13,x)}
    function t_of_sexp$78(sexp)
     {try
       {var float$0=caml_call1(_IA_,sexp)}
      catch(_a1U_){return t_of_sexp$77(sexp)}
      return caml_call1(of_float,float$0)}
    var
     include$112=
      Make_binable
       ([0,
         hash_fold_t$15,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$93,
         bin_writer_t$82,
         bin_reader_t$82,
         bin_t$82,
         t_of_sexp$78,
         compare$30,
         sexp_of_t$87,
         hash$41]),
     _adb_=include$112[1],
     _adc_=include$112[2],
     _add_=include$112[3],
     _ade_=include$112[4],
     _adf_=include$112[5],
     _adg_=include$112[6],
     _adh_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$176),0,bin_shape_t$50],0],
     _adi_=caml_call1(Bin_prot_Shape[4][1],cst_src_ofday_float_ml_291_2),
     group$110=caml_call2(Bin_prot_Shape[6],_adi_,_adh_),
     _adj_=caml_call1(Bin_prot_Shape[2][1],cst_t$177),
     bin_shape_t$94=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$110,_adj_),0),
     bin_writer_t$83=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$83=[0,bin_read_t$5,bin_read_t$6],
     bin_t$83=[0,bin_shape_t$94,bin_writer_t$83,bin_reader_t$83];
    function t_of_sexp$79(sexp)
     {var
       match=
        caml_call1
         (_yv_,
          function(param){return caml_call1(of_float,caml_call1(_IA_,sexp))});
      if(match){var t=match[1];return t}
      return t_of_sexp$77(sexp)}
    var
     Map$21=
      _wv_
       ([0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$94,
         bin_writer_t$83,
         bin_reader_t$83,
         bin_t$83,
         t_of_sexp$79,
         sexp_of_t$87,
         comparator$4]),
     Set$21=
      _xl_
       ([0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$94,
         bin_writer_t$83,
         bin_reader_t$83,
         bin_t$83,
         t_of_sexp$79,
         sexp_of_t$87,
         comparator$4]);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$337);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Ofday_float=
      [0,
       bin_size_t$2,
       bin_write_t$2,
       bin_read_t$5,
       bin_read_t$6,
       bin_shape_t$50,
       bin_writer_t$43,
       bin_reader_t$43,
       bin_t$43,
       t_of_sexp$77,
       sexp_of_t$87,
       typerep_of_t$8,
       typename_of_t$7,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$18,
       compare$30,
       min$1,
       max$1,
       ascending$1,
       descending$1,
       between$1,
       clamp_exn$1,
       clamp$1,
       validate_lbound$1,
       validate_ubound$1,
       validate_bound$1,
       Replace_polymorphic_compare$1,
       comparator$4,
       Map$21,
       Set$21,
       _adb_,
       _adc_,
       _add_,
       _ade_,
       _adf_,
       _adg_,
       pp$7,
       symbol$192,
       symbol$193,
       symbol$194,
       symbol$195,
       symbol$196,
       symbol$197,
       robustly_compare$2,
       quickcheck_generator$11,
       quickcheck_observer$10,
       quickcheck_shrinker$10,
       gen_incl$1,
       gen_uniform_incl$1,
       of_string$20,
       to_string$24,
       create$23,
       to_parts$0,
       start_of_day,
       start_of_next_day,
       approximate_end_of_day,
       to_span_since_start_of_day,
       of_span_since_start_of_day,
       of_span_since_start_of_day,
       span_since_start_of_day_is_valid,
       of_span_since_start_of_day_unchecked,
       add$12,
       sub$3,
       next$2,
       prev$3,
       diff$6,
       small_diff,
       to_string_trimmed,
       to_sec_string,
       of_string_iso8601_extended,
       to_millisec_string,
       to_millisec_string,
       [0,
        [0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$50,
         bin_writer_t$43,
         bin_reader_t$43,
         bin_t$43,
         compare$30,
         hash_fold_t$15,
         hash$13,
         t_of_sexp$77,
         sexp_of_t$87]]];
    caml_register_global
     (4450,Core_kernel_Ofday_float,"Core_kernel__Ofday_float");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$338);
    caml_call1(Expect_test_collector[4][1],cst_src_ofday_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$339,cst$145);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$340);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Ofday_intf=[0];
    caml_register_global
     (4451,Core_kernel_Ofday_intf,"Core_kernel__Ofday_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$341);
    caml_call1(Expect_test_collector[4][1],cst_src_time0_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$342,cst$146);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$343);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Time0_intf=[0];
    caml_register_global
     (4452,Core_kernel_Time0_intf,"Core_kernel__Time0_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$344);
    caml_call1(Expect_test_collector[4][1],cst_src_time_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$345,cst$147);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$346);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Time_intf=[0];
    caml_register_global(4453,Core_kernel_Time_intf,"Core_kernel__Time_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$347);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$348,cst$148);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$349);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _ady_(Time0)
     {var
       _a0j_=Time0[13],
       _a0k_=Time0[14],
       _a0n_=Time0[17],
       _a0p_=Time0[19],
       _a0q_=Time0[20],
       _a0t_=Time0[23],
       _a0u_=Time0[24],
       _a0v_=Time0[25],
       _a0y_=Time0[28],
       _a0z_=Time0[29],
       _a0A_=Time0[30],
       _a0B_=Time0[31],
       _a0E_=Time0[34],
       _a0T_=Time0[49],
       _aZ9_=Time0[1],
       _aZ__=Time0[2],
       _aZ$_=Time0[3],
       _a0a_=Time0[4],
       _a0b_=Time0[5],
       _a0c_=Time0[6],
       _a0d_=Time0[7],
       _a0e_=Time0[8],
       _a0f_=Time0[9],
       _a0g_=Time0[10],
       _a0h_=Time0[11],
       _a0i_=Time0[12],
       _a0l_=Time0[15],
       _a0m_=Time0[16],
       _a0o_=Time0[18],
       _a0r_=Time0[21],
       _a0s_=Time0[22],
       _a0w_=Time0[26],
       _a0x_=Time0[27],
       _a0C_=Time0[32],
       _a0D_=Time0[33],
       _a0F_=Time0[35],
       _a0G_=Time0[36],
       _a0H_=Time0[37],
       _a0I_=Time0[38],
       _a0J_=Time0[39],
       _a0K_=Time0[40],
       _a0L_=Time0[41],
       _a0M_=Time0[42],
       _a0N_=Time0[43],
       _a0O_=Time0[44],
       _a0P_=Time0[45],
       _a0Q_=Time0[46],
       _a0R_=Time0[47],
       _a0S_=Time0[48],
       _a0U_=Time0[50],
       _a0V_=Time0[51],
       _a0W_=Time0[52],
       epoch=caml_call1(_a0z_,_a0j_[74]);
      function is_earlier(t1,t2){return caml_call2(_a0q_,t1,t2)}
      function is_later(t1,t2){return caml_call2(_a0p_,t1,t2)}
      function of_span_in_seconds(span_in_seconds)
       {var _a1T_=caml_call1(Time_in_seconds[1][2],span_in_seconds);
        return caml_call1(Time0[13][83],_a1T_)}
      function of_time_in_seconds(time_in_seconds)
       {var
         _a1Q_=caml_call1(Time_in_seconds[4],time_in_seconds),
         _a1R_=caml_call1(Time_in_seconds[1][2],_a1Q_),
         _a1S_=caml_call1(Time0[13][83],_a1R_);
        return caml_call1(Time0[29],_a1S_)}
      function index$0(t,time)
       {var
         _a1N_=caml_call1(Time0[28],time),
         _a1O_=caml_call1(Time0[13][94],_a1N_),
         _a1P_=caml_call1(Time_in_seconds[1][1],_a1O_);
        return index(t,caml_call1(Time_in_seconds[3],_a1P_))}
      function index_of_date_and_ofday$0(t,relative)
       {var
         _a1K_=caml_call1(Time0[49][8],relative),
         _a1L_=caml_call1(Time0[13][94],_a1K_),
         _a1M_=caml_call1(Time_in_seconds[1][1],_a1L_);
        return index_of_date_and_ofday
                (t,caml_call1(Time_in_seconds[2][1],_a1M_))}
      function index_offset_from_utc_exn$0(t,index)
       {return of_span_in_seconds(index_offset_from_utc_exn(t,index))}
      function index_prev_clock_shift_time_exn$0(t,index)
       {return of_time_in_seconds(index_prev_clock_shift_time_exn(t,index))}
      function index_next_clock_shift_time_exn$0(t,index)
       {return of_time_in_seconds(index_next_clock_shift_time_exn(t,index))}
      function index_prev_clock_shift_amount_exn$0(t,index)
       {return of_span_in_seconds(index_prev_clock_shift_amount_exn(t,index))}
      function index_next_clock_shift_amount_exn$0(t,index)
       {return of_span_in_seconds(index_next_clock_shift_amount_exn(t,index))}
      function abbreviation(t,time)
       {return index_abbreviation_exn(t,index$0(t,time))}
      function index_prev_clock_shift(t,index)
       {var match=index_has_prev_clock_shift(t,index);
        if(0 === match)return 0;
        var _a1J_=index_prev_clock_shift_amount_exn$0(t,index);
        return [0,[0,index_prev_clock_shift_time_exn$0(t,index),_a1J_]]}
      function prev_clock_shift(t,time)
       {return index_prev_clock_shift(t,index$0(t,time))}
      function next_clock_shift(t,time)
       {var index=index$0(t,time);
        return index_prev_clock_shift(t,caml_call1(Index[1],index))}
      function date_and_ofday_of_absolute_time(t,time)
       {var
         index=index$0(t,time),
         offset_from_utc=index_offset_from_utc_exn$0(t,index);
        return caml_call2(Time0[49][5],time,offset_from_utc)}
      function absolute_time_of_date_and_ofday(t,relative)
       {var
         index=index_of_date_and_ofday$0(t,relative),
         offset_from_utc=index_offset_from_utc_exn$0(t,index);
        return caml_call2(Time0[49][6],relative,offset_from_utc)}
      var
       Zone=
        [0,
         sexp_of_t$68,
         compare$50,
         input_tz_file,
         likely_machine_zones,
         of_utc_offset,
         utc,
         name$51,
         original_filename,
         digest,
         reset_transition_cache,
         Index,
         index$0,
         index_of_date_and_ofday$0,
         index_offset_from_utc_exn$0,
         index_abbreviation_exn,
         index_has_prev_clock_shift,
         index_prev_clock_shift_time_exn$0,
         index_prev_clock_shift_amount_exn$0,
         index_has_next_clock_shift,
         index_next_clock_shift_time_exn$0,
         index_next_clock_shift_amount_exn$0,
         abbreviation,
         absolute_time_of_date_and_ofday,
         date_and_ofday_of_absolute_time,
         next_clock_shift,
         prev_clock_shift];
      function abs_diff(t1,t2)
       {var _a1I_=caml_call2(_a0v_,t1,t2);return caml_call1(_a0j_[98],_a1I_)}
      function of_date_ofday(zone,date,ofday)
       {var relative=caml_call2(_a0T_[1],date,ofday);
        return caml_call2(Zone[23],zone,relative)}
      function of_date_ofday_precise(date,ofday,zone)
       {var
         start_of_day=of_date_ofday(zone,date,_a0k_[58]),
         proposed_time=
          caml_call2(_a0t_,start_of_day,caml_call1(_a0k_[61],ofday)),
         match=caml_call2(Zone[25],zone,start_of_day);
        if(match)
         {var
           match$0=match[1],
           shift_amount=match$0[2],
           shift_start=match$0[1],
           shift_backwards=caml_call2(_a0j_[18],shift_amount,_a0j_[74]);
          if(shift_backwards)
           var s=caml_call2(_a0t_,shift_start,shift_amount),e=shift_start;
          else
           var
            e$0=caml_call2(_a0t_,shift_start,shift_amount),
            s=shift_start,
            e=e$0;
          if(caml_call2(_a0E_,proposed_time,s))
           return [0,881568161,proposed_time];
          if(caml_call2(_a0B_,s,proposed_time))
           if(caml_call2(_a0E_,proposed_time,e))
            return shift_backwards
                    ?[0,
                      748757384,
                      [0,
                       proposed_time,
                       caml_call2(_a0u_,proposed_time,shift_amount)]]
                    :[0,744337004,shift_start];
          return [0,881568161,caml_call2(_a0u_,proposed_time,shift_amount)]}
        return [0,881568161,proposed_time]}
      var date_cache=[0,Zone[6],epoch,epoch,epoch,unix_epoch];
      function reset_date_cache(param)
       {date_cache[1] = Zone[6];
        date_cache[2] = epoch;
        date_cache[3] = epoch;
        date_cache[4] = epoch;
        date_cache[5] = unix_epoch;
        return 0}
      function set_date_cache(time,zone)
       {var _a1B_=caml_call2(_Pi_,zone,date_cache[1]);
        if(_a1B_)
         {var _a1C_=caml_call2(Time0[30],time,date_cache[2]);
          if(_a1C_)
           var match=caml_call2(Time0[34],time,date_cache[3]),switch$0=1;
          else
           var _a1D_=_a1C_,switch$0=0}
        else
         var _a1D_=_a1B_,switch$0=0;
        if(! switch$0)var match=_a1D_;
        if(0 === match)
         {var
           index=caml_call2(Zone[12],zone,time),
           offset_from_utc=caml_call2(Zone[14],zone,index),
           rel=caml_call2(_a0T_[5],time,offset_from_utc),
           date=caml_call1(_a0T_[3],rel),
           _a1E_=caml_call1(_a0T_[4],rel),
           span=caml_call1(_a0k_[61],_a1E_),
           _a1F_=caml_call2(_a0T_[6],rel,offset_from_utc),
           effective_day_start=caml_call2(Time0[24],_a1F_,span),
           effective_day_until=
            caml_call2(Time0[23],effective_day_start,_a0j_[72]),
           match$0=caml_call2(Zone[16],zone,index);
          if(0 === match$0)
           var cache_start_incl=effective_day_start;
          else
           var
            _a1H_=caml_call2(Zone[17],zone,index),
            cache_start_incl=caml_call2(Time0[39],_a1H_,effective_day_start);
          var match$1=caml_call2(Zone[19],zone,index);
          if(0 === match$1)
           var cache_until_excl=effective_day_until;
          else
           var
            _a1G_=caml_call2(Zone[20],zone,index),
            cache_until_excl=caml_call2(Time0[38],_a1G_,effective_day_until);
          date_cache[1] = zone;
          date_cache[2] = cache_start_incl;
          date_cache[3] = cache_until_excl;
          date_cache[4] = effective_day_start;
          date_cache[5] = date;
          return 0}
        return 0}
      function to_date(time,zone)
       {set_date_cache(time,zone);return date_cache[5]}
      function to_ofday(time,zone)
       {set_date_cache(time,zone);
        var _a1A_=caml_call2(Time0[25],time,date_cache[4]);
        return caml_call1(_a0k_[62],_a1A_)}
      function to_date_ofday(time,zone)
       {var _a1z_=to_ofday(time,zone);return [0,to_date(time,zone),_a1z_]}
      function to_date_ofday_precise(time,zone)
       {var
         match=to_date_ofday(time,zone),
         ofday=match[2],
         date=match[1],
         match$0=caml_call2(Zone[25],zone,time),
         clock_shift_before_or_at=caml_call2(Zone[26],zone,time);
        if(clock_shift_before_or_at)
         {var
           match$2=clock_shift_before_or_at[1],
           amount=match$2[2],
           start=match$2[1];
          if
           (caml_call2
             (_a0p_,caml_call2(_a0t_,start,caml_call1(_a0j_[98],amount)),time))
           {if(caml_call2(_a0j_[17],amount,_a0j_[74]))
             {var match$1=caml_call2(_a0k_[67],ofday,amount);
              if(match$1)
               var ofday$0=match$1[1],_a1w_=[0,-687020392,[0,date,ofday$0]];
              else
               var
                _a1t_=[0,[1,[0,_adk_,[0,caml_call1(Zone[1],zone),0]]],0],
                _a1u_=caml_call1(_a0y_,time),
                _a1v_=
                 [0,[1,[0,_adl_,[0,caml_call1(_a0j_[10],_a1u_),0]]],_a1t_],
                _a1w_=
                 caml_call1
                  (_on_,
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7],cst_Time_to_date_ofday_precise),
                     _a1v_]]);
              var _a1x_=_a1w_}
            else
             {if(! caml_call2(_a0j_[18],amount,_a0j_[74]))
               throw [0,Assert_failure,_adm_];
              var
               _a1x_=
                [0,
                 1043984139,
                 caml_call2(_a0u_,time,caml_call1(_a0j_[98],amount))]}
            var ambiguity=_a1x_,switch$0=1}
          else
           var switch$0=0}
        else
         var switch$0=0;
        if(! switch$0)
         {if(match$0)
           {var match$3=match$0[1],amount$0=match$3[2],start$0=match$3[1];
            if
             (caml_call2
               (_a0n_,
                caml_call2(_a0u_,start$0,caml_call1(_a0j_[98],amount$0)),
                time))
             {if(caml_call2(_a0j_[17],amount$0,_a0j_[74]))
               var _a1y_=881570188;
              else
               {if(! caml_call2(_a0j_[18],amount$0,_a0j_[74]))
                 throw [0,Assert_failure,_adn_];
                var
                 _a1y_=
                  [0,
                   1043984139,
                   caml_call2(_a0t_,time,caml_call1(_a0j_[98],amount$0))]}
              var ambiguity=_a1y_,switch$1=1}
            else
             var switch$1=0}
          else
           var switch$1=0;
          if(! switch$1)var ambiguity=881570188}
        return [0,date,ofday,ambiguity]}
      function convert(from_tz,to_tz,date,ofday)
       {var start_time=of_date_ofday(from_tz,date,ofday);
        return to_date_ofday(start_time,to_tz)}
      function utc_offset$0(t,zone)
       {var
         utc_epoch=caml_call2(Zone[24],zone,t),
         _a1r_=caml_call1(_a0y_,t),
         _a1s_=caml_call1(_a0T_[8],utc_epoch);
        return caml_call2(_a0j_[97],_a1s_,_a1r_)}
      function offset_string(time,zone)
       {var
         utc_offset=utc_offset$0(time,zone),
         is_utc=caml_call2(_a0j_[16],utc_offset,_a0j_[74]);
        if(is_utc)return cst_Z;
        var
         _a1n_=caml_call1(_a0j_[98],utc_offset),
         _a1o_=caml_call1(_a0k_[62],_a1n_),
         _a1p_=[0,caml_call1(_a0k_[72],_a1o_),0],
         _a1q_=caml_call2(_a0j_[18],utc_offset,_a0j_[74])?cst$149:cst$150;
        return caml_call2(_Cx_,0,[0,_a1q_,_a1p_])}
      function to_string_abs_parts(time,zone)
       {var
         match=to_date_ofday(time,zone),
         ofday=match[2],
         date=match[1],
         offset_string$0=offset_string(time,zone),
         _a1m_=
          [0,
           caml_call2
            (_Cx_,_ado_,[0,caml_call1(_a0k_[55],ofday),[0,offset_string$0,0]]),
           0];
        return [0,to_string$21(date),_a1m_]}
      function to_string_abs_trimmed(time,zone)
       {var
         match=to_date_ofday(time,zone),
         ofday=match[2],
         date=match[1],
         offset_string$0=offset_string(time,zone),
         _a1l_=
          [0,caml_call2(_Gu_,caml_call1(_a0k_[72],ofday),offset_string$0),0];
        return caml_call2(_Cx_,_adp_,[0,to_string$21(date),_a1l_])}
      function to_string_abs(time,zone)
       {return caml_call2(_Cx_,_adq_,to_string_abs_parts(time,zone))}
      function to_string(t){return to_string_abs(t,Zone[6])}
      function to_string_iso8601_basic(time,zone)
       {return caml_call2(_Cx_,_adr_,to_string_abs_parts(time,zone))}
      function to_string_trimmed(t,zone)
       {var
         match=to_date_ofday(t,zone),
         sec=match[2],
         date=match[1],
         _a1k_=caml_call2(_Gu_,cst$151,caml_call1(_a0k_[72],sec));
        return caml_call2(_Gu_,to_string$21(date),_a1k_)}
      function to_sec_string(t,zone)
       {var
         match=to_date_ofday(t,zone),
         sec=match[2],
         date=match[1],
         _a1j_=caml_call2(_Gu_,cst$152,caml_call1(_a0k_[73],sec));
        return caml_call2(_Gu_,to_string$21(date),_a1j_)}
      function to_filename_string(t,zone)
       {var
         match=to_date_ofday(t,zone),
         ofday=match[2],
         date=match[1],
         _a1i_=
          caml_call2
           (_Gu_,cst$153,caml_call3(_Dd_,58,45,caml_call1(_a0k_[55],ofday)));
        return caml_call2(_Gu_,to_string$21(date),_a1i_)}
      function of_filename_string(s,zone)
       {try
         {var match=caml_call2(_C0_,s,95);
          if(match)
           var
            match$0=match[1],
            ofday=match$0[2],
            date=match$0[1],
            date$0=of_string$17(date),
            ofday$0=caml_call3(_Dd_,45,58,ofday),
            ofday$1=caml_call1(_a0k_[54],ofday$0),
            _a1h_=of_date_ofday(zone,date$0,ofday$1);
          else
           var _a1h_=caml_call1(_Gg_,cst_no_space_in_filename_string);
          return _a1h_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return caml_call4(_Ph_,_ads_,s,caml_call1(Base_Exn[9],exn),0)}}
      function of_localized_string(zone,str)
       {try
         {var match=caml_call2(_C0_,str,32);
          if(match)
           var
            match$0=match[1],
            time=match$0[2],
            date=match$0[1],
            date$0=of_string$17(date),
            ofday=caml_call1(_a0k_[54],time),
            _a1g_=of_date_ofday(zone,date$0,ofday);
          else
           var _a1g_=caml_call1(_Gf_,caml_call2(_fE_,_adt_,str));
          return _a1g_}
        catch(e)
         {e = caml_wrap_exception(e);
          return caml_call2(Base_Exn[7],e,cst_Time_of_localized_string)}}
      function occurrence(before_or_after,t,ofday,zone)
       {var
         first_guess_date=to_date(t,zone),
         first_guess=of_date_ofday(zone,first_guess_date,ofday);
        if(476625469 <= before_or_after)
         var cmp=_a0A_,increment=1;
        else
         var cmp=_a0B_,increment=-1;
        return caml_call2(cmp,first_guess,t)
                ?first_guess
                :of_date_ofday
                  (zone,add_days$0(first_guess_date,increment),ofday)}
      function ensure_colon_in_offset(offset)
       {var offset_length=caml_ml_string_length(offset);
        if(caml_call2(symbol$49,offset_length,2))
         if(caml_call1(_Fx_,caml_string_get(offset,0)))
          if(caml_call1(_Fx_,caml_string_get(offset,offset_length - 1 | 0)))
           return caml_call2(_Gu_,offset,cst_00);
        if(! caml_call2(_FW_,caml_string_get(offset,1),58))
         if(! caml_call2(_FW_,caml_string_get(offset,2),58))
          {if(! caml_call2(symbol$52,offset_length,3))
            if(! caml_call2(symbol$51,offset_length,4))
             {var
               _a1f_=
                [0,
                 cst$154,
                 [0,slice$2(offset,offset_length - 2 | 0,offset_length),0]];
              return caml_call2
                      (_Cx_,0,[0,slice$2(offset,0,offset_length - 2 | 0),_a1f_])}
           return caml_call3(_Pg_,_adu_,offset,0)}
        return offset}
      var
       Time_of_string=
        [248,
         cst_Core_kernel_Time_Make_Time0_Time_of_string,
         caml_fresh_oo_id(0)];
      function _a0X_(param)
       {if(param[1] === Time_of_string)
         {var
           v1=param[3],
           v0=param[2],
           v0$0=caml_call1(sexp_of_t$40,v0),
           v1$0=caml_call1(Base_Exn[1],v1);
          return [1,[0,_adv_,[0,v0$0,[0,v1$0,0]]]]}
        throw [0,Assert_failure,_adw_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Time_of_string,_a0X_);
      function of_string_gen(default_zone,find_zone,s)
       {try
         {var match=caml_call2(_C2_,s,32);
          if(match)
           {var _a05_=match[2],_a06_=match[1];
            if(_a05_)
             {var _a07_=_a05_[2],_a08_=_a05_[1];
              if(_a07_)
               {var _a09_=_a07_[2],_a0__=_a07_[1];
                if(_a09_)
                 if(_a09_[2])
                  var switch$0=0;
                 else
                  var
                   ofday$2=_a09_[1],
                   date=
                    caml_call2
                     (_Cx_,
                      0,
                      [0,_a06_,[0,cst$156,[0,_a08_,[0,cst$155,[0,_a0__,0]]]]]),
                   ofday=ofday$2,
                   tz=0,
                   switch$0=1;
                else
                 var date=_a06_,ofday=_a08_,tz=[0,_a0__],switch$0=1}
              else
               var date=_a06_,ofday=_a08_,tz=0,switch$0=1}
            else
             {var match$4=caml_call2(_C1_,_a06_,84);
              if(match$4)
               var
                match$5=match$4[1],
                ofday$3=match$5[2],
                date$1=match$5[1],
                date=date$1,
                ofday=ofday$3,
                tz=0,
                switch$0=1;
              else
               var
                _a1d_=caml_call1(_Gg_,cst_no_spaces_or_T_found),
                date=_a1d_[1],
                ofday=_a1d_[2],
                tz=_a1d_[3],
                switch$0=1}}
          else
           var switch$0=0;
          if(! switch$0)
           var
            _a0$_=caml_call1(_Gg_,cst_too_many_spaces),
            date=_a0$_[1],
            ofday=_a0$_[2],
            tz=_a0$_[3];
          var
           ofday_to_sec=
            function(od)
             {var _a1e_=caml_call1(_a0k_[61],od);
              return caml_call1(_a0j_[90],_a1e_)};
          if(tz)
           var ofday$0=ofday,utc_offset$0=0;
          else
           if
            (caml_call2
              (_FW_,
               caml_string_get(ofday,caml_ml_string_length(ofday) - 1 | 0),
               90))
            var
             ofday$0=
              caml_call3(_Ca_,ofday,0,caml_ml_string_length(ofday) - 1 | 0),
             utc_offset$0=utc_offset;
           else
            {var match$0=caml_call2(_C0_,ofday,43);
             if(match$0)
              var
               match$1=match$0[1],
               r=match$1[2],
               l=match$1[1],
               _a1b_=ensure_colon_in_offset(r),
               ofday$0=l,
               utc_offset$0=[0,ofday_to_sec(caml_call1(_a0k_[54],_a1b_))];
             else
              {var match$2=caml_call2(_C0_,ofday,45);
               if(match$2)
                var
                 match$3=match$2[1],
                 r$0=match$3[2],
                 l$0=match$3[1],
                 _a1c_=ensure_colon_in_offset(r$0),
                 ofday$0=l$0,
                 utc_offset$0=
                  [0,-1. * ofday_to_sec(caml_call1(_a0k_[54],_a1c_))];
               else
                var ofday$0=ofday,utc_offset$0=0}}
          var date$0=of_string$17(date),ofday$1=caml_call1(_a0k_[54],ofday$0);
          if(tz)
           var
            tz$0=tz[1],
            _a1a_=of_date_ofday(caml_call1(find_zone,tz$0),date$0,ofday$1);
          else
           if(utc_offset$0)
            var
             utc_offset$1=utc_offset$0[1],
             utc_t=of_date_ofday(Zone[6],date$0,ofday$1),
             _a1a_=caml_call2(_a0u_,utc_t,caml_call1(_a0j_[80],utc_offset$1));
           else
            var
             zone=caml_call1(default_zone,0),
             _a1a_=of_date_ofday(zone,date$0,ofday$1);
          return _a1a_}
        catch(e){e = caml_wrap_exception(e);throw [0,Time_of_string,s,e]}}
      function of_string(s)
       {function default_zone(param)
         {var _a04_=[0,caml_call1(Sexplib0_Sexp_conv[7],s),0];
          return caml_call1
                  (_on_,
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7],
                       cst_time_has_no_time_zone_or_UTC_offset),
                     _a04_]])}
        function find_zone(zone_name)
         {return caml_call3(_Pg_,_adx_,zone_name,0)}
        return of_string_gen(default_zone,find_zone,s)}
      var
       quickcheck_shrinker=caml_call3(_u$_[6],_a0j_[61],_a0z_,_a0y_),
       quickcheck_observer=caml_call2(_va_[18],_a0j_[60],_a0y_),
       quickcheck_generator=caml_call2(_vb_[10],_a0j_[59],_a0z_);
      function gen_incl(lo,hi)
       {var
         _a01_=caml_call1(_a0y_,hi),
         _a02_=caml_call1(_a0y_,lo),
         _a03_=caml_call2(_a0j_[62],_a02_,_a01_);
        return caml_call2(_vb_[10],_a03_,_a0z_)}
      function gen_uniform_incl(lo,hi)
       {var
         _a0Y_=caml_call1(_a0y_,hi),
         _a0Z_=caml_call1(_a0y_,lo),
         _a00_=caml_call2(_a0j_[63],_a0Z_,_a0Y_);
        return caml_call2(_vb_[10],_a00_,_a0z_)}
      return [0,
              _aZ9_,
              _aZ__,
              _aZ$_,
              _a0a_,
              _a0b_,
              _a0c_,
              _a0d_,
              _a0e_,
              _a0f_,
              _a0g_,
              _a0h_,
              _a0i_,
              _a0j_,
              _a0k_,
              _a0l_,
              _a0m_,
              _a0n_,
              _a0o_,
              _a0p_,
              _a0q_,
              _a0r_,
              _a0s_,
              _a0w_,
              _a0x_,
              _a0y_,
              _a0z_,
              _a0A_,
              _a0B_,
              _a0C_,
              _a0D_,
              _a0E_,
              _a0F_,
              _a0G_,
              _a0H_,
              _a0I_,
              _a0J_,
              _a0K_,
              _a0L_,
              _a0M_,
              _a0N_,
              _a0O_,
              _a0P_,
              _a0Q_,
              _a0R_,
              _a0S_,
              _a0T_,
              _a0U_,
              _a0V_,
              _a0W_,
              Zone,
              _a0t_,
              _a0u_,
              _a0v_,
              abs_diff,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker,
              gen_incl,
              gen_uniform_incl,
              is_earlier,
              is_later,
              of_date_ofday,
              of_date_ofday_precise,
              to_date_ofday,
              to_date_ofday_precise,
              to_date,
              to_ofday,
              reset_date_cache,
              epoch,
              convert,
              utc_offset$0,
              of_string,
              to_string,
              to_filename_string,
              of_filename_string,
              to_string_abs,
              to_string_abs_trimmed,
              to_string_abs_parts,
              to_string_trimmed,
              to_sec_string,
              of_localized_string,
              of_string_gen,
              to_string_iso8601_basic,
              occurrence]}
    var Core_kernel_Time=[0,_ady_];
    caml_register_global(4454,Core_kernel_Time,"Core_kernel__Time");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$350);
    caml_call1(Expect_test_collector[4][1],cst_src_time_float0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$351,cst$157);
    var
     include$113=caml_call1(Robust_compare[1],[0,1e-06]),
     symbol$198=include$113[2],
     symbol$199=include$113[3],
     symbol$200=include$113[4],
     symbol$201=include$113[5],
     symbol$202=include$113[6],
     symbol$203=include$113[7],
     robustly_compare$3=include$113[8];
    function diff$7(t1,t2)
     {return to_span_since_epoch(caml_call2(symbol$22,t1,t2))}
    function add$13(t,span){return t + span}
    function sub$4(t,span){return t - span}
    function prev$4(t){return caml_call2(_IX_,759637122,t)}
    function next$3(t){return caml_call2(_IX_,19067,t)}
    function of_synthetic_span_since_epoch(span){return span}
    function to_synthetic_span_since_epoch(t){return to_span_since_epoch(t)}
    function of_date_ofday(date,ofday)
     {var
       _aZ7_=Days[5],
       _aZ8_=caml_call1(Days[1],date),
       days=caml_call1(_IY_,caml_call2(Days[3],_aZ8_,_aZ7_));
      return days * 86400. + to_span_since_start_of_day(ofday)}
    function to_absolute(relative,offset_from_utc)
     {return relative - offset_from_utc}
    function of_absolute(absolute,offset_from_utc)
     {return absolute + offset_from_utc}
    var sec_per_day=caml_call1(of_int$3,86400);
    function to_days_from_epoch(t)
     {var
       _aZ4_=caml_call2(symbol$15,t,253402300800.),
       gmtime_lower_bound=-62167219200.,
       _aZ5_=_aZ4_ || caml_call2(symbol$19,t,gmtime_lower_bound);
      if(_aZ5_)caml_call3(_Pg_,_adz_,t,0);
      var
       _aZ6_=caml_call1(of_float$4,t),
       days_from_epoch_approx=caml_call2(include$61[96][4],_aZ6_,sec_per_day);
      return caml_call2
               (symbol$19,
                t,
                caml_call1
                 (to_float$3,
                  caml_call2
                   (include$61[96][3],days_from_epoch_approx,sec_per_day)))
              ?caml_call1(pred$1,days_from_epoch_approx)
              :days_from_epoch_approx}
    function ofday_of_days_from_epoch(t,days_from_epoch)
     {var
       days_from_epoch_in_sec=
        caml_call1
         (to_float$3,
          caml_call2(include$61[96][3],days_from_epoch,sec_per_day)),
       remainder=t - days_from_epoch_in_sec;
      return of_span_since_start_of_day(to_span_since_epoch(remainder))}
    function date_of_days_from_epoch(days_from_epoch)
     {var
       _aZ2_=caml_call1(to_int_exn$2,days_from_epoch),
       _aZ3_=caml_call2(Days[4],Days[5],_aZ2_);
      return caml_call1(Days[2],_aZ3_)}
    function to_date$0(t)
     {var days_from_epoch=to_days_from_epoch(t);
      return date_of_days_from_epoch(days_from_epoch)}
    function to_ofday(t)
     {var days_from_epoch=to_days_from_epoch(t);
      return ofday_of_days_from_epoch(t,days_from_epoch)}
    function to_date_ofday(t)
     {var
       days_from_epoch=to_days_from_epoch(t),
       date=date_of_days_from_epoch(days_from_epoch),
       ofday=ofday_of_days_from_epoch(t,days_from_epoch);
      return [0,date,ofday]}
    function next_multiple_internal(can_equal_after,base,after,interval)
     {if(caml_call2(symbol$16,interval,zero))
       failwiths
        (0,
         _adA_,
         cst_Time_next_multiple_got_nonpositive_interval,
         interval,
         sexp_of_t$86);
      var base_to_after=diff$7(after,base);
      if(caml_call2(symbol$19,base_to_after,zero))return base;
      var
       next=
        base
        +
        caml_call2
         (scale,interval,caml_call2(_I3_,_adB_,base_to_after / interval));
      if(! caml_call2(symbol$18,next,after))
       {var switch$0=can_equal_after?caml_call2(symbol$17,next,after)?0:1:1;
        if(switch$0)return next + interval}
      return next}
    function next_multiple(opt,base,after,interval,param)
     {if(opt)var sth=opt[1],can_equal_after=sth;else var can_equal_after=0;
      return next_multiple_internal(can_equal_after,base,after,interval)}
    function prev_multiple(opt,base,before,interval,param)
     {if(opt)var sth=opt[1],can_equal_before=sth;else var can_equal_before=0;
      return next_multiple_internal
              (1 - can_equal_before,base,before - interval,interval)}
    function now(param)
     {var float_ns=caml_call1(to_float$3,caml_call1(Time_now[1],0));
      return to_span_since_epoch(float_ns * 1e-09)}
    var Stable$7=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$352);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Date_and_ofday$0=
      [0,
       of_date_ofday,
       to_date_ofday,
       to_date$0,
       to_ofday,
       of_absolute,
       to_absolute,
       of_synthetic_span_since_epoch,
       to_synthetic_span_since_epoch],
     Ofday=
      [0,
       bin_size_t$2,
       bin_write_t$2,
       bin_read_t$5,
       bin_read_t$6,
       bin_shape_t$50,
       bin_writer_t$43,
       bin_reader_t$43,
       bin_t$43,
       t_of_sexp$77,
       sexp_of_t$87,
       typerep_of_t$8,
       typename_of_t$7,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$18,
       compare$30,
       min$1,
       max$1,
       ascending$1,
       descending$1,
       between$1,
       clamp_exn$1,
       clamp$1,
       validate_lbound$1,
       validate_ubound$1,
       validate_bound$1,
       comparator$4,
       _adb_,
       _adc_,
       _add_,
       pp$7,
       symbol$192,
       symbol$193,
       symbol$194,
       symbol$195,
       symbol$196,
       symbol$197,
       robustly_compare$2,
       quickcheck_generator$11,
       quickcheck_observer$10,
       quickcheck_shrinker$10,
       gen_incl$1,
       gen_uniform_incl$1,
       of_string$20,
       to_string$24,
       create$23,
       to_parts$0,
       start_of_day,
       start_of_next_day,
       approximate_end_of_day,
       to_span_since_start_of_day,
       of_span_since_start_of_day,
       of_span_since_start_of_day,
       span_since_start_of_day_is_valid,
       of_span_since_start_of_day_unchecked,
       add$12,
       sub$3,
       next$2,
       prev$3,
       diff$6,
       small_diff,
       to_string_trimmed,
       to_sec_string,
       of_string_iso8601_extended,
       to_millisec_string,
       to_millisec_string],
     Span$0=
      [0,
       bin_size_t$2,
       bin_write_t$2,
       bin_read_t$5,
       bin_read_t$6,
       bin_shape_t$50,
       bin_writer_t$43,
       bin_reader_t$43,
       bin_t$43,
       t_of_sexp$74,
       sexp_of_t$86,
       typerep_of_t$8,
       typename_of_t$7,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$18,
       compare$30,
       min$1,
       max$1,
       ascending$1,
       descending$1,
       between$1,
       clamp_exn$1,
       clamp$1,
       validate_lbound$1,
       validate_ubound$1,
       validate_bound$1,
       comparator$4,
       validate_positive,
       validate_non_negative,
       validate_negative,
       validate_non_positive,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       _acV_,
       _acW_,
       _acX_,
       _acR_,
       symbol$182,
       symbol$183,
       symbol$184,
       symbol$185,
       symbol$186,
       symbol$187,
       robustly_compare$1,
       quickcheck_generator$7,
       quickcheck_observer$6,
       quickcheck_shrinker$6,
       gen_incl$0,
       gen_uniform_incl$0,
       to_string$23,
       of_string$19,
       nanosecond,
       microsecond,
       millisecond,
       second$0,
       minute,
       hour,
       day$0,
       robust_comparison_tolerance,
       zero,
       create$22,
       to_parts,
       of_ns,
       of_us,
       of_ms,
       to_span_since_epoch,
       of_int_sec,
       of_int32_seconds,
       of_int63_seconds,
       of_min,
       of_hr,
       of_day,
       to_ns,
       to_us,
       to_ms,
       of_span_since_epoch,
       to_min,
       to_hr,
       to_day,
       to_int63_seconds_round_down_exn,
       to_float,
       symbol$21,
       symbol$22,
       abs,
       neg,
       scale,
       symbol$188,
       symbol$189,
       next$1,
       prev$2,
       to_short_string,
       to_unit_of_time,
       of_unit_of_time,
       to_string_hum$9,
       randomize$0],
     include$114=
      [0,
       Span$0,
       Ofday,
       bin_size_t$2,
       bin_write_t$2,
       bin_read_t$5,
       bin_read_t$6,
       bin_shape_t$50,
       bin_writer_t$43,
       bin_reader_t$43,
       bin_t$43,
       hash_fold_t$15,
       hash$13,
       typerep_of_t$8,
       typename_of_t$7,
       Replace_polymorphic_compare$1,
       symbol$198,
       symbol$199,
       symbol$200,
       symbol$201,
       symbol$202,
       symbol$203,
       robustly_compare$3,
       add$13,
       sub$4,
       diff$7,
       next$3,
       prev$4,
       to_span_since_epoch,
       of_span_since_epoch,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$18,
       compare$30,
       min$1,
       max$1,
       ascending$1,
       descending$1,
       between$1,
       clamp_exn$1,
       clamp$1,
       comparator$4,
       validate_lbound$1,
       validate_ubound$1,
       validate_bound$1,
       Date_and_ofday$0,
       next_multiple,
       prev_multiple,
       now,
       Stable$7];
    caml_register_global(4456,include$114,"Core_kernel__Time_float0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$353);
    caml_call1(Expect_test_collector[4][1],cst_src_time_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$354,cst$158);
    var
     _adC_=
      _ady_
       ([0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$50,
         bin_writer_t$43,
         bin_reader_t$43,
         bin_t$43,
         hash_fold_t$15,
         hash$13,
         typerep_of_t$8,
         typename_of_t$7,
         [0,
          Span$0[1],
          Span$0[2],
          Span$0[3],
          Span$0[4],
          Span$0[5],
          Span$0[6],
          Span$0[7],
          Span$0[8],
          Span$0[9],
          Span$0[10],
          Span$0[11],
          Span$0[12],
          Parts,
          Span$0[13],
          Span$0[14],
          Span$0[15],
          Span$0[16],
          Span$0[17],
          Span$0[18],
          Span$0[19],
          Span$0[20],
          Span$0[21],
          Span$0[22],
          Span$0[23],
          Span$0[24],
          Span$0[25],
          Span$0[26],
          Span$0[27],
          Span$0[28],
          Span$0[29],
          Span$0[30],
          Replace_polymorphic_compare$1,
          Span$0[31],
          Map$20,
          Set$20,
          Span$0[32],
          Span$0[33],
          Span$0[34],
          Span$0[35],
          Span$0[36],
          Span$0[37],
          Span$0[38],
          Span$0[39],
          Span$0[40],
          Span$0[41],
          Span$0[42],
          Span$0[43],
          _acY_,
          _acZ_,
          _ac0_,
          Span$0[44],
          Span$0[45],
          Span$0[46],
          Span$0[47],
          Span$0[48],
          Span$0[49],
          Span$0[50],
          Span$0[51],
          Span$0[52],
          Span$0[53],
          Span$0[54],
          Span$0[55],
          Span$0[56],
          Span$0[57],
          Span$0[58],
          Span$0[59],
          Span$0[60],
          Span$0[61],
          Span$0[62],
          Span$0[63],
          Span$0[64],
          Span$0[65],
          Span$0[66],
          Span$0[67],
          Span$0[68],
          Span$0[69],
          Span$0[70],
          Span$0[71],
          Span$0[72],
          Span$0[73],
          Span$0[74],
          Span$0[75],
          Span$0[76],
          Span$0[77],
          Span$0[78],
          Span$0[79],
          Span$0[80],
          Span$0[81],
          Span$0[82],
          Span$0[83],
          Span$0[84],
          Span$0[85],
          Span$0[86],
          Span$0[87],
          Span$0[88],
          Span$0[89],
          Span$0[90],
          Span$0[91],
          Span$0[92],
          Span$0[93],
          Span$0[94],
          Span$0[95],
          Span$0[96],
          Span$0[97],
          Span$0[98],
          Span$0[99],
          Span$0[100],
          Span$0[101],
          Span$0[102]],
         [0,
          Ofday[1],
          Ofday[2],
          Ofday[3],
          Ofday[4],
          Ofday[5],
          Ofday[6],
          Ofday[7],
          Ofday[8],
          Ofday[9],
          Ofday[10],
          Ofday[11],
          Ofday[12],
          Ofday[13],
          Ofday[14],
          Ofday[15],
          Ofday[16],
          Ofday[17],
          Ofday[18],
          Ofday[19],
          Ofday[20],
          Ofday[21],
          Ofday[22],
          Ofday[23],
          Ofday[24],
          Ofday[25],
          Ofday[26],
          Ofday[27],
          Ofday[28],
          Ofday[29],
          Ofday[30],
          Replace_polymorphic_compare$1,
          Ofday[31],
          Map$21,
          Set$21,
          Ofday[32],
          Ofday[33],
          Ofday[34],
          _ade_,
          _adf_,
          _adg_,
          Ofday[35],
          Ofday[36],
          Ofday[37],
          Ofday[38],
          Ofday[39],
          Ofday[40],
          Ofday[41],
          Ofday[42],
          Ofday[43],
          Ofday[44],
          Ofday[45],
          Ofday[46],
          Ofday[47],
          Ofday[48],
          Ofday[49],
          Ofday[50],
          Ofday[51],
          Ofday[52],
          Ofday[53],
          Ofday[54],
          Ofday[55],
          Ofday[56],
          Ofday[57],
          Ofday[58],
          Ofday[59],
          Ofday[60],
          Ofday[61],
          Ofday[62],
          Ofday[63],
          Ofday[64],
          Ofday[65],
          Ofday[66],
          Ofday[67],
          Ofday[68],
          Ofday[69],
          Ofday[70]],
         Replace_polymorphic_compare$1,
         symbol$198,
         symbol$199,
         symbol$200,
         symbol$201,
         symbol$202,
         symbol$203,
         robustly_compare$3,
         add$13,
         sub$4,
         diff$7,
         next$3,
         prev$4,
         to_span_since_epoch,
         of_span_since_epoch,
         symbol$15,
         symbol$16,
         symbol$17,
         symbol$18,
         symbol$19,
         symbol$20,
         equal$18,
         compare$30,
         min$1,
         max$1,
         ascending$1,
         descending$1,
         between$1,
         clamp_exn$1,
         clamp$1,
         comparator$4,
         validate_lbound$1,
         validate_ubound$1,
         validate_bound$1,
         Date_and_ofday$0,
         next_multiple,
         prev_multiple,
         now]),
     _adD_=_adC_[50],
     _adQ_=_adC_[66],
     _ad2_=_adC_[78],
     _ad6_=_adC_[82],
     _adE_=_adC_[54],
     _adF_=_adC_[55],
     _adG_=_adC_[56],
     _adH_=_adC_[57],
     _adI_=_adC_[58],
     _adJ_=_adC_[59],
     _adK_=_adC_[60],
     _adL_=_adC_[61],
     _adM_=_adC_[62],
     _adN_=_adC_[63],
     _adO_=_adC_[64],
     _adP_=_adC_[65],
     _adR_=_adC_[67],
     _adS_=_adC_[68],
     _adT_=_adC_[69],
     _adU_=_adC_[70],
     _adV_=_adC_[71],
     _adW_=_adC_[72],
     _adX_=_adC_[73],
     _adY_=_adC_[74],
     _adZ_=_adC_[75],
     _ad0_=_adC_[76],
     _ad1_=_adC_[77],
     _ad3_=_adC_[79],
     _ad4_=_adC_[80],
     _ad5_=_adC_[81],
     _ad7_=_adC_[83],
     _ad8_=_adC_[84],
     _ad9_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$178),0,bin_shape_t$50],0],
     _ad__=caml_call1(Bin_prot_Shape[4][1],cst_src_time_float_ml_18_6),
     group$111=caml_call2(Bin_prot_Shape[6],_ad__,_ad9_),
     _ad$_=caml_call1(Bin_prot_Shape[2][1],cst_t$179),
     bin_shape_t$95=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$111,_ad$_),0),
     bin_writer_t$84=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$84=[0,bin_read_t$5,bin_read_t$6],
     bin_t$84=[0,bin_shape_t$95,bin_writer_t$84,bin_reader_t$84];
    function hash$42(x){return caml_call1(hash$13,x)}
    function sexp_of_t$88(t)
     {return caml_call2(_pf_,sexp_of_t$40,caml_call2(_ad2_,t,_adD_[6]))}
    function t_of_sexp$80(sexp)
     {try
       {if(1 === sexp[0])
         {var _aZV_=sexp[1];
          if(_aZV_)
           {var _aZW_=_aZV_[1];
            if(0 === _aZW_[0])
             {var _aZX_=_aZV_[2];
              if(_aZX_)
               {var _aZY_=_aZX_[1],_aZZ_=_aZW_[1];
                if(0 === _aZY_[0])
                 if(_aZX_[2])
                  var switch$0=0;
                 else
                  var
                   ofday_and_possibly_zone=_aZY_[1],
                   _aZ0_=
                    caml_call2
                     (_Gu_,
                      _aZZ_,
                      caml_call2(_Gu_,cst$159,ofday_and_possibly_zone)),
                   _aZ1_=
                    function(param)
                     {return caml_call2
                              (_Of_,
                               cst_Time_Stable_With_utc_V2_t_of_sexp_unknown_time_zone,
                               sexp)},
                   _aZU_=
                    caml_call3
                     (_ad6_,function(param){return _adD_[6]},_aZ1_,_aZ0_),
                   switch$0=1;
                else
                 var switch$0=0}
              else
               var switch$0=0}
            else
             var switch$0=0}
          else
           var switch$0=0}
        else
         var switch$0=0;
        if(! switch$0)
         var
          _aZU_=
           caml_call2(_Of_,cst_Time_Stable_With_utc_V2_t_of_sexp,sexp);
        return _aZU_}
      catch(e)
       {e = caml_wrap_exception(e);
        if(e[1] === _Oe_)throw e;
        return caml_call2
                (_Of_,caml_call2(_fE_,_aea_,caml_call1(Base_Exn[9],e)),sexp)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$355);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _aeb_=
      [0,
       [0,
        [0,
         hash_fold_t$15,
         hash$42,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$95,
         bin_writer_t$84,
         bin_reader_t$84,
         bin_t$84,
         compare$30,
         t_of_sexp$80,
         sexp_of_t$88]],
       _WQ_],
     _aec_=
      [0,
       Span$0[1],
       Span$0[2],
       Span$0[3],
       Span$0[4],
       Span$0[5],
       Span$0[6],
       Span$0[7],
       Span$0[8],
       Span$0[9],
       Span$0[10],
       Span$0[11],
       Span$0[12],
       Parts,
       Span$0[13],
       Span$0[14],
       Span$0[15],
       Span$0[16],
       Span$0[17],
       Span$0[18],
       Span$0[19],
       Span$0[20],
       Span$0[21],
       Span$0[22],
       Span$0[23],
       Span$0[24],
       Span$0[25],
       Span$0[26],
       Span$0[27],
       Span$0[28],
       Span$0[29],
       Span$0[30],
       Replace_polymorphic_compare$1,
       Span$0[31],
       Map$20,
       Set$20,
       Span$0[32],
       Span$0[33],
       Span$0[34],
       Span$0[35],
       Span$0[36],
       Span$0[37],
       Span$0[38],
       Span$0[39],
       Span$0[40],
       Span$0[41],
       Span$0[42],
       Span$0[43],
       _acY_,
       _acZ_,
       _ac0_,
       Span$0[44],
       Span$0[45],
       Span$0[46],
       Span$0[47],
       Span$0[48],
       Span$0[49],
       Span$0[50],
       Span$0[51],
       Span$0[52],
       Span$0[53],
       Span$0[54],
       Span$0[55],
       Span$0[56],
       Span$0[57],
       Span$0[58],
       Span$0[59],
       Span$0[60],
       Span$0[61],
       Span$0[62],
       Span$0[63],
       Span$0[64],
       Span$0[65],
       Span$0[66],
       Span$0[67],
       Span$0[68],
       Span$0[69],
       Span$0[70],
       Span$0[71],
       Span$0[72],
       Span$0[73],
       Span$0[74],
       Span$0[75],
       Span$0[76],
       Span$0[77],
       Span$0[78],
       Span$0[79],
       Span$0[80],
       Span$0[81],
       Span$0[82],
       Span$0[83],
       Span$0[84],
       Span$0[85],
       Span$0[86],
       Span$0[87],
       Span$0[88],
       Span$0[89],
       Span$0[90],
       Span$0[91],
       Span$0[92],
       Span$0[93],
       Span$0[94],
       Span$0[95],
       Span$0[96],
       Span$0[97],
       Span$0[98],
       Span$0[99],
       Span$0[100],
       Span$0[101],
       Span$0[102]],
     Core_kernel_Time_float=
      [0,
       bin_size_t$2,
       bin_write_t$2,
       bin_read_t$5,
       bin_read_t$6,
       bin_shape_t$50,
       bin_writer_t$43,
       bin_reader_t$43,
       bin_t$43,
       hash_fold_t$15,
       hash$13,
       typerep_of_t$8,
       typename_of_t$7,
       _aec_,
       [0,
        Ofday[1],
        Ofday[2],
        Ofday[3],
        Ofday[4],
        Ofday[5],
        Ofday[6],
        Ofday[7],
        Ofday[8],
        Ofday[9],
        Ofday[10],
        Ofday[11],
        Ofday[12],
        Ofday[13],
        Ofday[14],
        Ofday[15],
        Ofday[16],
        Ofday[17],
        Ofday[18],
        Ofday[19],
        Ofday[20],
        Ofday[21],
        Ofday[22],
        Ofday[23],
        Ofday[24],
        Ofday[25],
        Ofday[26],
        Ofday[27],
        Ofday[28],
        Ofday[29],
        Ofday[30],
        Replace_polymorphic_compare$1,
        Ofday[31],
        Map$21,
        Set$21,
        Ofday[32],
        Ofday[33],
        Ofday[34],
        _ade_,
        _adf_,
        _adg_,
        Ofday[35],
        Ofday[36],
        Ofday[37],
        Ofday[38],
        Ofday[39],
        Ofday[40],
        Ofday[41],
        Ofday[42],
        Ofday[43],
        Ofday[44],
        Ofday[45],
        Ofday[46],
        Ofday[47],
        Ofday[48],
        Ofday[49],
        Ofday[50],
        Ofday[51],
        Ofday[52],
        Ofday[53],
        Ofday[54],
        Ofday[55],
        Ofday[56],
        Ofday[57],
        Ofday[58],
        Ofday[59],
        Ofday[60],
        Ofday[61],
        Ofday[62],
        Ofday[63],
        Ofday[64],
        Ofday[65],
        Ofday[66],
        Ofday[67],
        Ofday[68],
        Ofday[69],
        Ofday[70]],
       Replace_polymorphic_compare$1,
       symbol$198,
       symbol$199,
       symbol$200,
       symbol$201,
       symbol$202,
       symbol$203,
       robustly_compare$3,
       next$3,
       prev$4,
       to_span_since_epoch,
       of_span_since_epoch,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$18,
       compare$30,
       min$1,
       max$1,
       ascending$1,
       descending$1,
       between$1,
       clamp_exn$1,
       clamp$1,
       comparator$4,
       validate_lbound$1,
       validate_ubound$1,
       validate_bound$1,
       Date_and_ofday$0,
       next_multiple,
       prev_multiple,
       now,
       _adD_,
       add$13,
       sub$4,
       diff$7,
       _adE_,
       _adF_,
       _adG_,
       _adH_,
       _adI_,
       _adJ_,
       _adK_,
       _adL_,
       _adM_,
       _adN_,
       _adO_,
       _adP_,
       _adQ_,
       _adR_,
       _adS_,
       _adT_,
       _adU_,
       _adV_,
       _adW_,
       _adX_,
       _adY_,
       _adZ_,
       _ad0_,
       _ad1_,
       _ad2_,
       _ad3_,
       _ad4_,
       _ad5_,
       _ad6_,
       _ad7_,
       _ad8_,
       _aeb_];
    caml_register_global
     (4457,Core_kernel_Time_float,"Core_kernel__Time_float");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$356);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ns_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$357,cst$160);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$358);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Time_ns_intf=[0];
    caml_register_global
     (4458,Core_kernel_Time_ns_intf,"Core_kernel__Time_ns_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$359);
    caml_call1(Expect_test_collector[4][1],cst_src_date_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$360,cst$161);
    function of_time(time,zone){return caml_call2(_adQ_,time,zone)}
    function today(zone){return of_time(now(0),zone)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$361);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Date=
      [0,
       bin_size_t$67,
       bin_write_t$68,
       bin_read_t$134,
       bin_read_t$135,
       bin_shape_t$88,
       bin_writer_t$77,
       bin_reader_t$77,
       bin_t$77,
       t_of_sexp$68,
       sexp_of_t$81,
       typerep_of_t$23,
       typename_of_t$22,
       hash_fold_t$38,
       hash$37,
       hashable$13,
       Table$15,
       Hash_set$15,
       Hash_queue$13,
       of_string$17,
       to_string$21,
       symbol$164,
       symbol$165,
       symbol$166,
       symbol$167,
       symbol$168,
       symbol$169,
       equal$33,
       compare$62,
       min$13,
       max$13,
       ascending$13,
       descending$13,
       between$13,
       clamp_exn$13,
       clamp$13,
       validate_lbound$13,
       validate_ubound$13,
       validate_bound$13,
       Replace_polymorphic_compare$12,
       comparator$20,
       Map$18,
       Set$18,
       _Zj_,
       create_exn,
       of_string_iso8601_basic,
       to_string_iso8601_basic,
       to_string_american,
       day,
       month,
       year,
       day_of_week,
       week_number_and_year,
       week_number,
       is_weekend,
       is_weekday,
       is_business_day,
       add_days$0,
       add_months,
       add_years,
       diff$5,
       diff_weekdays,
       diff_weekend_days,
       add_weekdays,
       add_business_days,
       add_days_skipping,
       dates_between,
       business_dates_between,
       weekdays_between,
       previous_weekday,
       following_weekday,
       first_strictly_after,
       days_in_month,
       is_leap_year,
       unix_epoch,
       quickcheck_generator$10,
       quickcheck_observer$9,
       quickcheck_shrinker$9,
       gen_incl,
       gen_uniform_incl,
       Days,
       Stable$6,
       O$1,
       Private$2,
       of_time,
       today];
    caml_register_global(4459,Core_kernel_Date,"Core_kernel__Date");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$362);
    caml_call1(Expect_test_collector[4][1],cst_src_date_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$363,cst$162);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$364);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Date_intf=[0];
    caml_register_global(4460,Core_kernel_Date_intf,"Core_kernel__Date_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$365);
    caml_call1(Expect_test_collector[4][1],cst_src_span_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$366,cst$163);
    var arch_sixtyfour=caml_call2(equal$19,Stdlib_sys[10],64);
    function float$1(x){return caml_call1(to_float$3,x)}
    function hash$43(x){return caml_call1(_KS_,x)}
    var
     _aed_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$180),0,bin_shape_t$64],0],
     _aee_=caml_call1(Bin_prot_Shape[4][1],cst_src_span_ns_ml_15_2),
     group$112=caml_call2(Bin_prot_Shape[6],_aee_,_aed_),
     _aef_=caml_call1(Bin_prot_Shape[2][1],cst_t$181),
     bin_shape_t$96=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$112,_aef_),0),
     bin_writer_t$85=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_t$85=[0,bin_read_t$100,bin_read_t$101],
     bin_t$85=[0,bin_shape_t$96,bin_writer_t$85,bin_reader_t$85],
     Typename_of_t$24=caml_call1(Typerep_lib_Make_typename[1],[0,name$62]),
     typename_of_t$23=Typename_of_t$24[2],
     name_of_t$16=Typename_of_t$24[1],
     typerep_of_t$24=[9,[0,name_of_t$16,[0,_fo_]]];
    function compare$67(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(_Id_,a_001[1],b_002[1]);
      if(0 === n)
       {var n$0=caml_call2(compare$32,a_001[2],b_002[2]);
        if(0 === n$0)
         {var n$1=caml_call2(compare$32,a_001[3],b_002[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare$32,a_001[4],b_002[4]);
            if(0 === n$2)
             {var n$3=caml_call2(compare$32,a_001[5],b_002[5]);
              if(0 === n$3)
               {var n$4=caml_call2(compare$32,a_001[6],b_002[6]);
                return 0 === n$4?caml_call2(compare$32,a_001[7],b_002[7]):n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function t_of_sexp$81(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$29,sexp);
      var
       field_sexps=sexp[1],
       sign_field=[0,0],
       hr_field=[0,0],
       min_field=[0,0],
       sec_field=[0,0],
       ms_field=[0,0],
       us_field=[0,0],
       ns_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aZI_=param[1];
          if(1 === _aZI_[0])
           {var _aZJ_=_aZI_[1];
            if(_aZJ_)
             {var _aZK_=_aZJ_[1];
              if(0 === _aZK_[0])
               {var _aZL_=_aZJ_[2],_aZM_=_aZK_[1];
                if(! _aZL_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aZM_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _aZL_[2])
                 {var tail=param[2],field_sexp=_aZL_[1];
                  if(caml_string_notequal(_aZM_,cst_hr$1))
                   if(caml_string_notequal(_aZM_,cst_min$1))
                    if(caml_string_notequal(_aZM_,cst_ms$5))
                     if(caml_string_notequal(_aZM_,cst_ns$4))
                      if(caml_string_notequal(_aZM_,cst_sec$1))
                       if(caml_string_notequal(_aZM_,cst_sign$1))
                        if(caml_string_notequal(_aZM_,cst_us$5))
                         {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aZM_,extra[1]]}
                        else
                         if(us_field[1])
                          duplicates[1] = [0,_aZM_,duplicates[1]];
                         else
                          {var fvalue=caml_call1(t_of_sexp$35,field_sexp);
                           us_field[1] = [0,fvalue]}
                       else
                        if(sign_field[1])
                         duplicates[1] = [0,_aZM_,duplicates[1]];
                        else
                         {var fvalue$0=caml_call1(_H3_,field_sexp);
                          sign_field[1] = [0,fvalue$0]}
                      else
                       if(sec_field[1])
                        duplicates[1] = [0,_aZM_,duplicates[1]];
                       else
                        {var fvalue$1=caml_call1(t_of_sexp$35,field_sexp);
                         sec_field[1] = [0,fvalue$1]}
                     else
                      if(ns_field[1])
                       duplicates[1] = [0,_aZM_,duplicates[1]];
                      else
                       {var fvalue$2=caml_call1(t_of_sexp$35,field_sexp);
                        ns_field[1] = [0,fvalue$2]}
                    else
                     if(ms_field[1])
                      duplicates[1] = [0,_aZM_,duplicates[1]];
                     else
                      {var fvalue$3=caml_call1(t_of_sexp$35,field_sexp);
                       ms_field[1] = [0,fvalue$3]}
                   else
                    if(min_field[1])
                     duplicates[1] = [0,_aZM_,duplicates[1]];
                    else
                     {var fvalue$4=caml_call1(t_of_sexp$35,field_sexp);
                      min_field[1] = [0,fvalue$4]}
                  else
                   if(hr_field[1])
                    duplicates[1] = [0,_aZM_,duplicates[1]];
                   else
                    {var fvalue$5=caml_call1(t_of_sexp$35,field_sexp);
                     hr_field[1] = [0,fvalue$5]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$29,_aZI_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$29,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$29,extra[1],sexp);
        var
         _aZN_=sign_field[1],
         _aZO_=hr_field[1],
         _aZP_=min_field[1],
         _aZQ_=sec_field[1],
         _aZR_=ms_field[1],
         _aZS_=us_field[1],
         _aZT_=ns_field[1];
        if(_aZN_)
         if(_aZO_)
          if(_aZP_)
           if(_aZQ_)
            if(_aZR_)
             if(_aZS_)
              if(_aZT_)
               {var
                 ns_value=_aZT_[1],
                 us_value=_aZS_[1],
                 ms_value=_aZR_[1],
                 sec_value=_aZQ_[1],
                 min_value=_aZP_[1],
                 hr_value=_aZO_[1],
                 sign_value=_aZN_[1];
                return [0,
                        sign_value,
                        hr_value,
                        min_value,
                        sec_value,
                        ms_value,
                        us_value,
                        ns_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$29,
                 sexp,
                 [0,
                  [0,0 === sign_field[1]?1:0,cst_sign$2],
                  [0,
                   [0,0 === hr_field[1]?1:0,cst_hr$2],
                   [0,
                    [0,0 === min_field[1]?1:0,cst_min$2],
                    [0,
                     [0,0 === sec_field[1]?1:0,cst_sec$2],
                     [0,
                      [0,0 === ms_field[1]?1:0,cst_ms$6],
                      [0,
                       [0,0 === us_field[1]?1:0,cst_us$6],
                       [0,[0,0 === ns_field[1]?1:0,cst_ns$5],0]]]]]]])}}
    function sexp_of_t$89(param)
     {var
       v_ns=param[7],
       v_us=param[6],
       v_ms=param[5],
       v_sec=param[4],
       v_min=param[3],
       v_hr=param[2],
       v_sign=param[1],
       arg=caml_call1(sexp_of_t$44,v_ns),
       bnds=[0,[1,[0,_aeg_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$44,v_us),
       bnds$0=[0,[1,[0,_aeh_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$44,v_ms),
       bnds$1=[0,[1,[0,_aei_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$44,v_sec),
       bnds$2=[0,[1,[0,_aej_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(sexp_of_t$44,v_min),
       bnds$3=[0,[1,[0,_aek_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$44,v_hr),
       bnds$4=[0,[1,[0,_ael_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(_H4_,v_sign),
       bnds$5=[0,[1,[0,_aem_,[0,arg$5,0]]],bnds$4];
      return [1,bnds$5]}
    var Parts$0=[0,compare$67,t_of_sexp$81,sexp_of_t$89];
    function next$4(t){return caml_call1(succ$1,t)}
    function prev$5(t){return caml_call1(pred$1,t)}
    var
     nanosecond$0=caml_call1(of_int$3,1),
     microsecond$0=
      caml_call2(symbol$101,caml_call1(of_int$3,1000),nanosecond$0),
     millisecond$0=
      caml_call2(symbol$101,caml_call1(of_int$3,1000),microsecond$0),
     second$1=caml_call2(symbol$101,caml_call1(of_int$3,1000),millisecond$0),
     minute$0=caml_call2(symbol$101,caml_call1(of_int$3,60),second$1),
     hour$1=caml_call2(symbol$101,caml_call1(of_int$3,60),minute$0),
     ns_per_day=caml_call2(symbol$101,caml_call1(of_int$3,24),hour$1),
     _aen_=caml_call1(of_int$3,365),
     max_value_for_1us_rounding=
      caml_call2
       (symbol$101,
        caml_call2(symbol$101,caml_call1(of_int$3,135),_aen_),
        ns_per_day),
     min_value_for_1us_rounding=caml_call1(neg$4,max_value_for_1us_rounding);
    function create$24(opt,_aZB_,_aZA_,_aZz_,_aZy_,_aZx_,_aZw_,_aZv_,param)
     {if(opt)var sth=opt[1],sign=sth;else var sign=2;
      if(_aZB_)var sth$0=_aZB_[1],days=sth$0;else var days=0;
      if(_aZA_)var sth$1=_aZA_[1],hr=sth$1;else var hr=0;
      if(_aZz_)var sth$2=_aZz_[1],minutes=sth$2;else var minutes=0;
      if(_aZy_)var sth$3=_aZy_[1],sec=sth$3;else var sec=0;
      if(_aZx_)var sth$4=_aZx_[1],ms=sth$4;else var ms=0;
      if(_aZw_)var sth$5=_aZw_[1],us=sth$5;else var us=0;
      if(_aZv_)var sth$6=_aZv_[1],ns=sth$6;else var ns=0;
      var
       _aZC_=caml_call2(symbol$101,caml_call1(of_int$3,ns),nanosecond$0),
       _aZD_=caml_call2(symbol$101,caml_call1(of_int$3,us),microsecond$0),
       _aZE_=caml_call2(symbol$101,caml_call1(of_int$3,ms),millisecond$0),
       _aZF_=caml_call2(symbol$101,caml_call1(of_int$3,sec),second$1),
       _aZG_=caml_call2(symbol$101,caml_call1(of_int$3,minutes),minute$0),
       _aZH_=caml_call2(symbol$101,caml_call1(of_int$3,hr),hour$1),
       t=
        caml_call2
         (symbol$99,
          caml_call2
           (symbol$99,
            caml_call2
             (symbol$99,
              caml_call2
               (symbol$99,
                caml_call2
                 (symbol$99,
                  caml_call2
                   (symbol$99,
                    caml_call2(symbol$101,caml_call1(of_int$3,days),ns_per_day),
                    _aZH_),
                  _aZG_),
                _aZF_),
              _aZE_),
            _aZD_),
          _aZC_);
      return 0 === sign?caml_call1(neg$4,t):t}
    function to_parts$1(t)
     {var
       mag=caml_call1(abs$4,t),
       _aZo_=
        caml_call1
         (to_int_exn$2,
          caml_call2
           (symbol$106,caml_call2(rem$2,mag,microsecond$0),nanosecond$0)),
       _aZp_=
        caml_call1
         (to_int_exn$2,
          caml_call2
           (symbol$106,caml_call2(rem$2,mag,millisecond$0),microsecond$0)),
       _aZq_=
        caml_call1
         (to_int_exn$2,
          caml_call2(symbol$106,caml_call2(rem$2,mag,second$1),millisecond$0)),
       _aZr_=
        caml_call1
         (to_int_exn$2,
          caml_call2(symbol$106,caml_call2(rem$2,mag,minute$0),second$1)),
       _aZs_=
        caml_call1
         (to_int_exn$2,
          caml_call2(symbol$106,caml_call2(rem$2,mag,hour$1),minute$0)),
       _aZt_=caml_call1(to_int_exn$2,caml_call2(symbol$106,mag,hour$1)),
       _aZu_=
        caml_call2(symbol$97,t,zero$4)?0:caml_call2(symbol$96,t,zero$4)?2:1;
      return [0,_aZu_,_aZt_,_aZs_,_aZr_,_aZq_,_aZp_,_aZo_]}
    function of_parts(param)
     {var
       ns=param[7],
       us=param[6],
       ms=param[5],
       sec=param[4],
       min=param[3],
       hr=param[2],
       sign=param[1];
      return create$24
              ([0,sign],0,[0,hr],[0,min],[0,sec],[0,ms],[0,us],[0,ns],0)}
    function of_ns$0(f){return caml_call1(_Jj_,f)}
    function of_int63_ns(i){return i}
    function of_int_us(i)
     {return caml_call2(symbol$101,caml_call1(of_int$3,i),microsecond$0)}
    function of_int_ms(i)
     {return caml_call2(symbol$101,caml_call1(of_int$3,i),millisecond$0)}
    function of_int_sec$0(i)
     {return caml_call2(symbol$101,caml_call1(of_int$3,i),second$1)}
    function of_us$0(f){return caml_call1(_Jj_,f * float$1(microsecond$0))}
    function of_ms$0(f){return caml_call1(_Jj_,f * float$1(millisecond$0))}
    function of_sec(f){return caml_call1(_Jj_,f * float$1(second$1))}
    function of_min$0(f){return caml_call1(_Jj_,f * float$1(minute$0))}
    function of_hr$0(f){return caml_call1(_Jj_,f * float$1(hour$1))}
    function of_day$0(f){return caml_call1(_Jj_,f * float$1(ns_per_day))}
    function of_sec_with_microsecond_precision(sec)
     {var us=caml_call1(_Jj_,sec * 1000000.);
      return caml_call2(symbol$101,us,caml_call1(of_int$3,1000))}
    function of_int63_seconds$0(x)
     {return caml_call2(include$61[96][3],x,second$1)}
    function of_int32_seconds$0(x)
     {return of_int63_seconds$0(caml_call1(of_int32$2,x))}
    function to_ns$0(t){return float$1(t)}
    function to_int63_ns(t){return t}
    function to_us$0(t)
     {var _aZn_=float$1(microsecond$0);return float$1(t) / _aZn_}
    function to_ms$0(t)
     {var _aZm_=float$1(millisecond$0);return float$1(t) / _aZm_}
    function to_sec(t){var _aZl_=float$1(second$1);return float$1(t) / _aZl_}
    function to_min$0(t)
     {var _aZk_=float$1(minute$0);return float$1(t) / _aZk_}
    function to_hr$0(t){var _aZj_=float$1(hour$1);return float$1(t) / _aZj_}
    function to_day$0(t)
     {var _aZi_=float$1(ns_per_day);return float$1(t) / _aZi_}
    function to_int_us(t)
     {return caml_call1(to_int_exn$2,caml_call2(symbol$106,t,microsecond$0))}
    function to_int_ms(t)
     {return caml_call1(to_int_exn$2,caml_call2(symbol$106,t,millisecond$0))}
    function to_int_sec(t)
     {return caml_call1(to_int_exn$2,caml_call2(symbol$106,t,second$1))}
    function to_int63_seconds_round_down_exn$0(t)
     {return caml_call2(include$61[96][17],t,second$1)}
    function of_int_ns(i){return caml_call1(of_int$3,i)}
    var
     _aeo_=
      arch_sixtyfour
       ?function(t){return caml_call1(to_int_exn$2,t)}
       :function(param)
         {return caml_call1
                  (_Gg_,
                   cst_Time_ns_Span_to_int_ns_unsupported_on_32bit_machines)};
    function add$14(t,u){return caml_call2(symbol$99,t,u)}
    function diff$8(t,u){return caml_call2(symbol$100,t,u)}
    function scale$2(t,f){return caml_call1(_Jj_,float$1(t) * f)}
    function scale_int63(t,i){return caml_call2(symbol$101,t,i)}
    function scale_int(t,i){return scale_int63(t,caml_call1(of_int$3,i))}
    function symbol$204(t,f){return caml_call1(_Jj_,float$1(t) / f)}
    function to_proportional_float(t){return caml_call1(to_float$3,t)}
    function of_unit_of_time$0(u)
     {switch(u)
       {case 0:return nanosecond$0;
        case 1:return microsecond$0;
        case 2:return millisecond$0;
        case 3:return second$1;
        case 4:return minute$0;
        case 5:return hour$1;
        default:return ns_per_day}}
    function to_unit_of_time$0(t)
     {var abs_t=caml_call1(abs$4,t);
      return caml_call2(include$63[1],abs_t,ns_per_day)
              ?6
              :caml_call2(include$63[1],abs_t,hour$1)
                ?5
                :caml_call2(include$63[1],abs_t,minute$0)
                  ?4
                  :caml_call2(include$63[1],abs_t,second$1)
                    ?3
                    :caml_call2(include$63[1],abs_t,millisecond$0)
                      ?2
                      :caml_call2(include$63[1],abs_t,microsecond$0)?1:0}
    var
     _aep_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$182),0,bin_shape_t$96],0],
     _aeq_=caml_call1(Bin_prot_Shape[4][1],cst_src_span_ns_ml_184_8),
     group$113=caml_call2(Bin_prot_Shape[6],_aeq_,_aep_),
     _aer_=caml_call1(Bin_prot_Shape[2][1],cst_t$183),
     bin_shape_t$97=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$113,_aer_),0),
     bin_writer_t$86=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_t$86=[0,bin_read_t$100,bin_read_t$101],
     bin_t$86=[0,bin_shape_t$97,bin_writer_t$86,bin_reader_t$86],
     compare$68=include$63[8];
    function hash$44(x){return hash$43(x)}
    function of_int63_exn(t){return t}
    function to_int63(t){return t}
    function number_of_digits_to_write(span_part_magnitude)
     {if(caml_call2(O$0[9],span_part_magnitude,0))return 0;
      if(caml_call2(O$0[11],span_part_magnitude,10))return 1;
      if(caml_call2(O$0[11],span_part_magnitude,100))return 2;
      if(caml_call2(O$0[11],span_part_magnitude,1000))return 3;
      if(caml_call2(O$0[11],span_part_magnitude,10000))return 4;
      if(caml_call2(O$0[11],span_part_magnitude,100000))return 5;
      throw [0,Assert_failure,_aes_]}
    function write_char(buf,pos,char$0)
     {caml_bytes_unsafe_set(buf,pos,char$0);return caml_call2(O$0[1],pos,1)}
    function write_2_chars(buf,pos,char1,char2)
     {caml_bytes_unsafe_set(buf,pos,char1);
      caml_bytes_unsafe_set(buf,caml_call2(O$0[1],pos,1),char2);
      return caml_call2(O$0[1],pos,2)}
    function write_digits(buf,pos,digits,int$0)
     {write_int63(buf,pos,digits,caml_call1(of_int$3,int$0));
      return caml_call2(O$0[1],pos,digits)}
    function write_if_non_empty(buf,pos,digits,int$0,suffix)
     {if(caml_call2(O$0[9],digits,0))return pos;
      var
       pos$0=write_digits(buf,pos,digits,int$0),
       pos$1=write_char(buf,pos$0,suffix);
      return pos$1}
    var
     nanos_of_millisecond=caml_call1(to_int_exn$2,millisecond$0),
     nanos_of_microsecond=caml_call1(to_int_exn$2,microsecond$0),
     int63_60=caml_call1(of_int$3,60),
     int63_24=caml_call1(of_int$3,24);
    function to_string$25(t)
     {if(caml_call2(include$63[7],t,zero$4))return cst_0s$1;
      var
       is_negative=caml_call2(include$63[5],t,zero$4),
       seconds=caml_call2(symbol$106,t,second$1),
       ns=caml_call1(to_int_exn$2,caml_call2(rem$2,t,second$1)),
       seconds$0=caml_call1(abs$4,seconds),
       ns$0=caml_call1(abs$1,ns),
       s=caml_call1(to_int_exn$2,caml_call2(rem$2,seconds$0,int63_60)),
       minutes=caml_call2(symbol$106,seconds$0,int63_60),
       m=caml_call1(to_int_exn$2,caml_call2(rem$2,minutes,int63_60)),
       hours=caml_call2(symbol$106,minutes,int63_60),
       h=caml_call1(to_int_exn$2,caml_call2(rem$2,hours,int63_24)),
       d=caml_call1(to_int_exn$2,caml_call2(symbol$106,hours,int63_24)),
       digits_of_d=number_of_digits_to_write(d),
       digits_of_h=number_of_digits_to_write(h),
       digits_of_m=number_of_digits_to_write(m),
       decimal_unit=
        caml_call2(O$0[10],s,0)
         ?0
         :caml_call2(O$0[7],ns$0,nanos_of_millisecond)
           ?1
           :caml_call2(O$0[7],ns$0,nanos_of_microsecond)
             ?2
             :caml_call2(O$0[7],ns$0,1)?3:4;
      switch(decimal_unit)
       {case 0:var decimal_unit_integer=s;break;
        case 1:
         var
          decimal_unit_integer=
           caml_call2(O$0[4],ns$0,nanos_of_millisecond);
         break;
        case 2:
         var
          decimal_unit_integer=
           caml_call2(O$0[4],ns$0,nanos_of_microsecond);
         break;
        case 3:var decimal_unit_integer=ns$0;break;
        default:var decimal_unit_integer=0}
      switch(decimal_unit)
       {case 0:var decimal_unit_billionths=ns$0;break;
        case 1:
         var
          _aZd_=caml_call2(O$0[16],ns$0,nanos_of_millisecond),
          decimal_unit_billionths=caml_call2(O$0[3],_aZd_,1000);
         break;
        case 2:
         var
          _aZe_=caml_call2(O$0[16],ns$0,nanos_of_microsecond),
          decimal_unit_billionths=caml_call2(O$0[3],_aZe_,1000000);
         break;
        case 3:var decimal_unit_billionths=0;break;
        default:var decimal_unit_billionths=0}
      var digits=number_of_digits_to_write(decimal_unit_integer);
      if(caml_call2(O$0[7],decimal_unit_billionths,0))
       if(caml_call2(O$0[8],decimal_unit_billionths,999999999))
        {if(caml_call2(O$0[9],decimal_unit_billionths,0))
          var decimals_of_decimal_unit=0;
         else
          {var _aY6_=caml_call2(O$0[16],decimal_unit_billionths,10);
           if(caml_call2(O$0[12],_aY6_,0))
            var decimals_of_decimal_unit=9;
           else
            {var _aY7_=caml_call2(O$0[16],decimal_unit_billionths,100);
             if(caml_call2(O$0[12],_aY7_,0))
              var decimals_of_decimal_unit=8;
             else
              {var _aY8_=caml_call2(O$0[16],decimal_unit_billionths,1000);
               if(caml_call2(O$0[12],_aY8_,0))
                var decimals_of_decimal_unit=7;
               else
                {var _aY9_=caml_call2(O$0[16],decimal_unit_billionths,10000);
                 if(caml_call2(O$0[12],_aY9_,0))
                  var decimals_of_decimal_unit=6;
                 else
                  {var
                    _aY__=
                     caml_call2(O$0[16],decimal_unit_billionths,100000);
                   if(caml_call2(O$0[12],_aY__,0))
                    var decimals_of_decimal_unit=5;
                   else
                    {var
                      _aY$_=
                       caml_call2(O$0[16],decimal_unit_billionths,1000000);
                     if(caml_call2(O$0[12],_aY$_,0))
                      var decimals_of_decimal_unit=4;
                     else
                      {var
                        _aZa_=
                         caml_call2(O$0[16],decimal_unit_billionths,10000000);
                       if(caml_call2(O$0[12],_aZa_,0))
                        var decimals_of_decimal_unit=3;
                       else
                        var
                         _aZb_=caml_call2(O$0[16],decimal_unit_billionths,100000000),
                         decimals_of_decimal_unit=caml_call2(O$0[12],_aZb_,0)?2:1}}}}}}}
         var
          sign_len=is_negative?1:0,
          d_len=
           caml_call2(O$0[10],digits_of_d,0)
            ?caml_call2(O$0[1],digits_of_d,1)
            :0,
          h_len=
           caml_call2(O$0[10],digits_of_h,0)
            ?caml_call2(O$0[1],digits_of_h,1)
            :0,
          m_len=
           caml_call2(O$0[10],digits_of_m,0)
            ?caml_call2(O$0[1],digits_of_m,1)
            :0,
          digits_len=
           0 === decimal_unit
            ?caml_call2(O$0[1],digits,1)
            :4 <= decimal_unit?0:caml_call2(O$0[1],digits,2),
          decimals_len=
           caml_call2(O$0[10],decimals_of_decimal_unit,0)
            ?caml_call2(O$0[1],decimals_of_decimal_unit,1)
            :0,
          decimal_unit_len=caml_call2(O$0[1],digits_len,decimals_len),
          _aZf_=caml_call2(O$0[1],sign_len,d_len),
          _aZg_=caml_call2(O$0[1],_aZf_,h_len),
          _aZh_=caml_call2(O$0[1],_aZg_,m_len),
          string_length=caml_call2(O$0[1],_aZh_,decimal_unit_len);
         if(caml_call2(O$0[10],string_length,0))
          {var
            buf=caml_call1(_EG_,string_length),
            pos$2=0,
            pos$3=is_negative?write_char(buf,pos$2,45):pos$2,
            pos$4=write_if_non_empty(buf,pos$3,digits_of_d,d,100),
            pos$5=write_if_non_empty(buf,pos$4,digits_of_h,h,104),
            pos$6=write_if_non_empty(buf,pos$5,digits_of_m,m,109);
           if(caml_call2(O$0[9],digits,0))
            var pos$7=pos$6;
           else
            {var pos=write_digits(buf,pos$6,digits,decimal_unit_integer);
             if(caml_call2(O$0[9],decimals_of_decimal_unit,0))
              var pos$0=pos;
             else
              {var
                pos$1=write_char(buf,pos,46),
                _aZc_=
                 caml_call2
                  (pow,10,caml_call2(O$0[2],9,decimals_of_decimal_unit));
               write_int63
                (buf,
                 pos$1,
                 decimals_of_decimal_unit,
                 caml_call1
                  (of_int$3,caml_call2(O$0[4],decimal_unit_billionths,_aZc_)));
               var pos$0=caml_call2(O$0[1],pos$1,decimals_of_decimal_unit)}
             switch(decimal_unit)
              {case 0:var pos$7=write_char(buf,pos$0,115);break;
               case 1:var pos$7=write_2_chars(buf,pos$0,109,115);break;
               case 2:var pos$7=write_2_chars(buf,pos$0,117,115);break;
               case 3:var pos$7=write_2_chars(buf,pos$0,110,115);break;
               default:var pos$7=pos$0}}
           if(caml_call2(O$0[9],pos$7,string_length))
            return caml_call1(_EZ_,buf);
           throw [0,Assert_failure,_aeu_]}
         throw [0,Assert_failure,_aev_]}
      throw [0,Assert_failure,_aet_]}
    var
     int63_10=caml_call1(of_int$3,10),
     min_mult10_without_underflow=caml_call2(symbol$106,min_value$2,int63_10);
    function invalid_string$2(string,reason)
     {var
       _aY4_=[0,[1,[0,_aew_,[0,caml_call1(sexp_of_t$40,reason),0]]],0],
       _aY5_=[0,[1,[0,_aex_,[0,caml_call1(sexp_of_t$40,string),0]]],_aY4_];
      return caml_call1
              (_on_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],
                   cst_Time_ns_Span_of_string_invalid_string),
                 _aY5_]])}
    function add_without_underflow(string,x,y)
     {var sum=caml_call2(include$61[96][1],x,y);
      if(caml_call2(include$61[96][10],sum,x))
       invalid_string$2(string,cst_span_would_be_outside_of_int63_range);
      return sum}
    function min_factor_of(span)
     {return caml_call2(symbol$106,min_value$2,span)}
    var
     min_days_without_underflow=min_factor_of(ns_per_day),
     min_hours_without_underflow=min_factor_of(hour$1),
     min_minutes_without_underflow=min_factor_of(minute$0),
     min_seconds_without_underflow=min_factor_of(second$1),
     min_milliseconds_without_underflow=min_factor_of(millisecond$0),
     min_microseconds_without_underflow=min_factor_of(microsecond$0),
     min_nanoseconds_without_underflow=min_factor_of(nanosecond$0);
    function of_string$21(string)
     {var neg_ns=[0,zero$4],pos=[0,0],len=caml_ml_string_length(string);
      if(caml_call2(O$0[9],len,0))invalid_string$2(string,cst_empty_string$0);
      var match=caml_string_unsafe_get(string,pos[1]),switcher=match - 43 | 0;
      if(2 < switcher >>> 0)
       var switch$0=0;
      else
       {switch(switcher)
         {case 0:pos[1]++;var _aY3_=0,switch$1=1;break;
          case 1:var switch$0=0,switch$1=0;break;
          default:pos[1]++;var _aY3_=1,switch$1=1}
        if(switch$1)var is_negative=_aY3_,switch$0=1}
      if(! switch$0)var is_negative=0;
      var round_ties_before_negating=0 === is_negative?0:1;
      a:
      for(;;)
       {if(caml_call2(O$0[11],pos[1],len))
         {var has_digit=[0,0],i=[0,zero$4],end_of_digits=[0,0];
          for(;;)
           {if(caml_call2(O$0[11],pos[1],len))
             if(! end_of_digits[1])
              {var char$0=caml_string_unsafe_get(string,pos[1]);
               if(58 <= char$0)
                var switch$2=95 === char$0?(pos[1]++,1):0;
               else
                if(48 <= char$0)
                 {var
                   _aY2_=i[1],
                   digit=caml_call1(of_int$3,caml_call1(_Fp_,char$0));
                  if
                   (caml_call2
                     (include$61[96][11],_aY2_,min_mult10_without_underflow))
                   invalid_string$2
                    (string,cst_span_would_be_outside_of_int63_range$0);
                  var _aYU_=caml_call1(include$61[96][5],digit);
                  i[1]
                  =
                  add_without_underflow
                   (string,caml_call2(include$61[96][3],_aY2_,int63_10),_aYU_);
                  has_digit[1] = 1;
                  pos[1]++;
                  var switch$2=1}
                else
                 var switch$2=0;
               if(! switch$2)end_of_digits[1] = 1;
               continue}
            var
             neg_integer=i[1],
             decimal_pos=pos[1],
             _aYV_=caml_call2(O$0[11],pos[1],len),
             _aYW_=
              _aYV_
               ?caml_call2(_FS_,46,caml_string_unsafe_get(string,pos[1]))
               :_aYV_;
            if(_aYW_)
             {pos[1]++;
              var end_of_decimals=[0,0];
              for(;;)
               {if(caml_call2(O$0[11],pos[1],len))
                 if(! end_of_decimals[1])
                  {var
                    match$2=caml_string_unsafe_get(string,pos[1]),
                    switch$3=
                     58 <= match$2
                      ?95 === match$2?(pos[1]++,1):0
                      :48 <= match$2?(has_digit[1] = 1,pos[1]++,1):0;
                   if(! switch$3)end_of_decimals[1] = 1;
                   continue}
                break}}
            var end_pos=pos[1];
            if(1 - has_digit[1])
             invalid_string$2(string,cst_no_digits_before_unit_suffix);
            var _aYX_=caml_call2(O$0[1],pos[1],1);
            if(caml_call2(O$0[11],_aYX_,len))
             if
              (caml_call2
                (_FS_,
                 115,
                 caml_string_unsafe_get(string,caml_call2(O$0[1],pos[1],1))))
              {var
                match$0=caml_string_unsafe_get(string,pos[1]),
                switcher$0=match$0 - 109 | 0;
               if(8 < switcher$0 >>> 0)
                var switch$5=0;
               else
                {switch(switcher$0)
                  {case 0:
                    pos[1] = caml_call2(O$0[1],pos[1],2);
                    var _aYZ_=2,switch$6=1;
                    break;
                   case 1:
                    pos[1] = caml_call2(O$0[1],pos[1],2);
                    var _aYZ_=0,switch$6=1;
                    break;
                   case 8:
                    pos[1] = caml_call2(O$0[1],pos[1],2);
                    var _aYZ_=1,switch$6=1;
                    break;
                   default:var switch$5=0,switch$6=0}
                 if(switch$6)var _aYY_=_aYZ_,switch$5=1}
               if(! switch$5)
                var
                 _aYY_=
                  invalid_string$2(string,cst_unparseable_unit_suffix);
               var unit_of_time=_aYY_,switch$4=1}
             else
              var switch$4=0;
            else
             var switch$4=0;
            if(! switch$4)
             if(caml_call2(O$0[11],pos[1],len))
              {var
                match$1=caml_string_unsafe_get(string,pos[1]),
                switcher$1=match$1 - 100 | 0;
               if(15 < switcher$1 >>> 0)
                var switch$7=0;
               else
                {switch(switcher$1)
                  {case 0:pos[1]++;var _aY1_=6,switch$8=1;break;
                   case 4:pos[1]++;var _aY1_=5,switch$8=1;break;
                   case 9:pos[1]++;var _aY1_=4,switch$8=1;break;
                   case 15:pos[1]++;var _aY1_=3,switch$8=1;break;
                   default:var switch$7=0,switch$8=0}
                 if(switch$8)var _aY0_=_aY1_,switch$7=1}
               if(! switch$7)
                var
                 _aY0_=
                  invalid_string$2(string,cst_unparseable_unit_suffix$0);
               var unit_of_time=_aY0_}
             else
              var
               unit_of_time=
                invalid_string$2(string,cst_no_unit_suffix_after_digits);
            var scale=of_unit_of_time$0(unit_of_time);
            switch(unit_of_time)
             {case 0:
               var min_without_underflow=min_nanoseconds_without_underflow;
               break;
              case 1:
               var min_without_underflow=min_microseconds_without_underflow;
               break;
              case 2:
               var min_without_underflow=min_milliseconds_without_underflow;
               break;
              case 3:
               var min_without_underflow=min_seconds_without_underflow;break;
              case 4:
               var min_without_underflow=min_minutes_without_underflow;break;
              case 5:
               var min_without_underflow=min_hours_without_underflow;break;
              default:var min_without_underflow=min_days_without_underflow}
            if(caml_call2(symbol$97,neg_integer,min_without_underflow))
             invalid_string$2
              (string,cst_span_would_be_outside_of_int63_range$1);
            var
             neg_integer_ns=caml_call2(symbol$101,neg_integer,scale),
             fraction_pos=caml_call2(O$0[1],decimal_pos,1);
            if(caml_call2(O$0[7],fraction_pos,end_pos))
             var neg_nanos_of_part=neg_integer_ns;
            else
             var
              decimal_ns=
               read_int63_decimal
                (string,
                 fraction_pos,
                 caml_call2(O$0[2],end_pos,fraction_pos),
                 scale,
                 round_ties_before_negating,
                 1),
              neg_nanos_of_part=
               add_without_underflow
                (string,neg_integer_ns,caml_call1(symbol$103,decimal_ns));
            neg_ns[1]
            =
            add_without_underflow(string,neg_ns[1],neg_nanos_of_part);
            continue a}}
        var
         ns=
          is_negative
           ?neg_ns[1]
           :caml_call2(symbol$95,neg_ns[1],min_value$2)
             ?invalid_string$2
               (string,cst_span_would_be_outside_of_int63_range$2)
             :caml_call1(symbol$103,neg_ns[1]);
        return ns}}
    function sexp_of_t$90(t){return [0,to_string$25(t)]}
    function t_of_sexp$82(sexp)
     {if(0 === sexp[0])
       {var x=sexp[1];
        try
         {var _aYT_=of_string$21(x);return _aYT_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return caml_call2(_Of_,caml_call1(Base_Exn[9],exn),sexp)}}
      return caml_call2
              (_Of_,
               cst_Time_ns_Span_Stable_V2_t_of_sexp_sexp_must_be_an_Atom,
               sexp)}
    var
     include$115=caml_call1(_hu_[1][2],[0,compare$68,sexp_of_t$90]),
     comparator$22=include$115[1],
     include$116=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$49,
         bin_write_t$49,
         bin_read_t$100,
         bin_read_t$101,
         bin_shape_t$97,
         bin_writer_t$86,
         bin_reader_t$86,
         bin_t$86,
         compare$68,
         t_of_sexp$82,
         sexp_of_t$90,
         comparator$22]),
     Map$22=include$116[1],
     Set$22=include$116[2],
     Alternate_sexp=[0,t_of_sexp$82,sexp_of_t$90],
     compare$69=include$63[8],
     include$117=
      Validate_with_zero([0,compare$69,t_of_sexp$82,sexp_of_t$90,zero$4]),
     validate_positive$5=include$117[4],
     validate_non_negative$5=include$117[5],
     validate_negative$5=include$117[6],
     validate_non_positive$5=include$117[7],
     is_positive$5=include$117[8],
     is_non_negative$5=include$117[9],
     is_negative$5=include$117[10],
     is_non_positive$5=include$117[11],
     sign$6=include$117[12];
    function symbol$205(t,u)
     {var _aYS_=caml_call2(symbol$100,u,microsecond$0);
      return caml_call2(include$63[1],t,_aYS_)}
    function symbol$206(t,u)
     {var _aYR_=caml_call2(symbol$99,u,microsecond$0);
      return caml_call2(include$63[2],t,_aYR_)}
    function symbol$207(t,u)
     {var _aYQ_=caml_call1(abs$4,caml_call2(symbol$100,t,u));
      return caml_call2(include$63[2],_aYQ_,microsecond$0)}
    function symbol$208(t,u)
     {var _aYP_=caml_call2(symbol$99,u,microsecond$0);
      return caml_call2(include$63[4],t,_aYP_)}
    function symbol$209(t,u)
     {var _aYO_=caml_call2(symbol$100,u,microsecond$0);
      return caml_call2(include$63[5],t,_aYO_)}
    function symbol$210(t,u)
     {var _aYN_=caml_call1(abs$4,caml_call2(symbol$100,t,u));
      return caml_call2(include$63[4],_aYN_,microsecond$0)}
    function robustly_compare$4(t,u)
     {return symbol$209(t,u)?-1:symbol$208(t,u)?1:0}
    function to_string_hum$10(opt,_aYM_,_aYL_,unit_of_time,t)
     {if(opt)var sth=opt[1],delimiter=sth;else var delimiter=95;
      if(_aYM_)var sth$0=_aYM_[1],decimals=sth$0;else var decimals=3;
      if(_aYL_)
       var sth$1=_aYL_[1],align_decimal=sth$1;
      else
       var align_decimal=0;
      var match=caml_call2(_yn_,unit_of_time,to_unit_of_time$0(t));
      switch(match)
       {case 0:var match$0=[0,to_ns$0(t),cst_ns$6];break;
        case 1:var match$0=[0,to_us$0(t),cst_us$7];break;
        case 2:var match$0=[0,to_ms$0(t),cst_ms$7];break;
        case 3:var match$0=[0,to_sec(t),cst_s$8];break;
        case 4:var match$0=[0,to_min$0(t),cst_m$6];break;
        case 5:var match$0=[0,to_hr$0(t),cst_h$3];break;
        default:var match$0=[0,to_day$0(t),cst_d$5]}
      var
       suffix=match$0[2],
       float$0=match$0[1],
       prefix=
        caml_call4
         (_Jy_,[0,delimiter],[0,decimals],[0,1 - align_decimal],float$0);
      if(align_decimal)
       if(caml_call2(symbol$50,caml_ml_string_length(suffix),1))
        var suffix$0=caml_call2(_Gu_,suffix,cst$164),switch$0=1;
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var suffix$0=suffix;
      return caml_call2(_Gu_,prefix,suffix$0)}
    function now$0(param){return caml_call1(Time_now[1],0)}
    function random$0(state,param)
     {var
       _aYK_=
        caml_call2
         (random,
          state,
          add$14(caml_call1(neg$4,min_value_for_1us_rounding),one$2));
      return diff$8
              (caml_call2
                (random,state,add$14(max_value_for_1us_rounding,one$2)),
               _aYK_)}
    function randomize$1(t,percent){return randomize(t,percent,scale$2)}
    function to_short_string$0(t)
     {var
       match=to_parts$1(t),
       ns=match[7],
       us=match[6],
       ms=match[5],
       sec=match[4],
       min=match[3],
       hr=match[2],
       sign=match[1];
      return short_string(sign,hr,min,sec,ms,us,ns)}
    var
     include$118=
      caml_call1(Base_Pretty_printer[2],[0,module_name$11,to_string$25]),
     _aey_=include$118[1],
     _aez_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$184),0,bin_shape_t$96],0],
     _aeA_=caml_call1(Bin_prot_Shape[4][1],cst_src_span_ns_ml_732_4),
     group$114=caml_call2(Bin_prot_Shape[6],_aeA_,_aez_),
     _aeB_=caml_call1(Bin_prot_Shape[2][1],cst_t$185),
     bin_shape_t$98=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$114,_aeB_),0),
     bin_writer_t$87=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_t$87=[0,bin_read_t$100,bin_read_t$101],
     bin_t$87=[0,bin_shape_t$98,bin_writer_t$87,bin_reader_t$87],
     compare$70=include$63[8];
    function hash$45(x){return hash$43(x)}
    var
     include$119=
      Make_binable
       ([0,
         hash_fold_t$22,
         bin_size_t$49,
         bin_write_t$49,
         bin_read_t$100,
         bin_read_t$101,
         bin_shape_t$98,
         bin_writer_t$87,
         bin_reader_t$87,
         bin_t$87,
         t_of_sexp$82,
         compare$70,
         sexp_of_t$90,
         hash$45]),
     _aeC_=include$119[1],
     _aeD_=include$119[2],
     _aeE_=include$119[3],
     _aeF_=include$119[4],
     _aeG_=include$119[5],
     _aeH_=include$119[6],
     _aeI_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$186),0,bin_shape_t$96],0],
     _aeJ_=caml_call1(Bin_prot_Shape[4][1],cst_src_span_ns_ml_738_4),
     group$115=caml_call2(Bin_prot_Shape[6],_aeJ_,_aeI_),
     _aeK_=caml_call1(Bin_prot_Shape[2][1],cst_t$187),
     bin_shape_t$99=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$115,_aeK_),0),
     bin_writer_t$88=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_t$88=[0,bin_read_t$100,bin_read_t$101],
     bin_t$88=[0,bin_shape_t$99,bin_writer_t$88,bin_reader_t$88],
     _aeL_=
      _xA_
       ([0,
         bin_size_t$49,
         bin_write_t$49,
         bin_read_t$100,
         bin_read_t$101,
         bin_shape_t$99,
         bin_writer_t$88,
         bin_reader_t$88,
         bin_t$88,
         t_of_sexp$82,
         sexp_of_t$90,
         comparator$22]),
     _aeM_=_aeL_[11],
     _aeN_=_aeL_[12],
     _aeO_=_aeL_[13],
     _aeP_=_aeL_[14],
     _aeQ_=_aeL_[15],
     _aeR_=_aeL_[16],
     _aeS_=_aeL_[17],
     _aeT_=_aeL_[18],
     _aeU_=_aeL_[20],
     _aeV_=_aeL_[21],
     _aeW_=_aeL_[22],
     _aeX_=include$63[1],
     _aeY_=include$63[2],
     _aeZ_=include$63[3],
     _ae0_=include$63[4],
     _ae1_=include$63[5],
     _ae2_=include$63[6],
     _ae3_=include$63[7],
     compare$71=include$63[8],
     _ae4_=include$63[9],
     _ae5_=include$63[10];
    function to_span_float_round_nearest(t)
     {return to_span_since_epoch(to_sec(t))}
    function of_span_float_round_nearest(s){return of_sec(s)}
    var half_microsecond=caml_call1(of_int$3,500);
    function to_span(t)
     {if(caml_call2(_ae1_,t,min_value_for_1us_rounding))
       var switch$0=0;
      else
       if(caml_call2(_ae0_,t,max_value_for_1us_rounding))
        var switch$0=0;
       else
        var _aYJ_=t,switch$0=1;
      if(! switch$0)
       var
        _aYG_=
         [0,[1,[0,_ae6_,[0,sexp_of_t$90(max_value_for_1us_rounding),0]]],0],
        _aYH_=
         [0,
          [1,[0,_ae7_,[0,sexp_of_t$90(min_value_for_1us_rounding),0]]],
          _aYG_],
        _aYI_=[0,[1,[0,_ae8_,[0,sexp_of_t$90(t),0]]],_aYH_],
        _aYJ_=
         caml_call1
          (_on_,
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7],cst_Span_t_exceeds_limits),
             _aYI_]]);
      var _aYF_=caml_call1(of_int$3,1000);
      return of_us
              (caml_call1
                (to_float$3,
                 caml_call2
                  (symbol$104,
                   caml_call2(symbol$99,_aYJ_,half_microsecond),
                   _aYF_)))}
    var
     min_span_float_value_for_1us_rounding=
      to_span_float_round_nearest(min_value_for_1us_rounding),
     max_span_float_value_for_1us_rounding=
      to_span_float_round_nearest(max_value_for_1us_rounding);
    function of_span(s)
     {var
       _aYD_=caml_call2(symbol$18,s,max_span_float_value_for_1us_rounding),
       _aYE_=
        _aYD_
        ||
        caml_call2(symbol$19,s,min_span_float_value_for_1us_rounding);
      if(_aYE_)
       failwiths
        (0,_ae9_,cst_Time_ns_Span_does_not_support_this_span,s,sexp_of_t$86);
      return of_sec_with_microsecond_precision(s)}
    var Private$3=[0,of_parts,to_parts$1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$367);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _ae__=
      [0,
       [0,
        hash_fold_t$22,
        hash$44,
        bin_size_t$49,
        bin_write_t$49,
        bin_read_t$100,
        bin_read_t$101,
        bin_shape_t$97,
        bin_writer_t$86,
        bin_reader_t$86,
        bin_t$86,
        compare$68,
        t_of_sexp$82,
        sexp_of_t$90,
        comparator$22,
        to_int63,
        of_int63_exn,
        Map$22,
        Set$22]],
     Core_kernel_Span_ns=
      [0,
       bin_size_t$49,
       bin_write_t$49,
       bin_read_t$100,
       bin_read_t$101,
       bin_shape_t$96,
       bin_writer_t$85,
       bin_reader_t$85,
       bin_t$85,
       t_of_sexp$82,
       sexp_of_t$90,
       typerep_of_t$24,
       typename_of_t$23,
       Parts$0,
       _aeX_,
       _aeY_,
       _aeZ_,
       _ae0_,
       _ae1_,
       _ae2_,
       _ae3_,
       compare$71,
       _ae4_,
       _ae5_,
       _aeM_,
       _aeN_,
       _aeO_,
       _aeP_,
       _aeQ_,
       _aeR_,
       _aeS_,
       _aeT_,
       include$63,
       _aeU_,
       _aeV_,
       _aeW_,
       validate_positive$5,
       validate_non_negative$5,
       validate_negative$5,
       validate_non_positive$5,
       is_positive$5,
       is_non_negative$5,
       is_negative$5,
       is_non_positive$5,
       sign$6,
       _aeC_,
       _aeD_,
       _aeE_,
       _aeF_,
       _aeG_,
       _aeH_,
       _aey_,
       symbol$205,
       symbol$206,
       symbol$207,
       symbol$208,
       symbol$209,
       symbol$210,
       robustly_compare$4,
       quickcheck_generator$8,
       quickcheck_observer$7,
       quickcheck_shrinker$7,
       _K1_,
       _K2_,
       to_string$25,
       of_string$21,
       nanosecond$0,
       microsecond$0,
       millisecond$0,
       second$1,
       minute$0,
       hour$1,
       ns_per_day,
       microsecond$0,
       zero$4,
       create$24,
       to_parts$1,
       of_ns$0,
       of_us$0,
       of_ms$0,
       of_sec,
       of_int_sec$0,
       of_int32_seconds$0,
       of_int63_seconds$0,
       of_min$0,
       of_hr$0,
       of_day$0,
       to_ns$0,
       to_us$0,
       to_ms$0,
       to_sec,
       to_min$0,
       to_hr$0,
       to_day$0,
       to_int63_seconds_round_down_exn$0,
       to_proportional_float,
       add$14,
       diff$8,
       abs$4,
       neg$4,
       scale$2,
       symbol$204,
       symbol$107,
       next$4,
       prev$5,
       to_short_string$0,
       to_unit_of_time$0,
       of_unit_of_time$0,
       to_string_hum$10,
       randomize$1,
       of_sec_with_microsecond_precision,
       of_int_us,
       of_int_ms,
       to_int_us,
       to_int_ms,
       to_int_sec,
       min_value$2,
       max_value$2,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       scale_int,
       scale_int63,
       symbol$104,
       to_int63_ns,
       of_int63_ns,
       _aeo_,
       of_int_ns,
       now$0,
       random$0,
       to_span,
       of_span,
       to_span_float_round_nearest,
       to_span,
       of_span_float_round_nearest,
       of_span,
       Alternate_sexp,
       Private$3,
       _ae__];
    caml_register_global(4461,Core_kernel_Span_ns,"Core_kernel__Span_ns");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$368);
    caml_call1(Expect_test_collector[4][1],cst_src_ofday_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$369,cst$165);
    var
     _ae$_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$188),0,bin_shape_t$96],0],
     _afa_=caml_call1(Bin_prot_Shape[4][1],cst_src_ofday_ns_ml_6_0),
     group$116=caml_call2(Bin_prot_Shape[6],_afa_,_ae$_),
     _afb_=caml_call1(Bin_prot_Shape[2][1],cst_t$189),
     bin_shape_t$100=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$116,_afb_),0),
     Typename_of_t$25=caml_call1(Typerep_lib_Make_typename[1],[0,name$63]),
     typename_of_t$24=Typename_of_t$25[2],
     name_of_t$17=Typename_of_t$25[1],
     typerep_of_t$25=[9,[0,name_of_t$17,[0,typerep_of_t$24]]];
    function to_parts$2(t){return to_parts$1(t)}
    var approximate_end_of_day$0=diff$8(ns_per_day,nanosecond$0);
    function to_span_since_start_of_day$0(t){return t}
    function is_invalid(span)
     {var _aYC_=caml_call2(_ae1_,span,zero$4);
      return _aYC_?_aYC_:caml_call2(_ae0_,span,ns_per_day)}
    function span_since_start_of_day_is_valid$0(span)
     {return 1 - is_invalid(span)}
    function of_span_since_start_of_day_unchecked$0(span){return span}
    function of_span_since_start_of_day$0(span)
     {if(is_invalid(span))
       {var _aYB_=[0,sexp_of_t$90(span),0];
        return caml_call1
                (_ba_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],
                     cst_Time_ns_Ofday_of_span_since_start_of_day_exn_input_out_of_bounds),
                   _aYB_]])}
      return span}
    function of_span_since_start_of_day_opt(span)
     {return is_invalid(span)?0:[0,span]}
    function add_exn$5(t,span)
     {return of_span_since_start_of_day$0(add$14(t,span))}
    function sub_exn(t,span)
     {return of_span_since_start_of_day$0(diff$8(t,span))}
    function add$15(t,span)
     {return of_span_since_start_of_day_opt(add$14(t,span))}
    function sub$5(t,span)
     {return of_span_since_start_of_day_opt(diff$8(t,span))}
    function next$5(t){return of_span_since_start_of_day_opt(next$4(t))}
    function prev$6(t){return of_span_since_start_of_day_opt(prev$5(t))}
    function diff$9(t,u){return diff$8(t,u)}
    function create$25(hr,min,sec,ms,us,ns,param)
     {if(sec)
       if(60 === sec[1])
        var ms$0=_afe_,us$0=_afd_,ns$0=_afc_,switch$0=1;
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var ms$0=ms,us$0=us,ns$0=ns;
      return of_span_since_start_of_day$0
              (create$24(0,0,hr,min,sec,ms$0,us$0,ns$0,0))}
    var
     _aff_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$190),0,bin_shape_t$100],0],
     _afg_=caml_call1(Bin_prot_Shape[4][1],cst_src_ofday_ns_ml_65_6),
     group$117=caml_call2(Bin_prot_Shape[6],_afg_,_aff_),
     _afh_=caml_call1(Bin_prot_Shape[2][1],cst_t$191),
     bin_shape_t$101=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$117,_afh_),0),
     bin_writer_t$89=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_t$89=[0,bin_read_t$100,bin_read_t$101],
     bin_t$89=[0,bin_shape_t$101,bin_writer_t$89,bin_reader_t$89];
    function to_string_with_unit(ns,unit)
     {if(! caml_call2(_ae1_,ns,zero$4))
       if(! caml_call2(_ae1_,ns_per_day,ns))
        {var
          sixty=caml_call1(of_int$3,60),
          thousand=caml_call1(of_int$3,1000),
          us=caml_call2(symbol$106,ns,thousand),
          ns$0=caml_call1(to_int_exn$2,caml_call2(rem$2,ns,thousand)),
          ms=caml_call2(symbol$106,us,thousand),
          us$0=caml_call1(to_int_exn$2,caml_call2(rem$2,us,thousand)),
          s=caml_call2(symbol$106,ms,thousand),
          ms$0=caml_call1(to_int_exn$2,caml_call2(rem$2,ms,thousand)),
          m=caml_call2(symbol$106,s,sixty),
          s$0=caml_call1(to_int_exn$2,caml_call2(rem$2,s,sixty)),
          h=caml_call1(to_int_exn$2,caml_call2(symbol$106,m,sixty)),
          m$0=caml_call1(to_int_exn$2,caml_call2(rem$2,m,sixty)),
          unit$0=
           65840584 <= unit
            ?unit
            :caml_call2(_aR_,ns$0,0)
              ?65840584
              :caml_call2(_aR_,us$0,0)
                ?425338712
                :caml_call2(_aR_,ms$0,0)
                  ?858219297
                  :caml_call2(_aR_,s$0,0)?417088404:127686388,
          len=
           127686388 === unit$0
            ?5
            :425338712 <= unit$0
              ?858219297 <= unit$0?12:15
              :417088404 <= unit$0?8:18,
          str=caml_call1(_EG_,len);
         write_2_digit_int$0(str,0,h);
         caml_call3(_EP_,str,2,58);
         write_2_digit_int$0(str,3,m$0);
         if(127686388 !== unit$0)
          {caml_call3(_EP_,str,5,58);
           write_2_digit_int$0(str,6,s$0);
           if(417088404 !== unit$0)
            {caml_call3(_EP_,str,8,46);
             write_3_digit_int$0(str,9,ms$0);
             if(! (858219297 <= unit$0))
              {write_3_digit_int$0(str,12,us$0);
               if(! (425338712 <= unit$0))write_3_digit_int$0(str,15,ns$0)}}}
         return caml_call1(_EZ_,str)}
      return cst_Incorrect_day}
    function create_from_parsed$0(string,hr,min,sec,subsec_pos,subsec_len)
     {if(caml_call2(equal$19,subsec_len,0))
       var nanoseconds=0;
      else
       {var
         until=caml_call2(_aw_,subsec_pos,subsec_len),
         pos$0=caml_call2(_aw_,subsec_pos,1),
         digits=[0,0],
         num_digits=[0,0],
         pos=[0,pos$0];
        for(;;)
         {if(caml_call2(O$0[11],pos[1],until))
           if(caml_call2(O$0[11],num_digits[1],10))
            {var c=caml_string_get(string,pos[1]);
             if(caml_call1(_Fx_,c))
              {num_digits[1]++;
               if(caml_call2(O$0[11],num_digits[1],10))
                {var
                  _aYu_=caml_call1(_Fp_,c),
                  _aYv_=caml_call2(O$0[3],digits[1],10);
                 digits[1] = caml_call2(O$0[1],_aYv_,_aYu_)}
               else
                {var _aYw_=caml_call1(_Fp_,c);
                 if(caml_call2(O$0[7],_aYw_,5))digits[1]++}}
             pos[1]++;
             continue}
          if(caml_call2(O$0[11],num_digits[1],9))
           {var _aYx_=caml_call2(pow,10,caml_call2(O$0[2],9,num_digits[1]));
            digits[1] = caml_call2(O$0[3],digits[1],_aYx_)}
          var nanoseconds=digits[1];
          break}}
      var
       _aYy_=caml_call1(of_int$3,nanoseconds),
       _aYz_=add$14(scale_int(second$1,sec),_aYy_),
       _aYA_=add$14(scale_int(minute$0,min),_aYz_);
      return of_span_since_start_of_day$0(add$14(scale_int(hour$1,hr),_aYA_))}
    function of_string$22(string){return parse$0(string,create_from_parsed$0)}
    function t_of_sexp$83(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _aYt_=of_string$22(s);return _aYt_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_eE_,exn,sexp)}}
      return caml_call2(_eD_,cst_expected_an_atom,sexp)}
    function to_string$26(t){return to_string_with_unit(t,65840584)}
    function sexp_of_t$91(t){return [0,to_string$26(t)]}
    function to_int63$0(t){return caml_call1(_ae__[1][15],t)}
    function of_int63_exn$0(t)
     {return of_span_since_start_of_day$0(caml_call1(_ae__[1][16],t))}
    var
     include$120=caml_call1(_hu_[1][2],[0,compare$71,sexp_of_t$91]),
     comparator$23=include$120[1];
    function to_millisec_string$0(t){return to_string_with_unit(t,858219297)}
    function to_sec_string$0(t){return to_string_with_unit(t,417088404)}
    function to_string_trimmed$0(t){return to_string_with_unit(t,-68054102)}
    function of_string_iso8601_extended$0(pos,len,str)
     {try
       {var _aYs_=parse_iso8601_extended(pos,len,str,create_from_parsed$0);
        return _aYs_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         _aYq_=[0,caml_call1(sexp_of_t,exn),0],
         _aYr_=[0,caml_call1(_ak_,caml_call3(_Cb_,pos,len,str)),_aYq_];
        return caml_call1
                (_ba_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],
                     cst_Time_ns_Ofday_of_string_iso8601_extended_cannot_parse_string),
                   _aYr_]])}}
    function small_diff$0(ofday1,ofday2)
     {var
       diff=caml_call2(include$61[96][2],ofday1,ofday2),
       d1=caml_call2(rem$2,diff,hour$1),
       d2=caml_call2(rem$2,caml_call2(include$61[96][1],d1,hour$1),hour$1),
       _aYo_=caml_call1(of_int$3,2),
       _aYp_=caml_call2(include$61[96][4],hour$1,_aYo_),
       d=
        caml_call2(include$61[96][10],d2,_aYp_)
         ?caml_call2(include$61[96][2],d2,hour$1)
         :d2;
      return d}
    var
     Expect_test_collector$4=
      caml_call1
       (Expect_test_collector[2],
        [0,
         Expect_test_config[2],
         Expect_test_config[3],
         Expect_test_config[4],
         Expect_test_config[5],
         Expect_test_config[6],
         Expect_test_config[7]]);
    function _afi_(param)
     {function test(x,y)
       {var
         diff=small_diff$0(x,y),
         _aYm_=to_string$25(diff),
         _aYn_=to_string$26(y);
        return caml_call4(_bf_,_afj_,to_string$26(x),_aYn_,_aYm_)}
      var
       examples=
        caml_call2
         (_qg_,
          _afk_,
          function(param)
           {var y=param[2],x=param[1],_aYl_=of_string$22(y);
            return [0,of_string$22(x),_aYl_]});
      caml_call2
       (_ph_,
        examples,
        function(param){var y=param[2],x=param[1];test(x,y);return test(y,x)});
      var
       _aYk_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_ofday_ns_ml$0),
         247,
         8633,
         8637,
         8643];
      return caml_call1(Expect_test_collector$4[1],_aYk_)}
    var
     _afl_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_ofday_ns_ml$1),
       248,
       8644,
       8648,
       9122],
     _afo_=
      [0,
       [0,
        _afn_,
        _afm_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_ofday_ns_ml$2),
         247,
         8633,
         8637,
         8643],
        _afl_],
       0],
     _afq_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_ofday_ns_ml$4),
       234,
       8225,
       8225,
       9123],
     _afr_=
      caml_call1
       (Expect_test_common_File[4][3],cst_2f6d4fcba08a8aa5150cfb9d20cf2b24);
    caml_call9
     (Expect_test_collector$4[3],
      _afr_,
      _afq_,
      cst_src_ofday_ns_ml$3,
      _afp_,
      0,
      _afo_,
      0,
      Inline_test_config,
      _afi_);
    var
     quickcheck_generator$12=caml_call2(_K1_,zero$4,ns_per_day),
     quickcheck_shrinker$11=caml_call1(_u$_[3],0),
     _afs_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$192),0,bin_shape_t$100],0],
     _aft_=caml_call1(Bin_prot_Shape[4][1],cst_src_ofday_ns_ml_266_4),
     group$118=caml_call2(Bin_prot_Shape[6],_aft_,_afs_),
     _afu_=caml_call1(Bin_prot_Shape[2][1],cst_t$193),
     bin_shape_t$102=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$118,_afu_),0),
     bin_writer_t$90=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_t$90=[0,bin_read_t$100,bin_read_t$101],
     bin_t$90=[0,bin_shape_t$102,bin_writer_t$90,bin_reader_t$90],
     _afv_=
      _A6_
       ([0,
         bin_size_t$49,
         bin_write_t$49,
         bin_read_t$100,
         bin_read_t$101,
         bin_shape_t$102,
         bin_writer_t$90,
         bin_reader_t$90,
         bin_t$90,
         compare$71,
         _aeC_,
         _aeD_,
         t_of_sexp$83,
         sexp_of_t$91,
         of_string$22,
         to_string$26,
         module_name$12]),
     _afw_=_afv_[1],
     _afx_=_afv_[2],
     _afy_=_afv_[3],
     _afz_=_afv_[4],
     _afA_=_afv_[5],
     _afB_=_afv_[6],
     _afC_=_afv_[7],
     _afD_=_afv_[8],
     _afE_=_afv_[9],
     _afF_=_afv_[10],
     _afG_=_afv_[11],
     _afH_=_afv_[12],
     _afI_=_afv_[13],
     _afJ_=_afv_[24],
     _afK_=_afv_[25],
     _afL_=_afv_[26],
     _afM_=_afv_[27],
     _afN_=_afv_[28],
     _afO_=_afv_[29],
     _afP_=_afv_[30],
     _afQ_=_afv_[31],
     _afR_=_afv_[32],
     _afS_=_afv_[33],
     _afT_=_afv_[34],
     _afU_=_afv_[35],
     _afV_=_afv_[36],
     _afW_=_afv_[37],
     _afX_=_afv_[38],
     _afY_=_afv_[39],
     _afZ_=_afv_[40],
     _af0_=_afv_[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$370);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _af1_=
      [0,
       [0,
        bin_size_t$49,
        bin_write_t$49,
        bin_read_t$100,
        bin_read_t$101,
        bin_shape_t$101,
        bin_writer_t$89,
        bin_reader_t$89,
        bin_t$89,
        compare$71,
        t_of_sexp$83,
        sexp_of_t$91,
        comparator$23,
        to_int63$0,
        of_int63_exn$0]],
     Core_kernel_Ofday_ns=
      [0,
       _afw_,
       _afx_,
       _afy_,
       _afz_,
       _afA_,
       _afB_,
       _afC_,
       _afD_,
       _afE_,
       _afF_,
       typerep_of_t$25,
       typename_of_t$24,
       _aeX_,
       _aeY_,
       _aeZ_,
       _ae0_,
       _ae1_,
       _ae2_,
       _ae3_,
       compare$71,
       _ae4_,
       _ae5_,
       _afJ_,
       _afK_,
       _afL_,
       _afM_,
       _afN_,
       _afO_,
       _afP_,
       _afQ_,
       _afR_,
       _afS_,
       _afT_,
       _afU_,
       _afV_,
       _afW_,
       _afX_,
       _afY_,
       _afZ_,
       _af0_,
       _afI_,
       symbol$205,
       symbol$206,
       symbol$207,
       symbol$208,
       symbol$209,
       symbol$210,
       robustly_compare$4,
       quickcheck_generator$12,
       quickcheck_observer$7,
       quickcheck_shrinker$11,
       _K1_,
       _K2_,
       _afG_,
       _afH_,
       create$25,
       to_parts$2,
       zero$4,
       ns_per_day,
       to_span_since_start_of_day$0,
       of_span_since_start_of_day$0,
       of_span_since_start_of_day$0,
       span_since_start_of_day_is_valid$0,
       of_span_since_start_of_day_unchecked$0,
       add$15,
       sub$5,
       next$5,
       prev$6,
       diff$9,
       small_diff$0,
       to_string_trimmed$0,
       to_sec_string$0,
       of_string_iso8601_extended$0,
       to_millisec_string$0,
       to_millisec_string$0,
       approximate_end_of_day$0,
       add_exn$5,
       sub_exn,
       _af1_];
    caml_register_global(4462,Core_kernel_Ofday_ns,"Core_kernel__Ofday_ns");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$371);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$372,cst$166);
    var
     arch_sixtyfour$0=caml_call2(_Nr_,Stdlib_sys[10],64),
     _af2_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$194),0,bin_shape_t$96],0],
     _af3_=caml_call1(Bin_prot_Shape[4][1],cst_src_time_ns_ml_9_0),
     group$119=caml_call2(Bin_prot_Shape[6],_af3_,_af2_),
     _af4_=caml_call1(Bin_prot_Shape[2][1],cst_t$195),
     bin_shape_t$103=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$119,_af4_),0),
     bin_writer_t$91=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_t$91=[0,bin_read_t$100,bin_read_t$101],
     bin_t$91=[0,bin_shape_t$103,bin_writer_t$91,bin_reader_t$91];
    function hash$46(x){return caml_call1(_aeD_,x)}
    var
     Typename_of_t$26=caml_call1(Typerep_lib_Make_typename[1],[0,name$64]),
     typename_of_t$25=Typename_of_t$26[2],
     name_of_t$18=Typename_of_t$26[1],
     typerep_of_t$26=[9,[0,name_of_t$18,[0,typerep_of_t$24]]];
    function abs_diff(t,u){return caml_call1(abs$4,diff$8(t,u))}
    function to_span_since_epoch$0(t){return t}
    function of_span_since_epoch$0(s){return s}
    function to_int63_ns_since_epoch(t){return t}
    function of_int63_ns_since_epoch(i){return i}
    function overflow(param)
     {return caml_call1
              (_on_,caml_call1(Sexplib0_Sexp_conv[7],cst_Time_ns_overflow))}
    function is_earlier(t1,t2){return caml_call2(_ae1_,t1,t2)}
    function is_later(t1,t2){return caml_call2(_ae0_,t1,t2)}
    function add_overflowed(x,y,sum)
     {return caml_call2(_ae0_,y,zero$4)
              ?caml_call2(_ae1_,sum,x)
              :caml_call2(_ae0_,sum,x)}
    function sub_overflowed(x,y,diff)
     {return caml_call2(_ae0_,y,zero$4)
              ?caml_call2(_ae0_,diff,x)
              :caml_call2(_ae1_,diff,x)}
    function add_saturating(x,y)
     {var sum=add$14(x,y);
      return add_overflowed(x,y,sum)
              ?caml_call2(_ae0_,y,zero$4)?max_value$2:min_value$2
              :sum}
    function sub_saturating(x,y)
     {var diff=diff$8(x,y);
      return sub_overflowed(x,y,diff)
              ?caml_call2(_ae0_,y,zero$4)?min_value$2:max_value$2
              :diff}
    var
     _af5_=
      arch_sixtyfour$0
       ?function(t){return caml_call1(to_int_exn$2,t)}
       :function(param)
         {return caml_call1
                  (_Gg_,
                   cst_Time_ns_to_int_ns_since_epoch_unsupported_on_32bit_machines)};
    function of_int_ns_since_epoch(i){return caml_call1(of_int$3,i)}
    function to_time_float_round_nearest(t)
     {return to_span_float_round_nearest(t)}
    function to_time_float_round_nearest_microsecond(t){return to_span(t)}
    var
     min_time_value_for_1us_rounding=
      to_time_float_round_nearest(min_value_for_1us_rounding),
     max_time_value_for_1us_rounding=
      to_time_float_round_nearest(max_value_for_1us_rounding);
    function of_time_float_round_nearest(time)
     {return of_span_float_round_nearest(to_span_since_epoch(time))}
    function of_time_float_round_nearest_microsecond(time)
     {var
       _aYi_=caml_call2(symbol$19,time,min_time_value_for_1us_rounding),
       _aYj_=
        _aYi_
        ||
        caml_call2(symbol$18,time,max_time_value_for_1us_rounding);
      if(_aYj_)
       failwiths
        (0,_af6_,cst_Time_ns_does_not_support_this_time,time,_aeb_[1][1][13]);
      return of_span(to_span_since_epoch(time))}
    function next_multiple_internal$0(can_equal_after,base,after,interval)
     {if(caml_call2(_aeY_,interval,zero$4))
       failwiths
        (0,
         _af7_,
         cst_Time_ns_next_multiple_got_nonpositive_interval,
         interval,
         sexp_of_t$90);
      var base_to_after=diff$8(after,base);
      if(caml_call2(_ae1_,base_to_after,zero$4))return base;
      var
       next=
        add$14
         (base,
          scale_int63(interval,caml_call2(symbol$104,base_to_after,interval)));
      if(! caml_call2(_ae0_,next,after))
       {var switch$0=can_equal_after?caml_call2(_aeZ_,next,after)?0:1:1;
        if(switch$0)return add$14(next,interval)}
      return next}
    function next_multiple$0(opt,base,after,interval,param)
     {if(opt)var sth=opt[1],can_equal_after=sth;else var can_equal_after=0;
      return next_multiple_internal$0(can_equal_after,base,after,interval)}
    function prev_multiple$0(opt,base,before,interval,param)
     {if(opt)var sth=opt[1],can_equal_before=sth;else var can_equal_before=0;
      return next_multiple_internal$0
              (1 - can_equal_before,base,diff$8(before,interval),interval)}
    function random$1(state,param){return random$0(state,0)}
    function to_date_and_span_since_start_of_day(ns_since_epoch)
     {function symbol(i){return caml_call1(of_int_exn$2,i)}
      var
       _aYb_=symbol(1000000000),
       _aYc_=symbol(86400),
       ns_per_day=caml_call2(include$61[96][3],_aYc_,_aYb_),
       approx_days_from_epoch=
        caml_call2(include$61[96][4],ns_since_epoch,ns_per_day),
       _aYd_=symbol(0);
      if(caml_call2(include$61[96][11],ns_since_epoch,_aYd_))
       {var
         _aYe_=
          caml_call2(include$61[96][3],approx_days_from_epoch,ns_per_day);
        if(caml_call2(include$61[96][12],_aYe_,ns_since_epoch))
         var
          _aYf_=symbol(1),
          days_from_epoch=
           caml_call2(include$61[96][2],approx_days_from_epoch,_aYf_),
          switch$0=1;
        else
         var switch$0=0}
      else
       var switch$0=0;
      if(! switch$0)var days_from_epoch=approx_days_from_epoch;
      var
       _aYg_=caml_call2(include$61[96][3],ns_per_day,days_from_epoch),
       span_since_start_of_day=
        caml_call2(include$61[96][2],ns_since_epoch,_aYg_),
       _aYa_=caml_call1(to_int_exn$2,days_from_epoch),
       _aYh_=caml_call2(Days[4],Days[5],_aYa_),
       date=caml_call1(Days[2],_aYh_);
      return [0,date,span_since_start_of_day]}
    function of_date_and_span_since_start_of_day(date,span_since_start_of_day)
     {if(caml_call2(_aeX_,span_since_start_of_day,zero$4))
       if(caml_call2(_ae1_,span_since_start_of_day,ns_per_day))
        {var
          _aX__=Days[5],
          _aX$_=caml_call1(Days[1],date),
          days_from_epoch=caml_call2(Days[3],_aX$_,_aX__),
          span_in_days_since_epoch=scale_int(ns_per_day,days_from_epoch),
          span_since_epoch=
           add$14(span_in_days_since_epoch,span_since_start_of_day);
         return span_since_epoch}
      throw [0,Assert_failure,_af8_]}
    var
     Utc=
      [0,
       to_date_and_span_since_start_of_day,
       of_date_and_span_since_start_of_day];
    function two_digit_of_string(string)
     {if(caml_call2(O$0[9],caml_ml_string_length(string),2))
       if(caml_call2(_Cj_,string,_Fx_))return caml_call1(of_string$2,string);
      throw [0,Assert_failure,_af__]}
    var
     ns_of_100_ms=100000000,
     ns_of_10_ms=10000000,
     ns_of_1_ms=1000000,
     ns_of_100_us=100000,
     ns_of_10_us=10000,
     ns_of_1_us=1000,
     ns_of_100_ns=100,
     ns_of_10_ns=10,
     ns_of_1_ns=1;
    function to_string$27(t)
     {var
       match=caml_call1(Utc[1],t),
       span_since_start_of_day=match[2],
       date=match[1];
      if(caml_call2(_aeX_,span_since_start_of_day,zero$4))
       if(caml_call2(_ae1_,span_since_start_of_day,ns_per_day))
        {var
          seconds_span=of_int_sec$0(to_int_sec(span_since_start_of_day)),
          sub_second_span=diff$8(span_since_start_of_day,seconds_span),
          ns=caml_call1(to_int_exn$2,sub_second_span);
         if(caml_call2(O$0[9],ns,0))
          var _aX8_=cst$167;
         else
          {var _aX0_=caml_call2(O$0[16],ns,ns_of_100_ms);
           if(caml_call2(O$0[9],_aX0_,0))
            var
             _aX8_=
              caml_call2(_fE_,_aga_,caml_call2(O$0[4],ns,ns_of_100_ms));
           else
            {var _aX1_=caml_call2(O$0[16],ns,ns_of_10_ms);
             if(caml_call2(O$0[9],_aX1_,0))
              var
               _aX8_=
                caml_call2(_fE_,_agb_,caml_call2(O$0[4],ns,ns_of_10_ms));
             else
              {var _aX2_=caml_call2(O$0[16],ns,ns_of_1_ms);
               if(caml_call2(O$0[9],_aX2_,0))
                var
                 _aX8_=
                  caml_call2(_fE_,_agc_,caml_call2(O$0[4],ns,ns_of_1_ms));
               else
                {var _aX3_=caml_call2(O$0[16],ns,ns_of_100_us);
                 if(caml_call2(O$0[9],_aX3_,0))
                  var
                   _aX8_=
                    caml_call2(_fE_,_agd_,caml_call2(O$0[4],ns,ns_of_100_us));
                 else
                  {var _aX4_=caml_call2(O$0[16],ns,ns_of_10_us);
                   if(caml_call2(O$0[9],_aX4_,0))
                    var
                     _aX8_=
                      caml_call2(_fE_,_age_,caml_call2(O$0[4],ns,ns_of_10_us));
                   else
                    {var _aX5_=caml_call2(O$0[16],ns,ns_of_1_us);
                     if(caml_call2(O$0[9],_aX5_,0))
                      var
                       _aX8_=
                        caml_call2(_fE_,_agf_,caml_call2(O$0[4],ns,ns_of_1_us));
                     else
                      {var _aX6_=caml_call2(O$0[16],ns,ns_of_100_ns);
                       if(caml_call2(O$0[9],_aX6_,0))
                        var
                         _aX8_=
                          caml_call2(_fE_,_agg_,caml_call2(O$0[4],ns,ns_of_100_ns));
                       else
                        var
                         _aX7_=caml_call2(O$0[16],ns,ns_of_10_ns),
                         _aX8_=
                          caml_call2(O$0[9],_aX7_,0)
                           ?caml_call2(_fE_,_agh_,caml_call2(O$0[4],ns,ns_of_10_ns))
                           :caml_call2(_fE_,_agi_,ns)}}}}}}}
         var
          seconds=to_int_sec(seconds_span),
          h=caml_call2(O$0[4],seconds,3600),
          _aXZ_=caml_call2(O$0[4],seconds,60),
          m=caml_call2(O$0[16],_aXZ_,60),
          s=caml_call2(O$0[16],seconds,60),
          _aX9_=
           caml_call2
            (_Gu_,
             cst$169,
             caml_call2
              (_Gu_,
               caml_call2(_Gu_,caml_call4(_fE_,_af9_,h,m,s),_aX8_),
               cst_Z$0));
         return caml_call2(_Gu_,to_string$21(date),_aX9_)}
      throw [0,Assert_failure,_agl_]}
    function of_string$23(string$0)
     {var
       match$1=caml_call2(_CY_,string$0,32),
       ofday_string_with_zone=match$1[2],
       date_string=match$1[1],
       string$1=caml_call2(_Df_,ofday_string_with_zone,cst_Z$1),
       date=of_string$17(date_string),
       len=caml_ml_string_length(string$1),
       suffix_len=caml_call2(O$0[2],len,8),
       seconds_string=caml_call3(_Ca_,string$1,0,8),
       string=caml_call3(_Ca_,string$1,8,suffix_len),
       match=caml_call2(_C2_,seconds_string,58);
      if(match)
       {var _aXT_=match[2];
        if(_aXT_)
         {var _aXU_=_aXT_[2];
          if(_aXU_)
           if(! _aXU_[2])
            {var
              s_string=_aXU_[1],
              m_string=_aXT_[1],
              h_string=match[1],
              h=two_digit_of_string(h_string),
              m=two_digit_of_string(m_string),
              s=two_digit_of_string(s_string),
              _aXV_=caml_call2(O$0[3],h,60),
              _aXW_=caml_call2(O$0[1],_aXV_,m),
              _aXX_=caml_call2(O$0[3],_aXW_,60),
              seconds_span=of_int_sec$0(caml_call2(O$0[1],_aXX_,s));
             if(caml_call1(_Cd_,string))
              var sub_second_span=zero$4;
             else
              {var digits=caml_call2(_Dg_,string,cst$168);
               if(! caml_call2(_Cj_,digits,_Fx_))
                throw [0,Assert_failure,_agk_];
               var
                match$0=caml_ml_string_length(digits),
                switcher=match$0 - 1 | 0;
               if(8 < switcher >>> 0)throw [0,Assert_failure,_agj_];
               switch(switcher)
                {case 0:var multiplier=ns_of_100_ms;break;
                 case 1:var multiplier=ns_of_10_ms;break;
                 case 2:var multiplier=ns_of_1_ms;break;
                 case 3:var multiplier=ns_of_100_us;break;
                 case 4:var multiplier=ns_of_10_us;break;
                 case 5:var multiplier=ns_of_1_us;break;
                 case 6:var multiplier=ns_of_100_ns;break;
                 case 7:var multiplier=ns_of_10_ns;break;
                 default:var multiplier=ns_of_1_ns}
               var
                _aXY_=caml_call1(of_string$2,digits),
                sub_second_span=
                 caml_call1(of_int$3,caml_call2(O$0[3],_aXY_,multiplier))}
             var ofday=add$14(seconds_span,sub_second_span);
             return caml_call2(Utc[2],date,ofday)}}}
      throw [0,Assert_failure,_af$_]}
    var
     include$121=caml_call1(Base_Sexpable[5],[0,of_string$23,to_string$27]),
     _agm_=include$121[1],
     _agn_=include$121[2],
     _ago_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$196),0,bin_shape_t$103],0],
     _agp_=caml_call1(Bin_prot_Shape[4][1],cst_src_time_ns_ml_318_6),
     group$120=caml_call2(Bin_prot_Shape[6],_agp_,_ago_),
     _agq_=caml_call1(Bin_prot_Shape[2][1],cst_t$197),
     bin_shape_t$104=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$120,_agq_),0),
     bin_writer_t$92=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_t$92=[0,bin_read_t$100,bin_read_t$101],
     bin_t$92=[0,bin_shape_t$104,bin_writer_t$92,bin_reader_t$92];
    function to_absolute$0(relative,offset_from_utc)
     {var diff=diff$8(relative,offset_from_utc);
      return sub_overflowed(relative,offset_from_utc,diff)?overflow(0):diff}
    function of_absolute$0(absolute,offset_from_utc)
     {var sum=add$14(absolute,offset_from_utc);
      return add_overflowed(absolute,offset_from_utc,sum)?overflow(0):sum}
    function to_days_from_epoch$0(t)
     {var
       days_from_epoch_approx=caml_call2(include$61[96][4],t,ns_per_day),
       _aXS_=caml_call2(include$61[96][3],days_from_epoch_approx,ns_per_day);
      return caml_call2(include$61[96][11],t,_aXS_)
              ?caml_call1(pred$1,days_from_epoch_approx)
              :days_from_epoch_approx}
    function of_span_in_seconds(span_in_seconds)
     {return of_int63_seconds$0
              (caml_call1(Time_in_seconds[1][2],span_in_seconds))}
    function of_time_in_seconds(time_in_seconds)
     {var _aXR_=caml_call1(Time_in_seconds[4],time_in_seconds);
      return of_int63_seconds$0(caml_call1(Time_in_seconds[1][2],_aXR_))}
    function index$0(t,time)
     {var
       _aXP_=to_int63_seconds_round_down_exn$0(time),
       _aXQ_=caml_call1(Time_in_seconds[1][1],_aXP_);
      return index(t,caml_call1(Time_in_seconds[3],_aXQ_))}
    function index_offset_from_utc_exn$0(t,index)
     {return of_span_in_seconds(index_offset_from_utc_exn(t,index))}
    function index_prev_clock_shift_time_exn$0(t,index)
     {return of_time_in_seconds(index_prev_clock_shift_time_exn(t,index))}
    function index_prev_clock_shift(t,index)
     {var match=index_has_prev_clock_shift(t,index);
      if(0 === match)return 0;
      var
       _aXO_=
        of_span_in_seconds(index_prev_clock_shift_amount_exn(t,index));
      return [0,[0,index_prev_clock_shift_time_exn$0(t,index),_aXO_]]}
    function next_clock_shift(t,time)
     {var index=index$0(t,time);
      return index_prev_clock_shift(t,caml_call1(Index[1],index))}
    function of_date_ofday$0(zone,date,ofday)
     {var
       _aXJ_=Days[5],
       _aXK_=caml_call1(Days[1],date),
       days=caml_call1(of_int$3,caml_call2(Days[3],_aXK_,_aXJ_)),
       _aXL_=caml_call2(include$61[96][3],days,ns_per_day),
       relative=caml_call2(include$61[96][1],_aXL_,ofday),
       _aXM_=to_int63_seconds_round_down_exn$0(relative),
       _aXN_=caml_call1(Time_in_seconds[1][1],_aXM_),
       index=
        index_of_date_and_ofday(zone,caml_call1(Time_in_seconds[2][1],_aXN_)),
       offset_from_utc=index_offset_from_utc_exn$0(zone,index);
      return to_absolute$0(relative,offset_from_utc)}
    function of_date_ofday_precise(date,ofday,zone)
     {var
       start_of_day=of_date_ofday$0(zone,date,zero$4),
       proposed_time=add$14(start_of_day,ofday),
       match=next_clock_shift(zone,start_of_day);
      if(match)
       {var
         match$0=match[1],
         shift_amount=match$0[2],
         shift_start=match$0[1],
         shift_backwards=caml_call2(_ae1_,shift_amount,zero$4);
        if(shift_backwards)
         var s=add$14(shift_start,shift_amount),e=shift_start;
        else
         var e$0=add$14(shift_start,shift_amount),s=shift_start,e=e$0;
        if(caml_call2(_ae1_,proposed_time,s))
         return [0,881568161,proposed_time];
        if(caml_call2(_aeY_,s,proposed_time))
         if(caml_call2(_ae1_,proposed_time,e))
          return shift_backwards
                  ?[0,
                    748757384,
                    [0,proposed_time,diff$8(proposed_time,shift_amount)]]
                  :[0,744337004,shift_start];
        return [0,881568161,diff$8(proposed_time,shift_amount)]}
      return [0,881568161,proposed_time]}
    var date_cache=[0,utc,zero$4,zero$4,zero$4,unix_epoch];
    function reset_date_cache(param)
     {date_cache[1] = utc;
      date_cache[2] = zero$4;
      date_cache[3] = zero$4;
      date_cache[4] = zero$4;
      date_cache[5] = unix_epoch;
      return 0}
    function set_date_cache(time,zone)
     {var _aXG_=caml_call2(_Pi_,zone,date_cache[1]);
      if(_aXG_)
       {var _aXH_=caml_call2(_aeX_,time,date_cache[2]);
        if(_aXH_)
         var match=caml_call2(_ae1_,time,date_cache[3]),switch$0=1;
        else
         var _aXI_=_aXH_,switch$0=0}
      else
       var _aXI_=_aXG_,switch$0=0;
      if(! switch$0)var match=_aXI_;
      if(0 === match)
       {var
         index=index$0(zone,time),
         offset_from_utc=index_offset_from_utc_exn$0(zone,index),
         t=of_absolute$0(time,offset_from_utc),
         days_from_epoch=to_days_from_epoch$0(t),
         _aXE_=caml_call1(to_int_exn$2,days_from_epoch),
         _aXF_=caml_call2(Days[4],Days[5],_aXE_),
         date=caml_call1(Days[2],_aXF_),
         days_from_epoch$0=to_days_from_epoch$0(t),
         days_from_epoch_in_ns=
          caml_call2(include$61[96][3],days_from_epoch$0,ns_per_day),
         remainder=caml_call2(include$61[96][2],t,days_from_epoch_in_ns),
         span=of_span_since_start_of_day$0(remainder),
         effective_day_start=diff$8(to_absolute$0(t,offset_from_utc),span),
         effective_day_until=add$14(effective_day_start,ns_per_day),
         match$0=index_has_prev_clock_shift(zone,index),
         cache_start_incl=
          0 === match$0
           ?effective_day_start
           :caml_call2
             (_ae5_,
              index_prev_clock_shift_time_exn$0(zone,index),
              effective_day_start),
         match$1=index_has_next_clock_shift(zone,index),
         cache_until_excl=
          0 === match$1
           ?effective_day_until
           :caml_call2
             (_ae4_,
              of_time_in_seconds(index_next_clock_shift_time_exn(zone,index)),
              effective_day_until);
        date_cache[1] = zone;
        date_cache[2] = cache_start_incl;
        date_cache[3] = cache_until_excl;
        date_cache[4] = effective_day_start;
        date_cache[5] = date;
        return 0}
      return 0}
    function to_date$1(time,zone)
     {set_date_cache(time,zone);return date_cache[5]}
    function to_ofday$0(time,zone)
     {set_date_cache(time,zone);
      return of_span_since_start_of_day$0(diff$8(time,date_cache[4]))}
    function to_date_ofday$0(time,zone)
     {var _aXD_=to_ofday$0(time,zone);return [0,to_date$1(time,zone),_aXD_]}
    function to_date_ofday_precise(time,zone)
     {var
       match=to_date_ofday$0(time,zone),
       ofday=match[2],
       date=match[1],
       match$0=next_clock_shift(zone,time),
       clock_shift_before_or_at=
        index_prev_clock_shift(zone,index$0(zone,time));
      if(clock_shift_before_or_at)
       {var
         match$2=clock_shift_before_or_at[1],
         amount=match$2[2],
         start=match$2[1];
        if(caml_call2(_ae0_,add$14(start,caml_call1(abs$4,amount)),time))
         {if(caml_call2(_ae0_,amount,zero$4))
           {var match$1=sub$5(ofday,amount);
            if(match$1)
             var ofday$0=match$1[1],_aXA_=[0,-687020392,[0,date,ofday$0]];
            else
             var
              _aXy_=[0,[1,[0,_agr_,[0,sexp_of_t$68(zone),0]]],0],
              _aXz_=[0,[1,[0,_ags_,[0,sexp_of_t$90(time),0]]],_aXy_],
              _aXA_=
               caml_call1
                (_on_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Time_to_date_ofday_precise$0),
                   _aXz_]]);
            var _aXB_=_aXA_}
          else
           {if(! caml_call2(_ae1_,amount,zero$4))
             throw [0,Assert_failure,_agt_];
            var _aXB_=[0,1043984139,diff$8(time,caml_call1(abs$4,amount))]}
          var ambiguity=_aXB_,switch$0=1}
        else
         var switch$0=0}
      else
       var switch$0=0;
      if(! switch$0)
       {if(match$0)
         {var match$3=match$0[1],amount$0=match$3[2],start$0=match$3[1];
          if
           (caml_call2(_aeY_,diff$8(start$0,caml_call1(abs$4,amount$0)),time))
           {if(caml_call2(_ae0_,amount$0,zero$4))
             var _aXC_=881570188;
            else
             {if(! caml_call2(_ae1_,amount$0,zero$4))
               throw [0,Assert_failure,_agu_];
              var _aXC_=[0,1043984139,add$14(time,caml_call1(abs$4,amount$0))]}
            var ambiguity=_aXC_,switch$1=1}
          else
           var switch$1=0}
        else
         var switch$1=0;
        if(! switch$1)var ambiguity=881570188}
      return [0,date,ofday,ambiguity]}
    function convert(from_tz,to_tz,date,ofday)
     {var start_time=of_date_ofday$0(from_tz,date,ofday);
      return to_date_ofday$0(start_time,to_tz)}
    function utc_offset$0(t,zone)
     {var
       index=index$0(zone,t),
       offset_from_utc=index_offset_from_utc_exn$0(zone,index),
       utc_epoch=of_absolute$0(t,offset_from_utc);
      return diff$8(utc_epoch,t)}
    function offset_string(time,zone)
     {var
       utc_offset=utc_offset$0(time,zone),
       is_utc=caml_call2(_aeZ_,utc_offset,zero$4);
      if(is_utc)return cst_Z$2;
      var
       _aXw_=
        [0,
         to_string_trimmed$0
          (of_span_since_start_of_day$0(caml_call1(abs$4,utc_offset))),
         0],
       _aXx_=caml_call2(_ae1_,utc_offset,zero$4)?cst$170:cst$171;
      return caml_call2(_Cx_,0,[0,_aXx_,_aXw_])}
    function attempt(time,zone)
     {var
       match=to_date_ofday$0(time,zone),
       ofday=match[2],
       date=match[1],
       offset_string$0=offset_string(time,zone),
       _aXv_=
        [0,
         caml_call2
          (_Cx_,_agv_,[0,caml_call1(_afH_,ofday),[0,offset_string$0,0]]),
         0];
      return [0,to_string$21(date),_aXv_]}
    function to_string_abs_parts(time,zone)
     {try
       {var _aXt_=attempt(time,zone);return _aXt_}
      catch(_aXu_){return attempt(time,utc)}}
    function to_string_abs_trimmed(time,zone)
     {var
       match=to_date_ofday$0(time,zone),
       ofday=match[2],
       date=match[1],
       offset_string$0=offset_string(time,zone),
       _aXs_=[0,caml_call2(_Gu_,to_string_trimmed$0(ofday),offset_string$0),0];
      return caml_call2(_Cx_,_agw_,[0,to_string$21(date),_aXs_])}
    function to_string_abs(time,zone)
     {return caml_call2(_Cx_,_agx_,to_string_abs_parts(time,zone))}
    function to_string$28(t){return to_string_abs(t,utc)}
    function to_string_iso8601_basic$0(time,zone)
     {return caml_call2(_Cx_,_agy_,to_string_abs_parts(time,zone))}
    function to_string_trimmed$1(t,zone)
     {var
       match=to_date_ofday$0(t,zone),
       sec=match[2],
       date=match[1],
       _aXr_=caml_call2(_Gu_,cst$172,to_string_trimmed$0(sec));
      return caml_call2(_Gu_,to_string$21(date),_aXr_)}
    function to_sec_string$1(t,zone)
     {var
       match=to_date_ofday$0(t,zone),
       sec=match[2],
       date=match[1],
       _aXq_=caml_call2(_Gu_,cst$173,to_sec_string$0(sec));
      return caml_call2(_Gu_,to_string$21(date),_aXq_)}
    function to_filename_string(t,zone)
     {var
       match=to_date_ofday$0(t,zone),
       ofday=match[2],
       date=match[1],
       _aXp_=
        caml_call2
         (_Gu_,
          cst$174,
          caml_call3(_Dd_,58,45,caml_call2(_Dl_,caml_call1(_afH_,ofday),3)));
      return caml_call2(_Gu_,to_string$21(date),_aXp_)}
    function of_filename_string(s,zone)
     {try
       {var match=caml_call2(_C0_,s,95);
        if(match)
         var
          match$0=match[1],
          ofday=match$0[2],
          date=match$0[1],
          date$0=of_string$17(date),
          ofday$0=caml_call3(_Dd_,45,58,ofday),
          ofday$1=caml_call1(_afG_,ofday$0),
          _aXo_=of_date_ofday$0(zone,date$0,ofday$1);
        else
         var _aXo_=caml_call1(_Gg_,cst_no_space_in_filename_string$0);
        return _aXo_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call4(_Ph_,_agz_,s,caml_call1(Base_Exn[9],exn),0)}}
    function of_localized_string(zone,str)
     {try
       {var match=caml_call2(_C0_,str,32);
        if(match)
         var
          match$0=match[1],
          time=match$0[2],
          date=match$0[1],
          date$0=of_string$17(date),
          ofday=caml_call1(_afG_,time),
          _aXn_=of_date_ofday$0(zone,date$0,ofday);
        else
         var _aXn_=caml_call1(_Gf_,caml_call2(_fE_,_agA_,str));
        return _aXn_}
      catch(e)
       {e = caml_wrap_exception(e);
        return caml_call2(Base_Exn[7],e,cst_Time_of_localized_string$0)}}
    function occurrence(before_or_after,t,ofday,zone)
     {var
       first_guess_date=to_date$1(t,zone),
       first_guess=of_date_ofday$0(zone,first_guess_date,ofday);
      if(476625469 <= before_or_after)
       var cmp=_aeX_,increment=1;
      else
       var cmp=_aeY_,increment=-1;
      return caml_call2(cmp,first_guess,t)
              ?first_guess
              :of_date_ofday$0
                (zone,add_days$0(first_guess_date,increment),ofday)}
    function ensure_colon_in_offset(offset)
     {var offset_length=caml_ml_string_length(offset);
      if(caml_call2(symbol$49,offset_length,2))
       if(caml_call1(_Fx_,caml_string_get(offset,0)))
        if(caml_call1(_Fx_,caml_string_get(offset,offset_length - 1 | 0)))
         return caml_call2(_Gu_,offset,cst_00$0);
      if(! caml_call2(_FW_,caml_string_get(offset,1),58))
       if(! caml_call2(_FW_,caml_string_get(offset,2),58))
        {if(! caml_call2(symbol$52,offset_length,3))
          if(! caml_call2(symbol$51,offset_length,4))
           {var
             _aXm_=
              [0,
               cst$175,
               [0,slice$2(offset,offset_length - 2 | 0,offset_length),0]];
            return caml_call2
                    (_Cx_,0,[0,slice$2(offset,0,offset_length - 2 | 0),_aXm_])}
         return caml_call3(_Pg_,_agB_,offset,0)}
      return offset}
    var
     Time_ns_of_string=
      [248,
       cst_Core_kernel_Time_ns_To_and_of_string_Time_ns_of_string,
       caml_fresh_oo_id(0)];
    function _agC_(param)
     {if(param[1] === Time_ns_of_string)
       {var
         v1=param[3],
         v0=param[2],
         v0$0=caml_call1(sexp_of_t$40,v0),
         v1$0=caml_call1(Base_Exn[1],v1);
        return [1,[0,_agD_,[0,v0$0,[0,v1$0,0]]]]}
      throw [0,Assert_failure,_agE_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Time_ns_of_string,_agC_);
    function of_string_gen(default_zone,find_zone,s)
     {try
       {var match=caml_call2(_C2_,s,32);
        if(match)
         {var _aXd_=match[2],_aXe_=match[1];
          if(_aXd_)
           {var _aXf_=_aXd_[2],_aXg_=_aXd_[1];
            if(_aXf_)
             {var _aXh_=_aXf_[2],_aXi_=_aXf_[1];
              if(_aXh_)
               if(_aXh_[2])
                var switch$0=0;
               else
                var
                 ofday$2=_aXh_[1],
                 date=
                  caml_call2
                   (_Cx_,
                    0,
                    [0,_aXe_,[0,cst$177,[0,_aXg_,[0,cst$176,[0,_aXi_,0]]]]]),
                 ofday=ofday$2,
                 tz=0,
                 switch$0=1;
              else
               var date=_aXe_,ofday=_aXg_,tz=[0,_aXi_],switch$0=1}
            else
             var date=_aXe_,ofday=_aXg_,tz=0,switch$0=1}
          else
           {var match$4=caml_call2(_C1_,_aXe_,84);
            if(match$4)
             var
              match$5=match$4[1],
              ofday$3=match$5[2],
              date$1=match$5[1],
              date=date$1,
              ofday=ofday$3,
              tz=0,
              switch$0=1;
            else
             var
              _aXl_=caml_call1(_Gg_,cst_no_spaces_or_T_found$0),
              date=_aXl_[1],
              ofday=_aXl_[2],
              tz=_aXl_[3],
              switch$0=1}}
        else
         var switch$0=0;
        if(! switch$0)
         var
          _aXj_=caml_call1(_Gg_,cst_too_many_spaces$0),
          date=_aXj_[1],
          ofday=_aXj_[2],
          tz=_aXj_[3];
        var ofday_to_sec=function(od){return to_sec(od)};
        if(tz)
         var ofday$0=ofday,utc_offset=0;
        else
         if
          (caml_call2
            (_FW_,
             caml_string_get(ofday,caml_ml_string_length(ofday) - 1 | 0),
             90))
          var
           ofday$0=
            caml_call3(_Ca_,ofday,0,caml_ml_string_length(ofday) - 1 | 0),
           utc_offset=utc_offset$1;
         else
          {var match$0=caml_call2(_C0_,ofday,43);
           if(match$0)
            var
             match$1=match$0[1],
             r=match$1[2],
             l=match$1[1],
             ofday$0=l,
             utc_offset=
              [0,ofday_to_sec(caml_call1(_afG_,ensure_colon_in_offset(r)))];
           else
            {var match$2=caml_call2(_C0_,ofday,45);
             if(match$2)
              var
               match$3=match$2[1],
               r$0=match$3[2],
               l$0=match$3[1],
               ofday$0=l$0,
               utc_offset=
                [0,
                 -1.
                 *
                 ofday_to_sec(caml_call1(_afG_,ensure_colon_in_offset(r$0)))];
             else
              var ofday$0=ofday,utc_offset=0}}
        var date$0=of_string$17(date),ofday$1=caml_call1(_afG_,ofday$0);
        if(tz)
         var
          tz$0=tz[1],
          _aXk_=of_date_ofday$0(caml_call1(find_zone,tz$0),date$0,ofday$1);
        else
         if(utc_offset)
          var
           utc_offset$0=utc_offset[1],
           utc_t=of_date_ofday$0(utc,date$0,ofday$1),
           _aXk_=diff$8(utc_t,of_sec(utc_offset$0));
         else
          var
           zone=caml_call1(default_zone,0),
           _aXk_=of_date_ofday$0(zone,date$0,ofday$1);
        return _aXk_}
      catch(e){e = caml_wrap_exception(e);throw [0,Time_ns_of_string,s,e]}}
    function of_string$24(s)
     {function default_zone(param)
       {var _aXc_=[0,caml_call1(Sexplib0_Sexp_conv[7],s),0];
        return caml_call1
                (_on_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],
                     cst_time_has_no_time_zone_or_UTC_offset$0),
                   _aXc_]])}
      function find_zone(zone_name){return caml_call3(_Pg_,_agF_,zone_name,0)}
      return of_string_gen(default_zone,find_zone,s)}
    function span_of_duration(d)
     {return caml_call1(Ppx_module_timer_runtime[3][1],d)}
    function of_string$25(string)
     {var s=of_string$21(string);
      return caml_call1(Ppx_module_timer_runtime[3][2],s)}
    function to_string_with_same_unit(durations)
     {var
       spans=caml_call2(_qg_,durations,span_of_duration),
       unit_of_time=
        caml_call3(_yk_,caml_call2(_pt_,spans,compare$71),0,to_unit_of_time$0),
       _aXb_=[0,unit_of_time];
      return caml_call2
              (_qg_,
               spans,
               function(eta){return to_string_hum$10(0,0,_agG_,_aXb_,eta)})}
    Ppx_module_timer_runtime[3][3][1]
    =
    [0,of_string$25,to_string_with_same_unit];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$373);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Stable$8=
      [0,
       [0,
        [0,
         bin_size_t$49,
         bin_write_t$49,
         bin_read_t$100,
         bin_read_t$101,
         bin_shape_t$104,
         bin_writer_t$92,
         bin_reader_t$92,
         bin_t$92,
         compare$71,
         _agm_,
         _agn_]],
       _ae__,
       _af1_],
     include$122=[0,_agm_,_agn_],
     Ofday$0=
      [0,
       _afw_,
       _afx_,
       _afy_,
       _afz_,
       _afA_,
       _afB_,
       _afC_,
       _afD_,
       _afE_,
       _afF_,
       typerep_of_t$25,
       typename_of_t$24,
       _aeX_,
       _aeY_,
       _aeZ_,
       _ae0_,
       _ae1_,
       _ae2_,
       _ae3_,
       compare$71,
       _ae4_,
       _ae5_,
       _afJ_,
       _afK_,
       _afL_,
       _afM_,
       _afN_,
       _afO_,
       _afP_,
       _afQ_,
       _afR_,
       _afS_,
       _afT_,
       _afU_,
       _afV_,
       _afW_,
       _afX_,
       _afY_,
       _afZ_,
       _af0_,
       _afI_,
       symbol$205,
       symbol$206,
       symbol$207,
       symbol$208,
       symbol$209,
       symbol$210,
       robustly_compare$4,
       quickcheck_generator$12,
       quickcheck_observer$7,
       quickcheck_shrinker$11,
       _K1_,
       _K2_,
       _afG_,
       _afH_,
       create$25,
       to_parts$2,
       zero$4,
       ns_per_day,
       to_span_since_start_of_day$0,
       of_span_since_start_of_day$0,
       of_span_since_start_of_day$0,
       span_since_start_of_day_is_valid$0,
       of_span_since_start_of_day_unchecked$0,
       add$15,
       sub$5,
       next$5,
       prev$6,
       diff$9,
       small_diff$0,
       to_string_trimmed$0,
       to_sec_string$0,
       of_string_iso8601_extended$0,
       to_millisec_string$0,
       to_millisec_string$0,
       approximate_end_of_day$0,
       add_exn$5,
       sub_exn],
     Span$1=
      [0,
       bin_size_t$49,
       bin_write_t$49,
       bin_read_t$100,
       bin_read_t$101,
       bin_shape_t$96,
       bin_writer_t$85,
       bin_reader_t$85,
       bin_t$85,
       t_of_sexp$82,
       sexp_of_t$90,
       typerep_of_t$24,
       typename_of_t$23,
       Parts$0,
       _aeX_,
       _aeY_,
       _aeZ_,
       _ae0_,
       _ae1_,
       _ae2_,
       _ae3_,
       compare$71,
       _ae4_,
       _ae5_,
       _aeM_,
       _aeN_,
       _aeO_,
       _aeP_,
       _aeQ_,
       _aeR_,
       _aeS_,
       _aeT_,
       include$63,
       _aeU_,
       _aeV_,
       _aeW_,
       validate_positive$5,
       validate_non_negative$5,
       validate_negative$5,
       validate_non_positive$5,
       is_positive$5,
       is_non_negative$5,
       is_negative$5,
       is_non_positive$5,
       sign$6,
       _aeC_,
       _aeD_,
       _aeE_,
       _aeF_,
       _aeG_,
       _aeH_,
       _aey_,
       symbol$205,
       symbol$206,
       symbol$207,
       symbol$208,
       symbol$209,
       symbol$210,
       robustly_compare$4,
       quickcheck_generator$8,
       quickcheck_observer$7,
       quickcheck_shrinker$7,
       _K1_,
       _K2_,
       to_string$25,
       of_string$21,
       nanosecond$0,
       microsecond$0,
       millisecond$0,
       second$1,
       minute$0,
       hour$1,
       ns_per_day,
       microsecond$0,
       zero$4,
       create$24,
       to_parts$1,
       of_ns$0,
       of_us$0,
       of_ms$0,
       of_sec,
       of_int_sec$0,
       of_int32_seconds$0,
       of_int63_seconds$0,
       of_min$0,
       of_hr$0,
       of_day$0,
       to_ns$0,
       to_us$0,
       to_ms$0,
       to_sec,
       to_min$0,
       to_hr$0,
       to_day$0,
       to_int63_seconds_round_down_exn$0,
       to_proportional_float,
       add$14,
       diff$8,
       abs$4,
       neg$4,
       scale$2,
       symbol$204,
       symbol$107,
       next$4,
       prev$5,
       to_short_string$0,
       to_unit_of_time$0,
       of_unit_of_time$0,
       to_string_hum$10,
       randomize$1,
       of_sec_with_microsecond_precision,
       of_int_us,
       of_int_ms,
       to_int_us,
       to_int_ms,
       to_int_sec,
       min_value$2,
       max_value$2,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       scale_int,
       scale_int63,
       symbol$104,
       to_int63_ns,
       of_int63_ns,
       _aeo_,
       of_int_ns,
       now$0,
       random$0,
       to_span,
       of_span,
       to_span_float_round_nearest,
       to_span,
       of_span_float_round_nearest,
       of_span,
       Alternate_sexp,
       Private$3],
     Core_kernel_Time_ns=
      [0,
       Span$1,
       Ofday$0,
       _aeC_,
       hash$46,
       typerep_of_t$26,
       typename_of_t$25,
       bin_size_t$49,
       bin_write_t$49,
       bin_read_t$100,
       bin_read_t$101,
       bin_shape_t$103,
       bin_writer_t$91,
       bin_reader_t$91,
       bin_t$91,
       _aeX_,
       _aeY_,
       _aeZ_,
       _ae0_,
       _ae1_,
       _ae2_,
       _ae3_,
       compare$71,
       _ae4_,
       _ae5_,
       include$122,
       quickcheck_generator$8,
       quickcheck_observer$7,
       quickcheck_shrinker$7,
       _K1_,
       _K2_,
       is_earlier,
       is_later,
       of_date_ofday$0,
       of_date_ofday_precise,
       to_date_ofday$0,
       to_date_ofday_precise,
       to_date$1,
       to_ofday$0,
       reset_date_cache,
       convert,
       utc_offset$0,
       of_string$24,
       to_string$28,
       to_filename_string,
       of_filename_string,
       to_string_abs,
       to_string_abs_trimmed,
       to_string_abs_parts,
       to_string_trimmed$1,
       to_sec_string$1,
       of_localized_string,
       of_string_gen,
       to_string_iso8601_basic$0,
       occurrence,
       zero$4,
       min_value$2,
       max_value$2,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       now$0,
       add$14,
       add_saturating,
       sub_saturating,
       diff$8,
       next$4,
       prev$5,
       diff$8,
       abs_diff,
       to_span_since_epoch$0,
       of_span_since_epoch$0,
       to_int63_ns_since_epoch,
       of_int63_ns_since_epoch,
       _af5_,
       of_int_ns_since_epoch,
       next_multiple$0,
       prev_multiple$0,
       random$1,
       of_time_float_round_nearest_microsecond,
       to_time_float_round_nearest_microsecond,
       to_time_float_round_nearest,
       to_time_float_round_nearest_microsecond,
       of_time_float_round_nearest,
       of_time_float_round_nearest_microsecond,
       Utc,
       Stable$8];
    caml_register_global(4464,Core_kernel_Time_ns,"Core_kernel__Time_ns");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$374);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ns_alternate_sexp_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$375,cst$178);
    var _agH_=include$122[1],_agI_=include$122[2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$376);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Time_ns_alternate_sexp=
      [0,
       Span$1,
       Ofday$0,
       _aeC_,
       hash$46,
       typerep_of_t$26,
       typename_of_t$25,
       bin_size_t$49,
       bin_write_t$49,
       bin_read_t$100,
       bin_read_t$101,
       bin_shape_t$103,
       bin_writer_t$91,
       bin_reader_t$91,
       bin_t$91,
       _aeX_,
       _aeY_,
       _aeZ_,
       _ae0_,
       _ae1_,
       _ae2_,
       _ae3_,
       compare$71,
       _ae4_,
       _ae5_,
       include$122,
       quickcheck_generator$8,
       quickcheck_observer$7,
       quickcheck_shrinker$7,
       _K1_,
       _K2_,
       is_earlier,
       is_later,
       of_date_ofday$0,
       of_date_ofday_precise,
       to_date_ofday$0,
       to_date_ofday_precise,
       to_date$1,
       to_ofday$0,
       reset_date_cache,
       convert,
       utc_offset$0,
       of_string$24,
       to_string$28,
       to_filename_string,
       of_filename_string,
       to_string_abs,
       to_string_abs_trimmed,
       to_string_abs_parts,
       to_string_trimmed$1,
       to_sec_string$1,
       of_localized_string,
       of_string_gen,
       to_string_iso8601_basic$0,
       occurrence,
       zero$4,
       min_value$2,
       max_value$2,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       now$0,
       add$14,
       add_saturating,
       sub_saturating,
       diff$8,
       next$4,
       prev$5,
       diff$8,
       abs_diff,
       to_span_since_epoch$0,
       of_span_since_epoch$0,
       to_int63_ns_since_epoch,
       of_int63_ns_since_epoch,
       _af5_,
       of_int_ns_since_epoch,
       next_multiple$0,
       prev_multiple$0,
       random$1,
       of_time_float_round_nearest_microsecond,
       to_time_float_round_nearest_microsecond,
       to_time_float_round_nearest,
       to_time_float_round_nearest_microsecond,
       of_time_float_round_nearest,
       of_time_float_round_nearest_microsecond,
       Utc,
       Stable$8,
       _agH_,
       _agI_];
    caml_register_global
     (4465,
      Core_kernel_Time_ns_alternate_sexp,
      "Core_kernel__Time_ns_alternate_sexp");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$377);
    caml_call1(Expect_test_collector[4][1],cst_src_substring_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$378,cst$179);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$379);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Substring_intf=[0];
    caml_register_global
     (4466,Core_kernel_Substring_intf,"Core_kernel__Substring_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$380);
    caml_call1(Expect_test_collector[4][1],cst_src_make_substring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$381,cst$180);
    function string_bytes(src,src_pos,src_len,dst,opt,param)
     {if(opt)var sth=opt[1],dst_pos=sth;else var dst_pos=0;
      var
       match=caml_call4(_iK_,src_pos,src_len,0,caml_ml_string_length(src)),
       len=match[2],
       src_pos$0=match[1];
      return caml_call5(include$48[31][1],src,src_pos$0,dst,dst_pos,len)}
    var
     string_bigstring=_TY_[2],
     bytes_bigstring=_T0_[2],
     bigstring_string=_TZ_[2],
     bigstring_bytes=_TZ_[2],
     Blit=
      [0,
       string_bytes,
       bigstring_string,
       string_bytes,
       _Eg_,
       bigstring_bytes,
       string_bigstring,
       bytes_bigstring,
       _TS_];
    function F(Base)
     {function base(t){return t[1]}
      function pos(t){return t[2]}
      function length(t){return t[3]}
      function is_empty(t){return caml_call2(equal$19,t[3],0)}
      function create(pos,len,base)
       {var
         match=caml_call4(_iK_,pos,len,0,caml_call1(Base[2],base)),
         len$0=match[2],
         pos$0=match[1];
        return [0,base,pos$0,len$0]}
      function get(t,i)
       {if(caml_call2(_Np_,i,0))
         if(caml_call2(_Nt_,i,t[3]))
          return caml_call2(Base[9],t[1],t[2] + i | 0);
        throw [0,Stdlib[6],cst_index_out_of_bounds]}
      function sub(pos,len,t)
       {var
         match=caml_call4(_iK_,pos,len,0,t[3]),
         len$0=match[2],
         pos$0=match[1];
        return [0,t[1],t[2] + pos$0 | 0,len$0]}
      function fold(t,acc,f)
       {var acc$0=acc,i=0;
        for(;;)
         {if(caml_call2(_Np_,i,t[3]))return acc$0;
          var
           i$0=i + 1 | 0,
           acc$1=caml_call2(f,acc$0,get(t,i)),
           acc$0=acc$1,
           i=i$0;
          continue}}
      var
       iter=
        [0,
         -198771759,
         function(t,f)
          {var _aW$_=t[3] - 1 | 0,_aW__=0;
           if(! (_aW$_ < 0))
            {var i=_aW__;
             for(;;)
              {caml_call1(f,get(t,i));
               var _aXa_=i + 1 | 0;
               if(_aW$_ !== i){var i=_aXa_;continue}
               break}}
           return 0}],
       length$0=[0,-198771759,length],
       C=caml_call1(include$7[17],[0,[0,_FS_],fold,iter,length$0]),
       _aWr_=C[5],
       _aWs_=C[4],
       _aWt_=C[6],
       _aWu_=C[7];
      function to_list(t)
       {function _aW8_(_aW9_){return get(t,_aW9_)}
        return caml_call2(_qY_,t[3],_aW8_)}
      var
       _aWv_=C[15],
       _aWw_=C[13],
       _aWx_=C[12],
       _aWy_=C[8],
       _aWz_=C[9],
       _aWA_=C[1],
       _aWB_=C[10],
       _aWC_=C[11],
       _aWD_=C[16],
       _aWE_=C[17];
      function drop_prefix(t,n)
       {return caml_call2(_Ns_,n,t[3])
                ?caml_call1(_Gg_,cst_Substring_drop_prefix)
                :[0,t[1],t[2] + n | 0,t[3] - n | 0]}
      function drop_suffix(t,n)
       {return caml_call2(_Ns_,n,t[3])
                ?caml_call1(_Gg_,cst_Substring_drop_suffix)
                :[0,t[1],t[2],t[3] - n | 0]}
      function prefix(t,n)
       {return caml_call2(_Ns_,n,t[3])
                ?caml_call1(_Gg_,cst_Substring_prefix)
                :[0,t[1],t[2],n]}
      function suffix(t,n)
       {return caml_call2(_Ns_,n,t[3])
                ?caml_call1(_Gg_,cst_Substring_suffix)
                :[0,t[1],(t[2] + t[3] | 0) - n | 0,n]}
      function blit_to(blit,t,dst,dst_pos)
       {return caml_call6(blit,t[1],[0,t[2]],[0,t[3]],dst,[0,dst_pos],0)}
      var _aWF_=Base[4];
      function blit_to_string(_aW5_,_aW6_,_aW7_)
       {return blit_to(_aWF_,_aW5_,_aW6_,_aW7_)}
      var _aWG_=Base[4];
      function blit_to_bytes(_aW2_,_aW3_,_aW4_)
       {return blit_to(_aWG_,_aW2_,_aW3_,_aW4_)}
      var _aWH_=Base[5];
      function blit_to_bigstring(_aWZ_,_aW0_,_aW1_)
       {return blit_to(_aWH_,_aWZ_,_aW0_,_aW1_)}
      var _aWI_=Base[3];
      function blit_base(_aWW_,_aWX_,_aWY_)
       {return blit_to(_aWI_,_aWW_,_aWX_,_aWY_)}
      function blit_from(name,blit,t,src,src_pos,len)
       {if(caml_call2(_Ns_,len,t[3]))caml_call5(_Pg_,_agJ_,name,len,t[3],0);
        return caml_call6(blit,src,[0,src_pos],[0,len],t[1],[0,t[2]],0)}
      var _aWJ_=Base[6];
      function blit_from_string(_aWS_,_aWT_,_aWU_,_aWV_)
       {return blit_from(cst_string$1,_aWJ_,_aWS_,_aWT_,_aWU_,_aWV_)}
      var _aWK_=Base[7];
      function blit_from_bigstring(_aWO_,_aWP_,_aWQ_,_aWR_)
       {return blit_from(cst_bigstring,_aWK_,_aWO_,_aWP_,_aWQ_,_aWR_)}
      function of_base(base){return [0,base,0,caml_call1(Base[2],base)]}
      function of_string(x)
       {var len=caml_ml_string_length(x),buf=caml_call1(Base[1],len);
        caml_call6(Base[6],x,0,0,buf,0,0);
        return of_base(buf)}
      function of_bigstring(x)
       {var len=caml_call1(_TQ_,x),buf=caml_call1(Base[1],len);
        caml_call6(Base[7],x,0,0,buf,0,0);
        return of_base(buf)}
      function make(create,blit,t)
       {var dst=caml_call1(create,t[3]);
        caml_call6(blit,t[1],[0,t[2]],[0,t[3]],dst,_agK_,0);
        return dst}
      function to_string(x){return caml_call1(_EZ_,make(_EG_,Base[4],x))}
      var _aWL_=Base[5];
      function _aWM_(eta){return arg(0,eta)}
      function to_bigstring(_aWN_){return make(_aWM_,_aWL_,_aWN_)}
      function concat_gen(create_dst,blit_dst,ts)
       {var
         len=caml_call3(_pi_,ts,0,function(len,t){return len + t[3] | 0}),
         dst=caml_call1(create_dst,len);
        caml_call3
         (_pi_,
          ts,
          0,
          function(dst_pos,t)
           {caml_call3(blit_dst,t,dst,dst_pos);return dst_pos + t[3] | 0});
        return dst}
      function concat(ts){return of_base(concat_gen(Base[1],blit_base,ts))}
      function concat_string(ts)
       {return caml_call1(_EZ_,concat_gen(_EG_,blit_to_string,ts))}
      function concat_bigstring(ts)
       {return concat_gen
                (function(eta){return arg(0,eta)},blit_to_bigstring,ts)}
      return [0,
              _aWA_,
              length,
              is_empty,
              _aWs_,
              _aWr_,
              _aWt_,
              _aWu_,
              _aWy_,
              _aWz_,
              _aWB_,
              _aWC_,
              _aWx_,
              _aWw_,
              to_list,
              _aWv_,
              _aWD_,
              _aWE_,
              base,
              pos,
              get,
              create,
              sub,
              blit_to_string,
              blit_to_bytes,
              blit_to_bigstring,
              blit_from_string,
              blit_from_bigstring,
              concat,
              concat_string,
              concat_bigstring,
              to_string,
              to_bigstring,
              of_string,
              of_bigstring,
              drop_prefix,
              drop_suffix,
              prefix,
              suffix]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$382);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Make_substring=[0,Blit,F];
    caml_register_global
     (4467,Core_kernel_Make_substring,"Core_kernel__Make_substring");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$383);
    caml_call1(Expect_test_collector[4][1],cst_src_substring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$384,cst$181);
    var
     blit$3=Blit[4],
     blit_to_string=Blit[4],
     blit_to_bytes=Blit[4],
     blit_to_bigstring=Blit[7],
     blit_from_string=Blit[3],
     blit_from_bigstring=Blit[5],
     include$123=
      F
       ([0,
         _EG_,
         _EN_,
         blit$3,
         blit_to_bytes,
         blit_to_bigstring,
         blit_from_string,
         blit_from_bigstring,
         blit_to_string,
         _EO_]),
     _agL_=include$123[1],
     _agM_=include$123[2],
     _agN_=include$123[3],
     _agO_=include$123[4],
     _agP_=include$123[5],
     _agQ_=include$123[6],
     _agR_=include$123[7],
     _agS_=include$123[8],
     _agT_=include$123[9],
     _agU_=include$123[10],
     _agV_=include$123[11],
     _agW_=include$123[12],
     _agX_=include$123[13],
     _agY_=include$123[14],
     _agZ_=include$123[15],
     _ag0_=include$123[16],
     _ag1_=include$123[17],
     _ag2_=include$123[18],
     _ag3_=include$123[19],
     _ag4_=include$123[20],
     _ag5_=include$123[21],
     _ag6_=include$123[22],
     _ag7_=include$123[23],
     _ag8_=include$123[24],
     _ag9_=include$123[25],
     _ag__=include$123[26],
     _ag$_=include$123[27],
     _aha_=include$123[28],
     _ahb_=include$123[29],
     _ahc_=include$123[30],
     _ahd_=include$123[31],
     _ahe_=include$123[32],
     _ahf_=include$123[33],
     _ahg_=include$123[34],
     _ahh_=include$123[35],
     _ahi_=include$123[36],
     _ahj_=include$123[37],
     _ahk_=include$123[38];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$385);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Substring=
      [0,
       _agL_,
       _agM_,
       _agN_,
       _agO_,
       _agP_,
       _agQ_,
       _agR_,
       _agS_,
       _agT_,
       _agU_,
       _agV_,
       _agW_,
       _agX_,
       _agY_,
       _agZ_,
       _ag0_,
       _ag1_,
       _ag2_,
       _ag3_,
       _ag4_,
       _ag5_,
       _ag6_,
       _ag7_,
       _ag8_,
       _ag9_,
       _ag__,
       _ag$_,
       _aha_,
       _ahb_,
       _ahc_,
       _ahd_,
       _ahe_,
       _ahf_,
       _ahg_,
       _ahh_,
       _ahi_,
       _ahj_,
       _ahk_];
    caml_register_global(4468,Core_kernel_Substring,"Core_kernel__Substring");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$386);
    caml_call1(Expect_test_collector[4][1],cst_src_string_id_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$387,cst$182);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$388);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_String_id_intf=[0];
    caml_register_global
     (4469,Core_kernel_String_id_intf,"Core_kernel__String_id_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$389);
    caml_call1(Expect_test_collector[4][1],cst_src_string_id_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$390,cst$183);
    function Make_with_validate_without_pretty_printer(M,symbol)
     {function hash(x){return hash_string(x)}
      function invalid(s,reason)
       {return [1,caml_call4(_fE_,_ahl_,s,M[1],reason)]}
      function check_for_whitespace(s)
       {var len=caml_ml_string_length(s);
        if(caml_call2(symbol$50,len,0))return invalid(s,cst_it_is_empty);
        if(! caml_call1(_Fr_,caml_string_get(s,0)))
         if(! caml_call1(_Fr_,caml_string_get(s,len - 1 | 0)))return _ahm_;
        return invalid(s,cst_it_has_whitespace_on_the_edge)}
      function validate(s){return caml_call2(_ie_,caml_call1(M[2],s),_n8_)}
      function check(s)
       {var match=check_for_whitespace(s);
        if(0 === match[0])return validate(s);
        var error=match[1];
        return [1,error]}
      function to_string(_aWq_){return _aWq_}
      function of_string(s)
       {var match=check(s);
        if(0 === match[0])return s;
        var err=match[1];
        return caml_call1(_Gf_,err)}
      function t_of_sexp(sexp)
       {var s=caml_call1(_Ec_[1][13],sexp),match=check(s);
        if(0 === match[0])return s;
        var err=match[1];
        return caml_call2(_Of_,err,sexp)}
      function to_binable(_aWp_){return _aWp_}
      var
       include=
        caml_call1
         (caml_call1
           (_V__,
            [0,
             bin_shape_t$46,
             bin_size_t$42,
             bin_write_t$42,
             bin_read_t$86,
             bin_read_t$87]),
          [0,to_binable,of_string]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8],
       T=
        [0,
         sexp_of_t$40,
         compare$28,
         equal$17,
         hash_fold_t$13,
         hash,
         check_for_whitespace,
         validate,
         check,
         to_string,
         pp$0,
         of_string,
         t_of_sexp,
         bin_size_t,
         bin_write_t,
         bin_read_t,
         bin_read_t$0,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t],
       sexp_of_t=T[1],
       compare=T[2],
       equal=T[3],
       hash_fold_t=T[4],
       hash$0=T[5],
       check_for_whitespace$0=T[6],
       validate$0=T[7],
       check$0=T[8],
       to_string$0=T[9],
       pp=T[10],
       of_string$0=T[11],
       t_of_sexp$0=T[12],
       bin_size_t$0=T[13],
       bin_write_t$0=T[14],
       bin_read_t$1=T[15],
       bin_read_t$2=T[16],
       bin_shape_t$0=T[17],
       bin_writer_t$0=T[18],
       bin_reader_t$0=T[19],
       bin_t$0=T[20],
       include$0=caml_call1(_hu_[1][2],[0,T[2],T[1]]),
       comparator=include$0[1],
       T_with_comparator=
        [0,
         sexp_of_t,
         compare,
         equal,
         hash_fold_t,
         hash$0,
         check_for_whitespace$0,
         validate$0,
         check$0,
         to_string$0,
         pp,
         of_string$0,
         t_of_sexp$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$1,
         bin_read_t$2,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         comparator],
       sexp_of_t$0=T_with_comparator[1],
       compare$0=T_with_comparator[2],
       equal$0=T_with_comparator[3],
       hash_fold_t$0=T_with_comparator[4],
       hash$1=T_with_comparator[5],
       check_for_whitespace$1=T_with_comparator[6],
       validate$1=T_with_comparator[7],
       check$1=T_with_comparator[8],
       to_string$1=T_with_comparator[9],
       pp$1=T_with_comparator[10],
       of_string$1=T_with_comparator[11],
       t_of_sexp$1=T_with_comparator[12],
       bin_size_t$1=T_with_comparator[13],
       bin_write_t$1=T_with_comparator[14],
       bin_read_t$3=T_with_comparator[15],
       bin_read_t$4=T_with_comparator[16],
       bin_shape_t$1=T_with_comparator[17],
       bin_writer_t$1=T_with_comparator[18],
       bin_reader_t$1=T_with_comparator[19],
       bin_t$1=T_with_comparator[20],
       comparator$0=T_with_comparator[21],
       _aVC_=
        caml_call1
         (Stable$2[1][1],
          [0,
           T_with_comparator[13],
           T_with_comparator[14],
           T_with_comparator[15],
           T_with_comparator[16],
           T_with_comparator[17],
           T_with_comparator[18],
           T_with_comparator[19],
           T_with_comparator[20],
           T_with_comparator[2],
           T_with_comparator[12],
           T_with_comparator[1],
           T_with_comparator[21]]),
       Map=_aVC_[1],
       Set=_aVC_[2],
       include$1=
        caml_call1
         (Stable$3[1][1],
          [0,
           T_with_comparator[13],
           T_with_comparator[14],
           T_with_comparator[15],
           T_with_comparator[16],
           T_with_comparator[17],
           T_with_comparator[18],
           T_with_comparator[19],
           T_with_comparator[20],
           T_with_comparator[12],
           T_with_comparator[2],
           T_with_comparator[1],
           T_with_comparator[5]]),
       Table=include$1[1],
       Hash_set=include$1[2],
       V1=
        [0,
         T,
         T_with_comparator,
         sexp_of_t$0,
         compare$0,
         equal$0,
         hash_fold_t$0,
         hash$1,
         check_for_whitespace$1,
         validate$1,
         check$1,
         to_string$1,
         pp$1,
         of_string$1,
         t_of_sexp$1,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$3,
         bin_read_t$4,
         bin_shape_t$1,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         comparator$0,
         Map,
         Set,
         Table,
         Hash_set],
       Stable=[0,V1],
       _aVD_=Stable[1][2],
       _aVH_=_aVD_[8],
       _aVU_=Stable[1][2],
       _aVE_=_aVD_[1],
       _aVF_=_aVD_[6],
       _aVG_=_aVD_[7],
       _aVI_=_aVD_[9],
       _aVJ_=_aVD_[10],
       _aVK_=_aVD_[11],
       _aVL_=_aVD_[12],
       _aVM_=_aVD_[13],
       _aVN_=_aVD_[14],
       _aVO_=_aVD_[15],
       _aVP_=_aVD_[16],
       _aVQ_=_aVD_[17],
       _aVR_=_aVD_[18],
       _aVS_=_aVD_[19],
       _aVT_=_aVD_[20],
       _aVV_=
        _xA_
         ([0,
           _aVU_[13],
           _aVU_[14],
           _aVU_[15],
           _aVU_[16],
           _aVU_[17],
           _aVU_[18],
           _aVU_[19],
           _aVU_[20],
           _aVU_[12],
           _aVU_[1],
           _aVU_[21]]),
       _aWg_=Stable[1][2],
       _aVW_=_aVV_[1],
       _aVX_=_aVV_[2],
       _aVY_=_aVV_[3],
       _aVZ_=_aVV_[4],
       _aV0_=_aVV_[5],
       _aV1_=_aVV_[6],
       _aV2_=_aVV_[7],
       _aV3_=_aVV_[8],
       _aV4_=_aVV_[9],
       _aV5_=_aVV_[10],
       _aV6_=_aVV_[11],
       _aV7_=_aVV_[12],
       _aV8_=_aVV_[13],
       _aV9_=_aVV_[14],
       _aV__=_aVV_[15],
       _aV$_=_aVV_[16],
       _aWa_=_aVV_[17],
       _aWb_=_aVV_[18],
       _aWc_=_aVV_[19],
       _aWd_=_aVV_[20],
       _aWe_=_aVV_[21],
       _aWf_=_aVV_[22],
       include$2=
        Make_binable
         ([0,
           _aWg_[4],
           _aWg_[13],
           _aWg_[14],
           _aWg_[15],
           _aWg_[16],
           _aWg_[17],
           _aWg_[18],
           _aWg_[19],
           _aWg_[20],
           _aWg_[12],
           _aWg_[2],
           _aWg_[1],
           _aWg_[5]]),
       _aWh_=include$2[1],
       _aWi_=include$2[2],
       _aWj_=include$2[3],
       _aWk_=include$2[4],
       _aWl_=include$2[5],
       _aWm_=include$2[6],
       quickcheck_shrinker=caml_call1(_u$_[3],0);
      function _aWn_(string){return caml_call1(_h6_,caml_call1(_aVH_,string))}
      var
       _aWo_=caml_call1(_Eb_,_Gc_),
       quickcheck_generator=caml_call2(_vb_[60],_aWo_,_aWn_);
      return [0,
              Stable,
              _aVE_,
              _aVF_,
              _aVG_,
              _aVH_,
              _aVI_,
              _aVJ_,
              _aVK_,
              _aVL_,
              _aVM_,
              _aVN_,
              _aVO_,
              _aVP_,
              _aVQ_,
              _aVR_,
              _aVS_,
              _aVT_,
              _aVW_,
              _aVX_,
              _aVY_,
              _aVZ_,
              _aV0_,
              _aV1_,
              _aV2_,
              _aV3_,
              _aV4_,
              _aV5_,
              _aV6_,
              _aV7_,
              _aV8_,
              _aV9_,
              _aV__,
              _aV$_,
              _aWa_,
              _aWb_,
              _aWc_,
              _aWd_,
              _aWe_,
              _aWf_,
              _aWh_,
              _aWi_,
              _aWj_,
              _aWk_,
              _aWl_,
              _aWm_,
              quickcheck_shrinker,
              _D9_,
              quickcheck_generator]}
    function Make_without_pretty_printer(M,symbol)
     {var
       _aVB_=M[1],
       validate=caml_call1(_iD_,_ahn_),
       include=
        Make_with_validate_without_pretty_printer([0,_aVB_,validate],[0]),
       Stable=include[1],
       sexp_of_t=include[2],
       check_for_whitespace=include[3],
       validate$0=include[4],
       check=include[5],
       to_string=include[6],
       pp=include[7],
       of_string=include[8],
       t_of_sexp=include[9],
       bin_size_t=include[10],
       bin_write_t=include[11],
       bin_read_t=include[12],
       bin_read_t$0=include[13],
       bin_shape_t=include[14],
       bin_writer_t=include[15],
       bin_reader_t=include[16],
       bin_t=include[17],
       symbol$0=include[18],
       symbol$1=include[19],
       symbol$2=include[20],
       symbol$3=include[21],
       symbol$4=include[22],
       symbol$5=include[23],
       equal=include[24],
       compare=include[25],
       min=include[26],
       max=include[27],
       ascending=include[28],
       descending=include[29],
       between=include[30],
       clamp_exn=include[31],
       clamp=include[32],
       validate_lbound=include[33],
       validate_ubound=include[34],
       validate_bound=include[35],
       Replace_polymorphic_compare=include[36],
       comparator=include[37],
       Map=include[38],
       Set=include[39],
       hash_fold_t=include[40],
       hash=include[41],
       hashable=include[42],
       Table=include[43],
       Hash_set=include[44],
       Hash_queue=include[45],
       quickcheck_shrinker=include[46],
       quickcheck_observer=include[47],
       quickcheck_generator=include[48];
      return [0,
              Stable,
              sexp_of_t,
              check_for_whitespace,
              validate$0,
              check,
              to_string,
              pp,
              of_string,
              t_of_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              symbol$5,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              quickcheck_shrinker,
              quickcheck_observer,
              quickcheck_generator]}
    function Make$12(M,symbol)
     {var
       include$0=Make_without_pretty_printer(M,[0]),
       Stable=include$0[1],
       sexp_of_t=include$0[2],
       check_for_whitespace=include$0[3],
       validate=include$0[4],
       check=include$0[5],
       to_string=include$0[6],
       of_string=include$0[8],
       t_of_sexp=include$0[9],
       bin_size_t=include$0[10],
       bin_write_t=include$0[11],
       bin_read_t=include$0[12],
       bin_read_t$0=include$0[13],
       bin_shape_t=include$0[14],
       bin_writer_t=include$0[15],
       bin_reader_t=include$0[16],
       bin_t=include$0[17],
       symbol$0=include$0[18],
       symbol$1=include$0[19],
       symbol$2=include$0[20],
       symbol$3=include$0[21],
       symbol$4=include$0[22],
       symbol$5=include$0[23],
       equal=include$0[24],
       compare=include$0[25],
       min=include$0[26],
       max=include$0[27],
       ascending=include$0[28],
       descending=include$0[29],
       between=include$0[30],
       clamp_exn=include$0[31],
       clamp=include$0[32],
       validate_lbound=include$0[33],
       validate_ubound=include$0[34],
       validate_bound=include$0[35],
       Replace_polymorphic_compare=include$0[36],
       comparator=include$0[37],
       Map=include$0[38],
       Set=include$0[39],
       hash_fold_t=include$0[40],
       hash=include$0[41],
       hashable=include$0[42],
       Table=include$0[43],
       Hash_set=include$0[44],
       Hash_queue=include$0[45],
       quickcheck_shrinker=include$0[46],
       quickcheck_observer=include$0[47],
       quickcheck_generator=include$0[48],
       module_name=M[1],
       include=caml_call1(Base_Pretty_printer[2],[0,module_name,to_string]),
       pp=include[1];
      return [0,
              Stable,
              sexp_of_t,
              check_for_whitespace,
              validate,
              check,
              to_string,
              of_string,
              t_of_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              symbol$5,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              quickcheck_shrinker,
              quickcheck_observer,
              quickcheck_generator,
              pp]}
    var
     _aho_=[0],
     _ahp_=[0,module_name$13],
     include$124=function(_aVA_){return Make$12(_ahp_,_aVA_)}(_aho_),
     _ahq_=include$124[1],
     _ahr_=include$124[2],
     _ahs_=include$124[6],
     _aht_=include$124[7],
     _ahu_=include$124[8],
     _ahv_=include$124[9],
     _ahw_=include$124[10],
     _ahx_=include$124[11],
     _ahy_=include$124[12],
     _ahz_=include$124[13],
     _ahA_=include$124[14],
     _ahB_=include$124[15],
     _ahC_=include$124[16],
     _ahD_=include$124[17],
     _ahE_=include$124[18],
     _ahF_=include$124[19],
     _ahG_=include$124[20],
     _ahH_=include$124[21],
     _ahI_=include$124[22],
     _ahJ_=include$124[23],
     _ahK_=include$124[24],
     _ahL_=include$124[25],
     _ahM_=include$124[26],
     _ahN_=include$124[27],
     _ahO_=include$124[28],
     _ahP_=include$124[29],
     _ahQ_=include$124[30],
     _ahR_=include$124[31],
     _ahS_=include$124[32],
     _ahT_=include$124[33],
     _ahU_=include$124[34],
     _ahV_=include$124[35],
     _ahW_=include$124[36],
     _ahX_=include$124[37],
     _ahY_=include$124[38],
     _ahZ_=include$124[39],
     _ah0_=include$124[40],
     _ah1_=include$124[41],
     _ah2_=include$124[42],
     _ah3_=include$124[43],
     _ah4_=include$124[44],
     _ah5_=include$124[45],
     _ah6_=include$124[46],
     _ah7_=include$124[47],
     _ah8_=include$124[48];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$391);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _ah9_(_aVx_,_aVw_)
     {var
       _aVy_=Make_with_validate_without_pretty_printer(_aVx_,_aVw_),
       _aVz_=_aVy_[1][1];
      return [0,
              _aVy_[10],
              _aVy_[11],
              _aVy_[12],
              _aVy_[13],
              _aVy_[14],
              _aVy_[15],
              _aVy_[16],
              _aVy_[17],
              _aVy_[9],
              _aVy_[2],
              _aVy_[8],
              _aVy_[6],
              _aVy_[7],
              _aVy_[18],
              _aVy_[19],
              _aVy_[20],
              _aVy_[21],
              _aVy_[22],
              _aVy_[23],
              _aVy_[24],
              _aVy_[25],
              _aVy_[26],
              _aVy_[27],
              _aVy_[28],
              _aVy_[29],
              _aVy_[30],
              _aVy_[31],
              _aVy_[32],
              _aVy_[33],
              _aVy_[34],
              _aVy_[35],
              _aVy_[36],
              _aVy_[37],
              _aVy_[38],
              _aVy_[39],
              _aVy_[40],
              _aVy_[41],
              _aVy_[42],
              _aVy_[43],
              _aVy_[44],
              _aVy_[45],
              _aVy_[48],
              _aVy_[47],
              _aVy_[46],
              [0,
               [0,
                _aVz_[5],
                _aVz_[6],
                _aVz_[7],
                _aVz_[15],
                _aVz_[16],
                _aVz_[17],
                _aVz_[18],
                _aVz_[19],
                _aVz_[20],
                _aVz_[21],
                _aVz_[22],
                _aVz_[4],
                _aVz_[14],
                _aVz_[3],
                _aVz_[23],
                _aVz_[24],
                _aVz_[25],
                _aVz_[26],
                _aVz_[27]]]]}
    function _ah__(_aVt_,_aVs_)
     {var _aVu_=Make_without_pretty_printer(_aVt_,_aVs_),_aVv_=_aVu_[1][1];
      return [0,
              _aVu_[10],
              _aVu_[11],
              _aVu_[12],
              _aVu_[13],
              _aVu_[14],
              _aVu_[15],
              _aVu_[16],
              _aVu_[17],
              _aVu_[9],
              _aVu_[2],
              _aVu_[8],
              _aVu_[6],
              _aVu_[7],
              _aVu_[18],
              _aVu_[19],
              _aVu_[20],
              _aVu_[21],
              _aVu_[22],
              _aVu_[23],
              _aVu_[24],
              _aVu_[25],
              _aVu_[26],
              _aVu_[27],
              _aVu_[28],
              _aVu_[29],
              _aVu_[30],
              _aVu_[31],
              _aVu_[32],
              _aVu_[33],
              _aVu_[34],
              _aVu_[35],
              _aVu_[36],
              _aVu_[37],
              _aVu_[38],
              _aVu_[39],
              _aVu_[40],
              _aVu_[41],
              _aVu_[42],
              _aVu_[43],
              _aVu_[44],
              _aVu_[45],
              _aVu_[48],
              _aVu_[47],
              _aVu_[46],
              [0,
               [0,
                _aVv_[5],
                _aVv_[6],
                _aVv_[7],
                _aVv_[15],
                _aVv_[16],
                _aVv_[17],
                _aVv_[18],
                _aVv_[19],
                _aVv_[20],
                _aVv_[21],
                _aVv_[22],
                _aVv_[4],
                _aVv_[14],
                _aVv_[3],
                _aVv_[23],
                _aVv_[24],
                _aVv_[25],
                _aVv_[26],
                _aVv_[27]]]]}
    function _ah$_(M,_aVq_)
     {var
       include$0=Make_with_validate_without_pretty_printer(M,[0]),
       Stable=include$0[1],
       sexp_of_t=include$0[2],
       to_string=include$0[6],
       of_string=include$0[8],
       t_of_sexp=include$0[9],
       bin_size_t=include$0[10],
       bin_write_t=include$0[11],
       bin_read_t=include$0[12],
       bin_read_t$0=include$0[13],
       bin_shape_t=include$0[14],
       bin_writer_t=include$0[15],
       bin_reader_t=include$0[16],
       bin_t=include$0[17],
       symbol=include$0[18],
       symbol$0=include$0[19],
       symbol$1=include$0[20],
       symbol$2=include$0[21],
       symbol$3=include$0[22],
       symbol$4=include$0[23],
       equal=include$0[24],
       compare=include$0[25],
       min=include$0[26],
       max=include$0[27],
       ascending=include$0[28],
       descending=include$0[29],
       between=include$0[30],
       clamp_exn=include$0[31],
       clamp=include$0[32],
       validate_lbound=include$0[33],
       validate_ubound=include$0[34],
       validate_bound=include$0[35],
       Replace_polymorphic_compare=include$0[36],
       comparator=include$0[37],
       Map=include$0[38],
       Set=include$0[39],
       hash_fold_t=include$0[40],
       hash=include$0[41],
       hashable=include$0[42],
       Table=include$0[43],
       Hash_set=include$0[44],
       Hash_queue=include$0[45],
       quickcheck_shrinker=include$0[46],
       quickcheck_observer=include$0[47],
       quickcheck_generator=include$0[48],
       module_name=M[1],
       include=caml_call1(Base_Pretty_printer[2],[0,module_name,to_string]),
       pp=include[1],
       _aVr_=Stable[1];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              pp,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker,
              [0,
               [0,
                _aVr_[5],
                _aVr_[6],
                _aVr_[7],
                _aVr_[15],
                _aVr_[16],
                _aVr_[17],
                _aVr_[18],
                _aVr_[19],
                _aVr_[20],
                _aVr_[21],
                _aVr_[22],
                _aVr_[4],
                _aVr_[14],
                _aVr_[3],
                _aVr_[23],
                _aVr_[24],
                _aVr_[25],
                _aVr_[26],
                _aVr_[27]]]]}
    function _aia_(_aVn_,_aVm_)
     {var _aVo_=Make$12(_aVn_,_aVm_),_aVp_=_aVo_[1][1];
      return [0,
              _aVo_[9],
              _aVo_[10],
              _aVo_[11],
              _aVo_[12],
              _aVo_[13],
              _aVo_[14],
              _aVo_[15],
              _aVo_[16],
              _aVo_[8],
              _aVo_[2],
              _aVo_[7],
              _aVo_[6],
              _aVo_[48],
              _aVo_[17],
              _aVo_[18],
              _aVo_[19],
              _aVo_[20],
              _aVo_[21],
              _aVo_[22],
              _aVo_[23],
              _aVo_[24],
              _aVo_[25],
              _aVo_[26],
              _aVo_[27],
              _aVo_[28],
              _aVo_[29],
              _aVo_[30],
              _aVo_[31],
              _aVo_[32],
              _aVo_[33],
              _aVo_[34],
              _aVo_[35],
              _aVo_[36],
              _aVo_[37],
              _aVo_[38],
              _aVo_[39],
              _aVo_[40],
              _aVo_[41],
              _aVo_[42],
              _aVo_[43],
              _aVo_[44],
              _aVo_[47],
              _aVo_[46],
              _aVo_[45],
              [0,
               [0,
                _aVp_[5],
                _aVp_[6],
                _aVp_[7],
                _aVp_[15],
                _aVp_[16],
                _aVp_[17],
                _aVp_[18],
                _aVp_[19],
                _aVp_[20],
                _aVp_[21],
                _aVp_[22],
                _aVp_[4],
                _aVp_[14],
                _aVp_[3],
                _aVp_[23],
                _aVp_[24],
                _aVp_[25],
                _aVp_[26],
                _aVp_[27]]]]}
    var
     _aib_=_ahq_[1],
     Core_kernel_String_id=
      [0,
       _ahv_,
       _ahw_,
       _ahx_,
       _ahy_,
       _ahz_,
       _ahA_,
       _ahB_,
       _ahC_,
       _ahu_,
       _ahr_,
       _aht_,
       _ahs_,
       _ah8_,
       _ahD_,
       _ahE_,
       _ahF_,
       _ahG_,
       _ahH_,
       _ahI_,
       _ahJ_,
       _ahK_,
       _ahL_,
       _ahM_,
       _ahN_,
       _ahO_,
       _ahP_,
       _ahQ_,
       _ahR_,
       _ahS_,
       _ahT_,
       _ahU_,
       _ahV_,
       _ahW_,
       _ahX_,
       _ahY_,
       _ahZ_,
       _ah0_,
       _ah1_,
       _ah2_,
       _ah3_,
       _ah4_,
       _ah7_,
       _ah6_,
       _ah5_,
       [0,
        [0,
         _aib_[5],
         _aib_[6],
         _aib_[7],
         _aib_[15],
         _aib_[16],
         _aib_[17],
         _aib_[18],
         _aib_[19],
         _aib_[20],
         _aib_[21],
         _aib_[22],
         _aib_[4],
         _aib_[14],
         _aib_[3],
         _aib_[23],
         _aib_[24],
         _aib_[25],
         _aib_[26],
         _aib_[27]]],
       _aia_,
       _ah$_,
       _ah__,
       _ah9_];
    caml_register_global(4470,Core_kernel_String_id,"Core_kernel__String_id");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$392);
    caml_call1(Expect_test_collector[4][1],cst_src_arg_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$393,cst$184);
    var
     _aim_=include$125[11],
     _aic_=include$125[1],
     _aid_=include$125[2],
     _aie_=include$125[3],
     _aif_=include$125[4],
     _aig_=include$125[5],
     _aih_=include$125[6],
     _aii_=include$125[7],
     _aij_=include$125[8],
     _aik_=include$125[9],
     _ail_=include$125[10],
     _ain_=include$125[12],
     _aio_=include$125[13],
     _aip_=include$125[14],
     _aiq_=include$125[15],
     _air_=include$125[16];
    function sort_and_align(lst)
     {function _aVk_(param,_aVl_)
       {var b=_aVl_[1],a=param[1];return caml_call2(compare$28,a,b)}
      return caml_call2(_aim_,0,caml_call2(include$23[59],lst,_aVk_))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$394);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Arg=
      [0,
       _aic_,
       _aid_,
       _aie_,
       _aif_,
       _aig_,
       _aih_,
       _aii_,
       _aij_,
       _aik_,
       _ail_,
       _aim_,
       _ain_,
       _aio_,
       _aip_,
       _aiq_,
       _air_,
       sort_and_align];
    caml_register_global(4472,Core_kernel_Arg,"Core_kernel__Arg");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$395);
    caml_call1(Expect_test_collector[4][1],cst_src_bag_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$396,cst$185);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$397);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Bag_intf=[0];
    caml_register_global(4473,Core_kernel_Bag_intf,"Core_kernel__Bag_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$398);
    caml_call1(Expect_test_collector[4][1],cst_src_bag_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$399,cst$186);
    function add_unit(t,v){add$9(t,v);return 0}
    function elts(t)
     {return fold_elt(t,0,function(acc,elt){return [0,elt,acc]})}
    function until_empty(t,f)
     {function loop(param)
       {function _aVj_(v){caml_call1(f,v);return loop(0)}
        return caml_call2(_xV_,remove_one(t),_aVj_)}
      return loop(0)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$400);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bag=
      [0,
       [0,Elt[2],Elt[4],Elt[1]],
       t_of_sexp$25,
       sexp_of_t$33,
       _yZ_,
       length$13,
       is_empty$11,
       iter$14,
       _yX_,
       _y3_,
       _y4_,
       _yU_,
       _yY_,
       _yS_,
       _yT_,
       _yV_,
       _yW_,
       to_list$5,
       _y0_,
       _y1_,
       _y2_,
       invariant$3,
       create$11,
       add$9,
       add_unit,
       mem_elt,
       remove$9,
       choose$4,
       remove_one,
       clear$1,
       filter_inplace$1,
       iter_elt,
       find_elt,
       until_empty,
       transfer,
       of_list$7,
       elts,
       unchecked_iter];
    caml_register_global(4474,Core_kernel_Bag,"Core_kernel__Bag");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$401);
    caml_call1(Expect_test_collector[4][1],cst_src_bigbuffer_internal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$402,cst$187);
    function sexp_of_t$92(param)
     {var
       v_bstr=param[1],
       v_pos=param[2],
       v_len=param[3],
       v_init=param[4],
       arg=caml_call1(_TA_,v_init),
       bnds=[0,[1,[0,_ais_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$0,v_len),
       bnds$0=[0,[1,[0,_ait_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$0,v_pos),
       bnds$1=[0,[1,[0,_aiu_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_TA_,v_bstr),
       bnds$2=[0,[1,[0,_aiv_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    function resize(buf,more)
     {var
       min_len=caml_call2(_aw_,buf[3],more),
       new_len=caml_call2(_aw_,min_len,min_len),
       new_buf=arg(0,new_len);
      caml_call6(_TS_,buf[1],0,[0,buf[2]],new_buf,0,0);
      buf[1] = new_buf;
      buf[3] = new_len;
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$403);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var include$126=[0,sexp_of_t$92,resize];
    caml_register_global(4475,include$126,"Core_kernel__Bigbuffer_internal");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$404);
    caml_call1(Expect_test_collector[4][1],cst_src_bigbuffer_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$405,cst$188);
    function internal(t){return t}
    function length$17(t){return t[2]}
    function create$26(n)
     {var n$0=caml_call2(_aZ_,1,n),bstr=arg(0,n$0);return [0,bstr,0,n$0,bstr]}
    function contents(buf){return caml_call3(_TL_,0,[0,buf[2]],buf[1])}
    function contents_bytes(buf){return caml_call3(_TM_,0,[0,buf[2]],buf[1])}
    function big_contents(buf){return caml_call3(_TV_,0,[0,buf[2]],buf[1])}
    function volatile_contents(buf){return buf[1]}
    function add_char(buf,c)
     {var pos=buf[2];
      if(caml_call2(_aU_,pos,buf[3]))resize(buf,1);
      caml_ba_set_1(buf[1],pos,c);
      buf[2] = caml_call2(_aw_,pos,1);
      return 0}
    function create$27(len){return caml_call1(_EG_,len)}
    function unsafe_blit$1(src,src_pos,dst,dst_pos,len)
     {return caml_call5(_TZ_[3],src[1],src_pos,dst,dst_pos,len)}
    var _aiw_=[0,create$27,_EN_,_EO_,_EP_,unsafe_blit$1];
    function create$28(len)
     {var t=create$26(len),_aVh_=1;
      if(! (len < 1))
       {var for$0=_aVh_;
        for(;;)
         {add_char(t,97);
          var _aVi_=for$0 + 1 | 0;
          if(len !== for$0){var for$0=_aVi_;continue}
          break}}
      return t}
    function set$12(t,i,c){return caml_ba_set_1(t[1],i,c)}
    function get$5(t,i){return caml_ba_get_1(t[1],i)}
    var _aix_=[0,create$28,length$17,get$5,set$12];
    function of_bool$1(b){return b?97:98}
    var
     include$127=
      caml_call1
       (caml_call1
         (caml_call1(Base_for_tests_Test_blit[6],[0,_FS_,of_bool$1]),_aix_),
        _aiw_),
     blit$4=include$127[1],
     blito$3=include$127[2],
     unsafe_blit$2=include$127[3],
     sub$6=include$127[4],
     subo$3=include$127[5],
     To_string=caml_call1(caml_call1(Base_Blit[3],[0]),include$127);
    function nth$7(buf,pos)
     {if(! caml_call2(_aP_,pos,0))
       if(! caml_call2(_aU_,pos,buf[2]))return caml_ba_get_1(buf[1],pos);
      return caml_call1(_a$_,cst_Bigbuffer_nth)}
    function clear$2(buf){buf[2] = 0;return 0}
    function reset(buf)
     {buf[2] = 0;buf[1] = buf[4];buf[3] = caml_call1(_TQ_,buf[1]);return 0}
    function add_substring(buf,src,src_pos,len)
     {var _aVe_=caml_call2(_aP_,src_pos,0);
      if(_aVe_)
       var _aVf_=_aVe_;
      else
       var
        _aVg_=caml_call2(_aP_,len,0),
        _aVf_=
         _aVg_
         ||
         caml_call2
          (_aT_,src_pos,caml_call2(_ax_,caml_ml_string_length(src),len));
      if(_aVf_)caml_call1(_a$_,cst_Bigbuffer_add_substring);
      var new_pos=caml_call2(_aw_,buf[2],len);
      if(caml_call2(_aT_,new_pos,buf[3]))resize(buf,len);
      caml_call5(_TY_[1],src,src_pos,buf[1],buf[2],len);
      buf[2] = new_pos;
      return 0}
    function add_subbytes(buf,src,src_pos,len)
     {var _aVb_=caml_call2(_aP_,src_pos,0);
      if(_aVb_)
       var _aVc_=_aVb_;
      else
       var
        _aVd_=caml_call2(_aP_,len,0),
        _aVc_=
         _aVd_
         ||
         caml_call2(_aT_,src_pos,caml_call2(_ax_,caml_call1(_EN_,src),len));
      if(_aVc_)caml_call1(_a$_,cst_Bigbuffer_add_subbytes);
      var new_pos=caml_call2(_aw_,buf[2],len);
      if(caml_call2(_aT_,new_pos,buf[3]))resize(buf,len);
      caml_call5(_T0_[1],src,src_pos,buf[1],buf[2],len);
      buf[2] = new_pos;
      return 0}
    function add_bigstring(buf,src)
     {var len=caml_call1(_TQ_,src),new_pos=caml_call2(_aw_,buf[2],len);
      if(caml_call2(_aT_,new_pos,buf[3]))resize(buf,len);
      caml_call6(_TS_,src,0,[0,len],buf[1],[0,buf[2]],0);
      buf[2] = new_pos;
      return 0}
    function add_string(buf,src)
     {var len=caml_ml_string_length(src),new_pos=caml_call2(_aw_,buf[2],len);
      if(caml_call2(_aT_,new_pos,buf[3]))resize(buf,len);
      caml_call6(_TY_[2],src,0,[0,len],buf[1],[0,buf[2]],0);
      buf[2] = new_pos;
      return 0}
    function add_bytes(buf,src)
     {var len=caml_call1(_EN_,src),new_pos=caml_call2(_aw_,buf[2],len);
      if(caml_call2(_aT_,new_pos,buf[3]))resize(buf,len);
      caml_call6(_T0_[2],src,0,[0,len],buf[1],[0,buf[2]],0);
      buf[2] = new_pos;
      return 0}
    function add_buffer(buf_dst,buf_src)
     {var
       len=buf_src[2],
       dst_pos=buf_dst[2],
       new_pos=caml_call2(_aw_,dst_pos,len);
      if(caml_call2(_aT_,new_pos,buf_dst[3]))resize(buf_dst,len);
      caml_call6(_TS_,buf_src[1],0,[0,len],buf_dst[1],[0,dst_pos],0);
      buf_dst[2] = new_pos;
      return 0}
    function add_bin_prot(t,writer,x)
     {try
       {var pos=caml_call3(writer[2],t[1],t[2],x),new_pos=pos}
      catch(_aVa_)
       {var size=caml_call1(writer[1],x),_aU$_=t[3];
        if(caml_call2(_aT_,caml_call2(_aw_,t[2],size),_aU$_))resize(t,size);
        var new_pos=caml_call3(writer[2],t[1],t[2],x)}
      t[2] = new_pos;
      return 0}
    function add_substitute(buf,f,s)
     {var lim$1=caml_ml_string_length(s),previous=32,i$6=0;
      for(;;)
       {var _aU__=caml_call2(_aP_,i$6,lim$1);
        if(_aU__)
         {var previous$0=caml_string_get(s,i$6);
          if(36 === previous$0)
           {if(caml_call2(_FS_,previous,92))
             {add_char(buf,previous$0);
              var i$7=caml_call2(_aw_,i$6,1),previous=previous$0,i$6=i$7;
              continue}
            var
             start$0=caml_call2(_aw_,i$6,1),
             opening=caml_string_get(s,start$0);
            if(40 === opening)
             var switch$0=0;
            else
             if(123 === opening)
              var switch$0=0;
             else
              {var
                i$5=caml_call2(_aw_,start$0,1),
                lim$0=caml_ml_string_length(s),
                i$3=i$5;
               for(;;)
                {if(caml_call2(_aU_,i$3,lim$0))
                  var stop=lim$0;
                 else
                  {var match=caml_string_get(s,i$3);
                   if(95 <= match)
                    if(123 <= match)
                     if(192 <= match)
                      switch(match - 192 | 0)
                       {case 0:
                        case 1:
                        case 2:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 14:
                        case 15:
                        case 20:
                        case 25:
                        case 27:
                        case 28:
                        case 32:
                        case 33:
                        case 34:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 46:
                        case 47:
                        case 52:
                        case 57:
                        case 59:
                        case 60:var switch$1=1;break;
                        default:var switch$1=0}
                     else
                      var switch$1=0;
                    else
                     var switch$1=96 === match?0:1;
                   else
                    var
                     switch$1=
                      58 <= match?25 < (match - 65 | 0) >>> 0?0:1:48 <= match?1:0;
                   if(switch$1)
                    {var i$4=caml_call2(_aw_,i$3,1),i$3=i$4;continue}
                   var stop=i$3}
                 var
                  match$0=
                   [0,
                    caml_call3(_Ca_,s,start$0,caml_call2(_ax_,stop,start$0)),
                    stop],
                  switch$0=1;
                 break}}
            if(! switch$0)
             {var start=caml_call2(_aw_,start$0,1),k$2=0;
              if(40 === opening)
               var _aU8_=41;
              else
               {if(123 !== opening)throw [0,Assert_failure,_aiy_];
                var _aU8_=125}
              var lim=caml_ml_string_length(s),k=k$2,i=start;
              for(;;)
               {if(caml_call2(_aU_,i,lim))
                 {var
                   _aU4_=[0,caml_call1(Sexplib0_Sexp_conv[7],s),0],
                   _aU5_=
                    [0,[1,[0,_aiz_,[0,caml_call1(sexp_of_t$0,start),0]]],_aU4_],
                   _aU6_=[0,[1,[0,_aiA_,[0,caml_call1(_q_,_aU8_),0]]],_aU5_],
                   _aU7_=[0,[1,[0,_aiB_,[0,caml_call1(_q_,opening),0]]],_aU6_];
                  throw [0,
                         _fw_,
                         [1,
                          [0,
                           caml_call1
                            (Sexplib0_Sexp_conv[7],
                             cst_Bigbuffer_add_substitute_cannot_find_closing_delimiter),
                           _aU7_]]]}
                if(caml_call2(_FS_,caml_string_get(s,i),opening))
                 {var
                   i$0=caml_call2(_aw_,i,1),
                   k$0=caml_call2(_aw_,k,1),
                   k=k$0,
                   i=i$0;
                  continue}
                if(! caml_call2(_FS_,caml_string_get(s,i),_aU8_))
                 {var i$2=caml_call2(_aw_,i,1),i=i$2;continue}
                if(! caml_call2(_aS_,k,0))
                 {var
                   i$1=caml_call2(_aw_,i,1),
                   k$1=caml_call2(_ax_,k,1),
                   k=k$1,
                   i=i$1;
                  continue}
                var
                 _aU9_=caml_call2(_aw_,i,1),
                 match$0=
                  [0,
                   caml_call3
                    (_Ca_,s,start,caml_call2(_ax_,caml_call2(_ax_,i,start$0),1)),
                   _aU9_];
                break}}
            var next_i=match$0[2],ident=match$0[1];
            add_string(buf,caml_call1(f,ident));
            var previous=32,i$6=next_i;
            continue}
          if(caml_call2(_FS_,previous,92))
           {add_char(buf,92);
            add_char(buf,previous$0);
            var i$8=caml_call2(_aw_,i$6,1),previous=previous$0,i$6=i$8;
            continue}
          if(92 === previous$0)
           {var i$9=caml_call2(_aw_,i$6,1),previous=previous$0,i$6=i$9;
            continue}
          add_char(buf,previous$0);
          var i$10=caml_call2(_aw_,i$6,1),previous=previous$0,i$6=i$10;
          continue}
        return _aU__}}
    function formatter_of_buffer(buf)
     {function _aU1_(_aU3_){return 0}
      function _aU2_(s,pos,len){return add_substring(buf,s,pos,len)}
      return caml_call2(Stdlib_format[111],_aU2_,_aU1_)}
    function bprintf(buf)
     {var _aUY_=formatter_of_buffer(buf);
      function _aUZ_(_aU0_){return 0}
      return caml_call2(Stdlib_format[130],_aUZ_,_aUY_)}
    var Format=[0,formatter_of_buffer,bprintf];
    function bprintf$0(buf)
     {return caml_call1(_fG_,function(_aUX_){return add_string(buf,_aUX_)})}
    var Printf=[0,bprintf$0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$406);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bigbuffer=
      [0,
       sexp_of_t$92,
       create$26,
       contents,
       contents_bytes,
       blit$4,
       blito$3,
       unsafe_blit$2,
       sub$6,
       subo$3,
       To_string,
       nth$7,
       length$17,
       clear$2,
       reset,
       add_char,
       add_string,
       add_substring,
       add_bytes,
       add_subbytes,
       add_buffer,
       big_contents,
       volatile_contents,
       add_bigstring,
       add_bin_prot,
       add_substitute,
       Format,
       Printf,
       internal];
    caml_register_global(4478,Core_kernel_Bigbuffer,"Core_kernel__Bigbuffer");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$407);
    caml_call1(Expect_test_collector[4][1],cst_src_bigsubstring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$408,cst$189);
    var _aiC_=0;
    function create$29(_aUW_){return arg(_aiC_,_aUW_)}
    var
     get$6=caml_ba_get_1,
     blit$5=Blit[8],
     blit_to_string$0=Blit[5],
     blit_to_bytes$0=Blit[5],
     blit_to_bigstring$0=Blit[8],
     blit_from_string$0=Blit[6],
     blit_from_bigstring$0=Blit[8],
     include$128=
      F
       ([0,
         create$29,
         _TQ_,
         blit$5,
         blit_to_bytes$0,
         blit_to_bigstring$0,
         blit_from_string$0,
         blit_from_bigstring$0,
         blit_to_string$0,
         get$6]),
     _aiD_=include$128[1],
     _aiE_=include$128[2],
     _aiF_=include$128[3],
     _aiG_=include$128[4],
     _aiH_=include$128[5],
     _aiI_=include$128[6],
     _aiJ_=include$128[7],
     _aiK_=include$128[8],
     _aiL_=include$128[9],
     _aiM_=include$128[10],
     _aiN_=include$128[11],
     _aiO_=include$128[12],
     _aiP_=include$128[13],
     _aiQ_=include$128[14],
     _aiR_=include$128[15],
     _aiS_=include$128[16],
     _aiT_=include$128[17],
     _aiU_=include$128[18],
     _aiV_=include$128[19],
     _aiW_=include$128[20],
     _aiX_=include$128[21],
     _aiY_=include$128[22],
     _aiZ_=include$128[23],
     _ai0_=include$128[24],
     _ai1_=include$128[25],
     _ai2_=include$128[26],
     _ai3_=include$128[27],
     _ai4_=include$128[28],
     _ai5_=include$128[29],
     _ai6_=include$128[30],
     _ai7_=include$128[31],
     _ai8_=include$128[32],
     _ai9_=include$128[33],
     _ai__=include$128[34],
     _ai$_=include$128[35],
     _aja_=include$128[36],
     _ajb_=include$128[37],
     _ajc_=include$128[38];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$409);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bigsubstring=
      [0,
       _aiD_,
       _aiE_,
       _aiF_,
       _aiG_,
       _aiH_,
       _aiI_,
       _aiJ_,
       _aiK_,
       _aiL_,
       _aiM_,
       _aiN_,
       _aiO_,
       _aiP_,
       _aiQ_,
       _aiR_,
       _aiS_,
       _aiT_,
       _aiU_,
       _aiV_,
       _aiW_,
       _aiX_,
       _aiY_,
       _aiZ_,
       _ai0_,
       _ai1_,
       _ai2_,
       _ai3_,
       _ai4_,
       _ai5_,
       _ai6_,
       _ai7_,
       _ai8_,
       _ai9_,
       _ai__,
       _ai$_,
       _aja_,
       _ajb_,
       _ajc_];
    caml_register_global
     (4479,Core_kernel_Bigsubstring,"Core_kernel__Bigsubstring");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$410);
    caml_call1(Expect_test_collector[4][1],cst_src_blang_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$411,cst$190);
    var
     _ajd_=caml_call1(Bin_prot_Shape[3][1],cst_a$83),
     _aje_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_42_14),
     _ajf_=[0,[0,cst_Base,[0,caml_call2(Bin_prot_Shape[15],_aje_,_ajd_),0]],0],
     _ajg_=caml_call1(Bin_prot_Shape[3][1],cst_a$84),
     _ajh_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_41_26),
     _aji_=[0,caml_call2(Bin_prot_Shape[15],_ajh_,_ajg_),0],
     _ajj_=caml_call1(Bin_prot_Shape[2][1],cst_t$198),
     _ajk_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_ajj_),_aji_),0],
     _ajl_=caml_call1(Bin_prot_Shape[3][1],cst_a$85),
     _ajm_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_41_19),
     _ajn_=[0,caml_call2(Bin_prot_Shape[15],_ajm_,_ajl_),0],
     _ajo_=caml_call1(Bin_prot_Shape[2][1],cst_t$199),
     _ajp_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_ajo_),_ajn_),_ajk_],
     _ajq_=caml_call1(Bin_prot_Shape[3][1],cst_a$86),
     _ajr_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_41_12),
     _ajs_=[0,caml_call2(Bin_prot_Shape[15],_ajr_,_ajq_),0],
     _ajt_=caml_call1(Bin_prot_Shape[2][1],cst_t$200),
     _aju_=
      [0,
       [0,
        cst_If,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_ajt_),_ajs_),_ajp_]],
       _ajf_],
     _ajv_=caml_call1(Bin_prot_Shape[3][1],cst_a$87),
     _ajw_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_40_13),
     _ajx_=[0,caml_call2(Bin_prot_Shape[15],_ajw_,_ajv_),0],
     _ajy_=caml_call1(Bin_prot_Shape[2][1],cst_t$201),
     _ajz_=
      [0,
       [0,
        cst_Not,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_ajy_),_ajx_),0]],
       _aju_],
     _ajA_=caml_call1(Bin_prot_Shape[3][1],cst_a$88),
     _ajB_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_39_19),
     _ajC_=[0,caml_call2(Bin_prot_Shape[15],_ajB_,_ajA_),0],
     _ajD_=caml_call1(Bin_prot_Shape[2][1],cst_t$202),
     _ajE_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_ajD_),_ajC_),0],
     _ajF_=caml_call1(Bin_prot_Shape[3][1],cst_a$89),
     _ajG_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_39_12),
     _ajH_=[0,caml_call2(Bin_prot_Shape[15],_ajG_,_ajF_),0],
     _ajI_=caml_call1(Bin_prot_Shape[2][1],cst_t$203),
     _ajJ_=
      [0,
       [0,
        cst_Or,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_ajI_),_ajH_),_ajE_]],
       _ajz_],
     _ajK_=caml_call1(Bin_prot_Shape[3][1],cst_a$90),
     _ajL_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_38_20),
     _ajM_=[0,caml_call2(Bin_prot_Shape[15],_ajL_,_ajK_),0],
     _ajN_=caml_call1(Bin_prot_Shape[2][1],cst_t$204),
     _ajO_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_ajN_),_ajM_),0],
     _ajP_=caml_call1(Bin_prot_Shape[3][1],cst_a$91),
     _ajQ_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_38_13),
     _ajR_=[0,caml_call2(Bin_prot_Shape[15],_ajQ_,_ajP_),0],
     _ajS_=caml_call1(Bin_prot_Shape[2][1],cst_t$205),
     _ajV_=
      [0,
       _ajU_,
       [0,
        _ajT_,
        [0,
         [0,
          cst_And,
          [0,caml_call1(caml_call1(Bin_prot_Shape[13],_ajS_),_ajR_),_ajO_]],
         _ajJ_]]],
     _ajW_=caml_call1(Bin_prot_Shape[9],_ajV_),
     _ajX_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$92),0],
     _ajY_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$206),_ajX_,_ajW_],0],
     _ajZ_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_35_2),
     group$121=caml_call2(Bin_prot_Shape[6],_ajZ_,_ajY_);
    function bin_shape_t$105(a)
     {var _aUV_=caml_call1(Bin_prot_Shape[2][1],cst_t$207);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$121,_aUV_),[0,a,0])}
    function bin_size_t$69(size_of_a,param)
     {if(typeof param === "number")
       return 1;
      else
       switch(param[0])
        {case 0:
          var
           v2=param[2],
           v1=param[1],
           _aUM_=bin_size_t$69(size_of_a,v1),
           size=caml_call2(Bin_prot_Common[23],1,_aUM_),
           _aUN_=bin_size_t$69(size_of_a,v2);
          return caml_call2(Bin_prot_Common[23],size,_aUN_);
         case 1:
          var
           v2$0=param[2],
           v1$0=param[1],
           _aUO_=bin_size_t$69(size_of_a,v1$0),
           size$0=caml_call2(Bin_prot_Common[23],1,_aUO_),
           _aUP_=bin_size_t$69(size_of_a,v2$0);
          return caml_call2(Bin_prot_Common[23],size$0,_aUP_);
         case 2:
          var v1$1=param[1],_aUQ_=bin_size_t$69(size_of_a,v1$1);
          return caml_call2(Bin_prot_Common[23],1,_aUQ_);
         case 3:
          var
           v3=param[3],
           v2$1=param[2],
           v1$2=param[1],
           _aUR_=bin_size_t$69(size_of_a,v1$2),
           size$1=caml_call2(Bin_prot_Common[23],1,_aUR_),
           _aUS_=bin_size_t$69(size_of_a,v2$1),
           size$2=caml_call2(Bin_prot_Common[23],size$1,_aUS_),
           _aUT_=bin_size_t$69(size_of_a,v3);
          return caml_call2(Bin_prot_Common[23],size$2,_aUT_);
         default:
          var v1$3=param[1],_aUU_=caml_call1(size_of_a,v1$3);
          return caml_call2(Bin_prot_Common[23],1,_aUU_)}}
    function bin_write_t$70(write_a,buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return 0 === param$0
                ?caml_call3(Bin_prot_Write[30],buf,pos$0,0)
                :caml_call3(Bin_prot_Write[30],buf,pos$0,1);
       else
        switch(param$0[0])
         {case 0:
           var
            v2=param$0[2],
            v1=param$0[1],
            pos$1=caml_call3(Bin_prot_Write[30],buf,pos$0,2),
            pos$6=bin_write_t$70(write_a,buf,pos$1,v1),
            pos$0=pos$6,
            param$0=v2;
           continue;
          case 1:
           var
            v2$0=param$0[2],
            v1$0=param$0[1],
            pos$2=caml_call3(Bin_prot_Write[30],buf,pos$0,3),
            pos$7=bin_write_t$70(write_a,buf,pos$2,v1$0),
            pos$0=pos$7,
            param$0=v2$0;
           continue;
          case 2:
           var
            v1$1=param$0[1],
            pos$3=caml_call3(Bin_prot_Write[30],buf,pos$0,4),
            pos$0=pos$3,
            param$0=v1$1;
           continue;
          case 3:
           var
            v3=param$0[3],
            v2$1=param$0[2],
            v1$2=param$0[1],
            pos$4=caml_call3(Bin_prot_Write[30],buf,pos$0,5),
            pos$8=bin_write_t$70(write_a,buf,pos$4,v1$2),
            pos$9=bin_write_t$70(write_a,buf,pos$8,v2$1),
            pos$0=pos$9,
            param$0=v3;
           continue;
          default:
           var
            v1$3=param$0[1],
            pos$5=caml_call3(Bin_prot_Write[30],buf,pos$0,6);
           return caml_call3(write_a,buf,pos$5,v1$3)}}
    function bin_writer_t$93(bin_writer_a)
     {function _aUI_(v)
       {var _aUJ_=bin_writer_a[2];
        return function(_aUK_,_aUL_)
         {return bin_write_t$70(_aUJ_,v,_aUK_,_aUL_)}}
      return [0,function(v){return bin_size_t$69(bin_writer_a[1],v)},_aUI_]}
    function bin_read_t$138(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[19],cst_src_blang_ml_T_t,pos_ref[1])}
    function bin_read_t$139(of_a,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(6 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_aj0_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:return 1;
        case 2:
         var
          arg_1$0=bin_read_t$139(of_a,buf,pos_ref),
          arg_2=bin_read_t$139(of_a,buf,pos_ref);
         return [0,arg_1$0,arg_2];
        case 3:
         var
          arg_1$1=bin_read_t$139(of_a,buf,pos_ref),
          arg_2$0=bin_read_t$139(of_a,buf,pos_ref);
         return [1,arg_1$1,arg_2$0];
        case 4:
         var arg_1$2=bin_read_t$139(of_a,buf,pos_ref);return [2,arg_1$2];
        case 5:
         var
          arg_1$3=bin_read_t$139(of_a,buf,pos_ref),
          arg_2$1=bin_read_t$139(of_a,buf,pos_ref),
          arg_3=bin_read_t$139(of_a,buf,pos_ref);
         return [3,arg_1$3,arg_2$1,arg_3];
        default:var arg_1=caml_call2(of_a,buf,pos_ref);return [4,arg_1]}}
    function bin_reader_t$93(bin_reader_a)
     {function _aUH_(buf,pos_ref,vtag)
       {return bin_read_t$138(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$139(bin_reader_a[1],buf,pos_ref)},
              _aUH_]}
    function bin_t$93(bin_a)
     {var _aUF_=bin_reader_t$93(bin_a[3]),_aUG_=bin_writer_t$93(bin_a[2]);
      return [0,bin_shape_t$105(bin_a[1]),_aUG_,_aUF_]}
    function compare$72(cmp_a,a_001,b_002)
     {var a_001$0=a_001,b_002$0=b_002;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_001$0,b_002$0))return 0;
        if(typeof a_001$0 === "number")
         {if(0 === a_001$0)
           {if(typeof b_002$0 === "number")if(0 === b_002$0)return 0;
            return -1}
          if(typeof b_002$0 !== "number")return -1;
          if(0 !== b_002$0)return 0;
          var switch$0=0}
        else
         switch(a_001$0[0])
          {case 0:
            var _aUw_=a_001$0[2],_aUx_=a_001$0[1];
            if(typeof b_002$0 === "number")
             var switch$0=0 === b_002$0?0:1;
            else
             {if(0 === b_002$0[0])
               {var
                 b_006=b_002$0[2],
                 b_004=b_002$0[1],
                 n=compare$72(cmp_a,_aUx_,b_004);
                if(0 === n){var a_001$0=_aUw_,b_002$0=b_006;continue}
                return n}
              return -1}
            break;
           case 1:
            var _aUy_=a_001$0[2],_aUz_=a_001$0[1];
            if(typeof b_002$0 === "number")
             var switch$0=0 === b_002$0?0:1;
            else
             switch(b_002$0[0])
              {case 0:var switch$0=2;break;
               case 1:
                var
                 b_014=b_002$0[2],
                 b_012=b_002$0[1],
                 n$0=compare$72(cmp_a,_aUz_,b_012);
                if(0 === n$0){var a_001$0=_aUy_,b_002$0=b_014;continue}
                return n$0;
               default:return -1}
            break;
           case 2:
            var _aUA_=a_001$0[1];
            if(typeof b_002$0 === "number")
             var switch$0=0 === b_002$0?0:1;
            else
             switch(b_002$0[0])
              {case 0:var switch$0=2;break;
               case 1:var switch$0=3;break;
               case 2:
                var b_002$1=b_002$0[1],a_001$0=_aUA_,b_002$0=b_002$1;continue;
               default:return -1}
            break;
           case 3:
            var _aUB_=a_001$0[3],_aUC_=a_001$0[2],_aUD_=a_001$0[1];
            if(typeof b_002$0 === "number")
             var switch$0=0 === b_002$0?0:1;
            else
             switch(b_002$0[0])
              {case 0:var switch$0=2;break;
               case 1:var switch$0=3;break;
               case 2:var switch$0=4;break;
               case 3:
                var
                 b_028=b_002$0[3],
                 b_026=b_002$0[2],
                 b_024=b_002$0[1],
                 n$1=compare$72(cmp_a,_aUD_,b_024);
                if(0 === n$1)
                 {var n$2=compare$72(cmp_a,_aUC_,b_026);
                  if(0 === n$2){var a_001$0=_aUB_,b_002$0=b_028;continue}
                  return n$2}
                return n$1;
               default:return -1}
            break;
           default:
            var _aUE_=a_001$0[1];
            if(typeof b_002$0 === "number")
             var switch$0=0 === b_002$0?0:1;
            else
             switch(b_002$0[0])
              {case 0:var switch$0=2;break;
               case 1:var switch$0=3;break;
               case 2:var switch$0=4;break;
               case 3:return 1;
               default:
                var b_036=b_002$0[1];return caml_call2(cmp_a,_aUE_,b_036)}}
        switch(switch$0)
         {case 0:return 1;
          case 1:return 1;
          case 2:return 1;
          case 3:return 1;
          default:return 1}}}
    function hash_fold_t$40(hash_fold_a,hsv,arg)
     {var hsv$0=hsv,arg$0=arg;
      for(;;)
       if(typeof arg$0 === "number")
        return 0 === arg$0
                ?caml_call2(Base_Hash[3],hsv$0,0)
                :caml_call2(Base_Hash[3],hsv$0,1);
       else
        switch(arg$0[0])
         {case 0:
           var
            a1=arg$0[2],
            a0=arg$0[1],
            hsv$1=caml_call2(Base_Hash[3],hsv$0,2),
            hsv$2=hash_fold_t$40(hash_fold_a,hsv$1,a0),
            hsv$0=hsv$2,
            arg$0=a1;
           continue;
          case 1:
           var
            a1$0=arg$0[2],
            a0$0=arg$0[1],
            hsv$3=caml_call2(Base_Hash[3],hsv$0,3),
            hsv$4=hash_fold_t$40(hash_fold_a,hsv$3,a0$0),
            hsv$0=hsv$4,
            arg$0=a1$0;
           continue;
          case 2:
           var
            a0$1=arg$0[1],
            hsv$5=caml_call2(Base_Hash[3],hsv$0,4),
            hsv$0=hsv$5,
            arg$0=a0$1;
           continue;
          case 3:
           var
            a2=arg$0[3],
            a1$1=arg$0[2],
            a0$2=arg$0[1],
            hsv$6=caml_call2(Base_Hash[3],hsv$0,5),
            hsv$7=hash_fold_t$40(hash_fold_a,hsv$6,a0$2),
            hsv$8=hash_fold_t$40(hash_fold_a,hsv$7,a1$1),
            hsv$0=hsv$8,
            arg$0=a2;
           continue;
          default:
           var a0$3=arg$0[1],hsv$9=caml_call2(Base_Hash[3],hsv$0,6);
           return caml_call2(hash_fold_a,hsv$9,a0$3)}}
    function subterms(param)
     {if(typeof param !== "number")
       switch(param[0])
        {case 2:var t1$0=param[1];return [0,t1$0,0];
         case 3:
          var t3=param[3],t2$0=param[2],t1$1=param[1];
          return [0,t1$1,[0,t2$0,[0,t3,0]]];
         case 4:break;
         default:var t2=param[2],t1=param[1];return [0,t1,[0,t2,0]]}
      return 0}
    function contains_no_constants(t)
     {if(typeof t === "number")throw [0,Assert_failure,_aj1_];
      return caml_call2(_ph_,subterms(t),contains_no_constants)}
    function invariant$7(t)
     {return caml_call2(_ph_,subterms(t),contains_no_constants)}
    var acc=0,acc$0=1;
    function base(v){return [4,v]}
    function not(t)
     {if(typeof t === "number")
       return 0 === t?1:0;
      else
       {if(2 === t[0]){var t$0=t[1];return t$0}return [2,t]}}
    function andalso(t1,t2)
     {var switch$0=typeof t2 === "number"?0 === t2?0:1:0;
      if(! switch$0)
       {var switch$1=typeof t1 === "number"?0 === t1?0:1:0;
        if(! switch$1)
         {if(typeof t2 === "number")
           var other=t1;
          else
           {if(typeof t1 !== "number")return [0,t1,t2];var other=t2}
          return other}}
      return 1}
    function orelse(t1,t2)
     {var switch$0=typeof t2 === "number"?0 === t2?1:0:0;
      if(! switch$0)
       {var switch$1=typeof t1 === "number"?0 === t1?1:0:0;
        if(! switch$1)
         {if(typeof t2 === "number")
           var other=t1;
          else
           {if(typeof t1 !== "number")return [1,t1,t2];var other=t2}
          return other}}
      return 0}
    function if$0(a,b,c)
     {if(typeof a === "number")return 0 === a?b:c;
      if(typeof b === "number")if(0 === b)return orelse(a,c);
      return typeof c === "number"
              ?0 === c?orelse(not(a),b):andalso(a,b)
              :typeof b === "number"?andalso(not(a),c):[3,a,b,c]}
    function gather_conjuncts(t)
     {var param$3=[0,t,0],acc=0,param=param$3;
      for(;;)
       {if(param)
         {var _aUv_=param[1];
          if(typeof _aUv_ === "number")
           {if(0 === _aUv_){var param$0=param[2],param=param$0;continue}}
          else
           if(0 === _aUv_[0])
            {var
              ts=param[2],
              t2=_aUv_[2],
              t1=_aUv_[1],
              param$2=[0,t1,[0,t2,ts]],
              param=param$2;
             continue}
          var param$1=param[2],acc$0=[0,_aUv_,acc],acc=acc$0,param=param$1;
          continue}
        return caml_call1(parts,acc)}}
    function gather_disjuncts(t)
     {var param$3=[0,t,0],acc=0,param=param$3;
      for(;;)
       {if(param)
         {var _aUu_=param[1];
          if(typeof _aUu_ === "number")
           {if(1 === _aUu_){var param$1=param[2],param=param$1;continue}}
          else
           if(1 === _aUu_[0])
            {var
              ts=param[2],
              t2=_aUu_[2],
              t1=_aUu_[1],
              param$2=[0,t1,[0,t2,ts]],
              param=param$2;
             continue}
          var param$0=param[2],acc$0=[0,_aUu_,acc],acc=acc$0,param=param$0;
          continue}
        return caml_call1(parts,acc)}}
    function and(param)
     {var acc$1=acc,param$0=param;
      for(;;)
       {if(param$0)
         {var _aUt_=param$0[1];
          if(typeof _aUt_ === "number")if(0 !== _aUt_)return acc$0;
          var ts=param$0[2],acc$2=andalso(acc$1,_aUt_),acc$1=acc$2,param$0=ts;
          continue}
        return acc$1}}
    function or(param)
     {var acc$1=acc$0,param$0=param;
      for(;;)
       {if(param$0)
         {var _aUs_=param$0[1];
          if(typeof _aUs_ === "number")if(0 === _aUs_)return acc;
          var ts=param$0[2],acc$2=orelse(acc$1,_aUs_),acc$1=acc$2,param$0=ts;
          continue}
        return acc$1}}
    function sexp_of_t$93(sexp_of_value,t)
     {function aux(t)
       {if(typeof t === "number")
         return 0 === t?_aj4_:_aj5_;
        else
         switch(t[0])
          {case 0:
            var ts=gather_conjuncts(t);
            return [1,[0,_aj6_,caml_call2(_qg_,ts,aux)]];
           case 1:
            var ts$0=gather_disjuncts(t);
            return [1,[0,_aj7_,caml_call2(_qg_,ts$0,aux)]];
           case 2:var t$0=t[1];return [1,[0,_aj8_,[0,aux(t$0),0]]];
           case 3:
            var
             t3=t[3],
             t2=t[2],
             t1=t[1],
             _aUq_=[0,aux(t3),0],
             _aUr_=[0,aux(t2),_aUq_];
            return [1,[0,_aj9_,[0,aux(t1),_aUr_]]];
           default:var x=t[1];return caml_call1(sexp_of_value,x)}}
      return aux(t)}
    function t_of_sexp$84(base_of_sexp,sexp)
     {function base(sexp){return [4,caml_call1(base_of_sexp,sexp)]}
      function aux(sexp)
       {if(0 === sexp[0])
         {var kw=sexp[1],match=caml_call1(_CB_,kw);
          return caml_string_notequal(match,cst_false)
                  ?caml_string_notequal(match,cst_true)?base(sexp):acc
                  :acc$0}
        var _aUl_=sexp[1];
        if(_aUl_)
         {var _aUm_=_aUl_[1];
          if(0 === _aUm_[0])
           {var args=_aUl_[2],kw$0=_aUm_[1],match$0=caml_call1(_CB_,kw$0);
            if(caml_string_notequal(match$0,cst_and))
             {if(caml_string_notequal(match$0,cst_if))
               {if(caml_string_notequal(match$0,cst_not))
                 return caml_string_notequal(match$0,cst_or)
                         ?base(sexp)
                         :or(caml_call2(_qg_,args,aux));
                if(args)
                 if(args[2])
                  var switch$0=0;
                 else
                  var x=args[1],_aUn_=x,switch$0=1;
                else
                 var switch$0=0;
                if(! switch$0)
                 var
                  n=caml_call1(length$1,args),
                  _aUn_=caml_call2(_Of_,caml_call3(_fE_,_aj2_,name$65,n),sexp);
                return not(aux(_aUn_))}
              if(args)
               {var _aUj_=args[2];
                if(_aUj_)
                 {var _aUk_=_aUj_[2];
                  if(_aUk_)
                   if(_aUk_[2])
                    var switch$1=0;
                   else
                    var
                     z=_aUk_[1],
                     y=_aUj_[1],
                     x$0=args[1],
                     match$1=[0,x$0,y,z],
                     switch$1=1;
                  else
                   var switch$1=0}
                else
                 var switch$1=0}
              else
               var switch$1=0;
              if(! switch$1)
               var
                n$0=caml_call1(length$1,args),
                match$1=
                 caml_call2(_Of_,caml_call3(_fE_,_aj3_,name$66,n$0),sexp);
              var
               z$0=match$1[3],
               y$0=match$1[2],
               x$1=match$1[1],
               _aUo_=aux(z$0),
               _aUp_=aux(y$0);
              return if$0(aux(x$1),_aUp_,_aUo_)}
            return and(caml_call2(_qg_,args,aux))}}
        return base(sexp)}
      return aux(sexp)}
    function constant(b){return b?acc:acc$0}
    function symbol$211(a,b){return orelse(not(a),b)}
    function constant_value(param)
     {return typeof param === "number"?0 === param?_aj__:_aj$_:0}
    function values(t)
     {var param$7=[0,t,0],acc=0,param=param$7;
      for(;;)
       {if(param)
         {var _aUi_=param[1];
          if(typeof _aUi_ === "number")
           {if(0 === _aUi_){var param$0=param[2],param=param$0;continue}
            var param$1=param[2],param=param$1;
            continue}
          else
           switch(_aUi_[0])
            {case 0:
              var
               ts=param[2],
               t2=_aUi_[2],
               t1=_aUi_[1],
               param$2=[0,t1,[0,t2,ts]],
               param=param$2;
              continue;
             case 1:
              var
               ts$0=param[2],
               t2$0=_aUi_[2],
               t1$0=_aUi_[1],
               param$3=[0,t1$0,[0,t2$0,ts$0]],
               param=param$3;
              continue;
             case 2:
              var
               ts$1=param[2],
               t1$1=_aUi_[1],
               param$4=[0,t1$1,ts$1],
               param=param$4;
              continue;
             case 3:
              var
               ts$2=param[2],
               t3=_aUi_[3],
               t2$1=_aUi_[2],
               t1$2=_aUi_[1],
               param$5=[0,t1$2,[0,t2$1,[0,t3,ts$2]]],
               param=param$5;
              continue;
             default:
              var
               param$6=param[2],
               v=_aUi_[1],
               acc$0=[0,v,acc],
               acc=acc$0,
               param=param$6;
              continue}}
        return caml_call1(parts,acc)}}
    function fold$12(t,init,f)
     {function loop$0(counter,acc,t,pending)
       {var t$0=t,pending$0=pending;
        for(;;)
         if(typeof t$0 === "number")
          {if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return next(counter$1,acc,pending$0)}
           return caml_trampoline_return(next,[0,acc,pending$0])}
         else
          switch(t$0[0])
           {case 2:var t$2=t$0[1],t$0=t$2;continue;
            case 3:
             var
              t3=t$0[3],
              t2$0=t$0[2],
              t$3=t$0[1],
              pending$2=[0,t2$0,[0,t3,pending$0]],
              t$0=t$3,
              pending$0=pending$2;
             continue;
            case 4:
             var a=t$0[1],_aUh_=caml_call2(f,acc,a);
             if(counter < 50)
              {var counter$0=counter + 1 | 0;
               return next(counter$0,_aUh_,pending$0)}
             return caml_trampoline_return(next,[0,_aUh_,pending$0]);
            default:
             var
              t2=t$0[2],
              t$1=t$0[1],
              pending$1=[0,t2,pending$0],
              t$0=t$1,
              pending$0=pending$1;
             continue}}
      function next(counter,acc,param)
       {if(param)
         {var ts=param[2],t=param[1];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop$0(counter$0,acc,t,ts)}
          return caml_trampoline_return(loop$0,[0,acc,t,ts])}
        return acc}
      function loop(acc,t,pending)
       {return caml_trampoline(loop$0(0,acc,t,pending))}
      return loop(init,t,0)}
    var
     C$1=caml_call1(include$7[16],[0,fold$12,-304398144,-304398144]),
     count$10=C$1[10],
     sum$6=C$1[11],
     exists$11=C$1[8],
     find$13=C$1[12],
     find_map$5=C$1[13],
     fold$13=C$1[5],
     for_all$10=C$1[9],
     is_empty$13=C$1[3],
     iter$18=C$1[4],
     length$18=C$1[2],
     mem$11=C$1[1],
     to_array$6=C$1[15],
     to_list$7=C$1[14],
     min_elt$10=C$1[16],
     max_elt$10=C$1[17],
     fold_result$5=C$1[6],
     fold_until$5=C$1[7];
    function bind$1(t,k)
     {var t$0=t;
      for(;;)
       if(typeof t$0 === "number")
        return 0 === t$0?acc:acc$0;
       else
        switch(t$0[0])
         {case 0:
           var t2=t$0[2],t1=t$0[1],other=bind$1(t1,k);
           if(typeof other === "number")if(0 !== other)return acc$0;
           return andalso(other,bind$1(t2,k));
          case 1:
           var t2$0=t$0[2],t1$0=t$0[1],other$0=bind$1(t1$0,k);
           if(typeof other$0 === "number")if(0 === other$0)return acc;
           return orelse(other$0,bind$1(t2$0,k));
          case 2:var t1$1=t$0[1];return not(bind$1(t1$1,k));
          case 3:
           var t3=t$0[3],t2$1=t$0[2],t1$2=t$0[1],other$1=bind$1(t1$2,k);
           if(typeof other$1 === "number")
            {if(0 === other$1){var t$0=t2$1;continue}var t$0=t3;continue}
           var _aUg_=bind$1(t3,k);
           return if$0(other$1,bind$1(t2$1,k),_aUg_);
          default:var v=t$0[1];return caml_call1(k,v)}}
    var
     include$129=caml_call1(Base_Monad[1],[0,bind$1,base,-349054340]),
     _akd_=include$129[4],
     _aka_=include$129[1],
     _akb_=include$129[2],
     _akc_=include$129[3],
     _ake_=include$129[5],
     _akf_=include$129[6],
     _akg_=include$129[7],
     _akh_=include$129[8],
     _aki_=include$129[9],
     _akj_=include$129[10],
     _akk_=include$129[11];
    function eval$0(t,base_eval)
     {var t$0=t;
      for(;;)
       if(typeof t$0 === "number")
        return 0 === t$0?1:0;
       else
        switch(t$0[0])
         {case 0:
           var t2=t$0[2],t1=t$0[1],_aUe_=eval$0(t1,base_eval);
           if(_aUe_){var t$0=t2;continue}
           return _aUe_;
          case 1:
           var t2$0=t$0[2],t1$0=t$0[1],_aUf_=eval$0(t1$0,base_eval);
           if(_aUf_)return _aUf_;
           var t$0=t2$0;
           continue;
          case 2:var t$1=t$0[1];return 1 - eval$0(t$1,base_eval);
          case 3:
           var t3=t$0[3],t2$1=t$0[2],t1$1=t$0[1];
           if(eval$0(t1$1,base_eval)){var t$0=t2$1;continue}
           var t$0=t3;
           continue;
          default:var x=t$0[1];return caml_call1(base_eval,x)}}
    function specialize(t,f)
     {return caml_call2
              (_akd_,
               t,
               function(v)
                {var match=caml_call1(f,v);
                 if(typeof match === "number")return [4,v];
                 var c=match[2];
                 return constant(c)})}
    function eval_set(all,set_of_base)
     {function aux(b)
       {if(typeof b === "number")
         {if(0 === b)return force(all);
          var _aT__=caml_call1(comparator$0,force(all));
          return caml_call1(_xs_[1],_aT__)}
        else
         switch(b[0])
          {case 0:
            var b$0=b[2],a=b[1],_aT$_=aux(b$0);
            return caml_call2(inter$2,aux(a),_aT$_);
           case 1:
            var b$1=b[2],a$0=b[1],_aUa_=aux(b$1);
            return caml_call2(union$3,aux(a$0),_aUa_);
           case 2:
            var a$1=b[1],_aUb_=aux(a$1);
            return caml_call2(diff$2,force(all),_aUb_);
           case 3:
            var
             b$2=b[3],
             a$2=b[2],
             cond=b[1],
             cond$0=aux(cond),
             _aUc_=aux(b$2),
             _aUd_=
              caml_call2(inter$2,caml_call2(diff$2,force(all),cond$0),_aUc_);
            return caml_call2
                    (union$3,caml_call2(inter$2,cond$0,aux(a$2)),_aUd_);
           default:var a$3=b[1];return caml_call1(set_of_base,a$3)}}
      return aux}
    function quickcheck_generator$13(a_generator)
     {function _aT3_(self)
       {var
         _aT7_=[0,caml_call4(_vb_[18],self,self,self,if$0),0],
         _aT8_=[0,caml_call3(_vb_[17],self,self,andalso),_aT7_],
         _aT9_=[0,caml_call3(_vb_[17],self,self,orelse),_aT8_];
        return [0,caml_call2(_vb_[10],self,not),_aT9_]}
      var
       _aT4_=[0,caml_call1(_vb_[33],acc$0),0],
       _aT5_=[0,caml_call1(_vb_[33],acc),_aT4_],
       _aT6_=[0,caml_call2(_vb_[10],a_generator,base),_aT5_];
      return caml_call2(_vb_[61],_aT6_,_aT3_)}
    function quickcheck_shrinker$12(a_shrinker)
     {function _aTL_(self)
       {function binop(operator,left,right)
         {var _aTX_=0;
          function _aTY_(right){return caml_call2(operator,left,right)}
          var
           _aTZ_=
            [0,caml_call2(_je_,caml_call2(_u$_[1],self,right),_aTY_),_aTX_];
          function _aT0_(left){return caml_call2(operator,left,right)}
          var
           _aT1_=
            [0,caml_call2(_je_,caml_call2(_u$_[1],self,left),_aT0_),_aTZ_],
           _aT2_=[0,caml_call1(_kd_,right),_aT1_];
          return caml_call1(_jL_,[0,caml_call1(_kd_,left),_aT2_])}
        function _aTM_(t)
         {if(typeof t === "number")
           return _jj_;
          else
           switch(t[0])
            {case 0:var right=t[2],left=t[1];return binop(andalso,left,right);
             case 1:
              var right$0=t[2],left$0=t[1];
              return binop(orelse,left$0,right$0);
             case 2:
              var
               t$0=t[1],
               _aTN_=caml_call2(_je_,caml_call2(_u$_[1],self,t$0),not);
              return caml_call2(_jG_,caml_call1(_kd_,t$0),_aTN_);
             case 3:
              var
               else$0=t[3],
               then=t[2],
               if$1=t[1],
               _aTO_=0,
               _aTP_=function(else$0){return if$0(if$1,then,else$0)},
               _aTQ_=
                [0,
                 caml_call2(_je_,caml_call2(_u$_[1],self,else$0),_aTP_),
                 _aTO_],
               _aTR_=function(then){return if$0(if$1,then,else$0)},
               _aTS_=
                [0,caml_call2(_je_,caml_call2(_u$_[1],self,then),_aTR_),_aTQ_],
               _aTT_=function(if$1){return if$0(if$1,then,else$0)},
               _aTU_=
                [0,caml_call2(_je_,caml_call2(_u$_[1],self,if$1),_aTT_),_aTS_],
               _aTV_=[0,caml_call1(_kd_,else$0),_aTU_],
               _aTW_=[0,caml_call1(_kd_,then),_aTV_];
              return caml_call1(_jL_,[0,caml_call1(_kd_,if$1),_aTW_]);
             default:
              var a=t[1];
              return caml_call2(_je_,caml_call2(_u$_[1],a_shrinker,a),base)}}
        return caml_call1(_u$_[2],_aTM_)}
      return caml_call1(_u$_[17],_aTL_)}
    function quickcheck_observer$11(a_observer)
     {function _aTK_(t,size,hash)
       {return hash_fold_t$40
                (function(hash,a)
                  {return caml_call4(_va_[2],a_observer,a,size,hash)},
                 hash,
                 t)}
      return caml_call1(Base_quickcheck_Observer[27],_aTK_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$412);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Blang=
      [0,
       bin_shape_t$105,
       bin_size_t$69,
       bin_write_t$70,
       bin_read_t$139,
       bin_read_t$138,
       bin_writer_t$93,
       bin_reader_t$93,
       bin_t$93,
       compare$72,
       hash_fold_t$40,
       t_of_sexp$84,
       sexp_of_t$93,
       base,
       acc,
       acc$0,
       constant,
       not,
       and,
       or,
       if$0,
       [0,
        base,
        acc,
        acc$0,
        constant,
        not,
        and,
        or,
        if$0,
        andalso,
        orelse,
        symbol$211,
        not],
       constant_value,
       gather_conjuncts,
       gather_disjuncts,
       mem$11,
       length$18,
       is_empty$13,
       iter$18,
       fold$13,
       fold_result$5,
       fold_until$5,
       exists$11,
       for_all$10,
       count$10,
       sum$6,
       find$13,
       find_map$5,
       to_list$7,
       to_array$6,
       min_elt$10,
       max_elt$10,
       quickcheck_generator$13,
       quickcheck_observer$11,
       quickcheck_shrinker$12,
       _aka_,
       _akb_,
       _akc_,
       _akd_,
       _ake_,
       _akf_,
       _akg_,
       _akh_,
       _aki_,
       _akj_,
       _akk_,
       values,
       eval$0,
       eval_set,
       specialize,
       invariant$7,
       [0,
        [0,
         t_of_sexp$84,
         sexp_of_t$93,
         bin_shape_t$105,
         bin_size_t$69,
         bin_write_t$70,
         bin_read_t$139,
         bin_read_t$138,
         bin_writer_t$93,
         bin_reader_t$93,
         bin_t$93,
         compare$72,
         hash_fold_t$40]]];
    caml_register_global(4481,Core_kernel_Blang,"Core_kernel__Blang");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$413);
    caml_call1(Expect_test_collector[4][1],cst_src_bounded_index_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$414,cst$191);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$415);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Bounded_index_intf=[0];
    caml_register_global
     (4482,Core_kernel_Bounded_index_intf,"Core_kernel__Bounded_index_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$416);
    caml_call1(Expect_test_collector[4][1],cst_src_bounded_index_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$417,cst$192);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$418);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bounded_index=
      [0,
       function(M)
        {var
          _aTn_=M[1],
          _aTg_=
           caml_call1
            (Bin_prot_Shape[8],
             [0,
              [0,cst_index,__O_],
              [0,[0,cst_min_index,__O_],[0,[0,cst_max_index,__O_],0]]]),
          _aTh_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$208),0,_aTg_],0],
          _aTi_=caml_call1(Bin_prot_Shape[4][1],cst_src_bounded_index_ml_10_6),
          group=caml_call2(Bin_prot_Shape[6],_aTi_,_aTh_),
          _aTj_=caml_call1(Bin_prot_Shape[2][1],cst_t$209),
          bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_aTj_),0);
         function bin_size_t(param)
          {var
            v3=param[3],
            v2=param[2],
            v1=param[1],
            _aTH_=caml_call1(_ZE_,v1),
            size=caml_call2(Bin_prot_Common[23],0,_aTH_),
            _aTI_=caml_call1(_ZE_,v2),
            size$0=caml_call2(Bin_prot_Common[23],size,_aTI_),
            _aTJ_=caml_call1(_ZE_,v3);
           return caml_call2(Bin_prot_Common[23],size$0,_aTJ_)}
         function bin_write_t(buf,pos,param)
          {var
            v3=param[3],
            v2=param[2],
            v1=param[1],
            pos$0=caml_call3(__Q_,buf,pos,v1),
            pos$1=caml_call3(__Q_,buf,pos$0,v2);
           return caml_call3(__Q_,buf,pos$1,v3)}
         var bin_writer_t=[0,bin_size_t,bin_write_t];
         function bin_read_t(buf,pos_ref,vint)
          {return caml_call2
                   (Bin_prot_Common[19],
                    cst_src_bounded_index_ml_Stable_V1_Make_t,
                    pos_ref[1])}
         function bin_read_t$0(buf,pos_ref)
          {var
            v_index=caml_call2(__S_,buf,pos_ref),
            v_min_index=caml_call2(__S_,buf,pos_ref),
            v_max_index=caml_call2(__S_,buf,pos_ref);
           return [0,v_index,v_min_index,v_max_index]}
         var
          bin_reader_t=[0,bin_read_t$0,bin_read_t],
          bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
         function compare(a_001,b_002)
          {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
           var n=caml_call2(_x_,a_001[1],b_002[1]);
           if(0 === n)
            {var n$0=caml_call2(_x_,a_001[2],b_002[2]);
             return 0 === n$0?caml_call2(_x_,a_001[3],b_002[3]):n$0}
           return n}
         function hash_fold_t(hsv,arg)
          {var
            hsv$0=caml_call2(_aa4_,hsv,arg[1]),
            hsv$1=caml_call2(_aa4_,hsv$0,arg[2]);
           return caml_call2(_aa4_,hsv$1,arg[3])}
         function create(index,min,max)
          {if(! caml_call2(_aP_,index,min))
            if(! caml_call2(_aT_,index,max))return [0,index,min,max];
           var
            _aTE_=[0,[1,[0,_akl_,[0,caml_call1(_abD_,max),0]]],0],
            _aTF_=[0,[1,[0,_akm_,[0,caml_call1(_abD_,min),0]]],_aTE_],
            _aTG_=[0,[1,[0,_akn_,[0,caml_call1(_abD_,index),0]]],_aTF_];
           return caml_call1
                   (_on_,
                    [1,
                     [0,
                      caml_call1(Sexplib0_Sexp_conv[7],cst_index_out_of_bounds$0),
                      _aTG_]])}
         function t_of_sexp(sexp)
          {if(1 === sexp[0])
            {var _aTy_=sexp[1];
             if(_aTy_)
              {var _aTz_=_aTy_[2];
               if(_aTz_)
                {var _aTA_=_aTz_[2];
                 if(_aTA_)
                  {var _aTB_=_aTA_[2];
                   if(_aTB_)
                    {var _aTC_=_aTB_[2];
                     if(_aTC_)
                      {var _aTD_=_aTC_[2];
                       if(_aTD_)
                        if(! _aTD_[2])
                         {var
                           v5=_aTD_[1],
                           v4=_aTC_[1],
                           v3=_aTB_[1],
                           v2=_aTA_[1],
                           v1=_aTz_[1],
                           v0=_aTy_[1],
                           v0$0=caml_call1(_abo_,v0),
                           v1$0=caml_call1(_abC_,v1),
                           v2$0=caml_call1(_abo_,v2),
                           v3$0=caml_call1(_abC_,v3),
                           v4$0=caml_call1(_abo_,v4),
                           v5$0=caml_call1(_abC_,v5);
                          return [0,v0$0,v1$0,v2$0,v3$0,v4$0,v5$0]}}}}}}}
           return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$30,6,sexp)}
         function sexp_of_t(param)
          {var
            v5=param[6],
            v4=param[5],
            v3=param[4],
            v2=param[3],
            v1=param[2],
            v0=param[1],
            v0$0=caml_call1(_abp_,v0),
            v1$0=caml_call1(_abD_,v1),
            v2$0=caml_call1(_abp_,v2),
            v3$0=caml_call1(_abD_,v3),
            v4$0=caml_call1(_abp_,v4),
            v5$0=caml_call1(_abD_,v5);
           return [1,[0,v0$0,[0,v1$0,[0,v2$0,[0,v3$0,[0,v4$0,[0,v5$0,0]]]]]]]}
         var For_sexpable=[0,t_of_sexp,sexp_of_t];
         function to_sexpable(t)
          {return [0,_aTn_,t[1],cst_of,t[2],cst_to,t[3]]}
         function of_sexpable(param)
          {var
            max=param[6],
            to=param[5],
            min=param[4],
            of=param[3],
            index=param[2],
            label=param[1];
           if(caml_call2(equal$17,label,_aTn_))
            if(caml_call2(equal$17,of,cst_of$0))
             if(caml_call2(equal$17,to,cst_to$0))return create(index,min,max);
           var
            _aTx_=
             [0,[1,[0,_ako_,[0,caml_call1(Sexplib0_Sexp_conv[7],_aTn_),0]]],0];
           return caml_call1
                   (_on_,
                    [1,
                     [0,
                      caml_call1(Sexplib0_Sexp_conv[7],cst_invalid_sexp_for_index),
                      _aTx_]])}
         var
          include=
           caml_call1
            (caml_call1(Stable[1][1],For_sexpable),
             [0,to_sexpable,of_sexpable]),
          t_of_sexp$0=include[1],
          sexp_of_t$0=include[2],
          include$0=caml_call1(_hu_[1][2],[0,compare,sexp_of_t$0]),
          comparator=include$0[1],
          _aTk_=
           [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$210),0,bin_shape_t],0],
          _aTl_=
           caml_call1(Bin_prot_Shape[4][1],cst_src_bounded_index_ml_52_10),
          group$0=caml_call2(Bin_prot_Shape[6],_aTl_,_aTk_),
          _aTm_=caml_call1(Bin_prot_Shape[2][1],cst_t$211),
          bin_shape_t$0=
           caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_aTm_),0),
          bin_writer_t$0=[0,bin_size_t,bin_write_t],
          bin_reader_t$0=[0,bin_read_t$0,bin_read_t],
          bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0],
          include$1=
           caml_call1
            (Stable$2[1][1],
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t$0,
              bin_writer_t$0,
              bin_reader_t$0,
              bin_t$0,
              compare,
              t_of_sexp$0,
              sexp_of_t$0,
              comparator]),
          Map=include$1[1],
          Set=include$1[2],
          _aTo_=
           [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$212),0,bin_shape_t],0],
          _aTp_=caml_call1(Bin_prot_Shape[4][1],cst_src_bounded_index_ml_76_2),
          group$1=caml_call2(Bin_prot_Shape[6],_aTp_,_aTo_),
          _aTq_=caml_call1(Bin_prot_Shape[2][1],cst_t$213),
          bin_shape_t$1=
           caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_aTq_),0);
         function create_all(min,max)
          {return caml_call1
                   (_i2_,
                    caml_call2
                     (_jn_,
                      min,
                      function(index)
                       {if(! caml_call2(_Nt_,index,min))
                         if(! caml_call2(_Ns_,index,max))
                          return [0,[0,create(index,min,max),index + 1 | 0]];
                        return 0}))}
         function index(t){return t[1]}
         function max_index(t){return t[3]}
         function min_index(t){return t[2]}
         var
          include$2=caml_call1(_fx_,[0,t_of_sexp$0,sexp_of_t$0]),
          _aTr_=include$2[1],
          _aTs_=include$2[2],
          _aTt_=
           [0,
            [0,caml_call1(Bin_prot_Shape[2][1],cst_t$214),0,bin_shape_t$1],
            0],
          _aTu_=caml_call1(Bin_prot_Shape[4][1],cst_src_bounded_index_ml_98_6),
          group$2=caml_call2(Bin_prot_Shape[6],_aTu_,_aTt_),
          _aTv_=caml_call1(Bin_prot_Shape[2][1],cst_t$215),
          bin_shape_t$2=
           caml_call1(caml_call2(Bin_prot_Shape[14],group$2,_aTv_),0),
          bin_writer_t$1=[0,bin_size_t,bin_write_t],
          bin_reader_t$1=[0,bin_read_t$0,bin_read_t],
          bin_t$1=[0,bin_shape_t$2,bin_writer_t$1,bin_reader_t$1];
         function hash(x)
          {var hsv=caml_call2(Base_Hash[11],0,0),_aTw_=hash_fold_t(hsv,x);
           return caml_call1(Base_Hash[9],_aTw_)}
         var
          module_name=M[2],
          include$3=
           _A4_
            ([0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t$2,
              bin_writer_t$1,
              bin_reader_t$1,
              bin_t$1,
              compare,
              hash_fold_t,
              hash,
              t_of_sexp$0,
              sexp_of_t$0,
              comparator,
              _aTr_,
              _aTs_,
              module_name]),
          bin_size_t$0=include$3[1],
          bin_write_t$0=include$3[2],
          bin_read_t$1=include$3[3],
          bin_read_t$2=include$3[4],
          bin_shape_t$3=include$3[5],
          bin_writer_t$2=include$3[6],
          bin_reader_t$2=include$3[7],
          bin_t$2=include$3[8],
          t_of_sexp$1=include$3[9],
          sexp_of_t$1=include$3[10],
          of_string=include$3[11],
          to_string=include$3[12],
          pp=include$3[13],
          symbol=include$3[14],
          symbol$0=include$3[15],
          symbol$1=include$3[16],
          symbol$2=include$3[17],
          symbol$3=include$3[18],
          symbol$4=include$3[19],
          equal=include$3[20],
          compare$0=include$3[21],
          min=include$3[22],
          max=include$3[23],
          ascending=include$3[24],
          descending=include$3[25],
          between=include$3[26],
          clamp_exn=include$3[27],
          clamp=include$3[28],
          validate_lbound=include$3[29],
          validate_ubound=include$3[30],
          validate_bound=include$3[31],
          Replace_polymorphic_compare=include$3[32],
          comparator$0=include$3[33],
          Map$0=include$3[34],
          Set$0=include$3[35],
          hash_fold_t$0=include$3[36],
          hash$0=include$3[37],
          hashable=include$3[38],
          Table=include$3[39],
          Hash_set=include$3[40],
          Hash_queue=include$3[41];
         return [0,
                 bin_size_t$0,
                 bin_write_t$0,
                 bin_read_t$1,
                 bin_read_t$2,
                 bin_shape_t$3,
                 bin_writer_t$2,
                 bin_reader_t$2,
                 bin_t$2,
                 t_of_sexp$1,
                 sexp_of_t$1,
                 of_string,
                 to_string,
                 pp,
                 symbol,
                 symbol$0,
                 symbol$1,
                 symbol$2,
                 symbol$3,
                 symbol$4,
                 equal,
                 compare$0,
                 min,
                 max,
                 ascending,
                 descending,
                 between,
                 clamp_exn,
                 clamp,
                 validate_lbound,
                 validate_ubound,
                 validate_bound,
                 Replace_polymorphic_compare,
                 comparator$0,
                 Map$0,
                 Set$0,
                 hash_fold_t$0,
                 hash$0,
                 hashable,
                 Table,
                 Hash_set,
                 Hash_queue,
                 create,
                 create_all,
                 index,
                 min_index,
                 max_index,
                 [0,
                  [0,
                   bin_size_t,
                   bin_write_t,
                   bin_read_t$0,
                   bin_read_t,
                   bin_shape_t,
                   bin_writer_t,
                   bin_reader_t,
                   bin_t,
                   compare,
                   t_of_sexp$0,
                   sexp_of_t$0,
                   comparator,
                   Map,
                   Set]]]}];
    caml_register_global
     (4483,Core_kernel_Bounded_index,"Core_kernel__Bounded_index");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$419);
    caml_call1(Expect_test_collector[4][1],cst_src_heap_block_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$420,cst$193);
    function sexp_of_t$94(of_a,v){return caml_call1(of_a,v)}
    function create$30(v)
     {return runtime.Core_kernel_heap_block_is_heap_block(v)?[0,v]:0}
    function create_exn$0(v)
     {return runtime.Core_kernel_heap_block_is_heap_block(v)
              ?v
              :caml_call1
                (_a__,cst_Heap_block_create_exn_called_with_non_heap_block)}
    function value$2(t){return t}
    var
     bytes_per_word=
      caml_call2(_az_,caml_call1(Base_Word_size[2],Base_Word_size[3]),8);
    function bytes$1(t)
     {return caml_call2(_ay_,caml_call2(_aw_,t.length - 1,1),bytes_per_word)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$421);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Heap_block=
      [0,sexp_of_t$94,create$30,create_exn$0,value$2,bytes$1];
    caml_register_global
     (4484,Core_kernel_Heap_block,"Core_kernel__Heap_block");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$422);
    caml_call1(Expect_test_collector[4][1],cst_src_gc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$423,cst$194);
    var
     _akq_=caml_call1(Bin_prot_Shape[9],_akp_),
     _akr_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$216),0,_akq_],0],
     _aks_=caml_call1(Bin_prot_Shape[4][1],cst_src_gc_ml_6_6),
     group$122=caml_call2(Bin_prot_Shape[6],_aks_,_akr_),
     _akt_=caml_call1(Bin_prot_Shape[2][1],cst_t$217),
     bin_shape_t$106=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$122,_akt_),0);
    function bin_size_t$70(param){return 1}
    function bin_write_t$71(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,2)}}
    var bin_writer_t$94=[0,bin_size_t$70,bin_write_t$71];
    function bin_read_t$140(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_gc_ml_Stable_Allocation_policy_V1_t,
               pos_ref[1])}
    function bin_read_t$141(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_aku_,pos_ref[1]);
      switch(match){case 0:return 0;case 1:return 1;default:return 2}}
    var
     bin_reader_t$94=[0,bin_read_t$141,bin_read_t$140],
     bin_t$94=[0,bin_shape_t$106,bin_writer_t$94,bin_reader_t$94],
     compare$73=caml_int_compare;
    function equal$35(_aTf_,_aTe_){return _aTf_ === _aTe_?1:0}
    function hash_fold_t$41(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        default:return caml_call2(Base_Hash[3],hsv,2)}}
    function hash$47(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_aTd_=hash_fold_t$41(hsv,x);
      return caml_call1(Base_Hash[9],_aTd_)}
    function t_of_sexp$85(sexp)
     {if(0 === sexp[0])
       {var _aS$_=sexp[1];
        if(caml_string_notequal(_aS$_,cst_Best_fit))
         {if(caml_string_notequal(_aS$_,cst_First_fit))
           {if(caml_string_notequal(_aS$_,cst_Next_fit))
             if(caml_string_notequal(_aS$_,cst_best_fit))
              if(caml_string_notequal(_aS$_,cst_first_fit))
               if(caml_string_notequal(_aS$_,cst_next_fit))
                var switch$0=1,switch$1=0,switch$2=0;
               else
                var switch$2=1;
              else
               var switch$1=1,switch$2=0;
             else
              var switch$0=0,switch$1=0,switch$2=0;
            else
             var switch$2=1;
            if(switch$2)return 0}
          else
           var switch$1=1;
          if(switch$1)return 1}
        else
         var switch$0=0;
        if(! switch$0)return 2}
      else
       {var _aTa_=sexp[1];
        if(! _aTa_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$31,sexp);
        var _aTb_=_aTa_[1];
        if(0 !== _aTb_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$31,sexp);
        var _aTc_=_aTb_[1];
        if(caml_string_notequal(_aTc_,cst_Best_fit$0))
         {if(caml_string_notequal(_aTc_,cst_First_fit$0))
           {if(caml_string_notequal(_aTc_,cst_Next_fit$0))
             if(caml_string_notequal(_aTc_,cst_best_fit$0))
              if(caml_string_notequal(_aTc_,cst_first_fit$0))
               if(caml_string_notequal(_aTc_,cst_next_fit$0))
                var switch$3=1,switch$4=0,switch$5=0;
               else
                var switch$5=1;
              else
               var switch$4=1,switch$5=0;
             else
              var switch$3=0,switch$4=0,switch$5=0;
            else
             var switch$5=1;
            if(switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$31,sexp)}
          else
           var switch$4=1;
          if(switch$4)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$31,sexp)}
        else
         var switch$3=0;
        if(! switch$3)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$31,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$31,sexp)}
    function sexp_of_t$95(param)
     {switch(param)
       {case 0:return _akv_;case 1:return _akw_;default:return _akx_}}
    var
     print_stat=include$130[1],
     allocated_bytes=include$130[2],
     create_alarm=include$130[6],
     delete_alarm=include$130[7];
    function compare$74(a_005,b_006)
     {if(caml_call2(Ppx_compare_lib[1],a_005,b_006))return 0;
      var n=caml_call2(_r_,a_005[1],b_006[1]);
      if(0 === n)
       {var n$0=caml_call2(_r_,a_005[2],b_006[2]);
        if(0 === n$0)
         {var n$1=caml_call2(_r_,a_005[3],b_006[3]);
          if(0 === n$1)
           {var n$2=caml_call2(_x_,a_005[4],b_006[4]);
            if(0 === n$2)
             {var n$3=caml_call2(_x_,a_005[5],b_006[5]);
              if(0 === n$3)
               {var n$4=caml_call2(_x_,a_005[6],b_006[6]);
                if(0 === n$4)
                 {var n$5=caml_call2(_x_,a_005[7],b_006[7]);
                  if(0 === n$5)
                   {var n$6=caml_call2(_x_,a_005[8],b_006[8]);
                    if(0 === n$6)
                     {var n$7=caml_call2(_x_,a_005[9],b_006[9]);
                      if(0 === n$7)
                       {var n$8=caml_call2(_x_,a_005[10],b_006[10]);
                        if(0 === n$8)
                         {var n$9=caml_call2(_x_,a_005[11],b_006[11]);
                          if(0 === n$9)
                           {var n$10=caml_call2(_x_,a_005[12],b_006[12]);
                            if(0 === n$10)
                             {var n$11=caml_call2(_x_,a_005[13],b_006[13]);
                              if(0 === n$11)
                               {var n$12=caml_call2(_x_,a_005[14],b_006[14]);
                                if(0 === n$12)
                                 {var n$13=caml_call2(_x_,a_005[15],b_006[15]);
                                  return 0 === n$13?caml_call2(_x_,a_005[16],b_006[16]):n$13}
                                return n$12}
                              return n$11}
                            return n$10}
                          return n$9}
                        return n$8}
                      return n$7}
                    return n$6}
                  return n$5}
                return n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    var
     _aky_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_minor_words,_cu_],
         [0,
          [0,cst_promoted_words,_cu_],
          [0,
           [0,cst_major_words,_cu_],
           [0,
            [0,cst_minor_collections,_cq_],
            [0,
             [0,cst_major_collections,_cq_],
             [0,
              [0,cst_heap_words,_cq_],
              [0,
               [0,cst_heap_chunks,_cq_],
               [0,
                [0,cst_live_words,_cq_],
                [0,
                 [0,cst_live_blocks,_cq_],
                 [0,
                  [0,cst_free_words,_cq_],
                  [0,
                   [0,cst_free_blocks,_cq_],
                   [0,
                    [0,cst_largest_free,_cq_],
                    [0,
                     [0,cst_fragments,_cq_],
                     [0,
                      [0,cst_compactions,_cq_],
                      [0,
                       [0,cst_top_heap_words,_cq_],
                       [0,[0,cst_stack_size,_cq_],0]]]]]]]]]]]]]]]]),
     _akz_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$218),0,_aky_],0],
     _akA_=caml_call1(Bin_prot_Shape[4][1],cst_src_gc_ml_19_4),
     group$123=caml_call2(Bin_prot_Shape[6],_akA_,_akz_),
     _akB_=caml_call1(Bin_prot_Shape[2][1],cst_t$219),
     bin_shape_t$107=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$123,_akB_),0);
    function bin_size_t$71(param)
     {var
       v16=param[16],
       v15=param[15],
       v14=param[14],
       v13=param[13],
       v12=param[12],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       v7=param[7],
       v6=param[6],
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aSV_=caml_call1(bin_size_t$2,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aSV_),
       _aSW_=caml_call1(bin_size_t$2,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aSW_),
       _aSX_=caml_call1(bin_size_t$2,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_aSX_),
       _aSY_=caml_call1(bin_size_t$1,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_aSY_),
       _aSZ_=caml_call1(bin_size_t$1,v5),
       size$3=caml_call2(Bin_prot_Common[23],size$2,_aSZ_),
       _aS0_=caml_call1(bin_size_t$1,v6),
       size$4=caml_call2(Bin_prot_Common[23],size$3,_aS0_),
       _aS1_=caml_call1(bin_size_t$1,v7),
       size$5=caml_call2(Bin_prot_Common[23],size$4,_aS1_),
       _aS2_=caml_call1(bin_size_t$1,v8),
       size$6=caml_call2(Bin_prot_Common[23],size$5,_aS2_),
       _aS3_=caml_call1(bin_size_t$1,v9),
       size$7=caml_call2(Bin_prot_Common[23],size$6,_aS3_),
       _aS4_=caml_call1(bin_size_t$1,v10),
       size$8=caml_call2(Bin_prot_Common[23],size$7,_aS4_),
       _aS5_=caml_call1(bin_size_t$1,v11),
       size$9=caml_call2(Bin_prot_Common[23],size$8,_aS5_),
       _aS6_=caml_call1(bin_size_t$1,v12),
       size$10=caml_call2(Bin_prot_Common[23],size$9,_aS6_),
       _aS7_=caml_call1(bin_size_t$1,v13),
       size$11=caml_call2(Bin_prot_Common[23],size$10,_aS7_),
       _aS8_=caml_call1(bin_size_t$1,v14),
       size$12=caml_call2(Bin_prot_Common[23],size$11,_aS8_),
       _aS9_=caml_call1(bin_size_t$1,v15),
       size$13=caml_call2(Bin_prot_Common[23],size$12,_aS9_),
       _aS__=caml_call1(bin_size_t$1,v16);
      return caml_call2(Bin_prot_Common[23],size$13,_aS__)}
    function bin_write_t$72(buf,pos,param)
     {var
       v16=param[16],
       v15=param[15],
       v14=param[14],
       v13=param[13],
       v12=param[12],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       v7=param[7],
       v6=param[6],
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$2,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$2,buf,pos$0,v2),
       pos$2=caml_call3(bin_write_t$2,buf,pos$1,v3),
       pos$3=caml_call3(bin_write_t$1,buf,pos$2,v4),
       pos$4=caml_call3(bin_write_t$1,buf,pos$3,v5),
       pos$5=caml_call3(bin_write_t$1,buf,pos$4,v6),
       pos$6=caml_call3(bin_write_t$1,buf,pos$5,v7),
       pos$7=caml_call3(bin_write_t$1,buf,pos$6,v8),
       pos$8=caml_call3(bin_write_t$1,buf,pos$7,v9),
       pos$9=caml_call3(bin_write_t$1,buf,pos$8,v10),
       pos$10=caml_call3(bin_write_t$1,buf,pos$9,v11),
       pos$11=caml_call3(bin_write_t$1,buf,pos$10,v12),
       pos$12=caml_call3(bin_write_t$1,buf,pos$11,v13),
       pos$13=caml_call3(bin_write_t$1,buf,pos$12,v14),
       pos$14=caml_call3(bin_write_t$1,buf,pos$13,v15);
      return caml_call3(bin_write_t$1,buf,pos$14,v16)}
    var bin_writer_t$95=[0,bin_size_t$71,bin_write_t$72];
    function bin_read_t$142(buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[19],cst_src_gc_ml_Stat_T_t,pos_ref[1])}
    function bin_read_t$143(buf,pos_ref)
     {var
       v_minor_words=caml_call2(bin_read_t$5,buf,pos_ref),
       v_promoted_words=caml_call2(bin_read_t$5,buf,pos_ref),
       v_major_words=caml_call2(bin_read_t$5,buf,pos_ref),
       v_minor_collections=caml_call2(bin_read_t$3,buf,pos_ref),
       v_major_collections=caml_call2(bin_read_t$3,buf,pos_ref),
       v_heap_words=caml_call2(bin_read_t$3,buf,pos_ref),
       v_heap_chunks=caml_call2(bin_read_t$3,buf,pos_ref),
       v_live_words=caml_call2(bin_read_t$3,buf,pos_ref),
       v_live_blocks=caml_call2(bin_read_t$3,buf,pos_ref),
       v_free_words=caml_call2(bin_read_t$3,buf,pos_ref),
       v_free_blocks=caml_call2(bin_read_t$3,buf,pos_ref),
       v_largest_free=caml_call2(bin_read_t$3,buf,pos_ref),
       v_fragments=caml_call2(bin_read_t$3,buf,pos_ref),
       v_compactions=caml_call2(bin_read_t$3,buf,pos_ref),
       v_top_heap_words=caml_call2(bin_read_t$3,buf,pos_ref),
       v_stack_size=caml_call2(bin_read_t$3,buf,pos_ref);
      return [0,
              v_minor_words,
              v_promoted_words,
              v_major_words,
              v_minor_collections,
              v_major_collections,
              v_heap_words,
              v_heap_chunks,
              v_live_words,
              v_live_blocks,
              v_free_words,
              v_free_blocks,
              v_largest_free,
              v_fragments,
              v_compactions,
              v_top_heap_words,
              v_stack_size]}
    var
     bin_reader_t$95=[0,bin_read_t$143,bin_read_t$142],
     bin_t$95=[0,bin_shape_t$107,bin_writer_t$95,bin_reader_t$95];
    function t_of_sexp$86(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$32,sexp);
      var
       field_sexps=sexp[1],
       minor_words_field=[0,0],
       promoted_words_field=[0,0],
       major_words_field=[0,0],
       minor_collections_field=[0,0],
       major_collections_field=[0,0],
       heap_words_field=[0,0],
       heap_chunks_field=[0,0],
       live_words_field=[0,0],
       live_blocks_field=[0,0],
       free_words_field=[0,0],
       free_blocks_field=[0,0],
       largest_free_field=[0,0],
       fragments_field=[0,0],
       compactions_field=[0,0],
       top_heap_words_field=[0,0],
       stack_size_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aSA_=param[1];
          if(1 === _aSA_[0])
           {var _aSB_=_aSA_[1];
            if(_aSB_)
             {var _aSC_=_aSB_[1];
              if(0 === _aSC_[0])
               {var _aSD_=_aSB_[2],_aSE_=_aSC_[1];
                if(! _aSD_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aSE_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _aSD_[2])
                 {var
                   tail=param[2],
                   field_sexp=_aSD_[1],
                   switch$0=caml_string_compare(_aSE_,cst_live_words$0);
                  if(0 <= switch$0)
                   if(0 < switch$0)
                    if(caml_string_notequal(_aSE_,cst_major_collections$0))
                     if(caml_string_notequal(_aSE_,cst_major_words$0))
                      if(caml_string_notequal(_aSE_,cst_minor_collections$0))
                       if(caml_string_notequal(_aSE_,cst_minor_words$0))
                        if(caml_string_notequal(_aSE_,cst_promoted_words$0))
                         if(caml_string_notequal(_aSE_,cst_stack_size$0))
                          if(caml_string_notequal(_aSE_,cst_top_heap_words$0))
                           var switch$1=1;
                          else
                           {if(top_heap_words_field[1])
                             duplicates[1] = [0,_aSE_,duplicates[1]];
                            else
                             {var fvalue=caml_call1(t_of_sexp,field_sexp);
                              top_heap_words_field[1] = [0,fvalue]}
                            var switch$1=0}
                         else
                          {if(stack_size_field[1])
                            duplicates[1] = [0,_aSE_,duplicates[1]];
                           else
                            {var fvalue$0=caml_call1(t_of_sexp,field_sexp);
                             stack_size_field[1] = [0,fvalue$0]}
                           var switch$1=0}
                        else
                         {if(promoted_words_field[1])
                           duplicates[1] = [0,_aSE_,duplicates[1]];
                          else
                           {var fvalue$1=caml_call1(_v_,field_sexp);
                            promoted_words_field[1] = [0,fvalue$1]}
                          var switch$1=0}
                       else
                        {if(minor_words_field[1])
                          duplicates[1] = [0,_aSE_,duplicates[1]];
                         else
                          {var fvalue$2=caml_call1(_v_,field_sexp);
                           minor_words_field[1] = [0,fvalue$2]}
                         var switch$1=0}
                      else
                       {if(minor_collections_field[1])
                         duplicates[1] = [0,_aSE_,duplicates[1]];
                        else
                         {var fvalue$3=caml_call1(t_of_sexp,field_sexp);
                          minor_collections_field[1] = [0,fvalue$3]}
                        var switch$1=0}
                     else
                      {if(major_words_field[1])
                        duplicates[1] = [0,_aSE_,duplicates[1]];
                       else
                        {var fvalue$4=caml_call1(_v_,field_sexp);
                         major_words_field[1] = [0,fvalue$4]}
                       var switch$1=0}
                    else
                     {if(major_collections_field[1])
                       duplicates[1] = [0,_aSE_,duplicates[1]];
                      else
                       {var fvalue$5=caml_call1(t_of_sexp,field_sexp);
                        major_collections_field[1] = [0,fvalue$5]}
                      var switch$1=0}
                   else
                    {if(live_words_field[1])
                      duplicates[1] = [0,_aSE_,duplicates[1]];
                     else
                      {var fvalue$6=caml_call1(t_of_sexp,field_sexp);
                       live_words_field[1] = [0,fvalue$6]}
                     var switch$1=0}
                  else
                   if(caml_string_notequal(_aSE_,cst_compactions$0))
                    if(caml_string_notequal(_aSE_,cst_fragments$0))
                     if(caml_string_notequal(_aSE_,cst_free_blocks$0))
                      if(caml_string_notequal(_aSE_,cst_free_words$0))
                       if(caml_string_notequal(_aSE_,cst_heap_chunks$0))
                        if(caml_string_notequal(_aSE_,cst_heap_words$0))
                         if(caml_string_notequal(_aSE_,cst_largest_free$0))
                          if(caml_string_notequal(_aSE_,cst_live_blocks$0))
                           var switch$1=1;
                          else
                           {if(live_blocks_field[1])
                             duplicates[1] = [0,_aSE_,duplicates[1]];
                            else
                             {var fvalue$7=caml_call1(t_of_sexp,field_sexp);
                              live_blocks_field[1] = [0,fvalue$7]}
                            var switch$1=0}
                         else
                          {if(largest_free_field[1])
                            duplicates[1] = [0,_aSE_,duplicates[1]];
                           else
                            {var fvalue$8=caml_call1(t_of_sexp,field_sexp);
                             largest_free_field[1] = [0,fvalue$8]}
                           var switch$1=0}
                        else
                         {if(heap_words_field[1])
                           duplicates[1] = [0,_aSE_,duplicates[1]];
                          else
                           {var fvalue$9=caml_call1(t_of_sexp,field_sexp);
                            heap_words_field[1] = [0,fvalue$9]}
                          var switch$1=0}
                       else
                        {if(heap_chunks_field[1])
                          duplicates[1] = [0,_aSE_,duplicates[1]];
                         else
                          {var fvalue$10=caml_call1(t_of_sexp,field_sexp);
                           heap_chunks_field[1] = [0,fvalue$10]}
                         var switch$1=0}
                      else
                       {if(free_words_field[1])
                         duplicates[1] = [0,_aSE_,duplicates[1]];
                        else
                         {var fvalue$11=caml_call1(t_of_sexp,field_sexp);
                          free_words_field[1] = [0,fvalue$11]}
                        var switch$1=0}
                     else
                      {if(free_blocks_field[1])
                        duplicates[1] = [0,_aSE_,duplicates[1]];
                       else
                        {var fvalue$12=caml_call1(t_of_sexp,field_sexp);
                         free_blocks_field[1] = [0,fvalue$12]}
                       var switch$1=0}
                    else
                     {if(fragments_field[1])
                       duplicates[1] = [0,_aSE_,duplicates[1]];
                      else
                       {var fvalue$13=caml_call1(t_of_sexp,field_sexp);
                        fragments_field[1] = [0,fvalue$13]}
                      var switch$1=0}
                   else
                    {if(compactions_field[1])
                      duplicates[1] = [0,_aSE_,duplicates[1]];
                     else
                      {var fvalue$14=caml_call1(t_of_sexp,field_sexp);
                       compactions_field[1] = [0,fvalue$14]}
                     var switch$1=0}
                  if(switch$1)
                   if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aSE_,extra[1]];
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$32,_aSA_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$32,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$32,extra[1],sexp);
        var
         _aSF_=minor_words_field[1],
         _aSG_=promoted_words_field[1],
         _aSH_=major_words_field[1],
         _aSI_=minor_collections_field[1],
         _aSJ_=major_collections_field[1],
         _aSK_=heap_words_field[1],
         _aSL_=heap_chunks_field[1],
         _aSM_=live_words_field[1],
         _aSN_=live_blocks_field[1],
         _aSO_=free_words_field[1],
         _aSP_=free_blocks_field[1],
         _aSQ_=largest_free_field[1],
         _aSR_=fragments_field[1],
         _aSS_=compactions_field[1],
         _aST_=top_heap_words_field[1],
         _aSU_=stack_size_field[1];
        if(_aSF_)
         if(_aSG_)
          if(_aSH_)
           if(_aSI_)
            if(_aSJ_)
             if(_aSK_)
              if(_aSL_)
               if(_aSM_)
                if(_aSN_)
                 if(_aSO_)
                  if(_aSP_)
                   if(_aSQ_)
                    if(_aSR_)
                     if(_aSS_)
                      if(_aST_)
                       if(_aSU_)
                        {var
                          stack_size_value=_aSU_[1],
                          top_heap_words_value=_aST_[1],
                          compactions_value=_aSS_[1],
                          fragments_value=_aSR_[1],
                          largest_free_value=_aSQ_[1],
                          free_blocks_value=_aSP_[1],
                          free_words_value=_aSO_[1],
                          live_blocks_value=_aSN_[1],
                          live_words_value=_aSM_[1],
                          heap_chunks_value=_aSL_[1],
                          heap_words_value=_aSK_[1],
                          major_collections_value=_aSJ_[1],
                          minor_collections_value=_aSI_[1],
                          major_words_value=_aSH_[1],
                          promoted_words_value=_aSG_[1],
                          minor_words_value=_aSF_[1];
                         return [0,
                                 minor_words_value,
                                 promoted_words_value,
                                 major_words_value,
                                 minor_collections_value,
                                 major_collections_value,
                                 heap_words_value,
                                 heap_chunks_value,
                                 live_words_value,
                                 live_blocks_value,
                                 free_words_value,
                                 free_blocks_value,
                                 largest_free_value,
                                 fragments_value,
                                 compactions_value,
                                 top_heap_words_value,
                                 stack_size_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$32,
                 sexp,
                 [0,
                  [0,0 === minor_words_field[1]?1:0,cst_minor_words$1],
                  [0,
                   [0,0 === promoted_words_field[1]?1:0,cst_promoted_words$1],
                   [0,
                    [0,0 === major_words_field[1]?1:0,cst_major_words$1],
                    [0,
                     [0,
                      0 === minor_collections_field[1]?1:0,
                      cst_minor_collections$1],
                     [0,
                      [0,
                       0 === major_collections_field[1]?1:0,
                       cst_major_collections$1],
                      [0,
                       [0,0 === heap_words_field[1]?1:0,cst_heap_words$1],
                       [0,
                        [0,0 === heap_chunks_field[1]?1:0,cst_heap_chunks$1],
                        [0,
                         [0,0 === live_words_field[1]?1:0,cst_live_words$1],
                         [0,
                          [0,0 === live_blocks_field[1]?1:0,cst_live_blocks$1],
                          [0,
                           [0,0 === free_words_field[1]?1:0,cst_free_words$1],
                           [0,
                            [0,0 === free_blocks_field[1]?1:0,cst_free_blocks$1],
                            [0,
                             [0,0 === largest_free_field[1]?1:0,cst_largest_free$1],
                             [0,
                              [0,0 === fragments_field[1]?1:0,cst_fragments$1],
                              [0,
                               [0,0 === compactions_field[1]?1:0,cst_compactions$1],
                               [0,
                                [0,0 === top_heap_words_field[1]?1:0,cst_top_heap_words$1],
                                [0,[0,0 === stack_size_field[1]?1:0,cst_stack_size$1],0]]]]]]]]]]]]]]]])}}
    function sexp_of_t$96(param)
     {var
       v_stack_size=param[16],
       v_top_heap_words=param[15],
       v_compactions=param[14],
       v_fragments=param[13],
       v_largest_free=param[12],
       v_free_blocks=param[11],
       v_free_words=param[10],
       v_live_blocks=param[9],
       v_live_words=param[8],
       v_heap_chunks=param[7],
       v_heap_words=param[6],
       v_major_collections=param[5],
       v_minor_collections=param[4],
       v_major_words=param[3],
       v_promoted_words=param[2],
       v_minor_words=param[1],
       arg=caml_call1(sexp_of_t$0,v_stack_size),
       bnds=[0,[1,[0,_akC_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$0,v_top_heap_words),
       bnds$0=[0,[1,[0,_akD_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$0,v_compactions),
       bnds$1=[0,[1,[0,_akE_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$0,v_fragments),
       bnds$2=[0,[1,[0,_akF_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(sexp_of_t$0,v_largest_free),
       bnds$3=[0,[1,[0,_akG_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$0,v_free_blocks),
       bnds$4=[0,[1,[0,_akH_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(sexp_of_t$0,v_free_words),
       bnds$5=[0,[1,[0,_akI_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call1(sexp_of_t$0,v_live_blocks),
       bnds$6=[0,[1,[0,_akJ_,[0,arg$6,0]]],bnds$5],
       arg$7=caml_call1(sexp_of_t$0,v_live_words),
       bnds$7=[0,[1,[0,_akK_,[0,arg$7,0]]],bnds$6],
       arg$8=caml_call1(sexp_of_t$0,v_heap_chunks),
       bnds$8=[0,[1,[0,_akL_,[0,arg$8,0]]],bnds$7],
       arg$9=caml_call1(sexp_of_t$0,v_heap_words),
       bnds$9=[0,[1,[0,_akM_,[0,arg$9,0]]],bnds$8],
       arg$10=caml_call1(sexp_of_t$0,v_major_collections),
       bnds$10=[0,[1,[0,_akN_,[0,arg$10,0]]],bnds$9],
       arg$11=caml_call1(sexp_of_t$0,v_minor_collections),
       bnds$11=[0,[1,[0,_akO_,[0,arg$11,0]]],bnds$10],
       arg$12=caml_call1(_w_,v_major_words),
       bnds$12=[0,[1,[0,_akP_,[0,arg$12,0]]],bnds$11],
       arg$13=caml_call1(_w_,v_promoted_words),
       bnds$13=[0,[1,[0,_akQ_,[0,arg$13,0]]],bnds$12],
       arg$14=caml_call1(_w_,v_minor_words),
       bnds$14=[0,[1,[0,_akR_,[0,arg$14,0]]],bnds$13];
      return [1,bnds$14]}
    function stack_size(r){return r[16]}
    function top_heap_words(r){return r[15]}
    function compactions(r){return r[14]}
    function fragments(r){return r[13]}
    function largest_free(r){return r[12]}
    function free_blocks(r){return r[11]}
    function free_words(r){return r[10]}
    function live_blocks(r){return r[9]}
    function live_words(r){return r[8]}
    function heap_chunks(r){return r[7]}
    function heap_words(r){return r[6]}
    function major_collections(r){return r[5]}
    function minor_collections(r){return r[4]}
    function major_words(r){return r[3]}
    function promoted_words(r){return r[2]}
    function minor_words(r){return r[1]}
    function _akS_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              v]}
    var
     _akT_=0,
     stack_size$0=
      [0,function(param){return 0},cst_stack_size$2,_akT_,stack_size,_akS_];
    function _akU_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              v,
              r[16]]}
    var
     _akV_=0,
     top_heap_words$0=
      [0,
       function(param){return 0},
       cst_top_heap_words$2,
       _akV_,
       top_heap_words,
       _akU_];
    function _akW_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              v,
              r[15],
              r[16]]}
    var
     _akX_=0,
     compactions$0=
      [0,function(param){return 0},cst_compactions$2,_akX_,compactions,_akW_];
    function _akY_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              v,
              r[14],
              r[15],
              r[16]]}
    var
     _akZ_=0,
     fragments$0=
      [0,function(param){return 0},cst_fragments$2,_akZ_,fragments,_akY_];
    function _ak0_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              v,
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _ak1_=0,
     largest_free$0=
      [0,
       function(param){return 0},
       cst_largest_free$2,
       _ak1_,
       largest_free,
       _ak0_];
    function _ak2_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              v,
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _ak3_=0,
     free_blocks$0=
      [0,function(param){return 0},cst_free_blocks$2,_ak3_,free_blocks,_ak2_];
    function _ak4_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              v,
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _ak5_=0,
     free_words$0=
      [0,function(param){return 0},cst_free_words$2,_ak5_,free_words,_ak4_];
    function _ak6_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              v,
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _ak7_=0,
     live_blocks$0=
      [0,function(param){return 0},cst_live_blocks$2,_ak7_,live_blocks,_ak6_];
    function _ak8_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              v,
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _ak9_=0,
     live_words$0=
      [0,function(param){return 0},cst_live_words$2,_ak9_,live_words,_ak8_];
    function _ak__(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              v,
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _ak$_=0,
     heap_chunks$0=
      [0,function(param){return 0},cst_heap_chunks$2,_ak$_,heap_chunks,_ak__];
    function _ala_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              v,
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _alb_=0,
     heap_words$0=
      [0,function(param){return 0},cst_heap_words$2,_alb_,heap_words,_ala_];
    function _alc_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              v,
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _ald_=0,
     major_collections$0=
      [0,
       function(param){return 0},
       cst_major_collections$2,
       _ald_,
       major_collections,
       _alc_];
    function _ale_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              v,
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _alf_=0,
     minor_collections$0=
      [0,
       function(param){return 0},
       cst_minor_collections$2,
       _alf_,
       minor_collections,
       _ale_];
    function _alg_(r,v)
     {return [0,
              r[1],
              r[2],
              v,
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _alh_=0,
     major_words$0=
      [0,function(param){return 0},cst_major_words$2,_alh_,major_words,_alg_];
    function _ali_(r,v)
     {return [0,
              r[1],
              v,
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _alj_=0,
     promoted_words$0=
      [0,
       function(param){return 0},
       cst_promoted_words$2,
       _alj_,
       promoted_words,
       _ali_];
    function _alk_(r,v)
     {return [0,
              v,
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _all_=0,
     minor_words$0=
      [0,function(param){return 0},cst_minor_words$2,_all_,minor_words,_alk_];
    function make_creator
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      compile_acc)
     {var
       match=caml_call2(minor_words_fun,minor_words$0,compile_acc),
       compile_acc$0=match[2],
       minor_words_gen=match[1],
       match$0=caml_call2(promoted_words_fun,promoted_words$0,compile_acc$0),
       compile_acc$1=match$0[2],
       promoted_words_gen=match$0[1],
       match$1=caml_call2(major_words_fun,major_words$0,compile_acc$1),
       compile_acc$2=match$1[2],
       major_words_gen=match$1[1],
       match$2=
        caml_call2(minor_collections_fun,minor_collections$0,compile_acc$2),
       compile_acc$3=match$2[2],
       minor_collections_gen=match$2[1],
       match$3=
        caml_call2(major_collections_fun,major_collections$0,compile_acc$3),
       compile_acc$4=match$3[2],
       major_collections_gen=match$3[1],
       match$4=caml_call2(heap_words_fun,heap_words$0,compile_acc$4),
       compile_acc$5=match$4[2],
       heap_words_gen=match$4[1],
       match$5=caml_call2(heap_chunks_fun,heap_chunks$0,compile_acc$5),
       compile_acc$6=match$5[2],
       heap_chunks_gen=match$5[1],
       match$6=caml_call2(live_words_fun,live_words$0,compile_acc$6),
       compile_acc$7=match$6[2],
       live_words_gen=match$6[1],
       match$7=caml_call2(live_blocks_fun,live_blocks$0,compile_acc$7),
       compile_acc$8=match$7[2],
       live_blocks_gen=match$7[1],
       match$8=caml_call2(free_words_fun,free_words$0,compile_acc$8),
       compile_acc$9=match$8[2],
       free_words_gen=match$8[1],
       match$9=caml_call2(free_blocks_fun,free_blocks$0,compile_acc$9),
       compile_acc$10=match$9[2],
       free_blocks_gen=match$9[1],
       match$10=caml_call2(largest_free_fun,largest_free$0,compile_acc$10),
       compile_acc$11=match$10[2],
       largest_free_gen=match$10[1],
       match$11=caml_call2(fragments_fun,fragments$0,compile_acc$11),
       compile_acc$12=match$11[2],
       fragments_gen=match$11[1],
       match$12=caml_call2(compactions_fun,compactions$0,compile_acc$12),
       compile_acc$13=match$12[2],
       compactions_gen=match$12[1],
       match$13=caml_call2(top_heap_words_fun,top_heap_words$0,compile_acc$13),
       compile_acc$14=match$13[2],
       top_heap_words_gen=match$13[1],
       match$14=caml_call2(stack_size_fun,stack_size$0,compile_acc$14),
       compile_acc$15=match$14[2],
       stack_size_gen=match$14[1];
      return [0,
              function(acc)
               {var
                 minor_words=caml_call1(minor_words_gen,acc),
                 promoted_words=caml_call1(promoted_words_gen,acc),
                 major_words=caml_call1(major_words_gen,acc),
                 minor_collections=caml_call1(minor_collections_gen,acc),
                 major_collections=caml_call1(major_collections_gen,acc),
                 heap_words=caml_call1(heap_words_gen,acc),
                 heap_chunks=caml_call1(heap_chunks_gen,acc),
                 live_words=caml_call1(live_words_gen,acc),
                 live_blocks=caml_call1(live_blocks_gen,acc),
                 free_words=caml_call1(free_words_gen,acc),
                 free_blocks=caml_call1(free_blocks_gen,acc),
                 largest_free=caml_call1(largest_free_gen,acc),
                 fragments=caml_call1(fragments_gen,acc),
                 compactions=caml_call1(compactions_gen,acc),
                 top_heap_words=caml_call1(top_heap_words_gen,acc),
                 stack_size=caml_call1(stack_size_gen,acc);
                return [0,
                        minor_words,
                        promoted_words,
                        major_words,
                        minor_collections,
                        major_collections,
                        heap_words,
                        heap_chunks,
                        live_words,
                        live_blocks,
                        free_words,
                        free_blocks,
                        largest_free,
                        fragments,
                        compactions,
                        top_heap_words,
                        stack_size]},
              compile_acc$15]}
    function create$31
     (minor_words,
      promoted_words,
      major_words,
      minor_collections,
      major_collections,
      heap_words,
      heap_chunks,
      live_words,
      live_blocks,
      free_words,
      free_blocks,
      largest_free,
      fragments,
      compactions,
      top_heap_words,
      stack_size)
     {return [0,
              minor_words,
              promoted_words,
              major_words,
              minor_collections,
              major_collections,
              heap_words,
              heap_chunks,
              live_words,
              live_blocks,
              free_words,
              free_blocks,
              largest_free,
              fragments,
              compactions,
              top_heap_words,
              stack_size]}
    function map$23
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _aSl_=caml_call1(stack_size_fun,stack_size$0),
       _aSm_=caml_call1(top_heap_words_fun,top_heap_words$0),
       _aSn_=caml_call1(compactions_fun,compactions$0),
       _aSo_=caml_call1(fragments_fun,fragments$0),
       _aSp_=caml_call1(largest_free_fun,largest_free$0),
       _aSq_=caml_call1(free_blocks_fun,free_blocks$0),
       _aSr_=caml_call1(free_words_fun,free_words$0),
       _aSs_=caml_call1(live_blocks_fun,live_blocks$0),
       _aSt_=caml_call1(live_words_fun,live_words$0),
       _aSu_=caml_call1(heap_chunks_fun,heap_chunks$0),
       _aSv_=caml_call1(heap_words_fun,heap_words$0),
       _aSw_=caml_call1(major_collections_fun,major_collections$0),
       _aSx_=caml_call1(minor_collections_fun,minor_collections$0),
       _aSy_=caml_call1(major_words_fun,major_words$0),
       _aSz_=caml_call1(promoted_words_fun,promoted_words$0);
      return [0,
              caml_call1(minor_words_fun,minor_words$0),
              _aSz_,
              _aSy_,
              _aSx_,
              _aSw_,
              _aSv_,
              _aSu_,
              _aSt_,
              _aSs_,
              _aSr_,
              _aSq_,
              _aSp_,
              _aSo_,
              _aSn_,
              _aSm_,
              _aSl_]}
    function iter$19
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {caml_call1(minor_words_fun,minor_words$0);
      caml_call1(promoted_words_fun,promoted_words$0);
      caml_call1(major_words_fun,major_words$0);
      caml_call1(minor_collections_fun,minor_collections$0);
      caml_call1(major_collections_fun,major_collections$0);
      caml_call1(heap_words_fun,heap_words$0);
      caml_call1(heap_chunks_fun,heap_chunks$0);
      caml_call1(live_words_fun,live_words$0);
      caml_call1(live_blocks_fun,live_blocks$0);
      caml_call1(free_words_fun,free_words$0);
      caml_call1(free_blocks_fun,free_blocks$0);
      caml_call1(largest_free_fun,largest_free$0);
      caml_call1(fragments_fun,fragments$0);
      caml_call1(compactions_fun,compactions$0);
      caml_call1(top_heap_words_fun,top_heap_words$0);
      return caml_call1(stack_size_fun,stack_size$0)}
    function fold$14
     (init,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {return caml_call2
              (stack_size_fun,
               caml_call2
                (top_heap_words_fun,
                 caml_call2
                  (compactions_fun,
                   caml_call2
                    (fragments_fun,
                     caml_call2
                      (largest_free_fun,
                       caml_call2
                        (free_blocks_fun,
                         caml_call2
                          (free_words_fun,
                           caml_call2
                            (live_blocks_fun,
                             caml_call2
                              (live_words_fun,
                               caml_call2
                                (heap_chunks_fun,
                                 caml_call2
                                  (heap_words_fun,
                                   caml_call2
                                    (major_collections_fun,
                                     caml_call2
                                      (minor_collections_fun,
                                       caml_call2
                                        (major_words_fun,
                                         caml_call2
                                          (promoted_words_fun,
                                           caml_call2(minor_words_fun,init,minor_words$0),
                                           promoted_words$0),
                                         major_words$0),
                                       minor_collections$0),
                                     major_collections$0),
                                   heap_words$0),
                                 heap_chunks$0),
                               live_words$0),
                             live_blocks$0),
                           free_words$0),
                         free_blocks$0),
                       largest_free$0),
                     fragments$0),
                   compactions$0),
                 top_heap_words$0),
               stack_size$0)}
    function map_poly(record)
     {var
       _aR8_=[0,caml_call1(record[1],stack_size$0),0],
       _aR9_=[0,caml_call1(record[1],top_heap_words$0),_aR8_],
       _aR__=[0,caml_call1(record[1],compactions$0),_aR9_],
       _aR$_=[0,caml_call1(record[1],fragments$0),_aR__],
       _aSa_=[0,caml_call1(record[1],largest_free$0),_aR$_],
       _aSb_=[0,caml_call1(record[1],free_blocks$0),_aSa_],
       _aSc_=[0,caml_call1(record[1],free_words$0),_aSb_],
       _aSd_=[0,caml_call1(record[1],live_blocks$0),_aSc_],
       _aSe_=[0,caml_call1(record[1],live_words$0),_aSd_],
       _aSf_=[0,caml_call1(record[1],heap_chunks$0),_aSe_],
       _aSg_=[0,caml_call1(record[1],heap_words$0),_aSf_],
       _aSh_=[0,caml_call1(record[1],major_collections$0),_aSg_],
       _aSi_=[0,caml_call1(record[1],minor_collections$0),_aSh_],
       _aSj_=[0,caml_call1(record[1],major_words$0),_aSi_],
       _aSk_=[0,caml_call1(record[1],promoted_words$0),_aSj_];
      return [0,caml_call1(record[1],minor_words$0),_aSk_]}
    function for_all$11
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _aRT_=caml_call1(minor_words_fun,minor_words$0),
       _aRU_=_aRT_?caml_call1(promoted_words_fun,promoted_words$0):_aRT_,
       _aRV_=_aRU_?caml_call1(major_words_fun,major_words$0):_aRU_,
       _aRW_=_aRV_?caml_call1(minor_collections_fun,minor_collections$0):_aRV_,
       _aRX_=_aRW_?caml_call1(major_collections_fun,major_collections$0):_aRW_,
       _aRY_=_aRX_?caml_call1(heap_words_fun,heap_words$0):_aRX_,
       _aRZ_=_aRY_?caml_call1(heap_chunks_fun,heap_chunks$0):_aRY_,
       _aR0_=_aRZ_?caml_call1(live_words_fun,live_words$0):_aRZ_,
       _aR1_=_aR0_?caml_call1(live_blocks_fun,live_blocks$0):_aR0_,
       _aR2_=_aR1_?caml_call1(free_words_fun,free_words$0):_aR1_,
       _aR3_=_aR2_?caml_call1(free_blocks_fun,free_blocks$0):_aR2_,
       _aR4_=_aR3_?caml_call1(largest_free_fun,largest_free$0):_aR3_,
       _aR5_=_aR4_?caml_call1(fragments_fun,fragments$0):_aR4_,
       _aR6_=_aR5_?caml_call1(compactions_fun,compactions$0):_aR5_,
       _aR7_=_aR6_?caml_call1(top_heap_words_fun,top_heap_words$0):_aR6_;
      return _aR7_?caml_call1(stack_size_fun,stack_size$0):_aR7_}
    function exists$12
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _aRS_=caml_call1(minor_words_fun,minor_words$0),
       _aRE_=_aRS_ || caml_call1(promoted_words_fun,promoted_words$0),
       _aRF_=_aRE_ || caml_call1(major_words_fun,major_words$0),
       _aRG_=_aRF_ || caml_call1(minor_collections_fun,minor_collections$0),
       _aRH_=_aRG_ || caml_call1(major_collections_fun,major_collections$0),
       _aRI_=_aRH_ || caml_call1(heap_words_fun,heap_words$0),
       _aRJ_=_aRI_ || caml_call1(heap_chunks_fun,heap_chunks$0),
       _aRK_=_aRJ_ || caml_call1(live_words_fun,live_words$0),
       _aRL_=_aRK_ || caml_call1(live_blocks_fun,live_blocks$0),
       _aRM_=_aRL_ || caml_call1(free_words_fun,free_words$0),
       _aRN_=_aRM_ || caml_call1(free_blocks_fun,free_blocks$0),
       _aRO_=_aRN_ || caml_call1(largest_free_fun,largest_free$0),
       _aRP_=_aRO_ || caml_call1(fragments_fun,fragments$0),
       _aRQ_=_aRP_ || caml_call1(compactions_fun,compactions$0),
       _aRR_=_aRQ_ || caml_call1(top_heap_words_fun,top_heap_words$0);
      return _aRR_?_aRR_:caml_call1(stack_size_fun,stack_size$0)}
    function to_list$8
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _aRp_=[0,caml_call1(stack_size_fun,stack_size$0),0],
       _aRq_=[0,caml_call1(top_heap_words_fun,top_heap_words$0),_aRp_],
       _aRr_=[0,caml_call1(compactions_fun,compactions$0),_aRq_],
       _aRs_=[0,caml_call1(fragments_fun,fragments$0),_aRr_],
       _aRt_=[0,caml_call1(largest_free_fun,largest_free$0),_aRs_],
       _aRu_=[0,caml_call1(free_blocks_fun,free_blocks$0),_aRt_],
       _aRv_=[0,caml_call1(free_words_fun,free_words$0),_aRu_],
       _aRw_=[0,caml_call1(live_blocks_fun,live_blocks$0),_aRv_],
       _aRx_=[0,caml_call1(live_words_fun,live_words$0),_aRw_],
       _aRy_=[0,caml_call1(heap_chunks_fun,heap_chunks$0),_aRx_],
       _aRz_=[0,caml_call1(heap_words_fun,heap_words$0),_aRy_],
       _aRA_=[0,caml_call1(major_collections_fun,major_collections$0),_aRz_],
       _aRB_=[0,caml_call1(minor_collections_fun,minor_collections$0),_aRA_],
       _aRC_=[0,caml_call1(major_words_fun,major_words$0),_aRB_],
       _aRD_=[0,caml_call1(promoted_words_fun,promoted_words$0),_aRC_];
      return [0,caml_call1(minor_words_fun,minor_words$0),_aRD_]}
    function iter$20
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {caml_call3(minor_words_fun,minor_words$0,record,record[1]);
      caml_call3(promoted_words_fun,promoted_words$0,record,record[2]);
      caml_call3(major_words_fun,major_words$0,record,record[3]);
      caml_call3(minor_collections_fun,minor_collections$0,record,record[4]);
      caml_call3(major_collections_fun,major_collections$0,record,record[5]);
      caml_call3(heap_words_fun,heap_words$0,record,record[6]);
      caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]);
      caml_call3(live_words_fun,live_words$0,record,record[8]);
      caml_call3(live_blocks_fun,live_blocks$0,record,record[9]);
      caml_call3(free_words_fun,free_words$0,record,record[10]);
      caml_call3(free_blocks_fun,free_blocks$0,record,record[11]);
      caml_call3(largest_free_fun,largest_free$0,record,record[12]);
      caml_call3(fragments_fun,fragments$0,record,record[13]);
      caml_call3(compactions_fun,compactions$0,record,record[14]);
      caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]);
      return caml_call3(stack_size_fun,stack_size$0,record,record[16])}
    function fold$15
     (record,
      init,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _aRa_=record[16],
       _aRb_=record[15],
       _aRc_=record[14],
       _aRd_=record[13],
       _aRe_=record[12],
       _aRf_=record[11],
       _aRg_=record[10],
       _aRh_=record[9],
       _aRi_=record[8],
       _aRj_=record[7],
       _aRk_=record[6],
       _aRl_=record[5],
       _aRm_=record[4],
       _aRn_=record[3],
       _aRo_=record[2];
      return caml_call4
              (stack_size_fun,
               caml_call4
                (top_heap_words_fun,
                 caml_call4
                  (compactions_fun,
                   caml_call4
                    (fragments_fun,
                     caml_call4
                      (largest_free_fun,
                       caml_call4
                        (free_blocks_fun,
                         caml_call4
                          (free_words_fun,
                           caml_call4
                            (live_blocks_fun,
                             caml_call4
                              (live_words_fun,
                               caml_call4
                                (heap_chunks_fun,
                                 caml_call4
                                  (heap_words_fun,
                                   caml_call4
                                    (major_collections_fun,
                                     caml_call4
                                      (minor_collections_fun,
                                       caml_call4
                                        (major_words_fun,
                                         caml_call4
                                          (promoted_words_fun,
                                           caml_call4
                                            (minor_words_fun,init,minor_words$0,record,record[1]),
                                           promoted_words$0,
                                           record,
                                           _aRo_),
                                         major_words$0,
                                         record,
                                         _aRn_),
                                       minor_collections$0,
                                       record,
                                       _aRm_),
                                     major_collections$0,
                                     record,
                                     _aRl_),
                                   heap_words$0,
                                   record,
                                   _aRk_),
                                 heap_chunks$0,
                                 record,
                                 _aRj_),
                               live_words$0,
                               record,
                               _aRi_),
                             live_blocks$0,
                             record,
                             _aRh_),
                           free_words$0,
                           record,
                           _aRg_),
                         free_blocks$0,
                         record,
                         _aRf_),
                       largest_free$0,
                       record,
                       _aRe_),
                     fragments$0,
                     record,
                     _aRd_),
                   compactions$0,
                   record,
                   _aRc_),
                 top_heap_words$0,
                 record,
                 _aRb_),
               stack_size$0,
               record,
               _aRa_)}
    function for_all$12
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _aQX_=caml_call3(minor_words_fun,minor_words$0,record,record[1]),
       _aQY_=
        _aQX_
         ?caml_call3(promoted_words_fun,promoted_words$0,record,record[2])
         :_aQX_,
       _aQZ_=
        _aQY_?caml_call3(major_words_fun,major_words$0,record,record[3]):_aQY_,
       _aQ0_=
        _aQZ_
         ?caml_call3
           (minor_collections_fun,minor_collections$0,record,record[4])
         :_aQZ_,
       _aQ1_=
        _aQ0_
         ?caml_call3
           (major_collections_fun,major_collections$0,record,record[5])
         :_aQ0_,
       _aQ2_=
        _aQ1_?caml_call3(heap_words_fun,heap_words$0,record,record[6]):_aQ1_,
       _aQ3_=
        _aQ2_?caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]):_aQ2_,
       _aQ4_=
        _aQ3_?caml_call3(live_words_fun,live_words$0,record,record[8]):_aQ3_,
       _aQ5_=
        _aQ4_?caml_call3(live_blocks_fun,live_blocks$0,record,record[9]):_aQ4_,
       _aQ6_=
        _aQ5_?caml_call3(free_words_fun,free_words$0,record,record[10]):_aQ5_,
       _aQ7_=
        _aQ6_
         ?caml_call3(free_blocks_fun,free_blocks$0,record,record[11])
         :_aQ6_,
       _aQ8_=
        _aQ7_
         ?caml_call3(largest_free_fun,largest_free$0,record,record[12])
         :_aQ7_,
       _aQ9_=
        _aQ8_?caml_call3(fragments_fun,fragments$0,record,record[13]):_aQ8_,
       _aQ__=
        _aQ9_
         ?caml_call3(compactions_fun,compactions$0,record,record[14])
         :_aQ9_,
       _aQ$_=
        _aQ__
         ?caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15])
         :_aQ__;
      return _aQ$_
              ?caml_call3(stack_size_fun,stack_size$0,record,record[16])
              :_aQ$_}
    function exists$13
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _aQW_=caml_call3(minor_words_fun,minor_words$0,record,record[1]),
       _aQI_=
        _aQW_
        ||
        caml_call3(promoted_words_fun,promoted_words$0,record,record[2]),
       _aQJ_=
        _aQI_
        ||
        caml_call3(major_words_fun,major_words$0,record,record[3]),
       _aQK_=
        _aQJ_
        ||
        caml_call3(minor_collections_fun,minor_collections$0,record,record[4]),
       _aQL_=
        _aQK_
        ||
        caml_call3(major_collections_fun,major_collections$0,record,record[5]),
       _aQM_=_aQL_ || caml_call3(heap_words_fun,heap_words$0,record,record[6]),
       _aQN_=
        _aQM_
        ||
        caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]),
       _aQO_=_aQN_ || caml_call3(live_words_fun,live_words$0,record,record[8]),
       _aQP_=
        _aQO_
        ||
        caml_call3(live_blocks_fun,live_blocks$0,record,record[9]),
       _aQQ_=
        _aQP_
        ||
        caml_call3(free_words_fun,free_words$0,record,record[10]),
       _aQR_=
        _aQQ_
        ||
        caml_call3(free_blocks_fun,free_blocks$0,record,record[11]),
       _aQS_=
        _aQR_
        ||
        caml_call3(largest_free_fun,largest_free$0,record,record[12]),
       _aQT_=_aQS_ || caml_call3(fragments_fun,fragments$0,record,record[13]),
       _aQU_=
        _aQT_
        ||
        caml_call3(compactions_fun,compactions$0,record,record[14]),
       _aQV_=
        _aQU_
        ||
        caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]);
      return _aQV_
              ?_aQV_
              :caml_call3(stack_size_fun,stack_size$0,record,record[16])}
    function to_list$9
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _aQt_=[0,caml_call3(stack_size_fun,stack_size$0,record,record[16]),0],
       _aQu_=
        [0,
         caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]),
         _aQt_],
       _aQv_=
        [0,caml_call3(compactions_fun,compactions$0,record,record[14]),_aQu_],
       _aQw_=[0,caml_call3(fragments_fun,fragments$0,record,record[13]),_aQv_],
       _aQx_=
        [0,
         caml_call3(largest_free_fun,largest_free$0,record,record[12]),
         _aQw_],
       _aQy_=
        [0,caml_call3(free_blocks_fun,free_blocks$0,record,record[11]),_aQx_],
       _aQz_=
        [0,caml_call3(free_words_fun,free_words$0,record,record[10]),_aQy_],
       _aQA_=
        [0,caml_call3(live_blocks_fun,live_blocks$0,record,record[9]),_aQz_],
       _aQB_=
        [0,caml_call3(live_words_fun,live_words$0,record,record[8]),_aQA_],
       _aQC_=
        [0,caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]),_aQB_],
       _aQD_=
        [0,caml_call3(heap_words_fun,heap_words$0,record,record[6]),_aQC_],
       _aQE_=
        [0,
         caml_call3
          (major_collections_fun,major_collections$0,record,record[5]),
         _aQD_],
       _aQF_=
        [0,
         caml_call3
          (minor_collections_fun,minor_collections$0,record,record[4]),
         _aQE_],
       _aQG_=
        [0,caml_call3(major_words_fun,major_words$0,record,record[3]),_aQF_],
       _aQH_=
        [0,
         caml_call3(promoted_words_fun,promoted_words$0,record,record[2]),
         _aQG_];
      return [0,
              caml_call3(minor_words_fun,minor_words$0,record,record[1]),
              _aQH_]}
    function map$24
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _aQe_=caml_call3(stack_size_fun,stack_size$0,record,record[16]),
       _aQf_=caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]),
       _aQg_=caml_call3(compactions_fun,compactions$0,record,record[14]),
       _aQh_=caml_call3(fragments_fun,fragments$0,record,record[13]),
       _aQi_=caml_call3(largest_free_fun,largest_free$0,record,record[12]),
       _aQj_=caml_call3(free_blocks_fun,free_blocks$0,record,record[11]),
       _aQk_=caml_call3(free_words_fun,free_words$0,record,record[10]),
       _aQl_=caml_call3(live_blocks_fun,live_blocks$0,record,record[9]),
       _aQm_=caml_call3(live_words_fun,live_words$0,record,record[8]),
       _aQn_=caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]),
       _aQo_=caml_call3(heap_words_fun,heap_words$0,record,record[6]),
       _aQp_=
        caml_call3(major_collections_fun,major_collections$0,record,record[5]),
       _aQq_=
        caml_call3(minor_collections_fun,minor_collections$0,record,record[4]),
       _aQr_=caml_call3(major_words_fun,major_words$0,record,record[3]),
       _aQs_=caml_call3(promoted_words_fun,promoted_words$0,record,record[2]);
      return [0,
              caml_call3(minor_words_fun,minor_words$0,record,record[1]),
              _aQs_,
              _aQr_,
              _aQq_,
              _aQp_,
              _aQo_,
              _aQn_,
              _aQm_,
              _aQl_,
              _aQk_,
              _aQj_,
              _aQi_,
              _aQh_,
              _aQg_,
              _aQf_,
              _aQe_]}
    function set_all_mutable_fields(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct=
      [0,
       iter$20,
       fold$15,
       for_all$12,
       exists$13,
       to_list$9,
       map$24,
       set_all_mutable_fields],
     include$131=Make$2([0,compare$74,t_of_sexp$86,sexp_of_t$96]),
     symbol$212=include$131[1],
     symbol$213=include$131[2],
     symbol$214=include$131[3],
     symbol$215=include$131[4],
     symbol$216=include$131[5],
     symbol$217=include$131[6],
     equal$36=include$131[7],
     compare$75=include$131[8],
     min$15=include$131[9],
     max$15=include$131[10],
     ascending$15=include$131[11],
     descending$15=include$131[12],
     between$15=include$131[13],
     clamp_exn$15=include$131[14],
     clamp$15=include$131[15],
     comparator$24=include$131[16],
     validate_lbound$15=include$131[17],
     validate_ubound$15=include$131[18],
     validate_bound$15=include$131[19],
     Replace_polymorphic_compare$14=include$131[20],
     Map$23=include$131[21],
     Set$23=include$131[22];
    function compare$76(a_007,b_008)
     {if(caml_call2(Ppx_compare_lib[1],a_007,b_008))return 0;
      var n=caml_call2(_x_,a_007[1],b_008[1]);
      if(0 === n)
       {var n$0=caml_call2(_x_,a_007[2],b_008[2]);
        if(0 === n$0)
         {var n$1=caml_call2(_x_,a_007[3],b_008[3]);
          if(0 === n$1)
           {var n$2=caml_call2(_x_,a_007[4],b_008[4]);
            if(0 === n$2)
             {var n$3=caml_call2(_x_,a_007[5],b_008[5]);
              if(0 === n$3)
               {var n$4=caml_call2(_x_,a_007[6],b_008[6]);
                if(0 === n$4)
                 {var n$5=caml_call2(_x_,a_007[7],b_008[7]);
                  if(0 === n$5)
                   {var n$6=caml_call2(_x_,a_007[8],b_008[8]);
                    if(0 === n$6)
                     {var n$7=caml_call2(_x_,a_007[9],b_008[9]);
                      if(0 === n$7)
                       {var n$8=caml_call2(_x_,a_007[10],b_008[10]);
                        return 0 === n$8?caml_call2(_x_,a_007[11],b_008[11]):n$8}
                      return n$7}
                    return n$6}
                  return n$5}
                return n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    var
     _alm_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_minor_heap_size,_cq_],
         [0,
          [0,cst_major_heap_increment,_cq_],
          [0,
           [0,cst_space_overhead,_cq_],
           [0,
            [0,cst_verbose,_cq_],
            [0,
             [0,cst_max_overhead,_cq_],
             [0,
              [0,cst_stack_limit,_cq_],
              [0,
               [0,cst_allocation_policy,_cq_],
               [0,
                [0,cst_window_size,_cq_],
                [0,
                 [0,cst_custom_major_ratio,_cq_],
                 [0,
                  [0,cst_custom_minor_ratio,_cq_],
                  [0,[0,cst_custom_minor_max_size,_cq_],0]]]]]]]]]]]),
     _aln_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$220),0,_alm_],0],
     _alo_=caml_call1(Bin_prot_Shape[4][1],cst_src_gc_ml_65_4),
     group$124=caml_call2(Bin_prot_Shape[6],_alo_,_aln_),
     _alp_=caml_call1(Bin_prot_Shape[2][1],cst_t$221),
     bin_shape_t$108=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$124,_alp_),0);
    function bin_size_t$72(param)
     {var
       v1=param[1],
       v2=param[2],
       v3=param[3],
       v4=param[4],
       v5=param[5],
       v6=param[6],
       v7=param[7],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       _aP5_=caml_call1(bin_size_t$1,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aP5_),
       _aP6_=caml_call1(bin_size_t$1,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aP6_),
       _aP7_=caml_call1(bin_size_t$1,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_aP7_),
       _aP8_=caml_call1(bin_size_t$1,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_aP8_),
       _aP9_=caml_call1(bin_size_t$1,v5),
       size$3=caml_call2(Bin_prot_Common[23],size$2,_aP9_),
       _aP__=caml_call1(bin_size_t$1,v6),
       size$4=caml_call2(Bin_prot_Common[23],size$3,_aP__),
       _aP$_=caml_call1(bin_size_t$1,v7),
       size$5=caml_call2(Bin_prot_Common[23],size$4,_aP$_),
       _aQa_=caml_call1(bin_size_t$1,v8),
       size$6=caml_call2(Bin_prot_Common[23],size$5,_aQa_),
       _aQb_=caml_call1(bin_size_t$1,v9),
       size$7=caml_call2(Bin_prot_Common[23],size$6,_aQb_),
       _aQc_=caml_call1(bin_size_t$1,v10),
       size$8=caml_call2(Bin_prot_Common[23],size$7,_aQc_),
       _aQd_=caml_call1(bin_size_t$1,v11);
      return caml_call2(Bin_prot_Common[23],size$8,_aQd_)}
    function bin_write_t$73(buf,pos,param)
     {var
       v1=param[1],
       v2=param[2],
       v3=param[3],
       v4=param[4],
       v5=param[5],
       v6=param[6],
       v7=param[7],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       pos$0=caml_call3(bin_write_t$1,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$1,buf,pos$0,v2),
       pos$2=caml_call3(bin_write_t$1,buf,pos$1,v3),
       pos$3=caml_call3(bin_write_t$1,buf,pos$2,v4),
       pos$4=caml_call3(bin_write_t$1,buf,pos$3,v5),
       pos$5=caml_call3(bin_write_t$1,buf,pos$4,v6),
       pos$6=caml_call3(bin_write_t$1,buf,pos$5,v7),
       pos$7=caml_call3(bin_write_t$1,buf,pos$6,v8),
       pos$8=caml_call3(bin_write_t$1,buf,pos$7,v9),
       pos$9=caml_call3(bin_write_t$1,buf,pos$8,v10);
      return caml_call3(bin_write_t$1,buf,pos$9,v11)}
    var bin_writer_t$96=[0,bin_size_t$72,bin_write_t$73];
    function bin_read_t$144(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_gc_ml_Control_T_t,pos_ref[1])}
    function bin_read_t$145(buf,pos_ref)
     {var
       v_minor_heap_size=caml_call2(bin_read_t$3,buf,pos_ref),
       v_major_heap_increment=caml_call2(bin_read_t$3,buf,pos_ref),
       v_space_overhead=caml_call2(bin_read_t$3,buf,pos_ref),
       v_verbose=caml_call2(bin_read_t$3,buf,pos_ref),
       v_max_overhead=caml_call2(bin_read_t$3,buf,pos_ref),
       v_stack_limit=caml_call2(bin_read_t$3,buf,pos_ref),
       v_allocation_policy=caml_call2(bin_read_t$3,buf,pos_ref),
       v_window_size=caml_call2(bin_read_t$3,buf,pos_ref),
       v_custom_major_ratio=caml_call2(bin_read_t$3,buf,pos_ref),
       v_custom_minor_ratio=caml_call2(bin_read_t$3,buf,pos_ref),
       v_custom_minor_max_size=caml_call2(bin_read_t$3,buf,pos_ref);
      return [0,
              v_minor_heap_size,
              v_major_heap_increment,
              v_space_overhead,
              v_verbose,
              v_max_overhead,
              v_stack_limit,
              v_allocation_policy,
              v_window_size,
              v_custom_major_ratio,
              v_custom_minor_ratio,
              v_custom_minor_max_size]}
    var
     bin_reader_t$96=[0,bin_read_t$145,bin_read_t$144],
     bin_t$96=[0,bin_shape_t$108,bin_writer_t$96,bin_reader_t$96];
    function t_of_sexp$87(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$33,sexp);
      var
       field_sexps=sexp[1],
       minor_heap_size_field=[0,0],
       major_heap_increment_field=[0,0],
       space_overhead_field=[0,0],
       verbose_field=[0,0],
       max_overhead_field=[0,0],
       stack_limit_field=[0,0],
       allocation_policy_field=[0,0],
       window_size_field=[0,0],
       custom_major_ratio_field=[0,0],
       custom_minor_ratio_field=[0,0],
       custom_minor_max_size_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aPP_=param[1];
          if(1 === _aPP_[0])
           {var _aPQ_=_aPP_[1];
            if(_aPQ_)
             {var _aPR_=_aPQ_[1];
              if(0 === _aPR_[0])
               {var _aPS_=_aPQ_[2],_aPT_=_aPR_[1];
                if(! _aPS_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aPT_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _aPS_[2])
                 {var
                   tail=param[2],
                   field_sexp=_aPS_[1],
                   switch$0=caml_string_compare(_aPT_,cst_max_overhead$0);
                  if(0 <= switch$0)
                   if(0 < switch$0)
                    if(caml_string_notequal(_aPT_,cst_minor_heap_size$0))
                     if(caml_string_notequal(_aPT_,cst_space_overhead$0))
                      if(caml_string_notequal(_aPT_,cst_stack_limit$0))
                       if(caml_string_notequal(_aPT_,cst_verbose$0))
                        if(caml_string_notequal(_aPT_,cst_window_size$0))
                         var switch$1=1;
                        else
                         {if(window_size_field[1])
                           duplicates[1] = [0,_aPT_,duplicates[1]];
                          else
                           {var fvalue=caml_call1(t_of_sexp,field_sexp);
                            window_size_field[1] = [0,fvalue]}
                          var switch$1=0}
                       else
                        {if(verbose_field[1])
                          duplicates[1] = [0,_aPT_,duplicates[1]];
                         else
                          {var fvalue$0=caml_call1(t_of_sexp,field_sexp);
                           verbose_field[1] = [0,fvalue$0]}
                         var switch$1=0}
                      else
                       {if(stack_limit_field[1])
                         duplicates[1] = [0,_aPT_,duplicates[1]];
                        else
                         {var fvalue$1=caml_call1(t_of_sexp,field_sexp);
                          stack_limit_field[1] = [0,fvalue$1]}
                        var switch$1=0}
                     else
                      {if(space_overhead_field[1])
                        duplicates[1] = [0,_aPT_,duplicates[1]];
                       else
                        {var fvalue$2=caml_call1(t_of_sexp,field_sexp);
                         space_overhead_field[1] = [0,fvalue$2]}
                       var switch$1=0}
                    else
                     {if(minor_heap_size_field[1])
                       duplicates[1] = [0,_aPT_,duplicates[1]];
                      else
                       {var fvalue$3=caml_call1(t_of_sexp,field_sexp);
                        minor_heap_size_field[1] = [0,fvalue$3]}
                      var switch$1=0}
                   else
                    {if(max_overhead_field[1])
                      duplicates[1] = [0,_aPT_,duplicates[1]];
                     else
                      {var fvalue$4=caml_call1(t_of_sexp,field_sexp);
                       max_overhead_field[1] = [0,fvalue$4]}
                     var switch$1=0}
                  else
                   if(caml_string_notequal(_aPT_,cst_allocation_policy$0))
                    if(caml_string_notequal(_aPT_,cst_custom_major_ratio$0))
                     if(caml_string_notequal(_aPT_,cst_custom_minor_max_size$0))
                      if(caml_string_notequal(_aPT_,cst_custom_minor_ratio$0))
                       if(caml_string_notequal(_aPT_,cst_major_heap_increment$0))
                        var switch$1=1;
                       else
                        {if(major_heap_increment_field[1])
                          duplicates[1] = [0,_aPT_,duplicates[1]];
                         else
                          {var fvalue$5=caml_call1(t_of_sexp,field_sexp);
                           major_heap_increment_field[1] = [0,fvalue$5]}
                         var switch$1=0}
                      else
                       {if(custom_minor_ratio_field[1])
                         duplicates[1] = [0,_aPT_,duplicates[1]];
                        else
                         {var fvalue$6=caml_call1(t_of_sexp,field_sexp);
                          custom_minor_ratio_field[1] = [0,fvalue$6]}
                        var switch$1=0}
                     else
                      {if(custom_minor_max_size_field[1])
                        duplicates[1] = [0,_aPT_,duplicates[1]];
                       else
                        {var fvalue$7=caml_call1(t_of_sexp,field_sexp);
                         custom_minor_max_size_field[1] = [0,fvalue$7]}
                       var switch$1=0}
                    else
                     {if(custom_major_ratio_field[1])
                       duplicates[1] = [0,_aPT_,duplicates[1]];
                      else
                       {var fvalue$8=caml_call1(t_of_sexp,field_sexp);
                        custom_major_ratio_field[1] = [0,fvalue$8]}
                      var switch$1=0}
                   else
                    {if(allocation_policy_field[1])
                      duplicates[1] = [0,_aPT_,duplicates[1]];
                     else
                      {var fvalue$9=caml_call1(t_of_sexp,field_sexp);
                       allocation_policy_field[1] = [0,fvalue$9]}
                     var switch$1=0}
                  if(switch$1)
                   if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aPT_,extra[1]];
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$33,_aPP_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$33,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$33,extra[1],sexp);
        var
         _aPU_=minor_heap_size_field[1],
         _aPV_=major_heap_increment_field[1],
         _aPW_=space_overhead_field[1],
         _aPX_=verbose_field[1],
         _aPY_=max_overhead_field[1],
         _aPZ_=stack_limit_field[1],
         _aP0_=allocation_policy_field[1],
         _aP1_=window_size_field[1],
         _aP2_=custom_major_ratio_field[1],
         _aP3_=custom_minor_ratio_field[1],
         _aP4_=custom_minor_max_size_field[1];
        if(_aPU_)
         if(_aPV_)
          if(_aPW_)
           if(_aPX_)
            if(_aPY_)
             if(_aPZ_)
              if(_aP0_)
               if(_aP1_)
                if(_aP2_)
                 if(_aP3_)
                  if(_aP4_)
                   {var
                     custom_minor_max_size_value=_aP4_[1],
                     custom_minor_ratio_value=_aP3_[1],
                     custom_major_ratio_value=_aP2_[1],
                     window_size_value=_aP1_[1],
                     allocation_policy_value=_aP0_[1],
                     stack_limit_value=_aPZ_[1],
                     max_overhead_value=_aPY_[1],
                     verbose_value=_aPX_[1],
                     space_overhead_value=_aPW_[1],
                     major_heap_increment_value=_aPV_[1],
                     minor_heap_size_value=_aPU_[1];
                    return [0,
                            minor_heap_size_value,
                            major_heap_increment_value,
                            space_overhead_value,
                            verbose_value,
                            max_overhead_value,
                            stack_limit_value,
                            allocation_policy_value,
                            window_size_value,
                            custom_major_ratio_value,
                            custom_minor_ratio_value,
                            custom_minor_max_size_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$33,
                 sexp,
                 [0,
                  [0,0 === minor_heap_size_field[1]?1:0,cst_minor_heap_size$1],
                  [0,
                   [0,
                    0 === major_heap_increment_field[1]?1:0,
                    cst_major_heap_increment$1],
                   [0,
                    [0,0 === space_overhead_field[1]?1:0,cst_space_overhead$1],
                    [0,
                     [0,0 === verbose_field[1]?1:0,cst_verbose$1],
                     [0,
                      [0,0 === max_overhead_field[1]?1:0,cst_max_overhead$1],
                      [0,
                       [0,0 === stack_limit_field[1]?1:0,cst_stack_limit$1],
                       [0,
                        [0,
                         0 === allocation_policy_field[1]?1:0,
                         cst_allocation_policy$1],
                        [0,
                         [0,0 === window_size_field[1]?1:0,cst_window_size$1],
                         [0,
                          [0,
                           0 === custom_major_ratio_field[1]?1:0,
                           cst_custom_major_ratio$1],
                          [0,
                           [0,
                            0 === custom_minor_ratio_field[1]?1:0,
                            cst_custom_minor_ratio$1],
                           [0,
                            [0,
                             0 === custom_minor_max_size_field[1]?1:0,
                             cst_custom_minor_max_size$1],
                            0]]]]]]]]]]])}}
    function sexp_of_t$97(param)
     {var
       v_minor_heap_size=param[1],
       v_major_heap_increment=param[2],
       v_space_overhead=param[3],
       v_verbose=param[4],
       v_max_overhead=param[5],
       v_stack_limit=param[6],
       v_allocation_policy=param[7],
       v_custom_minor_max_size=param[11],
       v_custom_minor_ratio=param[10],
       v_custom_major_ratio=param[9],
       v_window_size=param[8],
       arg=caml_call1(sexp_of_t$0,v_custom_minor_max_size),
       bnds=[0,[1,[0,_alq_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$0,v_custom_minor_ratio),
       bnds$0=[0,[1,[0,_alr_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$0,v_custom_major_ratio),
       bnds$1=[0,[1,[0,_als_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$0,v_window_size),
       bnds$2=[0,[1,[0,_alt_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(sexp_of_t$0,v_allocation_policy),
       bnds$3=[0,[1,[0,_alu_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$0,v_stack_limit),
       bnds$4=[0,[1,[0,_alv_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(sexp_of_t$0,v_max_overhead),
       bnds$5=[0,[1,[0,_alw_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call1(sexp_of_t$0,v_verbose),
       bnds$6=[0,[1,[0,_alx_,[0,arg$6,0]]],bnds$5],
       arg$7=caml_call1(sexp_of_t$0,v_space_overhead),
       bnds$7=[0,[1,[0,_aly_,[0,arg$7,0]]],bnds$6],
       arg$8=caml_call1(sexp_of_t$0,v_major_heap_increment),
       bnds$8=[0,[1,[0,_alz_,[0,arg$8,0]]],bnds$7],
       arg$9=caml_call1(sexp_of_t$0,v_minor_heap_size),
       bnds$9=[0,[1,[0,_alA_,[0,arg$9,0]]],bnds$8];
      return [1,bnds$9]}
    function custom_minor_max_size(r){return r[11]}
    function custom_minor_ratio(r){return r[10]}
    function custom_major_ratio(r){return r[9]}
    function window_size(r){return r[8]}
    function allocation_policy(r){return r[7]}
    function set_allocation_policy(r,v){r[7] = v;return 0}
    function stack_limit(r){return r[6]}
    function set_stack_limit(r,v){r[6] = v;return 0}
    function max_overhead(r){return r[5]}
    function set_max_overhead(r,v){r[5] = v;return 0}
    function verbose(r){return r[4]}
    function set_verbose(r,v){r[4] = v;return 0}
    function space_overhead(r){return r[3]}
    function set_space_overhead(r,v){r[3] = v;return 0}
    function major_heap_increment(r){return r[2]}
    function set_major_heap_increment(r,v){r[2] = v;return 0}
    function minor_heap_size(r){return r[1]}
    function set_minor_heap_size(r,v){r[1] = v;return 0}
    function _alB_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],v]}
    var
     _alC_=0,
     custom_minor_max_size$0=
      [0,
       function(param){return 0},
       cst_custom_minor_max_size$2,
       _alC_,
       custom_minor_max_size,
       _alB_];
    function _alD_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],v,r[11]]}
    var
     _alE_=0,
     custom_minor_ratio$0=
      [0,
       function(param){return 0},
       cst_custom_minor_ratio$2,
       _alE_,
       custom_minor_ratio,
       _alD_];
    function _alF_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],v,r[10],r[11]]}
    var
     _alG_=0,
     custom_major_ratio$0=
      [0,
       function(param){return 0},
       cst_custom_major_ratio$2,
       _alG_,
       custom_major_ratio,
       _alF_];
    function _alH_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v,r[9],r[10],r[11]]}
    var
     _alI_=0,
     window_size$0=
      [0,function(param){return 0},cst_window_size$2,_alI_,window_size,_alH_];
    function _alJ_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8],r[9],r[10],r[11]]}
    var
     _alK_=[0,set_allocation_policy],
     allocation_policy$0=
      [0,
       function(param){return 0},
       cst_allocation_policy$2,
       _alK_,
       allocation_policy,
       _alJ_];
    function _alL_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8],r[9],r[10],r[11]]}
    var
     _alM_=[0,set_stack_limit],
     stack_limit$0=
      [0,function(param){return 0},cst_stack_limit$2,_alM_,stack_limit,_alL_];
    function _alN_(r,v)
     {return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _alO_=[0,set_max_overhead],
     max_overhead$0=
      [0,
       function(param){return 0},
       cst_max_overhead$2,
       _alO_,
       max_overhead,
       _alN_];
    function _alP_(r,v)
     {return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _alQ_=[0,set_verbose],
     verbose$0=[0,function(param){return 0},cst_verbose$2,_alQ_,verbose,_alP_];
    function _alR_(r,v)
     {return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _alS_=[0,set_space_overhead],
     space_overhead$0=
      [0,
       function(param){return 0},
       cst_space_overhead$2,
       _alS_,
       space_overhead,
       _alR_];
    function _alT_(r,v)
     {return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _alU_=[0,set_major_heap_increment],
     major_heap_increment$0=
      [0,
       function(param){return 0},
       cst_major_heap_increment$2,
       _alU_,
       major_heap_increment,
       _alT_];
    function _alV_(r,v)
     {return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _alW_=[0,set_minor_heap_size],
     minor_heap_size$0=
      [0,
       function(param){return 0},
       cst_minor_heap_size$2,
       _alW_,
       minor_heap_size,
       _alV_];
    function make_creator$0
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun,
      compile_acc)
     {var
       match=caml_call2(minor_heap_size_fun,minor_heap_size$0,compile_acc),
       compile_acc$0=match[2],
       minor_heap_size_gen=match[1],
       match$0=
        caml_call2
         (major_heap_increment_fun,major_heap_increment$0,compile_acc$0),
       compile_acc$1=match$0[2],
       major_heap_increment_gen=match$0[1],
       match$1=caml_call2(space_overhead_fun,space_overhead$0,compile_acc$1),
       compile_acc$2=match$1[2],
       space_overhead_gen=match$1[1],
       match$2=caml_call2(verbose_fun,verbose$0,compile_acc$2),
       compile_acc$3=match$2[2],
       verbose_gen=match$2[1],
       match$3=caml_call2(max_overhead_fun,max_overhead$0,compile_acc$3),
       compile_acc$4=match$3[2],
       max_overhead_gen=match$3[1],
       match$4=caml_call2(stack_limit_fun,stack_limit$0,compile_acc$4),
       compile_acc$5=match$4[2],
       stack_limit_gen=match$4[1],
       match$5=
        caml_call2(allocation_policy_fun,allocation_policy$0,compile_acc$5),
       compile_acc$6=match$5[2],
       allocation_policy_gen=match$5[1],
       match$6=caml_call2(window_size_fun,window_size$0,compile_acc$6),
       compile_acc$7=match$6[2],
       window_size_gen=match$6[1],
       match$7=
        caml_call2(custom_major_ratio_fun,custom_major_ratio$0,compile_acc$7),
       compile_acc$8=match$7[2],
       custom_major_ratio_gen=match$7[1],
       match$8=
        caml_call2(custom_minor_ratio_fun,custom_minor_ratio$0,compile_acc$8),
       compile_acc$9=match$8[2],
       custom_minor_ratio_gen=match$8[1],
       match$9=
        caml_call2
         (custom_minor_max_size_fun,custom_minor_max_size$0,compile_acc$9),
       compile_acc$10=match$9[2],
       custom_minor_max_size_gen=match$9[1];
      return [0,
              function(acc)
               {var
                 minor_heap_size=caml_call1(minor_heap_size_gen,acc),
                 major_heap_increment=caml_call1(major_heap_increment_gen,acc),
                 space_overhead=caml_call1(space_overhead_gen,acc),
                 verbose=caml_call1(verbose_gen,acc),
                 max_overhead=caml_call1(max_overhead_gen,acc),
                 stack_limit=caml_call1(stack_limit_gen,acc),
                 allocation_policy=caml_call1(allocation_policy_gen,acc),
                 window_size=caml_call1(window_size_gen,acc),
                 custom_major_ratio=caml_call1(custom_major_ratio_gen,acc),
                 custom_minor_ratio=caml_call1(custom_minor_ratio_gen,acc),
                 custom_minor_max_size=
                  caml_call1(custom_minor_max_size_gen,acc);
                return [0,
                        minor_heap_size,
                        major_heap_increment,
                        space_overhead,
                        verbose,
                        max_overhead,
                        stack_limit,
                        allocation_policy,
                        window_size,
                        custom_major_ratio,
                        custom_minor_ratio,
                        custom_minor_max_size]},
              compile_acc$10]}
    function create$32
     (minor_heap_size,
      major_heap_increment,
      space_overhead,
      verbose,
      max_overhead,
      stack_limit,
      allocation_policy,
      window_size,
      custom_major_ratio,
      custom_minor_ratio,
      custom_minor_max_size)
     {return [0,
              minor_heap_size,
              major_heap_increment,
              space_overhead,
              verbose,
              max_overhead,
              stack_limit,
              allocation_policy,
              window_size,
              custom_major_ratio,
              custom_minor_ratio,
              custom_minor_max_size]}
    function map$25
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aPF_=caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0),
       _aPG_=caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0),
       _aPH_=caml_call1(custom_major_ratio_fun,custom_major_ratio$0),
       _aPI_=caml_call1(window_size_fun,window_size$0),
       _aPJ_=caml_call1(allocation_policy_fun,allocation_policy$0),
       _aPK_=caml_call1(stack_limit_fun,stack_limit$0),
       _aPL_=caml_call1(max_overhead_fun,max_overhead$0),
       _aPM_=caml_call1(verbose_fun,verbose$0),
       _aPN_=caml_call1(space_overhead_fun,space_overhead$0),
       _aPO_=caml_call1(major_heap_increment_fun,major_heap_increment$0);
      return [0,
              caml_call1(minor_heap_size_fun,minor_heap_size$0),
              _aPO_,
              _aPN_,
              _aPM_,
              _aPL_,
              _aPK_,
              _aPJ_,
              _aPI_,
              _aPH_,
              _aPG_,
              _aPF_]}
    function iter$21
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {caml_call1(minor_heap_size_fun,minor_heap_size$0);
      caml_call1(major_heap_increment_fun,major_heap_increment$0);
      caml_call1(space_overhead_fun,space_overhead$0);
      caml_call1(verbose_fun,verbose$0);
      caml_call1(max_overhead_fun,max_overhead$0);
      caml_call1(stack_limit_fun,stack_limit$0);
      caml_call1(allocation_policy_fun,allocation_policy$0);
      caml_call1(window_size_fun,window_size$0);
      caml_call1(custom_major_ratio_fun,custom_major_ratio$0);
      caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0);
      return caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0)}
    function fold$16
     (init,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {return caml_call2
              (custom_minor_max_size_fun,
               caml_call2
                (custom_minor_ratio_fun,
                 caml_call2
                  (custom_major_ratio_fun,
                   caml_call2
                    (window_size_fun,
                     caml_call2
                      (allocation_policy_fun,
                       caml_call2
                        (stack_limit_fun,
                         caml_call2
                          (max_overhead_fun,
                           caml_call2
                            (verbose_fun,
                             caml_call2
                              (space_overhead_fun,
                               caml_call2
                                (major_heap_increment_fun,
                                 caml_call2(minor_heap_size_fun,init,minor_heap_size$0),
                                 major_heap_increment$0),
                               space_overhead$0),
                             verbose$0),
                           max_overhead$0),
                         stack_limit$0),
                       allocation_policy$0),
                     window_size$0),
                   custom_major_ratio$0),
                 custom_minor_ratio$0),
               custom_minor_max_size$0)}
    function map_poly$0(record)
     {var
       _aPv_=[0,caml_call1(record[1],custom_minor_max_size$0),0],
       _aPw_=[0,caml_call1(record[1],custom_minor_ratio$0),_aPv_],
       _aPx_=[0,caml_call1(record[1],custom_major_ratio$0),_aPw_],
       _aPy_=[0,caml_call1(record[1],window_size$0),_aPx_],
       _aPz_=[0,caml_call1(record[1],allocation_policy$0),_aPy_],
       _aPA_=[0,caml_call1(record[1],stack_limit$0),_aPz_],
       _aPB_=[0,caml_call1(record[1],max_overhead$0),_aPA_],
       _aPC_=[0,caml_call1(record[1],verbose$0),_aPB_],
       _aPD_=[0,caml_call1(record[1],space_overhead$0),_aPC_],
       _aPE_=[0,caml_call1(record[1],major_heap_increment$0),_aPD_];
      return [0,caml_call1(record[1],minor_heap_size$0),_aPE_]}
    function for_all$13
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aPl_=caml_call1(minor_heap_size_fun,minor_heap_size$0),
       _aPm_=
        _aPl_
         ?caml_call1(major_heap_increment_fun,major_heap_increment$0)
         :_aPl_,
       _aPn_=_aPm_?caml_call1(space_overhead_fun,space_overhead$0):_aPm_,
       _aPo_=_aPn_?caml_call1(verbose_fun,verbose$0):_aPn_,
       _aPp_=_aPo_?caml_call1(max_overhead_fun,max_overhead$0):_aPo_,
       _aPq_=_aPp_?caml_call1(stack_limit_fun,stack_limit$0):_aPp_,
       _aPr_=_aPq_?caml_call1(allocation_policy_fun,allocation_policy$0):_aPq_,
       _aPs_=_aPr_?caml_call1(window_size_fun,window_size$0):_aPr_,
       _aPt_=
        _aPs_?caml_call1(custom_major_ratio_fun,custom_major_ratio$0):_aPs_,
       _aPu_=
        _aPt_?caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0):_aPt_;
      return _aPu_
              ?caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0)
              :_aPu_}
    function exists$14
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aPk_=caml_call1(minor_heap_size_fun,minor_heap_size$0),
       _aPb_=
        _aPk_
        ||
        caml_call1(major_heap_increment_fun,major_heap_increment$0),
       _aPc_=_aPb_ || caml_call1(space_overhead_fun,space_overhead$0),
       _aPd_=_aPc_ || caml_call1(verbose_fun,verbose$0),
       _aPe_=_aPd_ || caml_call1(max_overhead_fun,max_overhead$0),
       _aPf_=_aPe_ || caml_call1(stack_limit_fun,stack_limit$0),
       _aPg_=_aPf_ || caml_call1(allocation_policy_fun,allocation_policy$0),
       _aPh_=_aPg_ || caml_call1(window_size_fun,window_size$0),
       _aPi_=_aPh_ || caml_call1(custom_major_ratio_fun,custom_major_ratio$0),
       _aPj_=_aPi_ || caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0);
      return _aPj_
              ?_aPj_
              :caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0)}
    function to_list$10
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aO3_=
        [0,caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0),0],
       _aO4_=[0,caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0),_aO3_],
       _aO5_=[0,caml_call1(custom_major_ratio_fun,custom_major_ratio$0),_aO4_],
       _aO6_=[0,caml_call1(window_size_fun,window_size$0),_aO5_],
       _aO7_=[0,caml_call1(allocation_policy_fun,allocation_policy$0),_aO6_],
       _aO8_=[0,caml_call1(stack_limit_fun,stack_limit$0),_aO7_],
       _aO9_=[0,caml_call1(max_overhead_fun,max_overhead$0),_aO8_],
       _aO__=[0,caml_call1(verbose_fun,verbose$0),_aO9_],
       _aO$_=[0,caml_call1(space_overhead_fun,space_overhead$0),_aO__],
       _aPa_=
        [0,caml_call1(major_heap_increment_fun,major_heap_increment$0),_aO$_];
      return [0,caml_call1(minor_heap_size_fun,minor_heap_size$0),_aPa_]}
    function iter$22
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {caml_call3(minor_heap_size_fun,minor_heap_size$0,record,record[1]);
      caml_call3
       (major_heap_increment_fun,major_heap_increment$0,record,record[2]);
      caml_call3(space_overhead_fun,space_overhead$0,record,record[3]);
      caml_call3(verbose_fun,verbose$0,record,record[4]);
      caml_call3(max_overhead_fun,max_overhead$0,record,record[5]);
      caml_call3(stack_limit_fun,stack_limit$0,record,record[6]);
      caml_call3(allocation_policy_fun,allocation_policy$0,record,record[7]);
      caml_call3(window_size_fun,window_size$0,record,record[8]);
      caml_call3(custom_major_ratio_fun,custom_major_ratio$0,record,record[9]);
      caml_call3
       (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10]);
      return caml_call3
              (custom_minor_max_size_fun,
               custom_minor_max_size$0,
               record,
               record[11])}
    function fold$17
     (record,
      init,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aOT_=record[11],
       _aOU_=record[10],
       _aOV_=record[9],
       _aOW_=record[8],
       _aOX_=record[7],
       _aOY_=record[6],
       _aOZ_=record[5],
       _aO0_=record[4],
       _aO1_=record[3],
       _aO2_=record[2];
      return caml_call4
              (custom_minor_max_size_fun,
               caml_call4
                (custom_minor_ratio_fun,
                 caml_call4
                  (custom_major_ratio_fun,
                   caml_call4
                    (window_size_fun,
                     caml_call4
                      (allocation_policy_fun,
                       caml_call4
                        (stack_limit_fun,
                         caml_call4
                          (max_overhead_fun,
                           caml_call4
                            (verbose_fun,
                             caml_call4
                              (space_overhead_fun,
                               caml_call4
                                (major_heap_increment_fun,
                                 caml_call4
                                  (minor_heap_size_fun,
                                   init,
                                   minor_heap_size$0,
                                   record,
                                   record[1]),
                                 major_heap_increment$0,
                                 record,
                                 _aO2_),
                               space_overhead$0,
                               record,
                               _aO1_),
                             verbose$0,
                             record,
                             _aO0_),
                           max_overhead$0,
                           record,
                           _aOZ_),
                         stack_limit$0,
                         record,
                         _aOY_),
                       allocation_policy$0,
                       record,
                       _aOX_),
                     window_size$0,
                     record,
                     _aOW_),
                   custom_major_ratio$0,
                   record,
                   _aOV_),
                 custom_minor_ratio$0,
                 record,
                 _aOU_),
               custom_minor_max_size$0,
               record,
               _aOT_)}
    function for_all$14
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aOJ_=
        caml_call3(minor_heap_size_fun,minor_heap_size$0,record,record[1]),
       _aOK_=
        _aOJ_
         ?caml_call3
           (major_heap_increment_fun,major_heap_increment$0,record,record[2])
         :_aOJ_,
       _aOL_=
        _aOK_
         ?caml_call3(space_overhead_fun,space_overhead$0,record,record[3])
         :_aOK_,
       _aOM_=_aOL_?caml_call3(verbose_fun,verbose$0,record,record[4]):_aOL_,
       _aON_=
        _aOM_
         ?caml_call3(max_overhead_fun,max_overhead$0,record,record[5])
         :_aOM_,
       _aOO_=
        _aON_?caml_call3(stack_limit_fun,stack_limit$0,record,record[6]):_aON_,
       _aOP_=
        _aOO_
         ?caml_call3
           (allocation_policy_fun,allocation_policy$0,record,record[7])
         :_aOO_,
       _aOQ_=
        _aOP_?caml_call3(window_size_fun,window_size$0,record,record[8]):_aOP_,
       _aOR_=
        _aOQ_
         ?caml_call3
           (custom_major_ratio_fun,custom_major_ratio$0,record,record[9])
         :_aOQ_,
       _aOS_=
        _aOR_
         ?caml_call3
           (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10])
         :_aOR_;
      return _aOS_
              ?caml_call3
                (custom_minor_max_size_fun,
                 custom_minor_max_size$0,
                 record,
                 record[11])
              :_aOS_}
    function exists$15
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aOI_=
        caml_call3(minor_heap_size_fun,minor_heap_size$0,record,record[1]),
       _aOz_=
        _aOI_
        ||
        caml_call3
         (major_heap_increment_fun,major_heap_increment$0,record,record[2]),
       _aOA_=
        _aOz_
        ||
        caml_call3(space_overhead_fun,space_overhead$0,record,record[3]),
       _aOB_=_aOA_ || caml_call3(verbose_fun,verbose$0,record,record[4]),
       _aOC_=
        _aOB_
        ||
        caml_call3(max_overhead_fun,max_overhead$0,record,record[5]),
       _aOD_=
        _aOC_
        ||
        caml_call3(stack_limit_fun,stack_limit$0,record,record[6]),
       _aOE_=
        _aOD_
        ||
        caml_call3(allocation_policy_fun,allocation_policy$0,record,record[7]),
       _aOF_=
        _aOE_
        ||
        caml_call3(window_size_fun,window_size$0,record,record[8]),
       _aOG_=
        _aOF_
        ||
        caml_call3
         (custom_major_ratio_fun,custom_major_ratio$0,record,record[9]),
       _aOH_=
        _aOG_
        ||
        caml_call3
         (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10]);
      return _aOH_
              ?_aOH_
              :caml_call3
                (custom_minor_max_size_fun,
                 custom_minor_max_size$0,
                 record,
                 record[11])}
    function to_list$11
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aOp_=
        [0,
         caml_call3
          (custom_minor_max_size_fun,
           custom_minor_max_size$0,
           record,
           record[11]),
         0],
       _aOq_=
        [0,
         caml_call3
          (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10]),
         _aOp_],
       _aOr_=
        [0,
         caml_call3
          (custom_major_ratio_fun,custom_major_ratio$0,record,record[9]),
         _aOq_],
       _aOs_=
        [0,caml_call3(window_size_fun,window_size$0,record,record[8]),_aOr_],
       _aOt_=
        [0,
         caml_call3
          (allocation_policy_fun,allocation_policy$0,record,record[7]),
         _aOs_],
       _aOu_=
        [0,caml_call3(stack_limit_fun,stack_limit$0,record,record[6]),_aOt_],
       _aOv_=
        [0,caml_call3(max_overhead_fun,max_overhead$0,record,record[5]),_aOu_],
       _aOw_=[0,caml_call3(verbose_fun,verbose$0,record,record[4]),_aOv_],
       _aOx_=
        [0,
         caml_call3(space_overhead_fun,space_overhead$0,record,record[3]),
         _aOw_],
       _aOy_=
        [0,
         caml_call3
          (major_heap_increment_fun,major_heap_increment$0,record,record[2]),
         _aOx_];
      return [0,
              caml_call3
               (minor_heap_size_fun,minor_heap_size$0,record,record[1]),
              _aOy_]}
    function map$26
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aOf_=
        caml_call3
         (custom_minor_max_size_fun,custom_minor_max_size$0,record,record[11]),
       _aOg_=
        caml_call3
         (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10]),
       _aOh_=
        caml_call3
         (custom_major_ratio_fun,custom_major_ratio$0,record,record[9]),
       _aOi_=caml_call3(window_size_fun,window_size$0,record,record[8]),
       _aOj_=
        caml_call3(allocation_policy_fun,allocation_policy$0,record,record[7]),
       _aOk_=caml_call3(stack_limit_fun,stack_limit$0,record,record[6]),
       _aOl_=caml_call3(max_overhead_fun,max_overhead$0,record,record[5]),
       _aOm_=caml_call3(verbose_fun,verbose$0,record,record[4]),
       _aOn_=caml_call3(space_overhead_fun,space_overhead$0,record,record[3]),
       _aOo_=
        caml_call3
         (major_heap_increment_fun,major_heap_increment$0,record,record[2]);
      return [0,
              caml_call3
               (minor_heap_size_fun,minor_heap_size$0,record,record[1]),
              _aOo_,
              _aOn_,
              _aOm_,
              _aOl_,
              _aOk_,
              _aOj_,
              _aOi_,
              _aOh_,
              _aOg_,
              _aOf_]}
    function set_all_mutable_fields$0
     (record,
      minor_heap_size,
      major_heap_increment,
      space_overhead,
      verbose,
      max_overhead,
      stack_limit,
      allocation_policy)
     {var record$0=caml_call1(Base_Field[1][1],record);
      record$0[1] = minor_heap_size;
      record$0[2] = major_heap_increment;
      record$0[3] = space_overhead;
      record$0[4] = verbose;
      record$0[5] = max_overhead;
      record$0[6] = stack_limit;
      record$0[7] = allocation_policy;
      return 0}
    var
     Direct$0=
      [0,
       iter$22,
       fold$17,
       for_all$14,
       exists$15,
       to_list$11,
       map$26,
       set_all_mutable_fields$0],
     include$132=Make$2([0,compare$76,t_of_sexp$87,sexp_of_t$97]),
     symbol$218=include$132[1],
     symbol$219=include$132[2],
     symbol$220=include$132[3],
     symbol$221=include$132[4],
     symbol$222=include$132[5],
     symbol$223=include$132[6],
     equal$37=include$132[7],
     compare$77=include$132[8],
     min$16=include$132[9],
     max$16=include$132[10],
     ascending$16=include$132[11],
     descending$16=include$132[12],
     between$16=include$132[13],
     clamp_exn$16=include$132[14],
     clamp$16=include$132[15],
     comparator$25=include$132[16],
     validate_lbound$16=include$132[17],
     validate_ubound$16=include$132[18],
     validate_bound$16=include$132[19],
     Replace_polymorphic_compare$15=include$132[20],
     Map$24=include$132[21],
     Set$24=include$132[22];
    function to_int$7(param)
     {switch(param){case 0:return 0;case 1:return 1;default:return 2}}
    function tune
     (logger,
      minor_heap_size,
      major_heap_increment,
      space_overhead,
      verbose,
      max_overhead,
      stack_limit,
      allocation_policy,
      window_size,
      custom_major_ratio,
      custom_minor_ratio,
      custom_minor_max_size,
      param)
     {var old_control_params=runtime.caml_gc_get(0);
      function f(opt,to_string,field)
       {var old_value=caml_call2(Base_Field[3],field,old_control_params);
        if(opt)
         {var new_value=opt[1];
          caml_call2
           (_xV_,
            logger,
            function(f)
             {var
               _aOd_=caml_call1(to_string,new_value),
               _aOe_=caml_call1(to_string,old_value);
              return caml_call5
                      (_fG_,f,_alX_,caml_call1(Base_Field[2],field),_aOe_,_aOd_)});
          return new_value}
        return old_value}
      var
       allocation_policy$0=caml_call2(_yd_,allocation_policy,to_int$7),
       _aNJ_=Stdlib[33];
      function _aNK_(_aOc_){return f(custom_minor_max_size,_aNJ_,_aOc_)}
      var _aNL_=Stdlib[33];
      function _aNM_(_aOb_){return f(custom_minor_ratio,_aNL_,_aOb_)}
      var _aNN_=Stdlib[33];
      function _aNO_(_aOa_){return f(custom_major_ratio,_aNN_,_aOa_)}
      var _aNP_=Stdlib[33];
      function _aNQ_(_aN$_){return f(window_size,_aNP_,_aN$_)}
      var _aNR_=Stdlib[33];
      function _aNS_(_aN__){return f(allocation_policy$0,_aNR_,_aN__)}
      var _aNT_=Stdlib[33];
      function _aNU_(_aN9_){return f(stack_limit,_aNT_,_aN9_)}
      var _aNV_=Stdlib[33];
      function _aNW_(_aN8_){return f(max_overhead,_aNV_,_aN8_)}
      var _aNX_=Stdlib[33];
      function _aNY_(_aN7_){return f(verbose,_aNX_,_aN7_)}
      var _aNZ_=Stdlib[33];
      function _aN0_(_aN6_){return f(space_overhead,_aNZ_,_aN6_)}
      var _aN1_=Stdlib[33];
      function _aN2_(_aN5_){return f(major_heap_increment,_aN1_,_aN5_)}
      var
       _aN3_=Stdlib[33],
       new_control_params=
        map$25
         (function(_aN4_){return f(minor_heap_size,_aN3_,_aN4_)},
          _aN2_,
          _aN0_,
          _aNY_,
          _aNW_,
          _aNU_,
          _aNS_,
          _aNQ_,
          _aNO_,
          _aNM_,
          _aNK_);
      return runtime.caml_gc_set(new_control_params)}
    function disable_compaction(logger,allocation_policy,param)
     {if(typeof allocation_policy === "number")
       var allocation_policy$0=0;
      else
       var policy=allocation_policy[2],allocation_policy$0=[0,policy];
      return tune(logger,0,0,0,0,_alY_,0,allocation_policy$0,0,0,0,0,0)}
    var zero$6=runtime.caml_int_of_string(cst_0);
    function keep_alive(o)
     {for(;;)
       {var _aNI_=caml_call2(_aR_,zero$6,0);if(_aNI_)continue;return _aNI_}}
    function add_finalizer(x,f)
     {try
       {var
         _aNE_=
          function(x)
           {function _aNH_(param){return caml_call1(f,x)}
            return caml_call1(Base_Exn[14],_aNH_)},
         _aNF_=caml_call2(include$130[3],_aNE_,x);
        return _aNF_}
      catch(_aNG_)
       {_aNG_ = caml_wrap_exception(_aNG_);
        if(_aNG_[1] === Stdlib[6])return 0;
        throw _aNG_}}
    function add_finalizer_exn(x,f)
     {try
       {var
         _aNA_=
          function(x)
           {function _aND_(param){return caml_call1(f,x)}
            return caml_call1(Base_Exn[14],_aND_)},
         _aNB_=caml_call2(include$130[3],_aNA_,x);
        return _aNB_}
      catch(_aNC_)
       {_aNC_ = caml_wrap_exception(_aNC_);
        if(_aNC_[1] === Stdlib[6]){create$30(x);return 0}
        throw _aNC_}}
    function add_finalizer_last(x,f)
     {try
       {var
         _aNx_=function(param){return caml_call1(Base_Exn[14],f)},
         _aNy_=caml_call2(include$130[4],_aNx_,x);
        return _aNy_}
      catch(_aNz_)
       {_aNz_ = caml_wrap_exception(_aNz_);
        if(_aNz_[1] === Stdlib[6])return 0;
        throw _aNz_}}
    function add_finalizer_last_exn(x,f)
     {try
       {var
         _aNu_=function(param){return caml_call1(Base_Exn[14],f)},
         _aNv_=caml_call2(include$130[4],_aNu_,x);
        return _aNv_}
      catch(_aNw_)
       {_aNw_ = caml_wrap_exception(_aNw_);
        if(_aNw_[1] === Stdlib[6]){create$30(x);return 0}
        throw _aNw_}}
    var finalize_release=include$130[5];
    function sexp_of_t$98(param){return caml_call1(_ak_,cst_gc_alarm)}
    function create$33(f)
     {return caml_call1
              (create_alarm,
               function(param){return caml_call1(Base_Exn[14],f)})}
    var
     Alarm=[0,sexp_of_t$98,create$33,delete_alarm],
     Expert=
      [0,
       add_finalizer,
       add_finalizer_exn,
       add_finalizer_last,
       add_finalizer_last_exn,
       finalize_release,
       Alarm];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$424);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Gc=
      [0,
       [0,
        bin_size_t$71,
        bin_write_t$72,
        bin_read_t$143,
        bin_read_t$142,
        bin_shape_t$107,
        bin_writer_t$95,
        bin_reader_t$95,
        bin_t$95,
        t_of_sexp$86,
        sexp_of_t$96,
        stack_size,
        top_heap_words,
        compactions,
        fragments,
        largest_free,
        free_blocks,
        free_words,
        live_blocks,
        live_words,
        heap_chunks,
        heap_words,
        major_collections,
        minor_collections,
        major_words,
        promoted_words,
        minor_words,
        [0,
         names,
         stack_size$0,
         top_heap_words$0,
         compactions$0,
         fragments$0,
         largest_free$0,
         free_blocks$0,
         free_words$0,
         live_blocks$0,
         live_words$0,
         heap_chunks$0,
         heap_words$0,
         major_collections$0,
         minor_collections$0,
         major_words$0,
         promoted_words$0,
         minor_words$0,
         fold$14,
         make_creator,
         create$31,
         map$23,
         iter$19,
         for_all$11,
         exists$12,
         to_list$8,
         map_poly,
         Direct],
        symbol$212,
        symbol$213,
        symbol$214,
        symbol$215,
        symbol$216,
        symbol$217,
        equal$36,
        compare$75,
        min$15,
        max$15,
        ascending$15,
        descending$15,
        between$15,
        clamp_exn$15,
        clamp$15,
        comparator$24,
        validate_lbound$15,
        validate_ubound$15,
        validate_bound$15,
        Replace_polymorphic_compare$14,
        Map$23,
        Set$23],
       [0,
        bin_size_t$72,
        bin_write_t$73,
        bin_read_t$145,
        bin_read_t$144,
        bin_shape_t$108,
        bin_writer_t$96,
        bin_reader_t$96,
        bin_t$96,
        t_of_sexp$87,
        sexp_of_t$97,
        custom_minor_max_size,
        custom_minor_ratio,
        custom_major_ratio,
        window_size,
        allocation_policy,
        set_allocation_policy,
        stack_limit,
        set_stack_limit,
        max_overhead,
        set_max_overhead,
        verbose,
        set_verbose,
        space_overhead,
        set_space_overhead,
        major_heap_increment,
        set_major_heap_increment,
        minor_heap_size,
        set_minor_heap_size,
        [0,
         names$0,
         custom_minor_max_size$0,
         custom_minor_ratio$0,
         custom_major_ratio$0,
         window_size$0,
         allocation_policy$0,
         stack_limit$0,
         max_overhead$0,
         verbose$0,
         space_overhead$0,
         major_heap_increment$0,
         minor_heap_size$0,
         fold$16,
         make_creator$0,
         create$32,
         map$25,
         iter$21,
         for_all$13,
         exists$14,
         to_list$10,
         map_poly$0,
         Direct$0],
        symbol$218,
        symbol$219,
        symbol$220,
        symbol$221,
        symbol$222,
        symbol$223,
        equal$37,
        compare$77,
        min$16,
        max$16,
        ascending$16,
        descending$16,
        between$16,
        clamp_exn$16,
        clamp$16,
        comparator$25,
        validate_lbound$16,
        validate_ubound$16,
        validate_bound$16,
        Replace_polymorphic_compare$15,
        Map$24,
        Set$24],
       print_stat,
       allocated_bytes,
       keep_alive,
       [0,
        compare$73,
        equal$35,
        hash_fold_t$41,
        hash$47,
        t_of_sexp$85,
        sexp_of_t$95],
       tune,
       disable_compaction,
       Expert,
       [0,
        [0,
         [0,
          bin_size_t$70,
          bin_write_t$71,
          bin_read_t$141,
          bin_read_t$140,
          bin_shape_t$106,
          bin_writer_t$94,
          bin_reader_t$94,
          bin_t$94,
          compare$73,
          equal$35,
          hash_fold_t$41,
          hash$47,
          t_of_sexp$85,
          sexp_of_t$95]]]];
    caml_register_global(4486,Core_kernel_Gc,"Core_kernel__Gc");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$425);
    caml_call1(Expect_test_collector[4][1],cst_src_option_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$426,cst$195);
    var
     t_of_sexp$88=include$133[1],
     sexp_of_t$99=include$133[2],
     empty$11=include$133[3],
     create$34=include$133[4],
     init_some=include$133[5],
     init$5=include$133[6],
     length$19=include$133[7],
     get$7=include$133[8],
     get_some_exn=include$133[9],
     is_none=include$133[10],
     is_some=include$133[11],
     unsafe_get$0=include$133[12],
     unsafe_get_some_exn=include$133[13],
     unsafe_get_some_assuming_some=include$133[14],
     unsafe_is_some=include$133[15],
     set$13=include$133[16],
     set_some=include$133[17],
     set_none=include$133[18],
     swap$3=include$133[19],
     clear$3=include$133[20],
     unsafe_set$0=include$133[21],
     unsafe_set_some=include$133[22],
     unsafe_set_none=include$133[23],
     blit$6=include$133[24],
     blito$4=include$133[25],
     unsafe_blit$3=include$133[26],
     sub$7=include$133[27],
     subo$4=include$133[28],
     copy$4=include$133[29];
    function to_array$7(t)
     {function _aNt_(i){return caml_call2(unsafe_get$0,t,i)}
      return caml_call2(init,caml_call1(length$19,t),_aNt_)}
    function of_array$5(a)
     {function _aNs_(i){return a[1 + i]}
      return caml_call2(init$5,caml_call1(length,a),_aNs_)}
    var
     _al0_=caml_call1(Bin_prot_Shape[3][1],cst_a$93),
     _al1_=caml_call1(Bin_prot_Shape[4][1],cst_src_option_array_ml_9_18),
     _al2_=
      caml_call1
       (_dx_,caml_call1(_dj_,caml_call2(Bin_prot_Shape[15],_al1_,_al0_))),
     _al3_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$94),0],
     _al4_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$222),_al3_,_al2_],0],
     _al5_=caml_call1(Bin_prot_Shape[4][1],cst_src_option_array_ml_9_6),
     group$125=caml_call2(Bin_prot_Shape[6],_al5_,_al4_),
     _alZ_=[0,to_array$7,of_array$5];
    function bin_shape_t$109(a)
     {var _aNr_=caml_call1(Bin_prot_Shape[2][1],cst_t$223);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$125,_aNr_),[0,a,0])}
    function bin_size_t$73(size_of_a,v)
     {return caml_call2(_bA_,caml_call1(_bw_,size_of_a),v)}
    function bin_write_t$74(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_dz_,caml_call1(_dl_,write_a)),buf,pos,v)}
    function bin_read_t$146(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call1(_dC_,caml_call1(_dn_,of_a)),buf,pos_ref,vint)}
    function bin_read_t$147(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_dB_,caml_call1(_dn_,of_a)),buf,pos_ref)}
    var
     include$134=
      caml_call1
       (caml_call1
         (_V9_,
          [0,
           bin_shape_t$109,
           bin_size_t$73,
           bin_write_t$74,
           bin_read_t$147,
           bin_read_t$146]),
        _alZ_),
     _al6_=include$134[1],
     _al7_=include$134[2],
     _al8_=include$134[3],
     _al9_=include$134[4],
     _al__=include$134[5],
     _al$_=include$134[6],
     _ama_=include$134[7],
     _amb_=include$134[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$427);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Option_array=
      [0,
       _al6_,
       _al7_,
       _al8_,
       _al9_,
       _al__,
       _al$_,
       _ama_,
       _amb_,
       t_of_sexp$88,
       sexp_of_t$99,
       empty$11,
       create$34,
       init_some,
       init$5,
       length$19,
       get$7,
       get_some_exn,
       is_none,
       is_some,
       unsafe_get$0,
       unsafe_get_some_exn,
       unsafe_get_some_assuming_some,
       unsafe_is_some,
       set$13,
       set_some,
       set_none,
       swap$3,
       clear$3,
       unsafe_set$0,
       unsafe_set_some,
       unsafe_set_none,
       blit$6,
       blito$4,
       unsafe_blit$3,
       sub$7,
       subo$4,
       copy$4];
    caml_register_global
     (4488,Core_kernel_Option_array,"Core_kernel__Option_array");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$428);
    caml_call1(Expect_test_collector[4][1],cst_src_bus_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$429,cst$196);
    function sexp_of_t$100(of_v_x_001,param)
     {switch(param)
       {case 0:return _amf_;
        case 1:return _amg_;
        case 2:return _amh_;
        default:return _ami_}}
    var Callback_arity=[0,sexp_of_t$100];
    function sexp_of_t$101(param)
     {switch(param)
       {case 0:return _amj_;case 1:return _amk_;default:return _aml_}}
    function set1(t,a)
     {var _aNq_=t[1];
      if(_aNq_){var match=_aNq_[1];match[1] = a;return 0}
      t[1] = [0,[0,a]];
      return 0}
    function set2(t,a,b)
     {var _aNp_=t[1];
      if(_aNp_){var match=_aNp_[1];match[1] = a;match[2] = b;return 0}
      t[1] = [0,[1,a,b]];
      return 0}
    function set3(t,a,b,c)
     {var _aNo_=t[1];
      if(_aNo_)
       {var match=_aNo_[1];match[1] = a;match[2] = b;match[3] = c;return 0}
      t[1] = [0,[2,a,b,c]];
      return 0}
    function set4(t,a,b,c,d)
     {var _aNn_=t[1];
      if(_aNn_)
       {var match=_aNn_[1];
        match[1] = a;
        match[2] = b;
        match[3] = c;
        match[4] = d;
        return 0}
      t[1] = [0,[3,a,b,c,d]];
      return 0}
    var Bus_id=_XH_([0]);
    function callback(r){return r[2]}
    function _amm_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7]]}
    var
     _amn_=0,
     callback$0=
      [0,function(param){return 0},cst_callback,_amn_,callback,_amm_];
    function sexp_of_t$102(param,_aNc_)
     {var
       extract_exn=_aNc_[3],
       subscribers_index=_aNc_[4],
       subscribed_from=_aNc_[7],
       on_callback_raise=_aNc_[5],
       _aNd_=0,
       _aNe_=_fu_?0:[0,subscribers_index],
       _aNf_=extract_exn?_amo_:0,
       match=[0,[1,[0,_amp_,[0,caml_call1(_m7_,subscribed_from),0]]],0];
      if(_aNf_)
       var v=_aNf_[1],_aNg_=[0,[1,[0,_amq_,[0,caml_call1(_BP_,v),0]]],match];
      else
       var _aNg_=match;
      if(on_callback_raise)
       var
        _aNh_=0,
        _aNi_=function(_aNm_){return 0},
        _aNj_=
         [0,
          [1,[0,_amr_,[0,caml_call1(Sexplib0_Sexp_conv[24],_aNi_),_aNh_]]],
          _aNg_];
      else
       var _aNj_=_aNg_;
      if(_aNe_)
       var
        v$0=_aNe_[1],
        _aNk_=[0,[1,[0,_ams_,[0,caml_call1(sexp_of_t$44,v$0),0]]],_aNj_];
      else
       var _aNk_=_aNj_;
      if(_aNk_)
       if(_aNk_[2])var switch$0=0;else var h=_aNk_[1],_aNl_=h,switch$0=1;
      else
       var switch$0=0;
      if(! switch$0)var _aNl_=[1,_aNk_];
      return [1,[0,_amt_,[0,_aNl_,_aNd_]]]}
    function callbacks(r){return r[12]}
    function set_callbacks(r,v){r[12] = v;return 0}
    function subscribers(r){return r[11]}
    function set_subscribers(r,v){r[11] = v;return 0}
    function num_subscribers(r){return r[10]}
    function set_num_subscribers(r,v){r[10] = v;return 0}
    function callback_arity(r){return r[3]}
    function _amw_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              v,
              r[13]]}
    var
     _amx_=[0,set_callbacks],
     callbacks$0=
      [0,function(param){return 0},cst_callbacks,_amx_,callbacks,_amw_];
    function _amy_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              v,
              r[12],
              r[13]]}
    var
     _amz_=[0,set_subscribers],
     subscribers$0=
      [0,function(param){return 0},cst_subscribers,_amz_,subscribers,_amy_];
    function _amA_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              v,
              r[11],
              r[12],
              r[13]]}
    var
     _amB_=[0,set_num_subscribers],
     num_subscribers$0=
      [0,
       function(param){return 0},
       cst_num_subscribers,
       _amB_,
       num_subscribers,
       _amA_];
    function sexp_of_bus(param,_aM0_,_aMZ_)
     {var
       on_subscription_after_first_write=_aMZ_[5],
       created_from=_aMZ_[4],
       callback_arity=_aMZ_[3],
       name=_aMZ_[2],
       state=_aMZ_[8],
       write_ever_called=_aMZ_[9],
       num_subscribers=_aMZ_[10],
       subscribers=_aMZ_[11],
       subscribers$0=
        caml_call2
         (init,
          num_subscribers,
          function(i){return caml_call2(get_some_exn,subscribers,i)}),
       _aM1_=0,
       _aM2_=0;
      function _aM3_(param){return _amC_}
      var
       _aM4_=
        [0,
         [1,
          [0,
           _amD_,
           [0,
            caml_call2
             (_lg_,
              function(_aNb_){return sexp_of_t$102(_aM3_,_aNb_)},
              subscribers$0),
            _aM2_]]],
         _aM1_],
       _aM5_=[0,[1,[0,_amE_,[0,caml_call1(_BP_,write_ever_called),0]]],_aM4_],
       _aM6_=0;
      switch(state)
       {case 0:var _aM7_=_amc_;break;
        case 1:var _aM7_=_amd_;break;
        default:var _aM7_=_ame_}
      var
       _aM8_=
        [0,
         [1,[0,_amG_,[0,sexp_of_t$101(on_subscription_after_first_write),0]]],
         [0,[1,[0,_amF_,[0,_aM7_,_aM6_]]],_aM5_]],
       _aM9_=[0,[1,[0,_amH_,[0,caml_call1(_m7_,created_from),0]]],_aM8_],
       _aM__=0;
      function _aM$_(param){return _amI_}
      var
       match=
        [0,
         [1,
          [0,
           _amJ_,
           [0,caml_call2(Callback_arity[1],_aM$_,callback_arity),_aM__]]],
         _aM9_];
      if(name)
       var v=name[1],_aNa_=[0,[1,[0,_amK_,[0,caml_call1(_nu_,v),0]]],match];
      else
       var _aNa_=match;
      if(_aNa_)if(! _aNa_[2]){var h=_aNa_[1];return h}
      return [1,_aNa_]}
    function read_only$0(t){return t}
    function invariant$8(invariant_a,param,t)
     {function _aMI_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         callbacks_fun=
          check
           (function(callbacks)
             {var _aMV_=caml_call1(length$19,t[11]);
              if(caml_call2(_Nr_,caml_call1(length$19,callbacks),_aMV_))
               {var _aMX_=caml_call1(length$19,callbacks) - 1 | 0,_aMW_=0;
                if(! (_aMX_ < 0))
                 {var i=_aMW_;
                  for(;;)
                   {if(caml_call2(_Nt_,i,t[10]))
                     caml_call1(invariant_a,caml_call2(get_some_exn,callbacks,i));
                    else
                     if(! caml_call2(is_none,callbacks,i))
                      throw [0,Assert_failure,_amL_];
                    var _aMY_=i + 1 | 0;
                    if(_aMX_ !== i){var i=_aMY_;continue}
                    break}}
                return 0}
              throw [0,Assert_failure,_amM_]}),
         subscribers_fun=
          check
           (function(subscribers)
             {var _aMR_=caml_call1(length$19,subscribers) - 1 | 0,_aMQ_=0;
              if(! (_aMR_ < 0))
               {var i=_aMQ_;
                for(;;)
                 {if(caml_call2(_Nt_,i,t[10]))
                   {var
                     t$0=caml_call2(get_some_exn,subscribers,i),
                     _aMN_=
                      function(t)
                        {return function(param)
                          {var
                            callback_fun=
                             caml_call2(Base_Invariant[2],t,invariant_a);
                           caml_call1(callback_fun,callback$0);
                           return 0}}
                       (t$0),
                     _aMO_=function(param){return _amu_},
                     _aMP_=
                      function(_aMT_)
                        {return function(_aMU_){return sexp_of_t$102(_aMT_,_aMU_)}}
                       (_aMO_);
                    caml_call4(Base_Invariant[1],_amv_,t$0,_aMP_,_aMN_);
                    if(! caml_call2(_Nr_,i,t$0[4]))
                     throw [0,Assert_failure,_amN_]}
                  else
                   if(! caml_call2(is_none,subscribers,i))
                    throw [0,Assert_failure,_amO_];
                  var _aMS_=i + 1 | 0;
                  if(_aMR_ !== i){var i=_aMS_;continue}
                  break}}
              return 0}),
         num_subscribers_fun=
          check
           (function(num_subscribers)
             {if(caml_call2(_Np_,num_subscribers,0))return 0;
              throw [0,Assert_failure,_amP_]});
        caml_call1(num_subscribers_fun,num_subscribers$0);
        caml_call1(subscribers_fun,subscribers$0);
        caml_call1(callbacks_fun,callbacks$0);
        return 0}
      function _aMJ_(param){return _amQ_}
      function _aMK_(param){return _amR_}
      function _aML_(_aMM_){return sexp_of_bus(_aMK_,_aMJ_,_aMM_)}
      return caml_call4(Base_Invariant[1],_amS_,t,_aML_,_aMI_)}
    function is_closed(t)
     {switch(t[8]){case 0:return 1;case 1:return 0;default:return 0}}
    function sexp_of_t$103(of_callback,v)
     {return sexp_of_bus(of_callback,_OY_,v)}
    function invariant$9(invariant_a,t)
     {return invariant$8(invariant_a,function(_aMH_){return 0},t)}
    var Read_write$0=[0,sexp_of_t$103,invariant$9];
    function sexp_of_t$104(of_callback,v)
     {return sexp_of_bus(of_callback,_Ot_,v)}
    function invariant$10(invariant_a,t)
     {return invariant$8(invariant_a,function(_aMG_){return 0},t)}
    var Read_only=[0,sexp_of_t$104,invariant$10];
    function start_write_failing(t)
     {switch(t[8])
       {case 0:
         var
          _aMA_=function(param){return _amT_},
          _aMB_=function(param){return _amU_};
         return failwiths
                 (0,
                  _amV_,
                  cst_Bus_write_called_on_closed_bus,
                  t,
                  function(_aMF_){return sexp_of_bus(_aMB_,_aMA_,_aMF_)});
        case 1:
         var
          _aMC_=function(param){return _amW_},
          _aMD_=function(param){return _amX_};
         return failwiths
                 (0,
                  _amY_,
                  cst_Bus_write_called_from_callback_on_the_same_bus,
                  t,
                  function(_aME_){return sexp_of_bus(_aMD_,_aMC_,_aME_)});
        default:throw [0,Assert_failure,_amZ_]}}
    function capacity(t){return caml_call1(length$19,t[11])}
    function maybe_shrink_capacity(t)
     {var _aMx_=capacity(t),_aMy_=caml_call2(_Nq_,t[10] * 4 | 0,_aMx_);
      if(_aMy_)
       {var
         desired_capacity=t[10],
         copy_and_shrink=
          function(array)
           {var new_array=caml_call1(create$34,desired_capacity);
            caml_call5(blit$6,array,0,new_array,0,t[10]);
            return new_array};
        t[11] = copy_and_shrink(t[11]);
        t[12] = copy_and_shrink(t[12]);
        var _aMz_=0}
      else
       var _aMz_=_aMy_;
      return _aMz_}
    function add_subscriber(t,subscriber,at_subscribers_index)
     {subscriber[4] = at_subscribers_index;
      caml_call3(set_some,t[11],at_subscribers_index,subscriber);
      return caml_call3(set_some,t[12],at_subscribers_index,subscriber[2])}
    function remove_subscriber(t,subscriber)
     {var subscribers_index=subscriber[4];
      subscriber[4] = -1;
      caml_call2(set_none,t[11],subscribers_index);
      return caml_call2(set_none,t[12],subscribers_index)}
    function unsubscribe_assuming_valid_subscriber(t,subscriber)
     {var subscriber_index=subscriber[4],last_subscriber_index=t[10] - 1 | 0;
      remove_subscriber(t,subscriber);
      if(caml_call2(_Nt_,subscriber_index,last_subscriber_index))
       {var
         last_subscriber=
          caml_call2(get_some_exn,t[11],last_subscriber_index);
        remove_subscriber(t,last_subscriber);
        add_subscriber(t,last_subscriber,subscriber_index)}
      t[10] = t[10] - 1 | 0;
      return maybe_shrink_capacity(t)}
    function unsubscribe(t,subscriber)
     {var
       _aMv_=t[1],
       _aMu_=caml_call2(_Np_,subscriber[4],0),
       _aMw_=_aMu_?caml_call2(Bus_id[19],subscriber[1],_aMv_):_aMu_;
      if(_aMw_)
       switch(t[8])
        {case 0:return 0;
         case 1:t[13] = [0,subscriber,t[13]];return 0;
         default:return unsubscribe_assuming_valid_subscriber(t,subscriber)}
      return _aMw_}
    function unsubscribe_all(t)
     {if(is_closed(t))
       {var _aMr_=t[10] - 1 | 0,_aMq_=0;
        if(! (_aMr_ < 0))
         {var i=_aMq_;
          for(;;)
           {var
             subscriber=caml_call2(get_some_exn,t[11],i),
             _aMs_=function(on_close){return caml_call1(on_close,0)};
            caml_call2(_xV_,subscriber[6],_aMs_);
            remove_subscriber(t,subscriber);
            var _aMt_=i + 1 | 0;
            if(_aMr_ !== i){var i=_aMt_;continue}
            break}}
        t[10] = 0;
        return maybe_shrink_capacity(t)}
      throw [0,Assert_failure,_am0_]}
    function finish_write(t)
     {if(1 - caml_call1(is_empty$0,t[13]))
       {var
         _aMo_=
          function(_aMp_)
           {return unsubscribe_assuming_valid_subscriber(t,_aMp_)};
        caml_call2(_ph_,t[13],_aMo_);
        t[13] = 0}
      switch(t[8])
       {case 0:return unsubscribe_all(t);
        case 1:t[8] = 2;return 0;
        default:throw [0,Assert_failure,_am1_]}}
    function close(t)
     {switch(t[8])
       {case 0:return 0;
        case 1:t[8] = 0;return 0;
        default:t[8] = 0;return unsubscribe_all(t)}}
    function call_on_callback_raise(t,error)
     {try
       {var _aMn_=caml_call1(t[6],error);return _aMn_}
      catch(exn){exn = caml_wrap_exception(exn);close(t);throw exn}}
    function callback_raised(t,i,exn)
     {var
       backtrace=caml_call1(Base_Backtrace[6][4],0),
       subscriber=caml_call2(get_some_exn,t[11],i - 1 | 0),
       _aMb_=0,
       _aMc_=0,
       _aMd_=
        [0,
         [1,
          [0,
           _am3_,
           [0,sexp_of_t$102(function(param){return _am2_},subscriber),_aMc_]]],
         _aMb_],
       _aMe_=
        [0,[1,[0,_am4_,[0,caml_call1(Base_Backtrace[1],backtrace),0]]],_aMd_],
       _aMf_=[0,[1,[0,_am5_,[0,caml_call1(_QN_,exn),0]]],_aMe_],
       _aMg_=
        [1,
         [0,caml_call1(Sexplib0_Sexp_conv[7],cst_Bus_subscriber_raised),_aMf_]],
       error=function(sexp){return caml_call1(_n4_,sexp)}(_aMg_),
       _aMh_=subscriber[5];
      if(_aMh_)
       {var f=_aMh_[1],error$0=subscriber[3]?caml_call2(_oj_,0,exn):error;
        try
         {var _aMm_=caml_call1(f,error$0);return _aMm_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          var
           backtrace$0=caml_call1(Base_Backtrace[6][4],0),
           _aMi_=[0,[1,[0,_am6_,[0,caml_call1(_n5_,error$0),0]]],0],
           _aMj_=
            [0,
             [1,[0,_am7_,[0,caml_call1(Base_Backtrace[1],backtrace$0),0]]],
             _aMi_],
           _aMk_=[0,[1,[0,_am8_,[0,caml_call1(_QN_,exn),0]]],_aMj_],
           _aMl_=
            [1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7],
                cst_Bus_subscriber_s_on_callback_raise_raised),
              _aMk_]];
          return call_on_callback_raise
                  (t,function(sexp){return caml_call1(_n4_,sexp)}(_aMl_))}}
      return call_on_callback_raise(t,error)}
    function unsafe_get_callback(a,i)
     {return caml_call2(unsafe_get_some_assuming_some,a,i)}
    function write(t,a1)
     {var callbacks=t[12];
      t[9] = 1;
      if(2 <= t[8])
       {t[8] = 1;
        if(caml_call2(_Nr_,t[10],1))
         {try
           {caml_call1(unsafe_get_callback(callbacks,0),a1)}
          catch(exn){exn = caml_wrap_exception(exn);callback_raised(t,1,exn)}
          finish_write(t)}
        else
         {var len=t[10],i=[0,0];
          for(;;)
           {if(caml_call2(_Nt_,i[1],len))
             {try
               {var callback=unsafe_get_callback(callbacks,i[1]);
                i[1]++;
                caml_call1(callback,a1)}
              catch(exn$0)
               {exn$0 = caml_wrap_exception(exn$0);
                callback_raised(t,i[1],exn$0);
                continue;
                var exn=exn$0}
              continue}
            finish_write(t);
            break}}
        var _aMa_=t[7];
        if(_aMa_){var last_value=_aMa_[1];return set1(last_value,a1)}
        return 0}
      return start_write_failing(t)}
    function write2(t,a1,a2)
     {var callbacks=t[12];
      t[9] = 1;
      if(2 <= t[8])
       {t[8] = 1;
        if(caml_call2(_Nr_,t[10],1))
         {try
           {caml_call2(unsafe_get_callback(callbacks,0),a1,a2)}
          catch(exn){exn = caml_wrap_exception(exn);callback_raised(t,1,exn)}
          finish_write(t)}
        else
         {var len=t[10],i=[0,0];
          for(;;)
           {if(caml_call2(_Nt_,i[1],len))
             {try
               {var callback=unsafe_get_callback(callbacks,i[1]);
                i[1]++;
                caml_call2(callback,a1,a2)}
              catch(exn$0)
               {exn$0 = caml_wrap_exception(exn$0);
                callback_raised(t,i[1],exn$0);
                continue;
                var exn=exn$0}
              continue}
            finish_write(t);
            break}}
        var _aL$_=t[7];
        if(_aL$_){var last_value=_aL$_[1];return set2(last_value,a1,a2)}
        return 0}
      return start_write_failing(t)}
    function write3(t,a1,a2,a3)
     {var callbacks=t[12];
      t[9] = 1;
      if(2 <= t[8])
       {t[8] = 1;
        if(caml_call2(_Nr_,t[10],1))
         {try
           {caml_call3(unsafe_get_callback(callbacks,0),a1,a2,a3)}
          catch(exn){exn = caml_wrap_exception(exn);callback_raised(t,1,exn)}
          finish_write(t)}
        else
         {var len=t[10],i=[0,0];
          for(;;)
           {if(caml_call2(_Nt_,i[1],len))
             {try
               {var callback=unsafe_get_callback(callbacks,i[1]);
                i[1]++;
                caml_call3(callback,a1,a2,a3)}
              catch(exn$0)
               {exn$0 = caml_wrap_exception(exn$0);
                callback_raised(t,i[1],exn$0);
                continue;
                var exn=exn$0}
              continue}
            finish_write(t);
            break}}
        var _aL__=t[7];
        if(_aL__){var last_value=_aL__[1];return set3(last_value,a1,a2,a3)}
        return 0}
      return start_write_failing(t)}
    function write4(t,a1,a2,a3,a4)
     {var callbacks=t[12];
      t[9] = 1;
      if(2 <= t[8])
       {t[8] = 1;
        if(caml_call2(_Nr_,t[10],1))
         {try
           {caml_call4(unsafe_get_callback(callbacks,0),a1,a2,a3,a4)}
          catch(exn){exn = caml_wrap_exception(exn);callback_raised(t,1,exn)}
          finish_write(t)}
        else
         {var len=t[10],i=[0,0];
          for(;;)
           {if(caml_call2(_Nt_,i[1],len))
             {try
               {var callback=unsafe_get_callback(callbacks,i[1]);
                i[1]++;
                caml_call4(callback,a1,a2,a3,a4)}
              catch(exn$0)
               {exn$0 = caml_wrap_exception(exn$0);
                callback_raised(t,i[1],exn$0);
                continue;
                var exn=exn$0}
              continue}
            finish_write(t);
            break}}
        var _aL9_=t[7];
        if(_aL9_){var last_value=_aL9_[1];return set4(last_value,a1,a2,a3,a4)}
        return 0}
      return start_write_failing(t)}
    function create$35
     (name,
      created_from,
      callback_arity,
      on_subscription_after_first_write,
      on_callback_raise)
     {switch(on_subscription_after_first_write)
       {case 0:var last_value=0;break;
        case 1:var last_value=[0,[0,0]];break;
        default:var last_value=0}
      var _aL7_=caml_call1(create$34,0),_aL8_=caml_call1(create$34,0);
      return [0,
              caml_call1(Bus_id[45],0),
              name,
              callback_arity,
              created_from,
              on_subscription_after_first_write,
              on_callback_raise,
              last_value,
              2,
              0,
              0,
              _aL8_,
              _aL7_,
              0]}
    function can_subscribe(t)
     {switch(t[5])
       {case 0:var _aL5_=1;break;case 1:var _aL5_=1;break;default:var _aL5_=0}
      var _aL6_=_aL5_ || 1 - t[9];
      return _aL6_}
    function subscribe_exn
     (opt,on_callback_raise,on_close,t,subscribed_from,callback)
     {if(opt)var sth=opt[1],extract_exn=sth;else var extract_exn=0;
      if(1 - can_subscribe(t))
       {var
         _aLY_=0,
         _aLZ_=0,
         _aL0_=0,
         _aL1_=function(param){return _am9_},
         _aL2_=
          [0,
           [1,
            [0,
             [1,
              [0,
               _am$_,
               [0,sexp_of_bus(function(param){return _am__},_aL1_,t),_aL0_]]],
             _aLZ_]],
           _aLY_];
        failwiths
         (0,
          _anb_,
          cst_Bus_subscribe_exn_called_after_first_write,
          [1,[0,[1,[0,_ana_,[0,caml_call1(_m7_,subscribed_from),0]]],_aL2_]],
          sexp_of_t$35)}
      if(0 === t[8])
       return [0,
               t[1],
               callback,
               extract_exn,
               -1,
               on_callback_raise,
               on_close,
               subscribed_from];
      var
       subscriber=
        [0,
         t[1],
         callback,
         extract_exn,
         t[10],
         on_callback_raise,
         on_close,
         subscribed_from],
       _aL3_=t[10];
      if(caml_call2(_Nr_,capacity(t),_aL3_))
       {var
         capacity$0=capacity(t),
         new_capacity=caml_call2(max$2,1,capacity$0 * 2 | 0),
         copy_and_double=
          function(array)
           {var new_array=caml_call1(create$34,new_capacity);
            caml_call5(blit$6,array,0,new_array,0,capacity$0);
            return new_array};
        t[11] = copy_and_double(t[11]);
        t[12] = copy_and_double(t[12])}
      add_subscriber(t,subscriber,t[10]);
      t[10] = t[10] + 1 | 0;
      var _aL4_=t[7];
      if(_aL4_)
       {var last_value=_aL4_[1],_aLW_=last_value[1];
        if(_aLW_)
         {var _aLX_=_aLW_[1];
          switch(_aLX_[0])
           {case 0:var arg1=_aLX_[1];caml_call1(callback,arg1);break;
            case 1:
             var arg1$0=_aLX_[1],arg2=_aLX_[2];
             caml_call2(callback,arg1$0,arg2);
             break;
            case 2:
             var arg1$1=_aLX_[1],arg2$0=_aLX_[2],arg3=_aLX_[3];
             caml_call3(callback,arg1$1,arg2$0,arg3);
             break;
            default:
             var
              arg1$2=_aLX_[1],
              arg2$1=_aLX_[2],
              arg3$0=_aLX_[3],
              arg4=_aLX_[4];
             caml_call4(callback,arg1$2,arg2$1,arg3$0,arg4)}}}
      return subscriber}
    function iter_exn(t,subscribed_from,f)
     {if(1 - can_subscribe(t))
       {var
         _aLT_=function(param){return _anc_},
         _aLU_=function(param){return _and_};
        failwiths
         (0,
          _ane_,
          cst_Bus_iter_exn_called_after_first_write,
          t,
          function(_aLV_){return sexp_of_bus(_aLU_,_aLT_,_aLV_)})}
      subscribe_exn(0,0,0,t,subscribed_from,f);
      return 0}
    function sexp_of_t$105(of_v_x_002,of_v_x_003,of_v_x_004,param)
     {switch(param)
       {case 0:return _anf_;
        case 1:return _ang_;
        case 2:return _anh_;
        default:return _ani_}}
    var Fold_arity=[0,sexp_of_t$105];
    function fold_exn(t,subscribed_from,fold_arity,init,f)
     {var state=[0,init];
      if(1 - can_subscribe(t))
       {var
         _aLP_=function(param){return _anj_},
         _aLQ_=function(param){return _ank_};
        failwiths
         (0,
          _anl_,
          cst_Bus_fold_exn_called_after_first_write,
          t,
          function(_aLS_){return sexp_of_bus(_aLQ_,_aLP_,_aLS_)})}
      switch(fold_arity)
       {case 0:
         var
          _aLR_=
           function(a1){state[1] = caml_call2(f,state[1],a1);return 0};
         break;
        case 1:
         var
          _aLR_=
           function(a1,a2){state[1] = caml_call3(f,state[1],a1,a2);return 0};
         break;
        case 2:
         var
          _aLR_=
           function(a1,a2,a3)
            {state[1] = caml_call4(f,state[1],a1,a2,a3);return 0};
         break;
        default:
         var
          _aLR_=
           function(a1,a2,a3,a4)
            {state[1] = caml_call5(f,state[1],a1,a2,a3,a4);return 0}}
      return iter_exn(t,subscribed_from,_aLR_)}
    function _anm_(param)
     {function assert_no_allocation(bus_r,callback,write)
       {subscribe_exn(0,0,0,bus_r,_ann_,callback);
        var
         starting_minor_words=runtime.core_kernel_gc_minor_words(0),
         starting_major_words=runtime.core_kernel_gc_major_words(0);
        caml_call1(write,0);
        var
         ending_minor_words=runtime.core_kernel_gc_minor_words(0),
         ending_major_words=runtime.core_kernel_gc_major_words(0),
         got=ending_minor_words - starting_minor_words | 0;
        caml_call8
         (Ppx_assert_lib_Runtime[3],pos,sexp_of_t$44,compare$32,0,0,0,0,got);
        var got$0=ending_major_words - starting_major_words | 0;
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$0,
                 sexp_of_t$44,
                 compare$32,
                 0,
                 0,
                 0,
                 0,
                 got$0)}
      function _aLE_(param)
       {function create(created_from,arity)
         {return create$35(0,created_from,arity,2,_om_)}
        var
         bus1=create(_ano_,0),
         bus2=create(_anp_,1),
         bus3=create(_anq_,2),
         bus4=create(_anr_,3);
        function _aLF_(param){return write(bus1,0)}
        assert_no_allocation(bus1,function(param){return 0},_aLF_);
        function _aLG_(param){return write2(bus2,0,0)}
        assert_no_allocation(bus2,function(param,_aLO_){return 0},_aLG_);
        function _aLH_(param){return write3(bus3,0,0,0)}
        assert_no_allocation(bus3,function(param,_aLN_,_aLM_){return 0},_aLH_);
        function _aLI_(param){return write4(bus4,0,0,0,0)}
        return assert_no_allocation
                (bus4,function(param,_aLL_,_aLK_,_aLJ_){return 0},_aLI_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_write_doesn_t_allocate_when_inlined,
        0,
        cst_src_bus_ml$0,
        738,
        4,
        776,
        _aLE_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$197,
      0,
      cst_src_bus_ml$1,
      721,
      0,
      1634,
      _anm_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$430);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bus=
      [0,
       Callback_arity,
       sexp_of_bus,
       Read_write$0,
       Read_only,
       [0,sexp_of_t$101],
       read_only$0,
       create$35,
       callback_arity,
       num_subscribers,
       is_closed,
       close,
       write,
       write2,
       write3,
       write4,
       [0,sexp_of_t$102],
       subscribe_exn,
       iter_exn,
       Fold_arity,
       fold_exn,
       unsubscribe];
    caml_register_global(4491,Core_kernel_Bus,"Core_kernel__Bus");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$431);
    caml_call1(Expect_test_collector[4][1],cst_src_debug_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$432,cst$198);
    function eprint(message){return caml_call2(_fJ_,_ans_,message)}
    function eprint_s(sexp){return eprint(caml_call2(to_string_hum,0,sexp))}
    function eprints(v0,v1,sexp_of_a)
     {var v0$0=caml_call1(_ak_,v0),v1$0=caml_call1(sexp_of_a,v1);
      return eprint_s([1,[0,v0$0,[0,v1$0,0]]])}
    function eprintf(format){return caml_call2(_fG_,eprint,format)}
    function Make$13(symbol)
     {var check_invariant=[0,1],show_messages=[0,1];
      function debug
       (invariant,module_name,name,ts,arg,sexp_of_arg,sexp_of_result,f)
       {if(show_messages[1])
         eprints
          (caml_call2
            (include$39[48],_ant_,[0,module_name,[0,cst$199,[0,name,0]]]),
           arg,
           sexp_of_arg);
        if(check_invariant[1])
         try
          {caml_call2(include$23[8],ts,invariant)}
         catch(exn)
          {exn = caml_wrap_exception(exn);
           failwiths
            (0,
             _anu_,
             cst_invariant_pre_condition_failed,
             [0,name,exn],
             function(param)
              {var
                v1=param[2],
                v0=param[1],
                v0$0=caml_call1(_ak_,v0),
                v1$0=caml_call1(sexp_of_t,v1);
               return [1,[0,v0$0,[0,v1$0,0]]]})}
        var result_or_exn=caml_call1(_ik_,f);
        if(check_invariant[1])
         try
          {caml_call2(include$23[8],ts,invariant)}
         catch(exn)
          {exn = caml_wrap_exception(exn);
           failwiths
            (0,
             _anv_,
             cst_invariant_post_condition_failed,
             [0,name,exn],
             function(param)
              {var
                v1=param[2],
                v0=param[1],
                v0$0=caml_call1(_ak_,v0),
                v1$0=caml_call1(sexp_of_t,v1);
               return [1,[0,v0$0,[0,v1$0,0]]]})}
        if(show_messages[1])
         {var _aLD_=caml_call2(_hP_,sexp_of_result,sexp_of_t);
          eprints
           (caml_call2
             (include$39[48],_anx_,[0,module_name,[0,cst$200,[0,name,_anw_]]]),
            result_or_exn,
            _aLD_)}
        return caml_call1(_h9_,result_or_exn)}
      return [0,check_invariant,show_messages,debug]}
    var should_print_backtrace=[0,0];
    function am_internal(here,message)
     {caml_call2(_fJ_,_any_,caml_call1(_m6_,here));
      if(should_print_backtrace[1])
       {var _aLC_=caml_call2(Base_Backtrace[2],0,0);
        caml_call2
         (_fJ_,
          _anz_,
          caml_call2(to_string_hum,0,caml_call1(Base_Backtrace[1],_aLC_)))}
      if(message){var message$0=message[1];caml_call2(_fJ_,_anA_,message$0)}
      return caml_call1(_fJ_,_anB_)}
    function am(here){return am_internal(here,0)}
    function amf(here,fmt)
     {return caml_call2
              (_fG_,function(string){return am_internal(here,[0,string])},fmt)}
    function ams(here,v0,v1,sexp_of_a)
     {var v0$0=caml_call1(_ak_,v0),v1$0=caml_call1(sexp_of_a,v1);
      return am_internal
              (here,[0,caml_call2(to_string_hum,0,[1,[0,v0$0,[0,v1$0,0]]])])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$433);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Debug=
      [0,
       eprint,
       eprints,
       eprint_s,
       eprintf,
       Make$13,
       am,
       ams,
       amf,
       should_print_backtrace];
    caml_register_global(4492,Core_kernel_Debug,"Core_kernel__Debug");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$434);
    caml_call1(Expect_test_collector[4][1],cst_src_deque_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$435,cst$201);
    function create$36(initial_length,never_shrink,param)
     {if(never_shrink)
       var b=never_shrink[1],never_shrink$0=b;
      else
       var never_shrink$0=caml_call1(_yj_,initial_length);
      var initial_length$0=caml_call2(_yn_,initial_length,7);
      if(caml_call2(_Nt_,initial_length$0,0))
       caml_call3(_Ph_,_anC_,initial_length$0,0);
      var arr_length=initial_length$0 + 1 | 0;
      return [0,
              caml_call1(create$34,arr_length),
              0,
              1,
              0,
              0,
              arr_length,
              never_shrink$0]}
    function length$20(t){return t[5]}
    function is_empty$14(t){return caml_call2(_Nr_,t[5],0)}
    function apparent_front_index_when_not_empty(t){return t[4]}
    function apparent_back_index_when_not_empty(t)
     {return (t[4] + t[5] | 0) - 1 | 0}
    function actual_front_index_when_not_empty(t)
     {return caml_call2(_Nr_,t[2],t[6] - 1 | 0)?0:t[2] + 1 | 0}
    function actual_back_index_when_not_empty(t)
     {return caml_call2(_Nr_,t[3],0)?t[6] - 1 | 0:t[3] - 1 | 0}
    function checked(t,f){return is_empty$14(t)?0:[0,caml_call1(f,t)]}
    function front_index(t)
     {return checked(t,apparent_front_index_when_not_empty)}
    function back_index(t)
     {return checked(t,apparent_back_index_when_not_empty)}
    function foldi$1(t,dir,init,f)
     {if(is_empty$14(t))return init;
      var
       apparent_front=t[4],
       apparent_back=apparent_back_index_when_not_empty(t),
       actual_front=actual_front_index_when_not_empty(t),
       actual_back=actual_back_index_when_not_empty(t);
      function loop(acc,apparent_i,real_i,stop_pos,step)
       {var acc$0=acc,apparent_i$0=apparent_i,real_i$0=real_i;
        for(;;)
         {if(caml_call2(_Nr_,real_i$0,stop_pos))return [0,acc$0,apparent_i$0];
          var
           real_i$1=real_i$0 + step | 0,
           apparent_i$1=apparent_i$0 + step | 0,
           acc$1=
            caml_call3
             (f,apparent_i$0,acc$0,caml_call2(get_some_exn,t[1],real_i$0)),
           acc$0=acc$1,
           apparent_i$0=apparent_i$1,
           real_i$0=real_i$1;
          continue}}
      if(252818429 <= dir)
       {if(caml_call2(_Nq_,actual_front,actual_back))
         {var
           match=loop(init,apparent_back,actual_back,actual_front - 1 | 0,-1),
           acc=match[1];
          return acc}
        var
         match$0=loop(init,apparent_back,actual_back,-1,-1),
         apparent_i=match$0[2],
         acc$0=match$0[1],
         match$1=loop(acc$0,apparent_i,t[6] - 1 | 0,actual_front - 1 | 0,-1),
         acc$1=match$1[1];
        return acc$1}
      if(caml_call2(_Nq_,actual_front,actual_back))
       {var
         match$2=loop(init,apparent_front,actual_front,actual_back + 1 | 0,1),
         acc$2=match$2[1];
        return acc$2}
      var
       match$3=loop(init,apparent_front,actual_front,t[6],1),
       apparent_i$0=match$3[2],
       acc$3=match$3[1],
       match$4=loop(acc$3,apparent_i$0,0,actual_back + 1 | 0,1),
       acc$4=match$4[1];
      return acc$4}
    function fold$18(t,dir,init,f)
     {return foldi$1
              (t,dir,init,function(param,acc,v){return caml_call2(f,acc,v)})}
    function iteri$6(t,dir,f)
     {return foldi$1(t,dir,0,function(i,param,v){return caml_call2(f,i,v)})}
    function iter$23(t,dir,f)
     {return foldi$1(t,dir,0,function(param,_aLB_,v){return caml_call1(f,v)})}
    function fold$19(t,init,f){return fold$18(t,250975701,init,f)}
    function foldi$2(t,init,f){return foldi$1(t,250975701,init,f)}
    function iteri$7(t,f){return iteri$6(t,250975701,f)}
    function iteri_internal(t,f)
     {var _aLz_=1 - is_empty$14(t);
      if(_aLz_)
       {var
         actual_front=actual_front_index_when_not_empty(t),
         actual_back=actual_back_index_when_not_empty(t),
         loop=
          function(real_i,stop_pos)
           {var real_i$0=real_i;
            for(;;)
             {var _aLA_=caml_call2(_Nt_,real_i$0,stop_pos);
              if(_aLA_)
               {caml_call2(f,t[1],real_i$0);
                var real_i$1=real_i$0 + 1 | 0,real_i$0=real_i$1;
                continue}
              return _aLA_}};
        return caml_call2(_Nq_,actual_front,actual_back)
                ?loop(actual_front,actual_back + 1 | 0)
                :(loop(actual_front,t[6]),loop(0,actual_back + 1 | 0))}
      return _aLz_}
    function iter$24(t,f)
     {return iteri_internal
              (t,
               function(arr,i)
                {return caml_call1(f,caml_call2(get_some_exn,arr,i))})}
    function clear$4(t)
     {if(t[7])
       iteri_internal(t,unsafe_set_none);
      else
       t[1] = caml_call1(create$34,8);
      t[2] = 0;
      t[3] = 1;
      t[5] = 0;
      t[6] = caml_call1(length$19,t[1]);
      return 0}
    var
     iter$25=[0,-198771759,iter$24],
     length$21=[0,-198771759,length$20],
     C$2=caml_call1(include$7[16],[0,fold$19,iter$25,length$21]),
     _anD_=C$2[10],
     _anE_=C$2[11],
     _anF_=C$2[8],
     _anG_=C$2[1],
     _anH_=C$2[9],
     _anI_=C$2[13],
     _anJ_=C$2[12],
     _anK_=C$2[14],
     _anL_=C$2[16],
     _anM_=C$2[17],
     _anN_=C$2[6],
     _anO_=C$2[7];
    function blit$7(new_arr,t)
     {if(is_empty$14(t))throw [0,Assert_failure,_anP_];
      var
       actual_front=actual_front_index_when_not_empty(t),
       actual_back=actual_back_index_when_not_empty(t),
       old_arr=t[1];
      if(caml_call2(_Nq_,actual_front,actual_back))
       caml_call5(blit$6,old_arr,actual_front,new_arr,0,t[5]);
      else
       {var break_pos=caml_call1(length$19,old_arr) - actual_front | 0;
        caml_call5(blit$6,old_arr,actual_front,new_arr,0,break_pos);
        caml_call5(blit$6,old_arr,0,new_arr,break_pos,actual_back + 1 | 0)}
      t[3] = t[5];
      t[1] = new_arr;
      t[6] = caml_call1(length$19,new_arr);
      t[2] = caml_call1(length$19,new_arr) - 1 | 0;
      if(caml_call2(_Ns_,t[2],t[3]))return 0;
      throw [0,Assert_failure,_anQ_]}
    function maybe_shrink_underlying(t)
     {var _aLw_=1 - t[7];
      if(_aLw_)
       var
        _aLx_=caml_call2(_Ns_,t[6],10),
        _aLy_=_aLx_?caml_call2(_Ns_,t[6] / 3 | 0,t[5]):_aLx_;
      else
       var _aLy_=_aLw_;
      if(_aLy_)
       {var new_arr=caml_call1(create$34,t[6] / 2 | 0);
        return blit$7(new_arr,t)}
      return _aLy_}
    function grow_underlying(t)
     {var new_arr=caml_call1(create$34,t[6] * 2 | 0);return blit$7(new_arr,t)}
    function enqueue_back(t,v)
     {if(caml_call2(_Nr_,t[2],t[3]))grow_underlying(t);
      caml_call3(set_some,t[1],t[3],v);
      var _aLv_=caml_call2(_Nr_,t[3],t[6] - 1 | 0)?0:t[3] + 1 | 0;
      t[3] = _aLv_;
      t[5] = t[5] + 1 | 0;
      return 0}
    function enqueue_front(t,v)
     {if(caml_call2(_Nr_,t[2],t[3]))grow_underlying(t);
      caml_call3(set_some,t[1],t[2],v);
      var _aLu_=caml_call2(_Nr_,t[2],0)?t[6] - 1 | 0:t[2] - 1 | 0;
      t[2] = _aLu_;
      t[4] = t[4] - 1 | 0;
      t[5] = t[5] + 1 | 0;
      return 0}
    function enqueue(t,back_or_front,v)
     {return 109975721 <= back_or_front?enqueue_front(t,v):enqueue_back(t,v)}
    function peek_front_nonempty(t)
     {var _aLt_=actual_front_index_when_not_empty(t);
      return caml_call2(get_some_exn,t[1],_aLt_)}
    function peek_front_exn(t)
     {return is_empty$14(t)
              ?caml_call1(_Gg_,cst_Deque_peek_front_exn_passed_an_empty_queue)
              :peek_front_nonempty(t)}
    function peek_front(t){return is_empty$14(t)?0:[0,peek_front_nonempty(t)]}
    function peek_back_nonempty(t)
     {var _aLs_=actual_back_index_when_not_empty(t);
      return caml_call2(get_some_exn,t[1],_aLs_)}
    function peek_back_exn(t)
     {return is_empty$14(t)
              ?caml_call1(_Gg_,cst_Deque_peek_back_exn_passed_an_empty_queue)
              :peek_back_nonempty(t)}
    function peek_back(t){return is_empty$14(t)?0:[0,peek_back_nonempty(t)]}
    function peek(t,back_or_front)
     {return 109975721 <= back_or_front?peek_front(t):peek_back(t)}
    function dequeue_front_nonempty(t)
     {var
       i=actual_front_index_when_not_empty(t),
       res=caml_call2(get_some_exn,t[1],i);
      caml_call2(set_none,t[1],i);
      t[2] = i;
      t[4] = t[4] + 1 | 0;
      t[5] = t[5] - 1 | 0;
      maybe_shrink_underlying(t);
      return res}
    function dequeue_front_exn(t)
     {return is_empty$14(t)
              ?caml_call1
                (_Gg_,cst_Deque_dequeue_front_exn_passed_an_empty_queue)
              :dequeue_front_nonempty(t)}
    function dequeue_front(t)
     {return is_empty$14(t)?0:[0,dequeue_front_nonempty(t)]}
    function dequeue_back_nonempty(t)
     {var
       i=actual_back_index_when_not_empty(t),
       res=caml_call2(get_some_exn,t[1],i);
      caml_call2(set_none,t[1],i);
      t[3] = i;
      t[5] = t[5] - 1 | 0;
      maybe_shrink_underlying(t);
      return res}
    function dequeue_back_exn(t)
     {return is_empty$14(t)
              ?caml_call1
                (_Gg_,cst_Deque_dequeue_back_exn_passed_an_empty_queue)
              :dequeue_back_nonempty(t)}
    function dequeue_back(t)
     {return is_empty$14(t)?0:[0,dequeue_back_nonempty(t)]}
    function dequeue_exn(t,back_or_front)
     {return 109975721 <= back_or_front
              ?dequeue_front_exn(t)
              :dequeue_back_exn(t)}
    function dequeue(t,back_or_front)
     {return 109975721 <= back_or_front?dequeue_front(t):dequeue_back(t)}
    function drop_gen(opt,dequeue,t)
     {if(opt)var sth=opt[1],n=sth;else var n=1;
      if(caml_call2(_Nt_,n,0))caml_call3(_Ph_,_anR_,n,0);
      var n$0=n;
      for(;;)
       {var _aLq_=caml_call2(_Ns_,n$0,0);
        if(_aLq_)
         {var match=caml_call1(dequeue,t);
          if(match){var n$1=n$0 - 1 | 0,n$0=n$1;continue}
          var _aLr_=0}
        else
         var _aLr_=_aLq_;
        return _aLr_}}
    function drop_front(n,t){return drop_gen(n,dequeue_front,t)}
    function drop_back(n,t){return drop_gen(n,dequeue_back,t)}
    function drop(n,t,back_or_front)
     {return 109975721 <= back_or_front?drop_front(n,t):drop_back(n,t)}
    function assert_not_empty(t,name)
     {var _aLp_=is_empty$14(t);
      return _aLp_?caml_call3(_Pg_,_anS_,name,0):_aLp_}
    function true_index_exn(t,i)
     {var
       i_from_zero=i - t[4] | 0,
       _aLn_=caml_call2(_Nt_,i_from_zero,0),
       _aLo_=_aLn_ || caml_call2(_Nq_,t[5],i_from_zero);
      if(_aLo_)
       {assert_not_empty(t,cst_Deque_true_index_exn);
        var
         apparent_front=t[4],
         apparent_back=apparent_back_index_when_not_empty(t);
        caml_call5(_Ph_,_anT_,i,apparent_front,apparent_back,0)}
      var true_i=(t[2] + 1 | 0) + i_from_zero | 0;
      return caml_call2(_Np_,true_i,t[6])?true_i - t[6] | 0:true_i}
    function get$8(t,i)
     {var _aLm_=true_index_exn(t,i);
      return caml_call2(get_some_exn,t[1],_aLm_)}
    function get_opt(t,i)
     {try {var _aLk_=[0,get$8(t,i)];return _aLk_}catch(_aLl_){return 0}}
    function set_exn(t,i,v)
     {var _aLj_=true_index_exn(t,i);return caml_call3(set_some,t[1],_aLj_,v)}
    function to_array$8(t)
     {var match=peek_front(t);
      if(match)
       {var front=match[1],arr=caml_call2(create,t[5],front);
        fold$19
         (t,
          0,
          function(i,v){caml_check_bound(arr,i)[1 + i] = v;return i + 1 | 0});
        return arr}
      return [0]}
    function of_array$6(arr)
     {var t=create$36([0,caml_call1(length,arr) + 1 | 0],0,0);
      caml_call2(iter,arr,function(v){return enqueue_back(t,v)});
      return t}
    var
     _anU_=caml_call1(Bin_prot_Shape[3][1],cst_a$95),
     _anV_=caml_call1(Bin_prot_Shape[4][1],cst_src_deque_ml_451_17),
     _anW_=caml_call2(Bin_prot_Shape[15],_anV_,_anU_),
     _anX_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$96),0],
     _anY_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$13),_anX_,_anW_],0],
     _anZ_=caml_call1(Bin_prot_Shape[4][1],cst_src_deque_ml_451_4),
     group$126=caml_call2(Bin_prot_Shape[6],_anZ_,_anY_);
    function bin_shape_el$2(a)
     {var _aLi_=caml_call1(Bin_prot_Shape[2][1],cst_el$14);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$126,_aLi_),[0,a,0])}
    function bin_size_el$2(size_of_a){return size_of_a}
    function bin_write_el$2(write_a){return write_a}
    function bin_read_el$2(of_a){return of_a}
    var
     caller_identity$2=
      caml_call1
       (Bin_prot_Shape[5][1],cst_34c1e9ca_4992_11e6_a686_8b4bd4f87796);
    function iter$26(t,f){return iter$24(t,f)}
    function init$6(len,next)
     {var t=create$36([0,len],0,0),_aLg_=len - 1 | 0,_aLf_=0;
      if(! (_aLg_ < 0))
       {var i=_aLf_;
        for(;;)
         {var x=caml_call1(next,0);
          enqueue_back(t,x);
          var _aLh_=i + 1 | 0;
          if(_aLg_ !== i){var i=_aLh_;continue}
          break}}
      return t}
    var
     include$135=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         caller_identity$2,
         module_name$14,
         length$20,
         iter$26,
         init$6,
         bin_size_el$2,
         bin_write_el$2,
         bin_read_el$2,
         bin_shape_el$2]),
     bin_shape_t$110=include$135[1],
     bin_size_t$74=include$135[2],
     bin_write_t$75=include$135[3],
     bin_read_t$148=include$135[4],
     bin_read_t$149=include$135[5],
     bin_writer_t$97=include$135[6],
     bin_reader_t$97=include$135[7],
     bin_t$97=include$135[8];
    function t_of_sexp$89(f,sexp){return of_array$6(caml_call2(_lh_,f,sexp))}
    function sexp_of_t$106(f,t){return caml_call2(_lg_,f,to_array$8(t))}
    function back_index_exn(t)
     {assert_not_empty(t,cst_Deque_back_index_exn);
      return apparent_back_index_when_not_empty(t)}
    function front_index_exn(t)
     {assert_not_empty(t,cst_Deque_front_index_exn);return t[4]}
    function get$9(t,i){return get$8(t,front_index_exn(t) + i | 0)}
    var
     For_test=[0,of_array$6],
     Binary_searchable=
      caml_call1
       (Base_for_tests_Test_binary_searchable[4],[0,get$9,length$20,For_test]);
    function binary_search$8(pos,len,t,compare,how,v)
     {if(pos)var pos$0=pos[1],pos$1=[0,pos$0 - t[4] | 0];else var pos$1=0;
      var match=caml_call6(Binary_searchable[1],pos$1,len,t,compare,how,v);
      if(match)
       {var untranslated_i=match[1];return [0,t[4] + untranslated_i | 0]}
      return 0}
    function binary_search_segmented$8(pos,len,t,segment_of,how)
     {if(pos)var pos$0=pos[1],pos$1=[0,pos$0 - t[4] | 0];else var pos$1=0;
      var match=caml_call5(Binary_searchable[2],pos$1,len,t,segment_of,how);
      if(match)
       {var untranslated_i=match[1];return [0,t[4] + untranslated_i | 0]}
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$436);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Deque=
      [0,
       bin_shape_t$110,
       bin_size_t$74,
       bin_write_t$75,
       bin_read_t$148,
       bin_read_t$149,
       bin_writer_t$97,
       bin_reader_t$97,
       bin_t$97,
       t_of_sexp$89,
       sexp_of_t$106,
       binary_search$8,
       binary_search_segmented$8,
       _anG_,
       length$20,
       is_empty$14,
       iter$24,
       fold$19,
       _anN_,
       _anO_,
       _anF_,
       _anH_,
       _anD_,
       _anE_,
       _anJ_,
       _anI_,
       _anK_,
       to_array$8,
       _anL_,
       _anM_,
       create$36,
       of_array$6,
       front_index,
       front_index_exn,
       back_index,
       back_index_exn,
       get_opt,
       get$8,
       peek,
       peek_front,
       peek_front_exn,
       peek_back,
       peek_back_exn,
       set_exn,
       iter$23,
       iteri$7,
       iteri$6,
       fold$18,
       foldi$2,
       foldi$1,
       enqueue,
       enqueue_front,
       enqueue_back,
       clear$4,
       drop,
       drop_front,
       drop_back,
       dequeue,
       dequeue_exn,
       dequeue_front,
       dequeue_front_exn,
       dequeue_back,
       dequeue_back_exn];
    caml_register_global(4494,Core_kernel_Deque,"Core_kernel__Deque");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$437);
    caml_call1(Expect_test_collector[4][1],cst_src_deriving_hash_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$438,cst$202);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$439);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Deriving_hash_intf=[0];
    caml_register_global
     (4495,Core_kernel_Deriving_hash_intf,"Core_kernel__Deriving_hash_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$440);
    caml_call1(Expect_test_collector[4][1],cst_src_deriving_hash_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$441,cst$203);
    function Of_deriving_hash(_aLd_,_aLc_)
     {function hash_fold_t(state,t)
       {var _aLe_=caml_call1(_aLc_[1],t);
        return caml_call2(_aLd_[1],state,_aLe_)}
      var hash=caml_call1(Base_Hash[12],hash_fold_t);
      return [0,hash_fold_t,hash]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$442);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Deriving_hash=[0,Of_deriving_hash];
    caml_register_global
     (4496,Core_kernel_Deriving_hash,"Core_kernel__Deriving_hash");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$443);
    caml_call1(Expect_test_collector[4][1],cst_src_ephemeron_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$444,cst$204);
    var _an0_=Stdlib_ephemeron[1][1];
    function set_key(t,param)
     {if(param){var v=param[1];return caml_call2(Stdlib_ephemeron[1][4],t,v)}
      return caml_call1(Stdlib_ephemeron[1][5],t)}
    var _an1_=Stdlib_ephemeron[1][2];
    function set_data(t,param)
     {if(param){var v=param[1];return caml_call2(Stdlib_ephemeron[1][10],t,v)}
      return caml_call1(Stdlib_ephemeron[1][11],t)}
    var _an2_=Stdlib_ephemeron[1][8];
    function is_key_some(t){return caml_call1(Stdlib_ephemeron[1][6],t)}
    function is_key_none(t){return 1 - is_key_some(t)}
    function is_data_some(t){return caml_call1(Stdlib_ephemeron[1][12],t)}
    function is_data_none(t){return 1 - is_data_some(t)}
    function sexp_of_t$107(sexp_of_a,sexp_of_b,t)
     {var
       v1=caml_call1(_an2_,t),
       v0=caml_call1(_an1_,t),
       v0$0=
        caml_call2
         (_xR_,function(_aLb_){return sexp_of_t$94(sexp_of_a,_aLb_)},v0),
       v1$0=
        caml_call2
         (_xR_,function(_aLa_){return sexp_of_t$94(sexp_of_b,_aLa_)},v1);
      return [1,[0,v0$0,[0,v1$0,0]]]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$445);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Ephemeron=
      [0,
       sexp_of_t$107,
       _an0_,
       set_key,
       _an1_,
       set_data,
       _an2_,
       is_key_some,
       is_key_none,
       is_data_some,
       is_data_none];
    caml_register_global(4498,Core_kernel_Ephemeron,"Core_kernel__Ephemeron");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$446);
    caml_call1(Expect_test_collector[4][1],cst_src_fdeque_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$447,cst$205);
    var Empty=[248,cst_Core_kernel_Fdeque_Empty,caml_fresh_oo_id(0)];
    function _an3_(param)
     {if(param === Empty)return _an4_;throw [0,Assert_failure,_an5_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Empty,_an3_);
    function length$22(t){return t[3]}
    function is_empty$15(t){return caml_call2(_Nr_,t[3],0)}
    function invariant$11(f,t)
     {var n_front=caml_call1(length$1,t[1]),n_back=caml_call1(length$1,t[2]);
      if(caml_call2(_Nr_,t[3],n_front + n_back | 0))
       {if(! caml_call2(_Nt_,t[3],2))
         {var
           switch$0=
            caml_call2(_Nu_,n_front,0)?caml_call2(_Nu_,n_back,0)?0:1:1;
          if(switch$0)throw [0,Assert_failure,_an6_]}
        caml_call2(_ph_,t[1],f);
        return caml_call2(_ph_,t[2],f)}
      throw [0,Assert_failure,_an7_]}
    function make$0(length,front,back)
     {if(front)
       if(front[2])
        {if(! back)
          {var
            match=caml_call2(_p4_,front,length / 2 | 0),
            rev_back=match[2],
            front$0=match[1];
           return [0,front$0,caml_call1(parts,rev_back),length]}
         var switch$0=0}
       else
        var switch$0=back?0:1;
      else
       if(back)
        if(back[2])
         {var
           match$0=caml_call2(_p4_,back,length / 2 | 0),
           rev_front=match$0[2],
           back$0=match$0[1];
          return [0,caml_call1(parts,rev_front),back$0,length]}
      return [0,front,back,length]}
    function enqueue_top(t,x){return make$0(t[3] + 1 | 0,[0,x,t[1]],t[2])}
    function enqueue$0(t,x){return make$0(t[3] + 1 | 0,t[1],[0,x,t[2]])}
    function raise_front_invariant(param)
     {throw [0,Bug,cst_Fdeque_front_0_back_2]}
    function raise_back_invariant(param)
     {throw [0,Bug,cst_Fdeque_back_0_front_2]}
    function top_exn(t)
     {var _aK9_=t[1];
      if(_aK9_){var x=_aK9_[1];return x}
      var _aK__=t[2];
      if(_aK__)
       {var _aK$_=_aK__[1];return _aK__[2]?raise_front_invariant(0):_aK$_}
      throw Empty}
    function bot_exn(t)
     {var _aK6_=t[2];
      if(_aK6_){var x=_aK6_[1];return x}
      var _aK7_=t[1];
      if(_aK7_)
       {var _aK8_=_aK7_[1];return _aK7_[2]?raise_back_invariant(0):_aK8_}
      throw Empty}
    function discard_exn(t)
     {var _aK4_=t[1];
      if(_aK4_){var xs=_aK4_[2];return make$0(t[3] - 1 | 0,xs,t[2])}
      var _aK5_=t[2];
      if(_aK5_)return _aK5_[2]?raise_front_invariant(0):acc$1;
      throw Empty}
    function drop_back_exn(t)
     {var _aK2_=t[2];
      if(_aK2_){var xs=_aK2_[2];return make$0(t[3] - 1 | 0,t[1],xs)}
      var _aK3_=t[1];
      if(_aK3_)return _aK3_[2]?raise_back_invariant(0):acc$1;
      throw Empty}
    function dequeue_exn$0(t)
     {var _aK1_=discard_exn(t);return [0,top_exn(t),_aK1_]}
    function dequeue_back_exn$0(t)
     {var _aK0_=drop_back_exn(t);return [0,bot_exn(t),_aK0_]}
    function optional(f,t)
     {try
       {var x=caml_call1(f,t)}
      catch(_aKZ_)
       {_aKZ_ = caml_wrap_exception(_aKZ_);
        if(_aKZ_ === Empty)return 0;
        throw _aKZ_}
      return [0,x]}
    function top(t){return optional(top_exn,t)}
    function bot(t){return optional(bot_exn,t)}
    function drop_front$0(t){return optional(discard_exn,t)}
    function drop_back$0(t){return optional(drop_back_exn,t)}
    function dequeue$0(t){return optional(dequeue_exn$0,t)}
    function dequeue_back$0(t){return optional(dequeue_back_exn$0,t)}
    function enqueue$1(t,side,x)
     {return 109975721 <= side?enqueue_top(t,x):enqueue$0(t,x)}
    function peek$0(t,side){return 109975721 <= side?top(t):bot(t)}
    function peek_exn(t,side){return 109975721 <= side?top_exn(t):bot_exn(t)}
    function drop$0(t,side)
     {return 109975721 <= side?drop_front$0(t):drop_back$0(t)}
    function drop_exn(t,side)
     {return 109975721 <= side?discard_exn(t):drop_back_exn(t)}
    function dequeue$1(t,side)
     {return 109975721 <= side?dequeue$0(t):dequeue_back$0(t)}
    function dequeue_exn$1(t,side)
     {return 109975721 <= side?dequeue_exn$0(t):dequeue_back_exn$0(t)}
    function rev(t){return [0,t[2],t[1],t[3]]}
    function to_list$12(t){return caml_call2(_pI_,t[1],t[2])}
    function to_array$9(t){return caml_call1(of_list,to_list$12(t))}
    function to_sequence$9(t)
     {var _aKY_=caml_call1(_ki_,t[2]);
      return caml_call2(_jG_,caml_call1(_ki_,t[1]),_aKY_)}
    function sum$7(M,t,f)
     {var _aKW_=caml_call3(_pn_,M,t[2],f),_aKX_=caml_call3(_pn_,M,t[1],f);
      return caml_call2(M[2],_aKX_,_aKW_)}
    function count$11(t,f)
     {var _aKV_=caml_call2(_qU_,t[2],f);
      return caml_call2(_qU_,t[1],f) + _aKV_ | 0}
    function for_all$15(t,f)
     {var _aKU_=caml_call2(_pm_,t[1],f);
      return _aKU_?caml_call2(_pm_,t[2],f):_aKU_}
    function exists$16(t,f)
     {var _aKT_=caml_call2(_pl_,t[1],f);
      return _aKT_?_aKT_:caml_call2(_pl_,t[2],f)}
    function mem$12(t,x,equal)
     {var _aKS_=caml_call3(_pg_,t[1],x,equal);
      return _aKS_?_aKS_:caml_call3(_pg_,t[2],x,equal)}
    function iter$27(t,f)
     {caml_call2(_ph_,t[1],f);return caml_call2(_ph_,t[2],f)}
    function fold$20(t,init,f)
     {var init$0=caml_call3(_pi_,t[1],init,f);
      return caml_call3(_pi_,t[2],init$0,f)}
    function fold_result$6(t,init,f){return caml_call4(_iv_,fold$20,init,f,t)}
    function fold_until$6(t,init,f)
     {var _aKQ_=caml_call3(_iw_,fold$20,init,f);
      return function(_aKR_){return caml_call2(_aKQ_,_aKR_,t)}}
    function find$14(t,f)
     {var some=caml_call2(_po_,t[1],f);
      return some?some:caml_call2(_po_,t[2],f)}
    function find_map$6(t,f)
     {var some=caml_call2(_pp_,t[1],f);
      return some?some:caml_call2(_pp_,t[2],f)}
    function max_elt$11(t,compare)
     {var
       match=caml_call2(_pt_,t[1],compare),
       match$0=caml_call2(_pt_,t[2],compare);
      if(match)
       {if(match$0)
         {var y=match$0[1],x=match[1];
          return caml_call2(_Np_,caml_call2(compare,x,y),0)?match:match$0}
        var opt=match}
      else
       var opt=match$0;
      return opt}
    function min_elt$11(t,compare)
     {var
       match=caml_call2(_ps_,t[1],compare),
       match$0=caml_call2(_ps_,t[2],compare);
      if(match)
       {if(match$0)
         {var y=match$0[1],x=match[1];
          return caml_call2(_Nq_,caml_call2(compare,x,y),0)?match:match$0}
        var opt=match}
      else
       var opt=match$0;
      return opt}
    function Make_container(F)
     {var to_list=F[1];
      function mem(t,x,equal)
       {return caml_call3(_pg_,caml_call1(to_list,t),x,equal)}
      function iter(t,f){return caml_call2(_ph_,caml_call1(to_list,t),f)}
      function fold(t,init,f)
       {return caml_call3(_pi_,caml_call1(to_list,t),init,f)}
      function exists(t,f){return caml_call2(_pl_,caml_call1(to_list,t),f)}
      function for_all(t,f){return caml_call2(_pm_,caml_call1(to_list,t),f)}
      function count(t,f){return caml_call2(_qU_,caml_call1(to_list,t),f)}
      function sum(m,t,f){return caml_call3(_pn_,m,caml_call1(to_list,t),f)}
      function find(t,f){return caml_call2(_po_,caml_call1(to_list,t),f)}
      function find_map(t,f){return caml_call2(_pp_,caml_call1(to_list,t),f)}
      function to_array(t){return caml_call1(_pr_,caml_call1(to_list,t))}
      function min_elt(t,compare)
       {return caml_call2(_ps_,caml_call1(to_list,t),compare)}
      function max_elt(t,compare)
       {return caml_call2(_pt_,caml_call1(to_list,t),compare)}
      function fold_result(t,init,f){return caml_call4(_iv_,fold,init,f,t)}
      function fold_until(t,init,f)
       {var _aKO_=caml_call3(_iw_,fold,init,f);
        return function(_aKP_){return caml_call2(_aKO_,_aKP_,t)}}
      return [0,
              to_list,
              is_empty$15,
              length$22,
              mem,
              iter,
              fold,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_array,
              min_elt,
              max_elt,
              fold_result,
              fold_until]}
    function of_list$9(list){return make$0(caml_call1(length$1,list),list,0)}
    function to_list$13(t)
     {var _aKN_=caml_call1(parts,t[2]);return caml_call2(_Oh_,t[1],_aKN_)}
    function to_sequence$10(t)
     {var _aKM_=caml_call1(_ki_,caml_call1(parts,t[2]));
      return caml_call2(_jG_,caml_call1(_ki_,t[1]),_aKM_)}
    function of_sequence$4(sequence)
     {var
       match=
        caml_call3
         (_iT_,
          sequence,
          _an8_,
          function(param,a)
           {var acc=param[2],length=param[1];
            return [0,length + 1 | 0,[0,a,acc]]}),
       back=match[2],
       length=match[1];
      return make$0(length,0,back)}
    var
     include$136=Make_container([0,to_list$13]),
     to_list$14=include$136[1],
     is_empty$16=include$136[2],
     length$23=include$136[3],
     mem$13=include$136[4],
     iter$28=include$136[5],
     fold$21=include$136[6],
     exists$17=include$136[7],
     for_all$16=include$136[8],
     count$12=include$136[9],
     sum$8=include$136[10],
     find$15=include$136[11],
     find_map$7=include$136[12],
     to_array$10=include$136[13],
     min_elt$12=include$136[14],
     max_elt$12=include$136[15],
     fold_result$7=include$136[16],
     fold_until$7=include$136[17];
    function to_list$15(t)
     {var _aKL_=caml_call1(parts,t[1]);return caml_call2(_Oh_,t[2],_aKL_)}
    function of_list$10(list){return make$0(caml_call1(length$1,list),0,list)}
    function to_sequence$11(t)
     {var _aKK_=caml_call1(_ki_,caml_call1(parts,t[1]));
      return caml_call2(_jG_,caml_call1(_ki_,t[2]),_aKK_)}
    function of_sequence$5(sequence)
     {var
       match=
        caml_call3
         (_iT_,
          sequence,
          _an9_,
          function(param,a)
           {var acc=param[2],length=param[1];
            return [0,length + 1 | 0,[0,a,acc]]}),
       front=match[2],
       length=match[1];
      return make$0(length,front,0)}
    var
     include$137=Make_container([0,to_list$15]),
     to_list$16=include$137[1],
     is_empty$17=include$137[2],
     length$24=include$137[3],
     mem$14=include$137[4],
     iter$29=include$137[5],
     fold$22=include$137[6],
     exists$18=include$137[7],
     for_all$17=include$137[8],
     count$13=include$137[9],
     sum$9=include$137[10],
     find$16=include$137[11],
     find_map$8=include$137[12],
     to_array$11=include$137[13],
     min_elt$13=include$137[14],
     max_elt$13=include$137[15],
     fold_result$8=include$137[16],
     fold_until$8=include$137[17];
    function singleton$10(x){return of_list$9([0,x,0])}
    function bind$2(t,f)
     {return caml_call3
              (fold$21,
               t,
               acc$1,
               function(t,elt)
                {return caml_call3(fold$21,caml_call1(f,elt),t,enqueue$0)})}
    var
     map$27=
      [0,
       -198771759,
       function(t,f)
        {var _aKI_=t[3],_aKJ_=caml_call2(_qg_,t[2],f);
         return [0,caml_call2(_qg_,t[1],f),_aKJ_,_aKI_]}],
     include$138=caml_call1(Base_Monad[1],[0,bind$2,singleton$10,map$27]),
     _an__=include$138[1],
     _an$_=include$138[2],
     _aoa_=include$138[3],
     _aob_=include$138[4],
     _aoc_=include$138[5],
     _aod_=include$138[6],
     _aoe_=include$138[7],
     _aof_=include$138[8],
     _aog_=include$138[9],
     _aoh_=include$138[10],
     _aoi_=include$138[11];
    function compare$78(cmp,t1,t2)
     {var _aKH_=caml_call1(to_list$14,t2);
      return caml_call3(compare_sexp_list,cmp,caml_call1(to_list$14,t1),_aKH_)}
    function hash_fold_t$42(hash_fold_a,state,t)
     {return caml_call3
              (fold$21,
               t,
               caml_call2(hash_fold_t$16,state,caml_call1(length$23,t)),
               hash_fold_a)}
    function sexp_of_t$108(sexp_of_elt,t)
     {var _aKG_=caml_call1(to_list$14,t);
      return caml_call1(caml_call1(_pf_,sexp_of_elt),_aKG_)}
    function t_of_sexp$90(elt_of_sexp,sexp)
     {return of_list$9(caml_call1(caml_call1(_pe_,elt_of_sexp),sexp))}
    var
     _aoj_=caml_call1(Bin_prot_Shape[3][1],cst_a$97),
     _aok_=caml_call1(Bin_prot_Shape[4][1],cst_src_fdeque_ml_309_21),
     _aol_=caml_call2(Bin_prot_Shape[15],_aok_,_aoj_),
     _aom_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$98),0],
     _aon_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$15),_aom_,_aol_],0],
     _aoo_=caml_call1(Bin_prot_Shape[4][1],cst_src_fdeque_ml_309_8),
     group$127=caml_call2(Bin_prot_Shape[6],_aoo_,_aon_);
    function bin_shape_el$3(a)
     {var _aKF_=caml_call1(Bin_prot_Shape[2][1],cst_el$16);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$127,_aKF_),[0,a,0])}
    function bin_size_el$3(size_of_a){return size_of_a}
    function bin_write_el$3(write_a){return write_a}
    function bin_read_el$3(of_a){return of_a}
    var
     caller_identity$3=
      caml_call1
       (Bin_prot_Shape[5][1],cst_83f96982_4992_11e6_919d_fbddcfdca576);
    function iter$30(t,f){return caml_call2(_ph_,caml_call1(to_list$14,t),f)}
    function init$7(len,next)
     {var acc=acc$1,n=0;
      for(;;)
       {if(caml_call2(_Nr_,len,n))return acc;
        if(caml_call2(_Nr_,n,caml_call1(length$23,acc)))
         {var
           x=caml_call1(next,0),
           n$0=n + 1 | 0,
           acc$0=enqueue$0(acc,x),
           acc=acc$0,
           n=n$0;
          continue}
        throw [0,Assert_failure,_aop_]}}
    var
     include$139=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         caller_identity$3,
         module_name$15,
         length$23,
         iter$30,
         init$7,
         bin_size_el$3,
         bin_write_el$3,
         bin_read_el$3,
         bin_shape_el$3]),
     bin_shape_t$111=include$139[1],
     bin_size_t$75=include$139[2],
     bin_write_t$76=include$139[3],
     bin_read_t$150=include$139[4],
     bin_read_t$151=include$139[5],
     bin_writer_t$98=include$139[6],
     bin_reader_t$98=include$139[7],
     bin_t$98=include$139[8];
    function build(front,back)
     {var
       _aKD_=caml_call1(length$1,back),
       length=caml_call1(length$1,front) + _aKD_ | 0,
       t=[0,front,back,length];
      invariant$11(function(_aKE_){return 0},t);
      return t}
    var Private$4=[0,build];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$448);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Stable$9=
      [0,
       [0,
        bin_shape_t$111,
        bin_size_t$75,
        bin_write_t$76,
        bin_read_t$150,
        bin_read_t$151,
        bin_writer_t$98,
        bin_reader_t$98,
        bin_t$98,
        compare$78,
        t_of_sexp$90,
        sexp_of_t$108,
        _aod_]],
     Front_to_back=
      [0,
       of_list$9,
       mem$13,
       length$23,
       is_empty$16,
       iter$28,
       fold$21,
       fold_result$7,
       fold_until$7,
       exists$17,
       for_all$16,
       count$12,
       sum$8,
       find$15,
       find_map$7,
       to_list$14,
       to_array$10,
       min_elt$12,
       max_elt$12,
       to_sequence$10,
       of_sequence$4],
     include$140=
      [0,
       bin_shape_t$111,
       bin_size_t$75,
       bin_write_t$76,
       bin_read_t$150,
       bin_read_t$151,
       bin_writer_t$98,
       bin_reader_t$98,
       bin_t$98,
       compare$78,
       hash_fold_t$42,
       t_of_sexp$90,
       sexp_of_t$108,
       mem$13,
       length$23,
       is_empty$16,
       iter$28,
       fold$21,
       fold_result$7,
       fold_until$7,
       exists$17,
       for_all$16,
       count$12,
       sum$8,
       find$15,
       find_map$7,
       to_list$14,
       to_array$10,
       min_elt$12,
       max_elt$12,
       invariant$11,
       _an__,
       _an$_,
       _aoa_,
       _aob_,
       _aoc_,
       _aod_,
       _aoe_,
       _aof_,
       _aog_,
       _aoh_,
       _aoi_,
       [0,
        mem$12,
        length$22,
        is_empty$15,
        iter$27,
        fold$20,
        fold_result$6,
        fold_until$6,
        exists$16,
        for_all$15,
        count$11,
        sum$7,
        find$14,
        find_map$6,
        to_list$12,
        to_array$9,
        min_elt$11,
        max_elt$11,
        to_sequence$9],
       Front_to_back,
       [0,
        of_list$10,
        mem$14,
        length$24,
        is_empty$17,
        iter$29,
        fold$22,
        fold_result$8,
        fold_until$8,
        exists$18,
        for_all$17,
        count$13,
        sum$9,
        find$16,
        find_map$8,
        to_list$16,
        to_array$11,
        min_elt$13,
        max_elt$13,
        to_sequence$11,
        of_sequence$5],
       acc$1,
       singleton$10,
       of_list$9,
       rev,
       enqueue$1,
       enqueue_top,
       enqueue$0,
       peek$0,
       peek_exn,
       top,
       top_exn,
       bot,
       bot_exn,
       drop$0,
       drop_exn,
       drop_front$0,
       discard_exn,
       drop_back$0,
       drop_back_exn,
       dequeue$1,
       dequeue_exn$1,
       dequeue$0,
       dequeue_exn$0,
       dequeue_back$0,
       dequeue_back_exn$0,
       Stable$9,
       Private$4];
    caml_register_global(4499,include$140,"Core_kernel__Fdeque");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$449);
    caml_call1(Expect_test_collector[4][1],cst_src_fqueue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$450,cst$206);
    var _aoq_=Front_to_back[19],_aor_=Front_to_back[20];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$451);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Fqueue=
      [0,
       bin_shape_t$111,
       bin_size_t$75,
       bin_write_t$76,
       bin_read_t$150,
       bin_read_t$151,
       bin_writer_t$98,
       bin_reader_t$98,
       bin_t$98,
       compare$78,
       hash_fold_t$42,
       t_of_sexp$90,
       sexp_of_t$108,
       mem$13,
       iter$28,
       fold$21,
       fold_result$7,
       fold_until$7,
       exists$17,
       for_all$16,
       count$12,
       sum$8,
       find$15,
       find_map$7,
       to_array$10,
       min_elt$12,
       max_elt$12,
       invariant$11,
       _an__,
       _an$_,
       _aoa_,
       _aob_,
       _aoc_,
       _aod_,
       _aoe_,
       _aof_,
       _aog_,
       _aoh_,
       _aoi_,
       acc$1,
       enqueue$0,
       enqueue_top,
       bot_exn,
       bot,
       top_exn,
       top,
       dequeue_exn$0,
       dequeue$0,
       discard_exn,
       to_list$14,
       of_list$9,
       _aoq_,
       _aor_,
       length$23,
       is_empty$16,
       singleton$10,
       Stable$9];
    caml_register_global(4500,Core_kernel_Fqueue,"Core_kernel__Fqueue");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$452);
    caml_call1(Expect_test_collector[4][1],cst_src_host_and_port_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$453,cst$207);
    function t_of_sexp$91(sexp)
     {if(1 === sexp[0])
       {var _aKB_=sexp[1];
        if(_aKB_)
         {var _aKC_=_aKB_[2];
          if(_aKC_)
           if(! _aKC_[2])
            {var
              v1=_aKC_[1],
              v0=_aKB_[1],
              v0$0=caml_call1(_abo_,v0),
              v1$0=caml_call1(_abC_,v1);
             return [0,v0$0,v1$0]}}}
      return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$34,2,sexp)}
    function sexp_of_t$109(param)
     {var
       v1=param[2],
       v0=param[1],
       v0$0=caml_call1(_abp_,v0),
       v1$0=caml_call1(_abD_,v1);
      return [1,[0,v0$0,[0,v1$0,0]]]}
    var
     _aos_=caml_call1(Bin_prot_Shape[7],[0,__t_,[0,__O_,0]]),
     _aot_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$224),0,_aos_],0],
     _aou_=caml_call1(Bin_prot_Shape[4][1],cst_src_host_and_port_ml_7_6),
     group$128=caml_call2(Bin_prot_Shape[6],_aou_,_aot_),
     _aov_=caml_call1(Bin_prot_Shape[2][1],cst_t$225),
     bin_shape_t$112=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$128,_aov_),0);
    function bin_size_t$76(param)
     {var
       v2=param[2],
       v1=param[1],
       _aKz_=caml_call1(_ZB_,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aKz_),
       _aKA_=caml_call1(_ZE_,v2);
      return caml_call2(Bin_prot_Common[23],size,_aKA_)}
    function bin_write_t$77(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(__v_,buf,pos,v1);
      return caml_call3(__Q_,buf,pos$0,v2)}
    function bin_read_t$152(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_host_and_port_ml_Stable_V1_Serializable_t,
               pos_ref[1])}
    function bin_read_t$153(buf,pos_ref)
     {var v1=caml_call2(__x_,buf,pos_ref),v2=caml_call2(__S_,buf,pos_ref);
      return [0,v1,v2]}
    function compare$79(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(Ppx_compare_lib[4][8],a_001[1],b_002[1]);
      return 0 === n?caml_call2(Ppx_compare_lib[4][4],a_001[2],b_002[2]):n}
    function hash_fold_t$43(hsv,arg)
     {var hsv$0=caml_call2(_aa6_,hsv,arg[1]);
      return caml_call2(_aa4_,hsv$0,arg[2])}
    function hash$48(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_aKy_=hash_fold_t$43(hsv,x);
      return caml_call1(Base_Hash[9],_aKy_)}
    function to_serializable(param)
     {var port=param[2],host=param[1];return [0,host,port]}
    function of_serializable(param)
     {var port=param[2],host=param[1];return [0,host,port]}
    var
     include$141=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$112,
           bin_size_t$76,
           bin_write_t$77,
           bin_read_t$153,
           bin_read_t$152]),
        [0,to_serializable,of_serializable]),
     bin_size_t$77=include$141[1],
     bin_write_t$78=include$141[2],
     bin_read_t$154=include$141[3],
     bin_read_t$155=include$141[4],
     bin_shape_t$113=include$141[5],
     bin_writer_t$99=include$141[6],
     bin_reader_t$99=include$141[7],
     bin_t$99=include$141[8],
     Expect_test_collector$5=
      caml_call1
       (Expect_test_collector[2],
        [0,
         Expect_test_config[2],
         Expect_test_config[3],
         Expect_test_config[4],
         Expect_test_config[5],
         Expect_test_config[6],
         Expect_test_config[7]]);
    function _aow_(param)
     {var
       _aKt_=caml_call1(Bin_prot_Shape[21],bin_shape_t$113),
       _aKu_=caml_call1(Bin_prot_Shape[18][4],_aKt_);
      caml_call1(Stdlib[46],_aKu_);
      var
       _aKv_=caml_call1(Bin_prot_Shape[21],bin_shape_t$112),
       _aKw_=caml_call1(Bin_prot_Shape[18][4],_aKv_);
      caml_call1(Stdlib[46],_aKw_);
      var
       _aKx_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_host_and_port_ml$0),
         35,
         776,
         784,
         790];
      return caml_call1(Expect_test_collector$5[1],_aKx_)}
    var
     _aox_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_host_and_port_ml$1),
       36,
       791,
       799,
       906],
     _aoA_=
      [0,
       [0,
        _aoz_,
        _aoy_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_host_and_port_ml$2),
         35,
         776,
         784,
         790],
        _aox_],
       0],
     _aoC_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_host_and_port_ml$4),
       32,
       656,
       660,
       907],
     _aoD_=
      caml_call1
       (Expect_test_common_File[4][3],cst_00bf180531f98f4e6b12a27b16abe73e);
    caml_call9
     (Expect_test_collector$5[3],
      _aoD_,
      _aoC_,
      cst_src_host_and_port_ml$3,
      _aoB_,
      0,
      _aoA_,
      0,
      Inline_test_config,
      _aow_);
    var
     include$142=
      caml_call1
       (caml_call1(Stable[1][1],[0,t_of_sexp$91,sexp_of_t$109]),
        [0,to_serializable,of_serializable]),
     sexp_of_t$110=include$142[2],
     _aoE_=include$142[1];
    function to_string$29(param)
     {var port=param[2],host=param[1];return caml_call3(_fE_,_aoF_,host,port)}
    function of_string$26(s)
     {var match=caml_call2(_C2_,s,58);
      if(match)
       {var _aKq_=match[2];
        if(_aKq_)
         if(! _aKq_[2])
          {var port=_aKq_[1],host=match[1];
           try
            {var _aKr_=caml_call1(of_string$2,port),port$0=_aKr_}
           catch(_aKs_){var port$0=caml_call3(_Pg_,_aoH_,s,0)}
           return [0,host,port$0]}}
      return caml_call3(_Pg_,_aoG_,s,0)}
    function t_of_sexp$92(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _aKp_=of_string$26(s);return _aKp_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Stdlib[7])
           {var err=exn[2];return caml_call2(_Of_,err,sexp)}
          throw exn}}
      return caml_call1(_aoE_,sexp)}
    function _aoI_(param)
     {var got=t_of_sexp$92(caml_call1(of_string,cst_localhost_8080));
      caml_call8
       (Ppx_assert_lib_Runtime[3],
        pos$1,
        sexp_of_t$110,
        compare$79,
        0,
        0,
        0,
        expect,
        got);
      var got$0=t_of_sexp$92(caml_call1(of_string,cst_localhost_8080$0));
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$2,
               sexp_of_t$110,
               compare$79,
               0,
               0,
               0,
               expect$0,
               got$0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_t_of_sexp,
      0,
      cst_src_host_and_port_ml$5,
      74,
      4,
      298,
      _aoI_);
    function _aoJ_(param)
     {function _aKm_(expect)
       {var got=t_of_sexp$92(caml_call1(sexp_of_t$110,expect));
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$3,
                 sexp_of_t$110,
                 compare$79,
                 0,
                 0,
                 0,
                 expect,
                 got)}
      function _aKn_(param)
       {var port=param[2],host=param[1];return [0,host,port]}
      var _aKo_=caml_call2(_u__[4][4],_D8_,_Kc_);
      return caml_call9
              (_u6_,0,0,0,0,0,0,0,caml_call2(_u__[4][3],_aKo_,_aKn_),_aKm_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_sexp_roundtrip,
      0,
      cst_src_host_and_port_ml$6,
      83,
      4,
      299,
      _aoJ_);
    function create$37(host,port){return [0,host,port]}
    function host(t){return t[1]}
    function port(t){return t[2]}
    function tuple(t){return to_serializable(t)}
    var
     _aoK_=
      caml_call1(Base_Pretty_printer[2],[0,module_name$16,to_string$29])[1],
     _aoL_=
      Make_binable
       ([0,
         hash_fold_t$43,
         bin_size_t$77,
         bin_write_t$78,
         bin_read_t$154,
         bin_read_t$155,
         bin_shape_t$113,
         bin_writer_t$99,
         bin_reader_t$99,
         bin_t$99,
         t_of_sexp$92,
         compare$79,
         sexp_of_t$110,
         hash$48]),
     _aoM_=_aoL_[1],
     _aoN_=_aoL_[2],
     _aoO_=_aoL_[3],
     _aoP_=_aoL_[4],
     _aoQ_=_aoL_[5],
     _aoR_=_aoL_[6],
     include$143=
      _xB_
       ([0,
         bin_size_t$77,
         bin_write_t$78,
         bin_read_t$154,
         bin_read_t$155,
         bin_shape_t$113,
         bin_writer_t$99,
         bin_reader_t$99,
         bin_t$99,
         compare$79,
         t_of_sexp$92,
         sexp_of_t$110]),
     _aoS_=include$143[1],
     _aoT_=include$143[2],
     _aoU_=include$143[3],
     _aoV_=include$143[4],
     _aoW_=include$143[5],
     _aoX_=include$143[6],
     _aoY_=include$143[7],
     _aoZ_=include$143[8],
     _ao0_=include$143[9],
     _ao1_=include$143[10],
     _ao2_=include$143[11],
     _ao3_=include$143[12],
     _ao4_=include$143[13],
     _ao5_=include$143[14],
     _ao6_=include$143[15],
     _ao7_=include$143[16],
     _ao8_=include$143[17],
     _ao9_=include$143[18],
     _ao__=include$143[19],
     _ao$_=include$143[20],
     _apa_=include$143[21],
     _apb_=include$143[22],
     type_id=caml_call2(Id$0[3],cst_Host_and_port,sexp_of_t$110);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$454);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Host_and_port=
      [0,
       create$37,
       host,
       port,
       tuple,
       bin_size_t$77,
       bin_write_t$78,
       bin_read_t$154,
       bin_read_t$155,
       bin_shape_t$113,
       bin_writer_t$99,
       bin_reader_t$99,
       bin_t$99,
       t_of_sexp$92,
       sexp_of_t$110,
       of_string$26,
       to_string$29,
       _aoK_,
       _aoS_,
       _aoT_,
       _aoU_,
       _aoV_,
       _aoW_,
       _aoX_,
       _aoY_,
       _aoZ_,
       _ao0_,
       _ao1_,
       _ao2_,
       _ao3_,
       _ao4_,
       _ao5_,
       _ao6_,
       _ao7_,
       _ao8_,
       _ao9_,
       _ao__,
       _ao$_,
       _apa_,
       _apb_,
       _aoM_,
       _aoN_,
       _aoO_,
       _aoP_,
       _aoQ_,
       _aoR_,
       [0,
        [0,
         t_of_sexp$92,
         sexp_of_t$110,
         bin_size_t$77,
         bin_write_t$78,
         bin_read_t$154,
         bin_read_t$155,
         bin_shape_t$113,
         bin_writer_t$99,
         bin_reader_t$99,
         bin_t$99,
         compare$79,
         hash_fold_t$43,
         hash$48]],
       type_id];
    caml_register_global
     (4501,Core_kernel_Host_and_port,"Core_kernel__Host_and_port");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$455);
    caml_call1(Expect_test_collector[4][1],cst_src_optional_syntax_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$456,cst$208);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$457);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Optional_syntax_intf=[0];
    caml_register_global
     (4502,
      Core_kernel_Optional_syntax_intf,
      "Core_kernel__Optional_syntax_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$458);
    caml_call1(Expect_test_collector[4][1],cst_src_optional_syntax_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$459,cst$209);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$460);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Optional_syntax=[0];
    caml_register_global
     (4503,Core_kernel_Optional_syntax,"Core_kernel__Optional_syntax");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$461);
    caml_call1(Expect_test_collector[4][1],cst_src_immediate_option_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$462,cst$210);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$463);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Immediate_option_intf=[0];
    caml_register_global
     (4504,
      Core_kernel_Immediate_option_intf,
      "Core_kernel__Immediate_option_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$464);
    caml_call1(Expect_test_collector[4][1],cst_src_immediate_option_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$465,cst$211);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$466);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Immediate_option=[0];
    caml_register_global
     (4505,Core_kernel_Immediate_option,"Core_kernel__Immediate_option");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$467);
    caml_call1(Expect_test_collector[4][1],cst_src_linked_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$468,cst$212);
    var
     _apf_=include$144[4],
     _aph_=include$144[6],
     _apG_=include$144[31],
     _apY_=include$144[49],
     _apc_=include$144[1],
     _apd_=include$144[2],
     _ape_=include$144[3],
     _apg_=include$144[5],
     _api_=include$144[7],
     _apj_=include$144[8],
     _apk_=include$144[9],
     _apl_=include$144[10],
     _apm_=include$144[11],
     _apn_=include$144[12],
     _apo_=include$144[13],
     _app_=include$144[14],
     _apq_=include$144[15],
     _apr_=include$144[16],
     _aps_=include$144[17],
     _apt_=include$144[18],
     _apu_=include$144[19],
     _apv_=include$144[20],
     _apw_=include$144[21],
     _apx_=include$144[22],
     _apy_=include$144[23],
     _apz_=include$144[24],
     _apA_=include$144[25],
     _apB_=include$144[26],
     _apC_=include$144[27],
     _apD_=include$144[28],
     _apE_=include$144[29],
     _apF_=include$144[30],
     _apH_=include$144[32],
     _apI_=include$144[33],
     _apJ_=include$144[34],
     _apK_=include$144[35],
     _apL_=include$144[36],
     _apM_=include$144[37],
     _apN_=include$144[38],
     _apO_=include$144[39],
     _apP_=include$144[40],
     _apQ_=include$144[41],
     _apR_=include$144[42],
     _apS_=include$144[43],
     _apT_=include$144[44],
     _apU_=include$144[45],
     _apV_=include$144[46],
     _apW_=include$144[47],
     _apX_=include$144[48],
     _apZ_=include$144[50],
     _ap0_=caml_call1(Bin_prot_Shape[3][1],cst_a$99),
     _ap1_=caml_call1(Bin_prot_Shape[4][1],cst_src_linked_queue_ml_9_17),
     _ap2_=caml_call2(Bin_prot_Shape[15],_ap1_,_ap0_),
     _ap3_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$100),0],
     _ap4_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$17),_ap3_,_ap2_],0],
     _ap5_=caml_call1(Bin_prot_Shape[4][1],cst_src_linked_queue_ml_9_4),
     group$129=caml_call2(Bin_prot_Shape[6],_ap5_,_ap4_);
    function bin_shape_el$4(a)
     {var _aKl_=caml_call1(Bin_prot_Shape[2][1],cst_el$18);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$129,_aKl_),[0,a,0])}
    function bin_size_el$4(size_of_a){return size_of_a}
    function bin_write_el$4(write_a){return write_a}
    function bin_read_el$4(of_a){return of_a}
    var
     caller_identity$4=
      caml_call1
       (Bin_prot_Shape[5][1],cst_800df9a0_4992_11e6_881d_ffe1a5c8aced);
    function init$8(len,next)
     {var t=caml_call1(_apY_,0),_aKj_=1;
      if(! (len < 1))
       {var for$0=_aKj_;
        for(;;)
         {caml_call2(_apG_,t,caml_call1(next,0));
          var _aKk_=for$0 + 1 | 0;
          if(len !== for$0){var for$0=_aKk_;continue}
          break}}
      return t}
    var
     include$145=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         caller_identity$4,
         module_name$17,
         _apf_,
         _aph_,
         init$8,
         bin_size_el$4,
         bin_write_el$4,
         bin_read_el$4,
         bin_shape_el$4]),
     _ap6_=include$145[1],
     _ap7_=include$145[2],
     _ap8_=include$145[3],
     _ap9_=include$145[4],
     _ap__=include$145[5],
     _ap$_=include$145[6],
     _aqa_=include$145[7],
     _aqb_=include$145[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$469);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Linked_queue=
      [0,
       _ap6_,
       _ap7_,
       _ap8_,
       _ap9_,
       _ap__,
       _ap$_,
       _aqa_,
       _aqb_,
       _apc_,
       _apd_,
       _ape_,
       _apf_,
       _apg_,
       _aph_,
       _api_,
       _apj_,
       _apk_,
       _apl_,
       _apm_,
       _apn_,
       _apo_,
       _app_,
       _apq_,
       _apr_,
       _aps_,
       _apt_,
       _apu_,
       _apv_,
       _apw_,
       _apx_,
       _apy_,
       _apz_,
       _apA_,
       _apB_,
       _apC_,
       _apD_,
       _apE_,
       _apF_,
       _apG_,
       _apH_,
       _apI_,
       _apJ_,
       _apK_,
       _apL_,
       _apM_,
       _apN_,
       _apO_,
       _apP_,
       _apQ_,
       _apR_,
       _apS_,
       _apT_,
       _apU_,
       _apV_,
       _apW_,
       _apX_,
       _apY_,
       _apZ_];
    caml_register_global
     (4507,Core_kernel_Linked_queue,"Core_kernel__Linked_queue");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$470);
    caml_call1(Expect_test_collector[4][1],cst_src_memo_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$471,cst$213);
    function return$2(param)
     {if(0 === param[0]){var v=param[1];return v}var e=param[1];throw e}
    function capture(f,x)
     {try
       {var _aKi_=[0,caml_call1(f,x)];return _aKi_}
      catch(e)
       {e = caml_wrap_exception(e);
        if(e === Stdlib_sys[45])throw e;
        return [1,e]}}
    function unit$1(f)
     {var l=caml_call1(_LL_,f);
      return function(param)
       {var _aKh_=caml_obj_tag(l);
        return 250 === _aKh_
                ?l[1]
                :246 === _aKh_?caml_call1(CamlinternalLazy[2],l):l}}
    function general(hashable$1,cache_size_bound,f)
     {if(cache_size_bound)
       {var n=cache_size_bound[1];
        if(hashable$1)
         var sth$0=hashable$1[1],hashable$0=sth$0;
        else
         var hashable$0=Base_Hashable[2];
        if(caml_call2(_Nq_,n,0))caml_call3(_Pg_,_aqd_,n,0);
        var
         sexp_of_t$0=hashable$0[3],
         compare$0=hashable$0[2],
         hash$0=hashable$0[1],
         Cache=caml_call1(_A1_,[0,compare$0,sexp_of_t$0,hash$0]),
         cache$0=caml_call3(Cache[18],0,0,0);
        return function(arg)
         {var match=caml_call2(Cache[29],cache$0,arg);
          if(match)
           var result=match[1],result$0=result;
          else
           {var result$1=capture(f,arg);
            caml_call3(Cache[26],cache$0,arg,result$1);
            if(caml_call2(_Ns_,caml_call1(Cache[1],cache$0),n))
             caml_call1(Cache[41],cache$0);
            var result$0=result$1}
          return return$2(result$0)}}
      if(hashable$1)
       var sth=hashable$1[1],hashable=sth;
      else
       var hashable=Base_Hashable[2];
      var
       sexp_of_t=hashable[3],
       compare=hashable[2],
       hash=hashable[1],
       A=Make_plain_and_derive_hash_fold_t([0,compare,sexp_of_t,hash]),
       cache=caml_call3(A[5][4],0,_aqc_,0);
      function really_call_f(arg){return capture(f,arg)}
      return function(arg)
       {return return$2
                (caml_call3(Core_kernel_Hashtbl[51],cache,arg,really_call_f))}}
    function of_comparable(M,f)
     {var m=[0,M[21][5]];
      return function(x)
       {var match=caml_call2(find$3,m[1],x);
        if(match)
         var v=match[1],v$0=v;
        else
         {var v$1=capture(f,x);
          m[1] = caml_call3(set$2,m[1],x,v$1);
          var v$0=v$1}
        return return$2(v$0)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$472);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Memo=[0,general,unit$1,of_comparable];
    caml_register_global(4508,Core_kernel_Memo,"Core_kernel__Memo");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$473);
    caml_call1(Expect_test_collector[4][1],cst_src_no_polymorphic_compare_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$474,cst$214);
    function compare$80(param,_aKg_){return 723633086}
    function symbol$224(param,_aKf_){return 723633086}
    function symbol$225(param,_aKe_){return 723633086}
    function symbol$226(param,_aKd_){return 723633086}
    function symbol$227(param,_aKc_){return 723633086}
    function symbol$228(param,_aKb_){return 723633086}
    function symbol$229(param,_aKa_){return 723633086}
    function equal$38(param,_aJ$_){return 723633086}
    function min$17(param,_aJ__){return 723633086}
    function max$17(param,_aJ9_){return 723633086}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$475);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_No_polymorphic_compare=
      [0,
       compare$80,
       symbol$224,
       symbol$225,
       symbol$226,
       symbol$227,
       symbol$228,
       symbol$229,
       equal$38,
       min$17,
       max$17];
    caml_register_global
     (4509,
      Core_kernel_No_polymorphic_compare,
      "Core_kernel__No_polymorphic_compare");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$476);
    caml_call1(Expect_test_collector[4][1],cst_src_only_in_test_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$477,cst$215);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$478);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Only_in_test=
      [0,
       _Ly_,
       _Lz_,
       _LA_,
       _LB_,
       _LC_,
       _LD_,
       _LE_,
       _LF_,
       _LG_,
       _LH_,
       _LI_,
       _LL_,
       function(_aJ7_)
        {var _aJ8_=caml_obj_tag(_aJ7_);
         return 250 === _aJ8_
                 ?_aJ7_[1]
                 :246 === _aJ8_?caml_call1(CamlinternalLazy[2],_aJ7_):_aJ7_}];
    caml_register_global
     (4510,Core_kernel_Only_in_test,"Core_kernel__Only_in_test");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$479);
    caml_call1(Expect_test_collector[4][1],cst_src_pid_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$480,cst$216);
    var
     compare$81=Stable$4[1][9],
     Pid_must_be_positive=
      [248,
       cst_Core_kernel_Pid_Stable_V1_Without_containers_Pid_must_be_positive,
       caml_fresh_oo_id(0)];
    function _aqe_(param)
     {if(param[1] === Pid_must_be_positive)
       {var v0=param[2],v0$0=caml_call1(Stable$4[1][11],v0);
        return [1,[0,_aqf_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_aqg_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Pid_must_be_positive,_aqe_);
    function ensure(i){if(0 < i)return i;throw [0,Pid_must_be_positive,i]}
    function to_sexpable(_aJ6_){return _aJ6_}
    var
     _aqh_=Stable$4[1],
     include$146=
      caml_call1
       (caml_call1(Stable[1][1],[0,_aqh_[10],_aqh_[11]]),
        [0,to_sexpable,ensure]),
     t_of_sexp$93=include$146[1],
     sexp_of_t$111=include$146[2];
    function to_binable$6(_aJ5_){return _aJ5_}
    var
     _aqi_=Stable$4[1],
     include$147=
      caml_call1
       (caml_call1
         (Stable$0[1][1],[0,_aqi_[5],_aqi_[1],_aqi_[2],_aqi_[3],_aqi_[4]]),
        [0,to_binable$6,ensure]),
     bin_size_t$78=include$147[1],
     bin_write_t$79=include$147[2],
     bin_read_t$156=include$147[3],
     bin_read_t$157=include$147[4],
     bin_shape_t$114=include$147[5],
     bin_writer_t$100=include$147[6],
     bin_reader_t$100=include$147[7],
     bin_t$100=include$147[8],
     include$148=caml_call2(_hu_[1][1],compare$81,sexp_of_t$111),
     comparator$26=include$148[1],
     _aqj_=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$78,
         bin_write_t$79,
         bin_read_t$156,
         bin_read_t$157,
         bin_shape_t$114,
         bin_writer_t$100,
         bin_reader_t$100,
         bin_t$100,
         compare$81,
         t_of_sexp$93,
         sexp_of_t$111,
         comparator$26]),
     Map$25=_aqj_[1],
     Set$25=_aqj_[2];
    function of_int$7(i){return ensure(i)}
    function to_int$8(_aJ4_){return _aJ4_}
    function of_string$27(string)
     {return ensure(caml_call1(of_string$2,string))}
    var
     init$9=of_int$7(1),
     _aqk_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$226),0,bin_shape_t$114],0],
     _aql_=caml_call1(Bin_prot_Shape[4][1],cst_src_pid_ml_50_4),
     group$130=caml_call2(Bin_prot_Shape[6],_aql_,_aqk_),
     _aqm_=caml_call1(Bin_prot_Shape[2][1],cst_t$227),
     bin_shape_t$115=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$130,_aqm_),0),
     bin_writer_t$101=[0,bin_size_t$78,bin_write_t$79],
     bin_reader_t$101=[0,bin_read_t$156,bin_read_t$157],
     bin_t$101=[0,bin_shape_t$115,bin_writer_t$101,bin_reader_t$101];
    function hash$49(x){return caml_call1(_A_,x)}
    var
     include$149=
      _A4_
       ([0,
         bin_size_t$78,
         bin_write_t$79,
         bin_read_t$156,
         bin_read_t$157,
         bin_shape_t$115,
         bin_writer_t$101,
         bin_reader_t$101,
         bin_t$101,
         compare$81,
         _z_,
         hash$49,
         t_of_sexp$93,
         sexp_of_t$111,
         comparator$26,
         of_string$27,
         to_string$3,
         module_name$18]),
     _aqy_=include$149[12],
     _aqn_=include$149[1],
     _aqo_=include$149[2],
     _aqp_=include$149[3],
     _aqq_=include$149[4],
     _aqr_=include$149[5],
     _aqs_=include$149[6],
     _aqt_=include$149[7],
     _aqu_=include$149[8],
     _aqv_=include$149[9],
     _aqw_=include$149[10],
     _aqx_=include$149[11],
     _aqz_=include$149[13],
     _aqA_=include$149[14],
     _aqB_=include$149[15],
     _aqC_=include$149[16],
     _aqD_=include$149[17],
     _aqE_=include$149[18],
     _aqF_=include$149[19],
     _aqG_=include$149[20],
     _aqH_=include$149[21],
     _aqI_=include$149[22],
     _aqJ_=include$149[23],
     _aqK_=include$149[24],
     _aqL_=include$149[25],
     _aqM_=include$149[26],
     _aqN_=include$149[27],
     _aqO_=include$149[28],
     _aqP_=include$149[29],
     _aqQ_=include$149[30],
     _aqR_=include$149[31],
     _aqS_=include$149[32],
     _aqT_=include$149[33],
     _aqU_=include$149[34],
     _aqV_=include$149[35],
     _aqW_=include$149[36],
     _aqX_=include$149[37],
     _aqY_=include$149[38],
     _aqZ_=include$149[39],
     _aq0_=include$149[40],
     _aq1_=include$149[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$481);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Pid=
      [0,
       _aqn_,
       _aqo_,
       _aqp_,
       _aqq_,
       _aqr_,
       _aqs_,
       _aqt_,
       _aqu_,
       _aqv_,
       _aqw_,
       _aqx_,
       _aqy_,
       _aqz_,
       _aqA_,
       _aqB_,
       _aqC_,
       _aqD_,
       _aqE_,
       _aqF_,
       _aqG_,
       _aqH_,
       _aqI_,
       _aqJ_,
       _aqK_,
       _aqL_,
       _aqM_,
       _aqN_,
       _aqO_,
       _aqP_,
       _aqQ_,
       _aqR_,
       _aqS_,
       _aqT_,
       _aqU_,
       _aqV_,
       _aqW_,
       _aqX_,
       _aqY_,
       _aqZ_,
       _aq0_,
       _aq1_,
       of_int$7,
       to_int$8,
       init$9,
       [0,
        [0,
         bin_size_t$78,
         bin_write_t$79,
         bin_read_t$156,
         bin_read_t$157,
         bin_shape_t$114,
         bin_writer_t$100,
         bin_reader_t$100,
         bin_t$100,
         compare$81,
         t_of_sexp$93,
         sexp_of_t$111,
         comparator$26,
         Map$25,
         Set$25]]];
    caml_register_global(4511,Core_kernel_Pid,"Core_kernel__Pid");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$482);
    caml_call1(Expect_test_collector[4][1],cst_src_printexc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$483,cst$217);
    function to_string$30(param){return 751446320}
    function print(param){return 751446320}
    function catch$0(param,_aJ3_){return -352320217}
    var
     _aq2_=Stdlib_printexc[4],
     _aq3_=Stdlib_printexc[5],
     _aq4_=Stdlib_printexc[6],
     _aq5_=Stdlib_printexc[7];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$484);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Printexc=
      [0,to_string$30,print,catch$0,_aq2_,_aq3_,_aq4_,_aq5_];
    caml_register_global(4513,Core_kernel_Printexc,"Core_kernel__Printexc");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$485);
    caml_call1(Expect_test_collector[4][1],cst_src_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$486,cst$218);
    var
     compare$82=include$150[1],
     t_of_sexp$94=include$150[2],
     sexp_of_t$112=include$150[3],
     mem$15=include$150[4],
     length$25=include$150[5],
     is_empty$18=include$150[6],
     iter$31=include$150[7],
     fold$23=include$150[8],
     fold_result$9=include$150[9],
     fold_until$9=include$150[10],
     exists$19=include$150[11],
     for_all$18=include$150[12],
     count$14=include$150[13],
     sum$10=include$150[14],
     find$17=include$150[15],
     find_map$9=include$150[16],
     to_list$17=include$150[17],
     to_array$12=include$150[18],
     min_elt$14=include$150[19],
     max_elt$14=include$150[20],
     foldi$3=include$150[21],
     iteri$8=include$150[22],
     existsi$5=include$150[23],
     for_alli$5=include$150[24],
     counti$5=include$150[25],
     findi$0=include$150[26],
     find_mapi$0=include$150[27],
     singleton$11=include$150[28],
     of_list$11=include$150[29],
     of_array$7=include$150[30],
     init$10=include$150[31],
     enqueue$2=include$150[32],
     enqueue_all=include$150[33],
     dequeue$2=include$150[34],
     dequeue_exn$2=include$150[35],
     peek$1=include$150[36],
     peek_exn$0=include$150[37],
     clear$5=include$150[38],
     copy$5=include$150[39],
     map$28=include$150[40],
     mapi$6=include$150[41],
     concat_map$0=include$150[42],
     concat_mapi$0=include$150[43],
     filter_map$11=include$150[44],
     filter_mapi$6=include$150[45],
     filter$12=include$150[46],
     filteri$6=include$150[47],
     filter_inplace$2=include$150[48],
     filteri_inplace$1=include$150[49],
     equal$39=include$150[50],
     invariant$12=include$150[51],
     create$38=include$150[52],
     last$1=include$150[53],
     last_exn=include$150[54],
     blit_transfer=include$150[55],
     get$10=include$150[56],
     set$14=include$150[57],
     capacity$0=include$150[58],
     set_capacity=include$150[59];
    function of_array$8(a)
     {var
       r=caml_call2(create$38,0,0),
       _aJY_=caml_call2(_ax_,caml_call1(length,a),1),
       _aJX_=0;
      if(! (_aJY_ < 0))
       {var i$0=_aJX_;
        for(;;)
         {caml_call2(enqueue$2,r,caml_check_bound(a,i$0)[1 + i$0]);
          var _aJ2_=i$0 + 1 | 0;
          if(_aJY_ !== i$0){var i$0=_aJ2_;continue}
          break}}
      var _aJ0_=caml_call2(_ax_,caml_call1(length,a),1),_aJZ_=0;
      if(! (_aJ0_ < 0))
       {var i=_aJZ_;
        for(;;)
         {caml_call1(dequeue_exn$2,r);
          caml_call2(enqueue$2,r,caml_check_bound(a,i)[1 + i]);
          var _aJ1_=i + 1 | 0;
          if(_aJ0_ !== i){var i=_aJ1_;continue}
          break}}
      return r}
    var
     For_test$0=[0,of_array$8],
     include$151=
      caml_call1
       (Base_for_tests_Test_binary_searchable[4],
        [0,get$10,length$25,For_test$0]),
     _aq6_=include$151[1],
     _aq7_=include$151[2],
     _aq8_=caml_call1(Bin_prot_Shape[3][1],cst_a$101),
     _aq9_=caml_call1(Bin_prot_Shape[4][1],cst_src_queue_ml_34_19),
     _aq__=caml_call2(Bin_prot_Shape[15],_aq9_,_aq8_),
     _aq$_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$102),0],
     _ara_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$19),_aq$_,_aq__],0],
     _arb_=caml_call1(Bin_prot_Shape[4][1],cst_src_queue_ml_34_6),
     group$131=caml_call2(Bin_prot_Shape[6],_arb_,_ara_);
    function bin_shape_el$5(a)
     {var _aJW_=caml_call1(Bin_prot_Shape[2][1],cst_el$20);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$131,_aJW_),[0,a,0])}
    function bin_size_el$5(size_of_a){return size_of_a}
    function bin_write_el$5(write_a){return write_a}
    function bin_read_el$5(of_a){return of_a}
    var
     caller_identity$5=
      caml_call1
       (Bin_prot_Shape[5][1],cst_b4c84254_4992_11e6_9ba7_734e154027bd);
    function init$11(len,next)
     {return caml_call2
              (init$10,len,function(param){return caml_call1(next,0)})}
    var
     include$152=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         caller_identity$5,
         module_name$19,
         length$25,
         iter$31,
         init$11,
         bin_size_el$5,
         bin_write_el$5,
         bin_read_el$5,
         bin_shape_el$5]),
     bin_shape_t$116=include$152[1],
     bin_size_t$79=include$152[2],
     bin_write_t$80=include$152[3],
     bin_read_t$158=include$152[4],
     bin_read_t$159=include$152[5],
     bin_writer_t$102=include$152[6],
     bin_reader_t$102=include$152[7],
     bin_t$102=include$152[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$487);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Queue=
      [0,
       bin_shape_t$116,
       bin_size_t$79,
       bin_write_t$80,
       bin_read_t$158,
       bin_read_t$159,
       bin_writer_t$102,
       bin_reader_t$102,
       bin_t$102,
       compare$82,
       t_of_sexp$94,
       sexp_of_t$112,
       mem$15,
       length$25,
       is_empty$18,
       iter$31,
       fold$23,
       fold_result$9,
       fold_until$9,
       exists$19,
       for_all$18,
       count$14,
       sum$10,
       find$17,
       find_map$9,
       to_list$17,
       to_array$12,
       min_elt$14,
       max_elt$14,
       foldi$3,
       iteri$8,
       existsi$5,
       for_alli$5,
       counti$5,
       findi$0,
       find_mapi$0,
       singleton$11,
       of_list$11,
       of_array$7,
       init$10,
       enqueue$2,
       enqueue_all,
       dequeue$2,
       dequeue_exn$2,
       peek$1,
       peek_exn$0,
       clear$5,
       copy$5,
       map$28,
       mapi$6,
       concat_map$0,
       concat_mapi$0,
       filter_map$11,
       filter_mapi$6,
       filter$12,
       filteri$6,
       filter_inplace$2,
       filteri_inplace$1,
       equal$39,
       invariant$12,
       create$38,
       last$1,
       last_exn,
       blit_transfer,
       get$10,
       set$14,
       capacity$0,
       set_capacity,
       _aq6_,
       _aq7_,
       [0,
        [0,
         bin_shape_t$116,
         bin_size_t$79,
         bin_write_t$80,
         bin_read_t$158,
         bin_read_t$159,
         bin_writer_t$102,
         bin_reader_t$102,
         bin_t$102,
         compare$82,
         t_of_sexp$94,
         sexp_of_t$112,
         map$28]]];
    caml_register_global(4515,Core_kernel_Queue,"Core_kernel__Queue");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$488);
    caml_call1(Expect_test_collector[4][1],cst_src_set_once_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$489,cst$219);
    var
     _arc_=caml_call1(Bin_prot_Shape[3][1],cst_a$103),
     _ard_=caml_call1(Bin_prot_Shape[4][1],cst_src_set_once_ml_14_18),
     _are_=
      caml_call1
       (_$s_,caml_call1(_$N_,caml_call2(Bin_prot_Shape[15],_ard_,_arc_))),
     _arf_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$104),0],
     _arg_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$228),_arf_,_are_],0],
     _arh_=caml_call1(Bin_prot_Shape[4][1],cst_src_set_once_ml_14_6),
     group$132=caml_call2(Bin_prot_Shape[6],_arh_,_arg_);
    function bin_shape_t$117(a)
     {var _aJV_=caml_call1(Bin_prot_Shape[2][1],cst_t$229);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$132,_aJV_),[0,a,0])}
    function bin_size_t$80(size_of_a,v)
     {return caml_call2(_ZK_,caml_call1(_ZN_,size_of_a),v)}
    function bin_write_t$81(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_$u_,caml_call1(_$P_,write_a)),buf,pos,v)}
    function bin_read_t$160(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call1(_$x_,caml_call1(_$R_,of_a)),buf,pos_ref,vint)}
    function bin_read_t$161(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_$w_,caml_call1(_$R_,of_a)),buf,pos_ref)}
    function t_of_sexp$95(of_a,t)
     {return caml_call2(_abq_,caml_call1(_abs_,of_a),t)}
    function sexp_of_t$113(of_a,v)
     {return caml_call2(_abr_,caml_call1(_abt_,of_a),v)}
    function of_format(v1){return [0,v1[1],_ari_]}
    function to_format(t){return [0,t[1]]}
    var
     _arj_=
      caml_call1
       (caml_call1
         (_V9_,
          [0,
           bin_shape_t$117,
           bin_size_t$80,
           bin_write_t$81,
           bin_read_t$161,
           bin_read_t$160]),
        [0,to_format,of_format]),
     bin_shape_t$118=_arj_[1],
     bin_size_t$81=_arj_[2],
     bin_write_t$82=_arj_[3],
     bin_read_t$162=_arj_[4],
     bin_read_t$163=_arj_[5],
     bin_writer_t$103=_arj_[6],
     bin_reader_t$103=_arj_[7],
     bin_t$103=_arj_[8],
     include$153=
      caml_call1
       (caml_call1(Base_Sexpable[2],[0,t_of_sexp$95,sexp_of_t$113]),
        [0,to_format,of_format]),
     t_of_sexp$96=include$153[1],
     sexp_of_t$114=include$153[2];
    function sexp_of_t$115(sexp_of_a,param)
     {var value=param[1],set_at=param[2];
      if(value)
       {var
         value$0=value[1],
         _aJT_=caml_call1(_m6_,set_at),
         _aJU_=
          [0,[1,[0,_ark_,[0,caml_call1(Sexplib0_Sexp_conv[7],_aJT_),0]]],0];
        return [1,[0,[1,[0,_arl_,[0,caml_call1(sexp_of_a,value$0),0]]],_aJU_]]}
      return caml_call1(Sexplib0_Sexp_conv[7],cst_unset)}
    function invariant$13(invariant_a,t)
     {var _aJS_=t[1];
      if(_aJS_){var a=_aJS_[1];return caml_call1(invariant_a,a)}
      return 0}
    function create$39(param){return [0,0,_arm_]}
    function set_internal(t,here,value){t[1] = [0,value];t[2] = here;return 0}
    function set_if_none(t,here,value)
     {var _aJR_=caml_call1(_yi_,t[1]);
      return _aJR_?set_internal(t,here,value):_aJR_}
    function set$15(t,here,value)
     {if(caml_call1(_yi_,t[1])){set_internal(t,here,value);return _arn_}
      var
       _aJP_=[0,[1,[0,_aro_,[0,caml_call1(_m7_,t[2]),0]]],0],
       _aJQ_=[0,[1,[0,_arp_,[0,caml_call1(_m7_,here),0]]],_aJP_];
      return caml_call1
              (_ub_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Set_once_set_exn_already_set),
                 _aJQ_]])}
    function set_exn$0(t,here,value)
     {return caml_call1(_t9_,set$15(t,here,value))}
    function get$11(t){return t[1]}
    function get_exn(t,here)
     {var _aJN_=t[1];
      if(_aJN_){var a=_aJN_[1];return a}
      var _aJO_=[0,[1,[0,_arq_,[0,caml_call1(_m7_,here),0]]],0];
      return caml_call1
              (_ba_,
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7],cst_Set_once_get_exn_unset),
                 _aJO_]])}
    function is_none$0(t){return caml_call1(_yi_,t[1])}
    function is_some$0(t){return caml_call1(_yj_,t[1])}
    function iter$32(t,f){return caml_call2(_xV_,t[1],f)}
    function unsafe_value(t){return get_exn(t,_arr_)}
    var
     Optional_syntax=[0,is_none$0,unsafe_value],
     Optional_syntax$0=[0,Optional_syntax];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$490);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Set_once=
      [0,
       sexp_of_t$115,
       invariant$13,
       create$39,
       set$15,
       set_exn$0,
       set_if_none,
       get$11,
       get_exn,
       is_none$0,
       is_some$0,
       iter$32,
       Optional_syntax$0,
       [0,
        bin_shape_t$118,
        bin_size_t$81,
        bin_write_t$82,
        bin_read_t$162,
        bin_read_t$163,
        bin_writer_t$103,
        bin_reader_t$103,
        bin_t$103,
        t_of_sexp$96,
        sexp_of_t$114],
       [0,
        [0,
         bin_shape_t$118,
         bin_size_t$81,
         bin_write_t$82,
         bin_read_t$162,
         bin_read_t$163,
         bin_writer_t$103,
         bin_reader_t$103,
         bin_t$103,
         t_of_sexp$96,
         sexp_of_t$114]]];
    caml_register_global(4516,Core_kernel_Set_once,"Core_kernel__Set_once");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$491);
    caml_call1(Expect_test_collector[4][1],cst_src_sign_or_nan_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$492,cst$220);
    function t_of_sexp$97(sexp)
     {if(0 === sexp[0])
       {var _aJJ_=sexp[1];
        if(caml_string_notequal(_aJJ_,cst_Nan))
         {if(caml_string_notequal(_aJJ_,cst_Neg$2))
           {if(caml_string_notequal(_aJJ_,cst_Pos$2))
             {if(caml_string_notequal(_aJJ_,cst_Zero$2))
               if(caml_string_notequal(_aJJ_,cst_nan$0))
                if(caml_string_notequal(_aJJ_,cst_neg$1))
                 if(caml_string_notequal(_aJJ_,cst_pos$1))
                  if(caml_string_notequal(_aJJ_,cst_zero$1))
                   var switch$0=1,switch$1=0,switch$2=0,switch$3=0;
                  else
                   var switch$3=1;
                 else
                  var switch$2=1,switch$3=0;
                else
                 var switch$1=1,switch$2=0,switch$3=0;
               else
                var switch$0=0,switch$1=0,switch$2=0,switch$3=0;
              else
               var switch$3=1;
              if(switch$3)return 1}
            else
             var switch$2=1;
            if(switch$2)return 2}
          else
           var switch$1=1;
          if(switch$1)return 0}
        else
         var switch$0=0;
        if(! switch$0)return 3}
      else
       {var _aJK_=sexp[1];
        if(! _aJK_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$35,sexp);
        var _aJL_=_aJK_[1];
        if(0 !== _aJL_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$35,sexp);
        var _aJM_=_aJL_[1];
        if(caml_string_notequal(_aJM_,cst_Nan$0))
         {if(caml_string_notequal(_aJM_,cst_Neg$3))
           {if(caml_string_notequal(_aJM_,cst_Pos$3))
             {if(caml_string_notequal(_aJM_,cst_Zero$3))
               if(caml_string_notequal(_aJM_,cst_nan$1))
                if(caml_string_notequal(_aJM_,cst_neg$2))
                 if(caml_string_notequal(_aJM_,cst_pos$2))
                  if(caml_string_notequal(_aJM_,cst_zero$2))
                   var switch$4=1,switch$5=0,switch$6=0,switch$7=0;
                  else
                   var switch$7=1;
                 else
                  var switch$6=1,switch$7=0;
                else
                 var switch$5=1,switch$6=0,switch$7=0;
               else
                var switch$4=0,switch$5=0,switch$6=0,switch$7=0;
              else
               var switch$7=1;
              if(switch$7)
               return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$35,sexp)}
            else
             var switch$6=1;
            if(switch$6)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$35,sexp)}
          else
           var switch$5=1;
          if(switch$5)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$35,sexp)}
        else
         var switch$4=0;
        if(! switch$4)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$35,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$35,sexp)}
    function sexp_of_t$116(param)
     {switch(param)
       {case 0:return _ars_;
        case 1:return _art_;
        case 2:return _aru_;
        default:return _arv_}}
    var
     _arx_=caml_call1(Bin_prot_Shape[9],_arw_),
     _ary_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$230),0,_arx_],0],
     _arz_=caml_call1(Bin_prot_Shape[4][1],cst_src_sign_or_nan_ml_6_4),
     group$133=caml_call2(Bin_prot_Shape[6],_arz_,_ary_),
     _arA_=caml_call1(Bin_prot_Shape[2][1],cst_t$231),
     bin_shape_t$119=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$133,_arA_),0);
    function bin_size_t$82(param){return 1}
    function bin_write_t$83(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        case 2:return caml_call3(Bin_prot_Write[30],buf,pos,2);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,3)}}
    var bin_writer_t$104=[0,bin_size_t$82,bin_write_t$83];
    function bin_read_t$164(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_sign_or_nan_ml_Stable_V1_t,
               pos_ref[1])}
    function bin_read_t$165(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(3 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_arB_,pos_ref[1]);
      switch(match)
       {case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}}
    var
     bin_reader_t$104=[0,bin_read_t$165,bin_read_t$164],
     bin_t$104=[0,bin_shape_t$119,bin_writer_t$104,bin_reader_t$104],
     compare$83=caml_int_compare;
    function hash_fold_t$44(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        default:return caml_call2(Base_Hash[3],hsv,3)}}
    function hash$50(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_aJI_=hash_fold_t$44(hsv,x);
      return caml_call1(Base_Hash[9],_aJI_)}
    var
     Typename_of_t$27=caml_call1(Typerep_lib_Make_typename[1],[0,name$67]),
     typename_of_t$26=Typename_of_t$27[2],
     name_of_t$19=Typename_of_t$27[1],
     typerep_of_t$27=
      [9,
       [0,
        name_of_t$19,
        [0,
         [246,
          function(_aJH_)
           {var
             tag0=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Neg$4,_fa_,0,0,0,0,_eQ_,_arC_]),
             tag1=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Zero$4,_fa_,0,0,1,1,_eQ_,_arD_]),
             tag2=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Pos$4,_fa_,0,0,2,2,_eQ_,_arE_]),
             tag3=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Nan$1,_fa_,0,0,3,3,_eQ_,_arF_]),
             typename=caml_call1(Typerep_lib_Std[1][1][2],name_of_t$19),
             tags=[0,[0,tag0],[0,tag1],[0,tag2],[0,tag3]],
             polymorphic=0;
            function value(param)
             {switch(param)
               {case 0:return [0,tag0,_fh_];
                case 1:return [0,tag1,_fh_];
                case 2:return [0,tag2,_fh_];
                default:return [0,tag3,_fh_]}}
            return [8,
                    caml_call1
                     (Typerep_lib_Std[1][6][7],
                      [0,typename,tags,polymorphic,value])]}]]]],
     _arG_=Base_Sign_or_nan[1],
     _arH_=Base_Sign_or_nan[28],
     _arI_=Base_Sign_or_nan[29],
     _arJ_=Base_Sign_or_nan[30],
     _arK_=Base_Sign_or_nan[31],
     _arL_=Base_Sign_or_nan[32],
     _arM_=Base_Sign_or_nan[33],
     _arN_=
      [0,
       bin_size_t$82,
       bin_write_t$83,
       bin_read_t$165,
       bin_read_t$164,
       bin_shape_t$119,
       bin_writer_t$104,
       bin_reader_t$104,
       bin_t$104],
     _arO_=
      [0,
       Base_Sign_or_nan[2],
       Base_Sign_or_nan[3],
       Base_Sign_or_nan[4],
       Base_Sign_or_nan[5],
       Base_Sign_or_nan[6],
       Base_Sign_or_nan[7],
       Base_Sign_or_nan[8],
       Base_Sign_or_nan[9],
       Base_Sign_or_nan[10],
       Base_Sign_or_nan[11],
       Base_Sign_or_nan[12],
       Base_Sign_or_nan[13],
       Base_Sign_or_nan[14],
       Base_Sign_or_nan[15],
       Base_Sign_or_nan[16],
       Base_Sign_or_nan[17],
       Base_Sign_or_nan[18],
       Base_Sign_or_nan[19],
       Base_Sign_or_nan[20],
       Base_Sign_or_nan[21],
       Base_Sign_or_nan[22],
       Base_Sign_or_nan[23],
       Base_Sign_or_nan[24],
       Base_Sign_or_nan[25],
       Base_Sign_or_nan[26],
       Base_Sign_or_nan[27]],
     include$154=function(_aJG_){return _A2_(_arO_,_aJG_)}(_arN_),
     _arP_=include$154[1],
     _arQ_=include$154[2],
     _arR_=include$154[3],
     _arS_=include$154[4],
     _arT_=include$154[5],
     _arU_=include$154[6],
     _arV_=include$154[7],
     _arW_=include$154[8],
     _arX_=include$154[9],
     _arY_=include$154[10],
     _arZ_=include$154[11],
     _ar0_=include$154[12],
     _ar1_=include$154[13],
     _ar2_=include$154[14],
     _ar3_=include$154[15],
     _ar4_=include$154[16],
     _ar5_=include$154[17],
     _ar6_=include$154[18],
     _ar7_=include$154[19],
     _ar8_=include$154[20],
     _ar9_=include$154[21],
     _ar__=include$154[22],
     _ar$_=include$154[23],
     _asa_=include$154[24],
     _asb_=include$154[25],
     _asc_=include$154[26],
     _asd_=include$154[27],
     _ase_=include$154[28],
     _asf_=include$154[29],
     _asg_=include$154[30],
     _ash_=include$154[31],
     _asi_=include$154[32],
     _asj_=include$154[33],
     _ask_=include$154[34],
     _asl_=include$154[35],
     _asm_=include$154[36],
     _asn_=include$154[37],
     _aso_=include$154[38],
     _asp_=include$154[39],
     _asq_=include$154[40],
     _asr_=include$154[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$493);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Sign_or_nan=
      [0,
       typerep_of_t$27,
       typename_of_t$26,
       _arG_,
       _arH_,
       _arI_,
       _arJ_,
       _arK_,
       _arL_,
       _arM_,
       _arP_,
       _arQ_,
       _arR_,
       _arS_,
       _arT_,
       _arU_,
       _arV_,
       _arW_,
       _arX_,
       _arY_,
       _arZ_,
       _ar0_,
       _ar1_,
       _ar2_,
       _ar3_,
       _ar4_,
       _ar5_,
       _ar6_,
       _ar7_,
       _ar8_,
       _ar9_,
       _ar__,
       _ar$_,
       _asa_,
       _asb_,
       _asc_,
       _asd_,
       _ase_,
       _asf_,
       _asg_,
       _ash_,
       _asi_,
       _asj_,
       _ask_,
       _asl_,
       _asm_,
       _asn_,
       _aso_,
       _asp_,
       _asq_,
       _asr_,
       [0,
        [0,
         bin_size_t$82,
         bin_write_t$83,
         bin_read_t$165,
         bin_read_t$164,
         bin_shape_t$119,
         bin_writer_t$104,
         bin_reader_t$104,
         bin_t$104,
         compare$83,
         hash_fold_t$44,
         hash$50,
         t_of_sexp$97,
         sexp_of_t$116]]];
    caml_register_global
     (4518,Core_kernel_Sign_or_nan,"Core_kernel__Sign_or_nan");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$494);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_unit_test_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$495,cst$221);
    function Make_sexp_deserialization_test(_aJD_)
     {function _aJE_(param)
       {function _aJF_(param)
         {var
           sexp_as_string=param[2],
           t=param[1],
           error=
            caml_call2
             (_t6_,
              0,
              function(param)
               {var sexp=caml_call1(of_string,sexp_as_string);
                return caml_call1(_aJD_[1],sexp)});
          if(0 === error[0])
           {var t$0=error[1];
            return caml_call2(_aJD_[11],t,t$0)
                    ?_ass_
                    :caml_call4
                      (_ua_,
                       0,
                       cst_sexp_deserialization_mismatch,
                       [0,[0,434236056,t],[0,165604846,t$0]],
                       function(param)
                        {var
                          v1=param[2],
                          v0=param[1],
                          v0$0=v0[2],
                          v0$1=[1,[0,_ast_,[0,caml_call1(_aJD_[2],v0$0),0]]],
                          v0$2=v1[2],
                          v1$0=[1,[0,_asu_,[0,caml_call1(_aJD_[2],v0$2),0]]];
                         return [1,[0,v0$1,[0,v1$0,0]]]})}
          return caml_call4
                  (_ug_,
                   error,
                   cst_could_not_deserialize_sexp,
                   [0,sexp_as_string,[0,434236056,t]],
                   function(param)
                    {var
                      v1=param[2],
                      v0=param[1],
                      v0$0=caml_call1(sexp_of_t$40,v0),
                      v0$1=v1[2],
                      v1$0=[1,[0,_asv_,[0,caml_call1(_aJD_[2],v0$1),0]]];
                     return [1,[0,v0$0,[0,v1$0,0]]]})}
        return caml_call1
                (_t9_,caml_call1(_um_,caml_call2(_qg_,_aJD_[12],_aJF_)))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_sexp_deserialization,
        0,
        cst_src_stable_unit_test_ml$0,
        6,
        2,
        772,
        _aJE_);
      return [0]}
    function Make_sexp_serialization_test(_aJz_)
     {function _aJA_(param)
       {function _aJB_(param)
         {var sexp_as_string=param[2],t=param[1];
          return caml_call2
                  (_t6_,
                   0,
                   function(param)
                    {var
                      sexp=caml_call1(of_string,sexp_as_string),
                      serialized_sexp=caml_call1(_aJz_[2],t),
                      _aJC_=caml_call2(_zK_,serialized_sexp,sexp);
                     return _aJC_
                             ?failwiths
                               (0,
                                _asy_,
                                cst_sexp_serialization_mismatch,
                                [0,[0,434236056,sexp],[0,165604846,serialized_sexp]],
                                function(param)
                                 {var
                                   v1=param[2],
                                   v0=param[1],
                                   v0$0=v0[2],
                                   v0$1=[1,[0,_asw_,[0,caml_call1(sexp_of_t$35,v0$0),0]]],
                                   v0$2=v1[2],
                                   v1$0=[1,[0,_asx_,[0,caml_call1(sexp_of_t$35,v0$2),0]]];
                                  return [1,[0,v0$1,[0,v1$0,0]]]})
                             :_aJC_})}
        return caml_call1
                (_t9_,caml_call1(_um_,caml_call2(_qg_,_aJz_[12],_aJB_)))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_sexp_serialization,
        0,
        cst_src_stable_unit_test_ml$1,
        32,
        2,
        554,
        _aJA_);
      return [0]}
    function Make_bin_io_test(_aJv_)
     {function _aJw_(param)
       {function _aJx_(param)
         {var
           expected_bin_io=param[3],
           t=param[1],
           binable_m=
            [0,
             _aJv_[3],
             _aJv_[4],
             _aJv_[5],
             _aJv_[6],
             _aJv_[7],
             _aJv_[8],
             _aJv_[9],
             _aJv_[10]],
           serialized_bin_io=to_string$17(binable_m,t);
          if(caml_call2(symbol$14,serialized_bin_io,expected_bin_io))
           failwiths
            (0,
             _asB_,
             cst_bin_io_serialization_mismatch,
             [0,
              t,
              [0,434236056,expected_bin_io],
              [0,165604846,serialized_bin_io]],
             function(param)
              {var
                v2=param[3],
                v1=param[2],
                v0=param[1],
                v0$0=caml_call1(_aJv_[2],v0),
                v0$1=v1[2],
                v1$0=[1,[0,_asz_,[0,caml_call1(sexp_of_t$40,v0$1),0]]],
                v0$2=v2[2],
                v2$0=[1,[0,_asA_,[0,caml_call1(sexp_of_t$40,v0$2),0]]];
               return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]});
          var
           t$0=of_string$14(binable_m,serialized_bin_io),
           _aJy_=1 - caml_call2(_aJv_[11],t,t$0);
          return _aJy_
                  ?failwiths
                    (0,
                     _asE_,
                     cst_bin_io_deserialization_mismatch,
                     [0,[0,434236056,t],[0,165604846,t$0]],
                     function(param)
                      {var
                        v1=param[2],
                        v0=param[1],
                        v0$0=v0[2],
                        v0$1=[1,[0,_asC_,[0,caml_call1(_aJv_[2],v0$0),0]]],
                        v0$2=v1[2],
                        v1$0=[1,[0,_asD_,[0,caml_call1(_aJv_[2],v0$2),0]]];
                       return [1,[0,v0$1,[0,v1$0,0]]]})
                  :_aJy_}
        return caml_call2(_ph_,_aJv_[12],_aJx_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_bin_io,
        0,
        cst_src_stable_unit_test_ml$2,
        49,
        2,
        802,
        _aJw_);
      return [0]}
    function Make$14(T)
     {Make_sexp_deserialization_test(T);
      Make_sexp_serialization_test(T);
      Make_bin_io_test(T);
      return [0]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$496);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Stable_unit_test=
      [0,
       Make_sexp_deserialization_test,
       Make_sexp_serialization_test,
       Make_bin_io_test,
       Make$14,
       function(T)
        {function _aJo_(param)
          {function _aJt_(param)
            {var
              match=param[2],
              sexps=match[1],
              t=param[1],
              sexps$0=caml_call2(_qg_,sexps,of_string),
              match$0=caml_call1(T[2],t);
             if(0 === match$0[0])
              var
               serialized_elements=
                failwiths
                 (0,
                  _asF_,
                  cst_expected_list_when_serializing_unordered_container,
                  t,
                  T[2]);
             else
              var sexps$1=match$0[1],serialized_elements=sexps$1;
             var
              sorted_sexps=caml_call2(_p5_,sexps$0,_zM_),
              sorted_serialized=caml_call2(_p5_,serialized_elements,_zM_);
             if(1 - caml_call3(_rk_,_zH_,sorted_sexps,sorted_serialized))
              failwiths
               (0,
                _asI_,
                cst_sexp_serialization_mismatch$0,
                [0,[0,434236056,sexps$0],[0,165604846,serialized_elements]],
                function(param)
                 {var
                   v1=param[2],
                   v0=param[1],
                   v0$0=v0[2],
                   v0$1=[1,[0,_asG_,[0,caml_call2(_pf_,sexp_of_t$35,v0$0),0]]],
                   v0$2=v1[2],
                   v1$0=[1,[0,_asH_,[0,caml_call2(_pf_,sexp_of_t$35,v0$2),0]]];
                  return [1,[0,v0$1,[0,v1$0,0]]]});
             var
              sexp_permutations=
               caml_call2
                (_qY_,10,function(param){return caml_call2(_rf_,0,sexps$0)});
             return caml_call2
                     (_ph_,
                      sexp_permutations,
                      function(sexps)
                       {var
                         t$0=caml_call1(T[1],[1,sexps]),
                         _aJu_=1 - caml_call2(T[11],t,t$0);
                        return _aJu_
                                ?failwiths
                                  (0,
                                   _asL_,
                                   cst_sexp_deserialization_msimatch,
                                   [0,[0,434236056,t],[0,165604846,t$0]],
                                   function(param)
                                    {var
                                      v1=param[2],
                                      v0=param[1],
                                      v0$0=v0[2],
                                      v0$1=[1,[0,_asJ_,[0,caml_call1(T[2],v0$0),0]]],
                                      v0$2=v1[2],
                                      v1$0=[1,[0,_asK_,[0,caml_call1(T[2],v0$2),0]]];
                                     return [1,[0,v0$1,[0,v1$0,0]]]})
                                :_aJu_})}
           return caml_call2(_ph_,T[12],_aJt_)}
         caml_call8
          (Ppx_inline_test_lib_Runtime[5],
           Inline_test_config,
           cst_sexp,
           0,
           cst_src_stable_unit_test_ml$3,
           80,
           2,
           1178,
           _aJo_);
         function is_concatenation(string,strings)
          {if(caml_call1(_Cd_,string))return caml_call2(_pm_,strings,_Cd_);
           function loop(rev_skipped,strings)
            {if(strings)
              {var
                strings$0=strings[2],
                prefix=strings[1],
                continue$0=
                 function(param)
                  {return loop([0,prefix,rev_skipped],strings$0)},
                match=caml_call2(_Di_,string,prefix);
               if(match)
                {var
                  string$0=match[1],
                  _aJs_=
                   is_concatenation
                    (string$0,caml_call2(_pI_,rev_skipped,strings$0));
                 return _aJs_?_aJs_:continue$0(0)}
               return continue$0(0)}
             return 0}
           return loop(0,strings)}
         function _aJp_(param)
          {function _aJq_(param)
            {var
              match=param[2],
              bin_io_elements=match[3],
              bin_io_header=match[2],
              t=param[1],
              binable_m=[0,T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[10]],
              serialized=to_string$17(binable_m,t),
              match$0=caml_call2(_Di_,serialized,bin_io_header);
             if(match$0)
              var
               elements_string=match$0[1],
               serialization_matches=
                is_concatenation(elements_string,bin_io_elements);
             else
              var serialization_matches=0;
             if(1 - serialization_matches)
              failwiths
               (0,
                _asO_,
                cst_serialization_mismatch,
                [0,
                 [0,434236056,[0,bin_io_header,bin_io_elements]],
                 [0,165604846,serialized]],
                function(param)
                 {var
                   v1=param[2],
                   v0=param[1],
                   v0$0=v0[2],
                   v1$0=v0$0[2],
                   v0$1=v0$0[1],
                   v0$2=caml_call1(sexp_of_t$40,v0$1),
                   v1$1=caml_call2(_pf_,sexp_of_t$40,v1$0),
                   v0$3=[1,[0,_asM_,[0,[1,[0,v0$2,[0,v1$1,0]]],0]]],
                   v0$4=v1[2],
                   v1$2=[1,[0,_asN_,[0,caml_call1(sexp_of_t$40,v0$4),0]]];
                  return [1,[0,v0$3,[0,v1$2,0]]]});
             var
              permutatations=
               caml_call2
                (_qY_,
                 10,
                 function(param){return caml_call2(_rf_,0,bin_io_elements)});
             return caml_call2
                     (_ph_,
                      permutatations,
                      function(elements)
                       {var
                         t$0=
                          of_string$14
                           (binable_m,
                            caml_call2(_Gu_,bin_io_header,caml_call2(_Cx_,0,elements))),
                         _aJr_=1 - caml_call2(T[11],t,t$0);
                        return _aJr_
                                ?failwiths
                                  (0,
                                   _asR_,
                                   cst_bin_io_deserialization_mismatch$0,
                                   [0,[0,434236056,t],[0,165604846,t$0]],
                                   function(param)
                                    {var
                                      v1=param[2],
                                      v0=param[1],
                                      v0$0=v0[2],
                                      v0$1=[1,[0,_asP_,[0,caml_call1(T[2],v0$0),0]]],
                                      v0$2=v1[2],
                                      v1$0=[1,[0,_asQ_,[0,caml_call1(T[2],v0$2),0]]];
                                     return [1,[0,v0$1,[0,v1$0,0]]]})
                                :_aJr_})}
           return caml_call2(_ph_,T[12],_aJq_)}
         caml_call8
          (Ppx_inline_test_lib_Runtime[5],
           Inline_test_config,
           cst_bin_io$0,
           0,
           cst_src_stable_unit_test_ml$4,
           125,
           2,
           1244,
           _aJp_);
         return [0]}];
    caml_register_global
     (4519,Core_kernel_Stable_unit_test,"Core_kernel__Stable_unit_test");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$497);
    caml_call1(Expect_test_collector[4][1],cst_src_stack_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$498,cst$222);
    var
     t_of_sexp$98=include$155[1],
     sexp_of_t$117=include$155[2],
     invariant$14=include$155[3],
     mem$16=include$155[4],
     length$26=include$155[5],
     is_empty$19=include$155[6],
     iter$33=include$155[7],
     fold$24=include$155[8],
     fold_result$10=include$155[9],
     fold_until$10=include$155[10],
     exists$20=include$155[11],
     for_all$19=include$155[12],
     count$15=include$155[13],
     sum$11=include$155[14],
     find$18=include$155[15],
     find_map$10=include$155[16],
     to_list$18=include$155[17],
     to_array$13=include$155[18],
     min_elt$15=include$155[19],
     max_elt$15=include$155[20],
     of_list$12=include$155[21],
     create$40=include$155[22],
     singleton$12=include$155[23],
     push=include$155[24],
     pop=include$155[25],
     pop_exn=include$155[26],
     top$0=include$155[27],
     top_exn$0=include$155[28],
     clear$6=include$155[29],
     copy$6=include$155[30],
     until_empty$0=include$155[31],
     capacity$1=include$155[32],
     set_capacity$0=include$155[33],
     include$156=
      caml_call1
       (Bin_prot_Utils[8],
        [0,
         [0,
          bin_shape_t$24,
          bin_size_t$26,
          bin_write_t$26,
          bin_read_t$55,
          bin_read_t$54],
         to_list$18,
         of_list$12]),
     _asS_=include$156[1],
     _asT_=include$156[2],
     _asU_=include$156[3],
     _asV_=include$156[4],
     _asW_=include$156[5],
     _asX_=include$156[6],
     _asY_=include$156[7],
     _asZ_=include$156[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$499);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Stack=
      [0,
       t_of_sexp$98,
       sexp_of_t$117,
       invariant$14,
       mem$16,
       length$26,
       is_empty$19,
       iter$33,
       fold$24,
       fold_result$10,
       fold_until$10,
       exists$20,
       for_all$19,
       count$15,
       sum$11,
       find$18,
       find_map$10,
       to_list$18,
       to_array$13,
       min_elt$15,
       max_elt$15,
       of_list$12,
       create$40,
       singleton$12,
       push,
       pop,
       pop_exn,
       top$0,
       top_exn$0,
       clear$6,
       copy$6,
       until_empty$0,
       capacity$1,
       set_capacity$0,
       _asS_,
       _asT_,
       _asU_,
       _asV_,
       _asW_,
       _asX_,
       _asY_,
       _asZ_];
    caml_register_global(4521,Core_kernel_Stack,"Core_kernel__Stack");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$500);
    caml_call1(Expect_test_collector[4][1],cst_src_std_kernel_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$501,cst$223);
    var _as0_=Base_Exn[16];
    caml_call1(Base_Exn[17],0);
    var _as1_=_aec_[80],_as2_=include$1[1],_as3_=include$1[2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$502);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$157=
      [0,
       _as0_,
       _fu_,
       am_running_test,
       _as1_,
       _Gf_,
       _Gg_,
       _Gh_,
       _Gk_,
       _Gl_,
       _Gm_,
       _Gn_,
       _Go_,
       _Gp_,
       _Gq_,
       _Gr_,
       _Gs_,
       _Gt_,
       _Gu_,
       _Gv_,
       _Gw_,
       _Gx_,
       _Gy_,
       _Gz_,
       _GB_,
       _GC_,
       _GD_,
       _GE_,
       _GF_,
       _GG_,
       _GH_,
       _GI_,
       _GJ_,
       _GK_,
       _GL_,
       _GM_,
       _GN_,
       _GO_,
       _GP_,
       _GQ_,
       _GR_,
       _GS_,
       _GT_,
       _GU_,
       _GV_,
       _GW_,
       _GX_,
       _GY_,
       _GZ_,
       _G0_,
       _G1_,
       _G2_,
       _G3_,
       _G4_,
       _G5_,
       _G6_,
       _G7_,
       _G8_,
       _G9_,
       _G__,
       _G$_,
       _Ha_,
       _Hb_,
       _Hc_,
       _Hd_,
       _He_,
       _Hf_,
       _Hg_,
       _Hh_,
       _Hi_,
       _Hj_,
       _Hk_,
       _Hl_,
       _Hm_,
       _Hn_,
       _Ho_,
       _Hp_,
       _Hq_,
       _Hr_,
       _Hs_,
       _Ht_,
       _Hu_,
       _Hv_,
       _Hw_,
       _Hx_,
       _Hy_,
       _Hz_,
       _HA_,
       _Np_,
       _Nq_,
       _Nr_,
       _Ns_,
       _Nt_,
       _Nu_,
       _Nv_,
       _Nw_,
       _Nx_,
       _Ny_,
       _Nz_,
       _NA_,
       _NB_,
       _NC_,
       _ND_,
       _NE_,
       _NF_,
       _NG_,
       _NH_,
       _NI_,
       _NJ_,
       _NK_,
       _NL_,
       _NM_,
       _NN_,
       _NO_,
       _NP_,
       _NQ_,
       _NR_,
       _NS_,
       _NT_,
       _NU_,
       _NV_,
       _NW_,
       _NX_,
       _NY_,
       _NZ_,
       _N0_,
       _N1_,
       _N2_,
       _N3_,
       _N4_,
       _N5_,
       symbol,
       _N6_,
       _N7_,
       _N8_,
       _N9_,
       _N__,
       _N$_,
       _Oa_,
       _Ob_,
       _Oc_,
       _Od_,
       _Oe_,
       _Of_,
       _Og_,
       _Oh_,
       _Mj_,
       never_returns,
       _Oi_,
       _Oj_,
       _Ok_,
       _Ol_,
       _Om_,
       _On_,
       _Oo_,
       _Op_,
       _Oq_,
       _Or_,
       _Os_,
       _Ot_,
       _Ou_,
       _Ov_,
       _Ow_,
       _Ox_,
       _Oy_,
       _Oz_,
       _OA_,
       _OB_,
       _OC_,
       _OD_,
       _OE_,
       _OF_,
       _OG_,
       _OH_,
       _OI_,
       _OJ_,
       _OK_,
       _OL_,
       _OM_,
       _ON_,
       _OO_,
       _OP_,
       _OQ_,
       _OR_,
       _OS_,
       _OT_,
       _OU_,
       _OV_,
       _OW_,
       _OX_,
       _OY_,
       _OZ_,
       _O0_,
       _O1_,
       _O2_,
       _O3_,
       _O4_,
       _O5_,
       _O6_,
       _O7_,
       _O8_,
       _O9_,
       _O__,
       _O$_,
       _Pa_,
       _Pb_,
       Bug,
       C_malloc_exn,
       _Pf_,
       fst3,
       snd3,
       trd3,
       uw,
       symbol$60,
       symbol$59,
       symbol$62,
       symbol$129,
       _fF_,
       _iD_,
       _fJ_,
       _ua_,
       _ub_,
       _Pg_,
       failwithp,
       failwiths,
       force,
       _fK_,
       ident,
       _Ph_,
       _fD_,
       _yi_,
       _yj_,
       _fG_,
       _t9_,
       _Pi_,
       phys_same,
       _Pj_,
       _Pk_,
       _fM_,
       _Pl_,
       _Pm_,
       _on_,
       _I3_,
       _Pn_,
       _fE_,
       _Po_,
       _Pp_,
       _Pq_,
       _Pr_,
       _Ps_,
       _Pt_,
       _Pu_,
       _Pv_,
       _Pw_,
       _Px_,
       _Py_,
       _Pz_,
       _PA_,
       _PB_,
       _PC_,
       _PD_,
       _PE_,
       _PF_,
       _PG_,
       _PH_,
       bin_shape_array,
       bin_size_array,
       bin_write_array,
       bin_writer_array,
       bin_read_array$0,
       bin_read_array,
       bin_reader_array,
       bin_array,
       _lf_,
       equal$0,
       _lg_,
       _lh_,
       typerep_of_array,
       _PO_,
       bin_shape_bool,
       _Be_,
       _Bf_,
       bin_writer_bool,
       _Bg_,
       _Bh_,
       bin_reader_bool,
       bin_bool,
       _BF_,
       _BG_,
       _BS_,
       hash_bool,
       _BP_,
       _BQ_,
       typerep_of_bool,
       typename_of_bool,
       bin_shape_char,
       _E$_,
       _Fa_,
       bin_writer_char,
       _Fb_,
       _Fc_,
       bin_reader_char,
       bin_char,
       _FR_,
       _FS_,
       _F4_,
       hash_char,
       _F1_,
       _F2_,
       typerep_of_char,
       typename_of_char,
       bin_shape_float,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_float,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_float,
       bin_float,
       compare$30,
       equal$18,
       hash_fold_t$15,
       hash_float,
       sexp_of_t$42,
       _IA_,
       typerep_of_float,
       typename_of_float,
       bin_shape_int,
       bin_size_t$44,
       bin_write_t$44,
       bin_writer_int,
       bin_read_t$90,
       bin_read_t$91,
       bin_reader_int,
       bin_int,
       compare$32,
       equal$19,
       hash_fold_t$16,
       hash_int,
       sexp_of_t$44,
       t_of_sexp$35,
       typerep_of_int,
       typename_of_int,
       bin_shape_int32,
       bin_size_t$45,
       bin_write_t$45,
       bin_writer_int32,
       bin_read_t$92,
       bin_read_t$93,
       bin_reader_int32,
       bin_int32,
       compare$34,
       equal$20,
       hash_fold_t$18,
       hash_int32,
       sexp_of_t$46,
       t_of_sexp$37,
       typerep_of_int32,
       typename_of_int32,
       bin_shape_int64,
       bin_size_t$46,
       bin_write_t$46,
       bin_writer_int64,
       bin_read_t$94,
       bin_read_t$95,
       bin_reader_int64,
       bin_int64,
       compare$36,
       equal$21,
       hash_fold_t$20,
       hash_int64,
       sexp_of_t$48,
       t_of_sexp$39,
       typerep_of_int64,
       typename_of_int64,
       bin_shape_lazy_t,
       bin_size_lazy_t,
       bin_write_lazy_t,
       bin_writer_lazy_t,
       bin_read_lazy_t$0,
       bin_read_lazy_t,
       bin_reader_lazy_t,
       bin_lazy_t,
       _Lu_,
       _Lv_,
       _Lx_,
       _Lw_,
       typerep_of_lazy_t,
       _Qb_,
       bin_shape_list,
       bin_size_list,
       bin_write_list,
       bin_writer_list,
       bin_read_list$0,
       bin_read_list,
       bin_reader_list,
       bin_list,
       compare_sexp_list,
       _rk_,
       hash_fold_sexp_list,
       _pf_,
       _pe_,
       typerep_of_list,
       _Qi_,
       bin_shape_nativeint,
       bin_size_t$53,
       bin_write_t$53,
       bin_writer_nativeint,
       bin_read_t$108,
       bin_read_t$109,
       bin_reader_nativeint,
       bin_nativeint,
       compare$44,
       equal$24,
       hash_fold_t$25,
       hash_nativeint,
       sexp_of_t$55,
       t_of_sexp$46,
       typerep_of_nativeint,
       typename_of_nativeint,
       bin_shape_option,
       bin_size_option,
       bin_write_option,
       bin_writer_option,
       bin_read_option$0,
       bin_read_option,
       bin_reader_option,
       bin_option,
       _xO_,
       _x9_,
       _xP_,
       _xR_,
       _xQ_,
       typerep_of_option,
       _Qs_,
       bin_shape_string,
       bin_size_t$42,
       bin_write_t$42,
       bin_writer_string,
       bin_read_t$86,
       bin_read_t$87,
       bin_reader_string,
       bin_string,
       compare$28,
       equal$17,
       hash_fold_t$13,
       hash_string,
       sexp_of_t$40,
       t_of_sexp$32,
       typerep_of_string,
       typename_of_string,
       bin_shape_bytes,
       bin_size_t$0,
       bin_write_t$0,
       bin_writer_bytes,
       bin_read_t$1,
       bin_read_t$2,
       bin_reader_bytes,
       bin_bytes,
       _Er_,
       _Eq_,
       _Ee_,
       _Ed_,
       typerep_of_bytes,
       typename_of_bytes,
       bin_shape_ref,
       bin_size_ref,
       bin_write_ref,
       bin_writer_ref,
       bin_read_ref$0,
       bin_read_ref,
       bin_reader_ref,
       bin_ref,
       _M5_,
       _M6_,
       _M8_,
       _M7_,
       typerep_of_ref,
       _QF_,
       bin_shape_unit,
       bin_size_t$51,
       bin_write_t$51,
       bin_writer_unit,
       bin_read_t$104,
       bin_read_t$105,
       bin_reader_unit,
       bin_unit,
       compare$42,
       equal$23,
       hash_fold_t$24,
       hash_unit,
       sexp_of_t$53,
       t_of_sexp$44,
       typerep_of_unit,
       typename_of_unit,
       bin_shape_float_array,
       bin_size_float_array,
       bin_write_float_array,
       bin_writer_float_array,
       bin_read_float_array$0,
       bin_read_float_array,
       bin_reader_float_array,
       bin_float_array,
       compare_float_array,
       sexp_of_float_array,
       float_array_of_sexp,
       typerep_of_float_array,
       typename_of_float_array,
       _QN_,
       bin_shape_sexp_array,
       bin_size_sexp_array,
       bin_write_sexp_array,
       bin_writer_sexp_array,
       bin_read_sexp_array,
       bin_read_sexp_array$0,
       bin_reader_sexp_array,
       bin_sexp_array,
       _lf_,
       Typename_of_sexp_array,
       _QU_,
       typerep_of_sexp_array,
       bin_shape_sexp_bool,
       _Be_,
       _Bf_,
       bin_writer_sexp_bool,
       _Bh_,
       _Bg_,
       bin_reader_sexp_bool,
       bin_sexp_bool,
       _BF_,
       _BS_,
       hash_sexp_bool,
       Typename_of_sexp_bool,
       typename_of_sexp_bool,
       typerep_of_sexp_bool,
       bin_shape_sexp_list,
       bin_size_sexp_list,
       bin_write_sexp_list,
       bin_writer_sexp_list,
       bin_read_sexp_list,
       bin_read_sexp_list$0,
       bin_reader_sexp_list,
       bin_sexp_list,
       compare_sexp_list,
       hash_fold_sexp_list,
       Typename_of_sexp_list,
       _Q4_,
       typerep_of_sexp_list,
       bin_shape_sexp_option,
       bin_size_sexp_option,
       bin_write_sexp_option,
       bin_writer_sexp_option,
       bin_read_sexp_option,
       bin_read_sexp_option$0,
       bin_reader_sexp_option,
       bin_sexp_option,
       _xO_,
       _xP_,
       Typename_of_sexp_option,
       _Q$_,
       typerep_of_sexp_option,
       bin_shape_sexp_opaque$0,
       bin_size_sexp_opaque$0,
       bin_write_sexp_opaque$0,
       bin_writer_sexp_opaque$0,
       bin_read_sexp_opaque$1,
       bin_read_sexp_opaque$2,
       bin_reader_sexp_opaque$0,
       bin_sexp_opaque$0,
       compare_sexp_opaque$0,
       hash_fold_sexp_opaque$0,
       Typename_of_sexp_opaque$0,
       typename_of_sexp_opaque$0,
       typerep_of_sexp_opaque$0,
       _as2_,
       _as3_];
    caml_register_global(4522,include$157,"Core_kernel__Std_kernel");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$503);
    caml_call1(Expect_test_collector[4][1],cst_src_make_stable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$504,cst$224);
    function V1$14(Stable_format,M)
     {var
       compare=M[1],
       to_binable=M[2],
       of_binable=M[3],
       _aJn_=
        caml_call1
         (caml_call1(Stable[1][1],[0,Stable_format[9],Stable_format[10]]),
          [0,to_binable,of_binable]),
       t_of_sexp=_aJn_[1],
       sexp_of_t=_aJn_[2],
       include=
        caml_call1
         (caml_call1
           (Stable$0[1][1],
            [0,
             Stable_format[5],
             Stable_format[1],
             Stable_format[2],
             Stable_format[3],
             Stable_format[4]]),
          [0,to_binable,of_binable]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8],
       include$0=caml_call1(_hu_[1][2],[0,compare,sexp_of_t]),
       comparator=include$0[1];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              comparator]}
    var Of_stable_format=[0,V1$14];
    function V1$15(Stable_format,M)
     {var
       compare=M[1],
       map=M[2],
       to_stable_format=M[3],
       of_stable_format=M[4],
       _aJm_=
        caml_call1
         (caml_call1(Stable[2][1],[0,Stable_format[9],Stable_format[10]]),
          [0,to_stable_format,of_stable_format]),
       t_of_sexp=_aJm_[1],
       sexp_of_t=_aJm_[2],
       include=
        caml_call1
         (caml_call1
           (Stable$0[2][1],
            [0,
             Stable_format[1],
             Stable_format[2],
             Stable_format[3],
             Stable_format[4],
             Stable_format[5]]),
          [0,to_stable_format,of_stable_format]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              map]}
    var Of_stable_format1=[0,V1$15];
    function V1$16(Stable_format,M)
     {var
       compare=M[1],
       map=M[2],
       to_stable_format=M[3],
       of_stable_format=M[4],
       _aJl_=
        caml_call1
         (caml_call1(Stable[3][1],[0,Stable_format[9],Stable_format[10]]),
          [0,to_stable_format,of_stable_format]),
       t_of_sexp=_aJl_[1],
       sexp_of_t=_aJl_[2],
       include=
        caml_call1
         (caml_call1
           (Stable$0[3][1],
            [0,
             Stable_format[1],
             Stable_format[2],
             Stable_format[3],
             Stable_format[4],
             Stable_format[5]]),
          [0,to_stable_format,of_stable_format]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              map]}
    var Of_stable_format2=[0,V1$16];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$505);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Make_stable=
      [0,Of_stable_format,Of_stable_format1,Of_stable_format2];
    caml_register_global
     (4523,Core_kernel_Make_stable,"Core_kernel__Make_stable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$506);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$507,cst$225);
    var
     _as4_=_hs_[2],
     _atX_=Ppx_compare_lib[4],
     _as5_=_as4_[1],
     _as6_=_as4_[2],
     _as7_=_as4_[3],
     _as8_=_as4_[4],
     _as9_=_as4_[5],
     _as__=_as4_[6],
     _as$_=_as4_[7],
     _ata_=_as4_[8],
     _atb_=_as4_[9],
     _atc_=_as4_[10],
     _atd_=_as4_[11],
     _ate_=_as4_[12],
     _atf_=_as4_[13],
     _atg_=_as4_[14],
     _ath_=_as4_[15],
     _ati_=_as4_[16],
     _atj_=_as4_[17],
     _atk_=_as4_[18],
     _atl_=_as4_[19],
     _atm_=_as4_[20],
     _atn_=_as4_[21],
     _ato_=_as4_[22],
     _atp_=_as4_[23],
     _atq_=_as4_[24],
     _atr_=_as4_[25],
     _ats_=_as4_[26],
     _att_=_as4_[27],
     _atu_=_as4_[28],
     _atv_=_as4_[29],
     _atw_=_as4_[30],
     _atx_=_as4_[31],
     _aty_=_as4_[32],
     _atz_=_as4_[33],
     _atA_=_as4_[34],
     _atB_=_as4_[35],
     _atC_=_as4_[36],
     _atD_=_as4_[37],
     _atE_=_as4_[38],
     _atF_=_as4_[39],
     _atG_=_as4_[40],
     _atH_=_as4_[41],
     _atI_=_as4_[42],
     _atJ_=_as4_[43],
     _atK_=_as4_[44],
     _atL_=_as4_[45],
     _atM_=_as4_[46],
     _atN_=_as4_[47],
     _atO_=_as4_[48],
     _atP_=_as4_[49],
     _atQ_=_as4_[50],
     _atR_=_as4_[51],
     _atS_=_as4_[52],
     _atT_=_as4_[53],
     _atU_=_as4_[54],
     _atV_=_as4_[55],
     _atW_=_as4_[56],
     _atY_=_atX_[1],
     _atZ_=_atX_[2],
     _at0_=_atX_[3],
     _at1_=_atX_[4],
     _at2_=_atX_[5],
     _at3_=_atX_[6],
     _at4_=_atX_[7],
     _at5_=_atX_[8],
     _at6_=_atX_[9],
     _at7_=_atX_[10],
     _at8_=_atX_[11],
     _at9_=_atX_[12],
     _at__=_atX_[13],
     _at$_=_atX_[14],
     _aua_=_atX_[15],
     _aub_=_atX_[16],
     _auc_=_atX_[17],
     _aud_=_atX_[18],
     _aue_=_atX_[19],
     _auf_=_atX_[20],
     _aug_=_atX_[21],
     _auh_=_atX_[22],
     _aui_=_atX_[23],
     _auj_=_atX_[24],
     _auk_=_atX_[25],
     _aul_=_atX_[26],
     _aum_=include$1[1],
     _aun_=include$1[2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$508);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Stable=
      [0,
       _Zz_,
       _ZA_,
       _ZB_,
       _ZC_,
       _ZD_,
       _ZE_,
       _ZF_,
       _ZG_,
       _ZH_,
       _ZI_,
       _ZJ_,
       _ZK_,
       _ZL_,
       _ZM_,
       _ZN_,
       _ZO_,
       _ZP_,
       _ZQ_,
       _ZR_,
       _ZS_,
       _ZT_,
       _ZU_,
       _ZV_,
       _ZW_,
       _ZX_,
       _ZY_,
       _ZZ_,
       _Z0_,
       _Z1_,
       _Z2_,
       _Z3_,
       _Z4_,
       _Z5_,
       _Z6_,
       _Z7_,
       _Z8_,
       _Z9_,
       _Z__,
       _Z$_,
       __a_,
       __b_,
       __c_,
       __d_,
       __e_,
       __f_,
       __g_,
       __h_,
       __i_,
       __j_,
       __k_,
       __l_,
       __m_,
       __n_,
       __o_,
       __p_,
       __q_,
       __r_,
       __s_,
       __t_,
       __u_,
       __v_,
       __w_,
       __x_,
       __y_,
       __z_,
       __A_,
       __B_,
       __C_,
       __D_,
       __E_,
       __F_,
       __G_,
       __H_,
       __I_,
       __J_,
       __K_,
       __L_,
       __M_,
       __N_,
       __O_,
       __P_,
       __Q_,
       __R_,
       __S_,
       __T_,
       __U_,
       __V_,
       __W_,
       __X_,
       __Y_,
       __Z_,
       __0_,
       __1_,
       __2_,
       __3_,
       __4_,
       __5_,
       __6_,
       __7_,
       __8_,
       __9_,
       ____,
       __$_,
       _$a_,
       _$b_,
       _$c_,
       _$d_,
       _$e_,
       _$f_,
       _$g_,
       _$h_,
       _$i_,
       _$j_,
       _$k_,
       _$l_,
       _$m_,
       _$n_,
       _$o_,
       _$p_,
       _$q_,
       _$r_,
       _$s_,
       _$t_,
       _$u_,
       _$v_,
       _$w_,
       _$x_,
       _$y_,
       _$z_,
       _$A_,
       _$B_,
       _$C_,
       _$D_,
       _$E_,
       _$F_,
       _$G_,
       _$H_,
       _$I_,
       _$J_,
       _$K_,
       _$L_,
       _$M_,
       _$N_,
       _$O_,
       _$P_,
       _$Q_,
       _$R_,
       _$S_,
       _$T_,
       _$U_,
       _$V_,
       _$W_,
       _$X_,
       _$Y_,
       _$Z_,
       _$0_,
       _$1_,
       _$2_,
       _$3_,
       _$4_,
       _$5_,
       _$6_,
       _$7_,
       _$8_,
       _$9_,
       _$__,
       _$$_,
       _aaa_,
       _aab_,
       _aac_,
       _aad_,
       _aae_,
       _aaf_,
       _aag_,
       _aah_,
       _aai_,
       _aaj_,
       _aak_,
       _aal_,
       _aam_,
       _aan_,
       _aao_,
       _aap_,
       _aaq_,
       _aar_,
       _aas_,
       _aat_,
       _aau_,
       _aav_,
       _aaw_,
       _aax_,
       _aay_,
       _aaz_,
       _aaA_,
       _aaB_,
       _aaC_,
       _aaD_,
       _aaE_,
       _aaF_,
       _aaG_,
       _aaH_,
       _aaI_,
       _aaJ_,
       _aaK_,
       _aaL_,
       _aaM_,
       _aaN_,
       _aaO_,
       _aaP_,
       _aaQ_,
       _aaR_,
       _aaS_,
       _aaT_,
       _aaU_,
       _aaV_,
       _aaW_,
       _aaX_,
       _aaY_,
       _aa0_,
       _aa1_,
       _aa2_,
       _aa3_,
       _aa4_,
       _aa5_,
       _aa6_,
       hash_fold_t$39,
       _aa7_,
       _aa8_,
       _aa9_,
       _aa__,
       _aa$_,
       _aba_,
       _abb_,
       _abc_,
       _abd_,
       _abe_,
       _abf_,
       _abg_,
       _abh_,
       _abi_,
       _abj_,
       _abM_,
       _abL_,
       _abK_,
       _abJ_,
       _abI_,
       _abH_,
       _abG_,
       _abF_,
       _abE_,
       _abD_,
       _abC_,
       _abB_,
       _abA_,
       _abz_,
       _aby_,
       _abx_,
       _abw_,
       _abv_,
       _abu_,
       _abt_,
       _abs_,
       _abr_,
       _abq_,
       _abp_,
       _abo_,
       _abn_,
       _abm_,
       _abl_,
       _abk_,
       bin_shape_sexp_option$0,
       bin_size_sexp_option$0,
       bin_write_sexp_option$0,
       bin_writer_sexp_option$0,
       bin_read_sexp_option$2,
       bin_read_sexp_option$1,
       bin_reader_sexp_option$0,
       bin_sexp_option$0,
       _xO_,
       _xP_,
       bin_shape_sexp_list$0,
       bin_size_sexp_list$0,
       bin_write_sexp_list$0,
       bin_writer_sexp_list$0,
       bin_read_sexp_list$2,
       bin_read_sexp_list$1,
       bin_reader_sexp_list$0,
       bin_sexp_list$0,
       compare_sexp_list,
       hash_fold_sexp_list,
       _as5_,
       _as6_,
       _as7_,
       _as8_,
       _as9_,
       _as__,
       _as$_,
       _ata_,
       _atb_,
       _atc_,
       _atd_,
       _ate_,
       _atf_,
       _atg_,
       _ath_,
       _ati_,
       _atj_,
       _atk_,
       _atl_,
       _atm_,
       _atn_,
       _ato_,
       _atp_,
       _atq_,
       _atr_,
       _ats_,
       _att_,
       _atu_,
       _atv_,
       _atw_,
       _atx_,
       _aty_,
       _atz_,
       _atA_,
       _atB_,
       _atC_,
       _atD_,
       _atE_,
       _atF_,
       _atG_,
       _atH_,
       _atI_,
       _atJ_,
       _atK_,
       _atL_,
       _atM_,
       _atN_,
       _atO_,
       _atP_,
       _atQ_,
       _atR_,
       _atS_,
       _atT_,
       _atU_,
       _atV_,
       _atW_,
       _atY_,
       _atZ_,
       _at0_,
       _at1_,
       _at2_,
       _at3_,
       _at4_,
       _at5_,
       _at6_,
       _at7_,
       _at8_,
       _at9_,
       _at__,
       _at$_,
       _aua_,
       _aub_,
       _auc_,
       _aud_,
       _aue_,
       _auf_,
       _aug_,
       _auh_,
       _aui_,
       _auj_,
       _auk_,
       _aul_,
       _aum_,
       _aun_];
    caml_register_global(4524,Core_kernel_Stable,"Core_kernel__Stable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$509);
    caml_call1(Expect_test_collector[4][1],cst_src_queue_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$510,cst$226);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$511);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Queue_intf=[0];
    caml_register_global
     (4525,Core_kernel_Queue_intf,"Core_kernel__Queue_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$512);
    caml_call1(Expect_test_collector[4][1],cst_src_filename_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$513,cst$227);
    var
     Hash_set$16=
      [0,
       Hash_set$1[6],
       Hash_set$1[1],
       Hash_set$1[7],
       Hash_set$1[8],
       Hash_set$1[9],
       Hash_set$1[10],
       Hash_set$1[11],
       Hash_set$1[12],
       Hash_set$1[13],
       Hash_set$1[14]],
     Table$16=
      [0,
       Table$1[79],
       Table$1[1],
       Table$1[80],
       Table$1[81],
       Table$1[82],
       Table$1[83],
       Table$1[84],
       Table$1[85],
       Table$1[86],
       Table$1[87]],
     Set$26=
      [0,
       Set$1[75],
       Set$1[76],
       Set$1[77],
       Set$1[78],
       Set$1[79],
       Set$1[80],
       Set$1[81],
       Set$1[82],
       Set$1[3],
       Set$1[73],
       Set$1[74]],
     Map$26=
      [0,
       Map$1[101],
       Map$1[102],
       Map$1[103],
       Map$1[104],
       Map$1[105],
       Map$1[106],
       Map$1[107],
       Map$1[108],
       Map$1[3],
       Map$1[99],
       Map$1[100],
       Map$1[47]],
     Hash_set$17=
      [0,
       Hash_set$1[1],
       Hash_set$1[2],
       Hash_set$1[3],
       Hash_set$1[4],
       Hash_set$1[5],
       Hash_set$1[6]],
     Table$17=
      [0,
       Table$1[1],
       Table$1[2],
       Table$1[3],
       Table$1[4],
       Table$1[5],
       Table$1[6],
       Table$1[7],
       Table$1[8],
       Table$1[9],
       Table$1[10],
       Table$1[11],
       Table$1[12],
       Table$1[13],
       Table$1[14],
       Table$1[15],
       Table$1[16],
       Table$1[17],
       Table$1[18],
       Table$1[19],
       Table$1[20],
       Table$1[21],
       Table$1[22],
       Table$1[23],
       Table$1[24],
       Table$1[25],
       Table$1[26],
       Table$1[27],
       Table$1[28],
       Table$1[29],
       Table$1[30],
       Table$1[31],
       Table$1[32],
       Table$1[33],
       Table$1[34],
       Table$1[35],
       Table$1[36],
       Table$1[37],
       Table$1[38],
       Table$1[39],
       Table$1[40],
       Table$1[41],
       Table$1[42],
       Table$1[43],
       Table$1[44],
       Table$1[45],
       Table$1[46],
       Table$1[47],
       Table$1[48],
       Table$1[49],
       Table$1[50],
       Table$1[51],
       Table$1[52],
       Table$1[53],
       Table$1[54],
       Table$1[55],
       Table$1[56],
       Table$1[57],
       Table$1[58],
       Table$1[59],
       Table$1[60],
       Table$1[61],
       Table$1[62],
       Table$1[63],
       Table$1[64],
       Table$1[65],
       Table$1[66],
       Table$1[67],
       Table$1[68],
       Table$1[69],
       Table$1[70],
       Table$1[71],
       Table$1[72],
       Table$1[73],
       Table$1[74],
       Table$1[75],
       Table$1[76],
       Table$1[77],
       Table$1[78],
       Table$1[79]],
     _auo_=Set$1[1],
     Set$27=
      [0,
       [0,_auo_[1],_auo_[2],_auo_[11]],
       Set$1[2],
       Set$1[3],
       Set$1[4],
       Set$1[5],
       Set$1[6],
       Set$1[7],
       Set$1[8],
       Set$1[9],
       Set$1[10],
       Set$1[11],
       Set$1[12],
       Set$1[13],
       Set$1[14],
       Set$1[15],
       Set$1[16],
       Set$1[17],
       Set$1[18],
       Set$1[19],
       Set$1[20],
       Set$1[21],
       Set$1[22],
       Set$1[23],
       Set$1[24],
       Set$1[25],
       Set$1[26],
       Set$1[27],
       Set$1[28],
       Set$1[29],
       Set$1[30],
       Set$1[31],
       Set$1[32],
       Set$1[33],
       Set$1[34],
       Set$1[35],
       Set$1[36],
       Set$1[37],
       Set$1[38],
       Set$1[39],
       Set$1[40],
       Set$1[41],
       Set$1[42],
       Set$1[43],
       Set$1[44],
       Set$1[45],
       Set$1[46],
       Set$1[47],
       Set$1[48],
       Set$1[49],
       Set$1[50],
       Set$1[51],
       Set$1[52],
       Set$1[53],
       Set$1[54],
       Set$1[55],
       Set$1[56],
       Set$1[57],
       Set$1[58],
       Set$1[59],
       Set$1[60],
       Set$1[61],
       Set$1[62],
       Set$1[63],
       Set$1[64],
       Set$1[65],
       Set$1[66],
       Set$1[67],
       Set$1[68],
       Set$1[69],
       Set$1[70],
       Set$1[71],
       Set$1[72],
       Set$1[73],
       Set$1[74]],
     _aup_=Map$1[1],
     Map$27=
      [0,
       [0,_aup_[9],_aup_[10],_aup_[11]],
       Map$1[2],
       Map$1[3],
       Map$1[4],
       Map$1[5],
       Map$1[6],
       Map$1[7],
       Map$1[8],
       Map$1[9],
       Map$1[10],
       Map$1[11],
       Map$1[12],
       Map$1[13],
       Map$1[14],
       Map$1[15],
       Map$1[16],
       Map$1[17],
       Map$1[18],
       Map$1[19],
       Map$1[20],
       Map$1[21],
       Map$1[22],
       Map$1[23],
       Map$1[24],
       Map$1[25],
       Map$1[26],
       Map$1[27],
       Map$1[28],
       Map$1[29],
       Map$1[30],
       Map$1[31],
       Map$1[32],
       Map$1[33],
       Map$1[34],
       Map$1[35],
       Map$1[36],
       Map$1[37],
       Map$1[38],
       Map$1[39],
       Map$1[40],
       Map$1[41],
       Map$1[42],
       Map$1[43],
       Map$1[44],
       Map$1[45],
       Map$1[46],
       Map$1[47],
       Map$1[48],
       Map$1[49],
       Map$1[50],
       Map$1[51],
       Map$1[52],
       Map$1[53],
       Map$1[54],
       Map$1[55],
       Map$1[56],
       Map$1[57],
       Map$1[58],
       Map$1[59],
       Map$1[60],
       Map$1[61],
       Map$1[62],
       Map$1[63],
       Map$1[64],
       Map$1[65],
       Map$1[66],
       Map$1[67],
       Map$1[68],
       Map$1[69],
       Map$1[70],
       Map$1[71],
       Map$1[72],
       Map$1[73],
       Map$1[74],
       Map$1[75],
       Map$1[76],
       Map$1[77],
       Map$1[78],
       Map$1[79],
       Map$1[80],
       Map$1[81],
       Map$1[82],
       Map$1[83],
       Map$1[84],
       Map$1[85],
       Map$1[86],
       Map$1[87],
       Map$1[88],
       Map$1[89],
       Map$1[90],
       Map$1[91],
       Map$1[92],
       Map$1[93],
       Map$1[94],
       Map$1[95],
       Map$1[96],
       Map$1[97],
       Map$1[98],
       Map$1[99],
       Map$1[100]],
     _auv_=Stdlib_filename[5],
     _auq_=Stdlib_filename[7],
     _aur_=Stdlib_filename[12],
     _aus_=Stdlib_filename[8],
     _aut_=Stdlib_filename[1],
     _auu_=Stdlib_filename[6],
     _auw_=Stdlib_filename[2],
     _aux_=Stdlib_filename[3],
     _auy_=Stdlib_filename[20],
     temp_dir_name=caml_call1(Stdlib_filename[17],0);
    function is_absolute(p){return 1 - caml_call1(_auv_,p)}
    function concat$0(p1,p2)
     {if(caml_call1(_Cd_,p1))caml_call3(_Pg_,_auz_,p2,0);
      var s$0=p2;
      for(;;)
       {var match$0=caml_call2(_C0_,s$0,47);
        if(match$0)
         {var
           _aJh_=match$0[1],
           _aJi_=_aJh_[1],
           switch$0=
            caml_string_notequal(_aJi_,cst$234)
             ?caml_string_notequal(_aJi_,cst$235)?1:0
             :0;
          if(! switch$0){var s$1=_aJh_[2],s$0=s$1;continue}}
        var s=p1,_aJj_=caml_call2(_Gu_,cst$236,s$0);
        for(;;)
         {var match=caml_call2(_C1_,s,47);
          if(match)
           {var _aJd_=match[1],_aJe_=_aJd_[1];
            if(caml_string_notequal(_aJe_,cst$228))
             var switch$2=1;
            else
             {var _aJg_=_aJd_[2];
              if(caml_string_notequal(_aJg_,cst$231))
               if(caml_string_notequal(_aJg_,cst$232))
                var switch$2=1,switch$3=0;
               else
                var switch$3=1;
              else
               var switch$3=1;
              if(switch$3)var _aJk_=cst$233,switch$1=1,switch$2=0}
            if(switch$2)
             {var _aJf_=_aJd_[2];
              if(caml_string_notequal(_aJf_,cst$229))
               if(caml_string_notequal(_aJf_,cst$230))
                var switch$1=0,switch$4=0;
               else
                var switch$4=1;
              else
               var switch$4=1;
              if(switch$4){var s=_aJe_;continue}}}
          else
           var switch$1=0;
          if(! switch$1)var _aJk_=s;
          return caml_call2(_Gu_,_aJk_,_aJj_)}}}
    function string_rexists(s,f,n)
     {var n$0=n;
      for(;;)
       {if(caml_call2(symbol$50,n$0,0))return 0;
        if(caml_call1(f,caml_string_get(s,n$0 - 1 | 0)))return [0,n$0];
        var n$1=n$0 - 1 | 0,n$0=n$1;
        continue}}
    function skip_end_slashes(s,from)
     {var match=string_rexists(s,caml_call1(_FT_,47),from);
      if(match){var v=match[1];return [0,283683258,v]}
      return 307549549}
    function split$7(s)
     {if(caml_string_notequal(s,cst$237))
       {var match=skip_end_slashes(s,caml_ml_string_length(s));
        if(typeof match === "number")return _auA_;
        var
         basename_end=match[2],
         match$0=string_rexists(s,caml_call1(_FW_,47),basename_end);
        if(match$0)
         {var
           basename_start=match$0[1],
           basename=
            caml_call3
             (_Ca_,s,basename_start,basename_end - basename_start | 0),
           match$1=skip_end_slashes(s,basename_start);
          if(typeof match$1 === "number")
           var dirname=cst$238;
          else
           var
            dirname_end=match$1[2],
            dirname=caml_call3(_Ca_,s,0,dirname_end);
          return [0,dirname,basename]}
        return [0,cst$239,caml_call3(_Ca_,s,0,basename_end)]}
      return _auB_}
    function basename(path){return split$7(path)[2]}
    function dirname(path){return split$7(path)[1]}
    var max_pathname_component_size=255;
    function is_posix_pathname_component(s)
     {var _aI9_=caml_call2(symbol$14,s,cst$240);
      if(_aI9_)
       {var _aI__=caml_call2(symbol$14,s,cst$241);
        if(_aI__)
         {var _aI$_=caml_call2(symbol$52,0,caml_ml_string_length(s));
          if(_aI$_)
           {var
             _aJa_=
              caml_call2
               (symbol$49,
                caml_ml_string_length(s),
                max_pathname_component_size);
            if(_aJa_)
             var
              _aJb_=1 - caml_call4(_Cz_,0,0,s,47),
              _aJc_=_aJb_?1 - caml_call4(_Cz_,0,0,s,0):_aJb_;
            else
             var _aJc_=_aJa_}
          else
           var _aJc_=_aI$_}
        else
         var _aJc_=_aI__}
      else
       var _aJc_=_aI9_;
      return _aJc_}
    function split_extension(fn)
     {var match=caml_call2(_C1_,fn,47);
      if(match)
       var
        match$0=match[1],
        fn$0=match$0[2],
        path=match$0[1],
        dir=[0,path],
        fn$1=fn$0;
      else
       var dir=0,fn$1=fn;
      var match$1=caml_call2(_C1_,fn$1,46);
      if(match$1)
       var
        match$2=match$1[1],
        ext=match$2[2],
        base_fn=match$2[1],
        fn$2=base_fn,
        ext$0=[0,ext];
      else
       var fn$2=fn$1,ext$0=0;
      if(dir)
       var
        dir$0=dir[1],
        fn$3=caml_call2(_Gu_,dir$0,caml_call2(_Gu_,cst$242,fn$2));
      else
       var fn$3=fn$2;
      return [0,fn$3,ext$0]}
    function parts$0(filename)
     {var acc=0,filename$0=filename;
      for(;;)
       {var match=split$7(filename$0),_aI8_=match[1];
        if(caml_string_notequal(_aI8_,cst$243))
         {if(! caml_string_notequal(_aI8_,cst$244))
           if(! caml_string_notequal(match[2],cst$245))return [0,_aI8_,acc]}
        else
         if(! caml_string_notequal(match[2],cst$246))return [0,_aI8_,acc];
        var dir=match[2],acc$0=[0,dir,acc],acc=acc$0,filename$0=_aI8_;
        continue}}
    function of_parts$0(param)
     {if(param)
       {var rest=param[2],root=param[1];
        return caml_call3(_pi_,rest,root,Stdlib_filename[4])}
      return caml_call1(_Gg_,cst_Filename_of_parts_empty_parts_list)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$514);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Filename=
      [0,
       bin_size_t$42,
       bin_write_t$42,
       bin_read_t$86,
       bin_read_t$87,
       bin_shape_t$46,
       bin_writer_t$39,
       bin_reader_t$39,
       bin_t$39,
       t_of_sexp$32,
       sexp_of_t$40,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       symbol$13,
       symbol$14,
       equal$17,
       min$0,
       max$0,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator$3,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       Map$27,
       Set$27,
       compare$28,
       hash_fold_t$13,
       hash$11,
       hashable$0,
       Table$17,
       Hash_set$17,
       Hash_queue$0,
       root$0,
       is_posix_pathname_component,
       temp_dir_name,
       _aut_,
       _auw_,
       _aux_,
       concat$0,
       _auv_,
       is_absolute,
       _auu_,
       _auq_,
       _aus_,
       _aur_,
       split_extension,
       basename,
       dirname,
       split$7,
       parts$0,
       of_parts$0,
       _auy_,
       [0,
        [0,
         bin_size_t$42,
         bin_write_t$42,
         bin_read_t$86,
         bin_read_t$87,
         bin_shape_t$46,
         bin_writer_t$39,
         bin_reader_t$39,
         bin_t$39,
         compare$28,
         t_of_sexp$32,
         sexp_of_t$40,
         comparator$3,
         Map$26,
         Set$26,
         Table$16,
         Hash_set$16]]];
    caml_register_global(4527,Core_kernel_Filename,"Core_kernel__Filename");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$515);
    caml_call1(Expect_test_collector[4][1],cst_src_explicit_dependencies_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$516,cst$247);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$517);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Explicit_dependencies=[0];
    caml_register_global
     (4528,
      Core_kernel_Explicit_dependencies,
      "Core_kernel__Explicit_dependencies");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$518);
    caml_call1(Expect_test_collector[4][1],cst_src_command_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$519,cst$248);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$520);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Command_intf=[0];
    caml_register_global
     (4529,Core_kernel_Command_intf,"Core_kernel__Command_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$521);
    caml_call1(Expect_test_collector[4][1],cst_src_command_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$522,cst$249);
    var _auC_=Ppx_inline_test_lib_Runtime[9];
    if(typeof _auC_ === "number")
     var switch$0=0;
    else
     if(545942154 <= _auC_[2])var _auD_=1,switch$0=1;else var switch$0=0;
    if(! switch$0)var _auD_=0;
    var
     Exit_called=
      [248,cst_Core_kernel_Command_Exit_called,caml_fresh_oo_id(0)];
    function _auE_(param)
     {if(param[1] === Exit_called)
       {var
         v_status=param[2],
         arg=caml_call1(sexp_of_t$44,v_status),
         bnds=[0,[1,[0,_auF_,[0,arg,0]]],0];
        return [1,[0,_auG_,bnds]]}
      throw [0,Assert_failure,_auH_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Exit_called,_auE_);
    function exit(status)
     {if(_auD_)throw [0,Exit_called,status];return caml_call1(_Hw_,status)}
    var to_string$31=Base_Exn[9];
    function handle_uncaught_and_exit(f)
     {if(_auD_)
       try
        {var _aI7_=caml_call1(f,0);return _aI7_}
       catch(exn)
        {exn = caml_wrap_exception(exn);
         return caml_call2(_Pj_,0,caml_call1(_QN_,exn))}
      return caml_call1(Base_Exn[14],f)}
    function unparagraphs(xs){return caml_call2(_Cx_,_auJ_,xs)}
    var
     Failed_to_parse_command_line=
      [248,
       cst_Core_kernel_Command_Failed_to_parse_command_line,
       caml_fresh_oo_id(0)];
    function die(fmt)
     {return caml_call2
              (_fG_,
               function(msg,param){throw [0,Failed_to_parse_command_line,msg]},
               fmt)}
    function help_screen_compare(a,b)
     {return caml_string_notequal(b,cst_help)
              ?caml_string_notequal(a,cst_help$0)
                ?caml_string_notequal(b,cst_version)
                  ?caml_string_notequal(a,cst_version$0)
                    ?caml_string_notequal(b,cst_build_info)
                      ?caml_string_notequal(a,cst_build_info$0)
                        ?caml_string_notequal(b,cst_help$1)
                          ?caml_string_notequal(a,cst_help$2)
                            ?caml_string_notequal(b,cst_version$1)
                              ?caml_string_notequal(a,cst_version$2)?0:1
                              :-1
                            :1
                          :-1
                        :1
                      :-1
                    :1
                  :-1
                :1
              :-1}
    function t_of_sexp$99(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$36,sexp);
      var
       field_sexps=sexp[1],
       name_field=[0,0],
       doc_field=[0,0],
       aliases_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aIZ_=param[1];
          if(1 === _aIZ_[0])
           {var _aI0_=_aIZ_[1];
            if(_aI0_)
             {var _aI1_=_aI0_[1];
              if(0 === _aI1_[0])
               {var _aI2_=_aI0_[2],_aI3_=_aI1_[1];
                if(! _aI2_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aI3_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _aI2_[2])
                 {var tail=param[2],field_sexp=_aI2_[1];
                  if(caml_string_notequal(_aI3_,cst_aliases))
                   if(caml_string_notequal(_aI3_,cst_doc))
                    if(caml_string_notequal(_aI3_,cst_name$2))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aI3_,extra[1]]}
                    else
                     if(name_field[1])
                      duplicates[1] = [0,_aI3_,duplicates[1]];
                     else
                      {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                       name_field[1] = [0,fvalue]}
                   else
                    if(doc_field[1])
                     duplicates[1] = [0,_aI3_,duplicates[1]];
                    else
                     {var fvalue$0=caml_call1(t_of_sexp$32,field_sexp);
                      doc_field[1] = [0,fvalue$0]}
                  else
                   if(aliases_field[1])
                    duplicates[1] = [0,_aI3_,duplicates[1]];
                   else
                    {var fvalue$1=caml_call2(_pe_,t_of_sexp$32,field_sexp);
                     aliases_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$36,_aIZ_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$36,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$36,extra[1],sexp);
        var _aI4_=name_field[1],_aI5_=doc_field[1],_aI6_=aliases_field[1];
        if(_aI4_)
         if(_aI5_)
          if(_aI6_)
           {var aliases_value=_aI6_[1],doc_value=_aI5_[1],name_value=_aI4_[1];
            return [0,name_value,doc_value,aliases_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$36,
                 sexp,
                 [0,
                  [0,0 === name_field[1]?1:0,cst_name$3],
                  [0,
                   [0,0 === doc_field[1]?1:0,cst_doc$0],
                   [0,[0,0 === aliases_field[1]?1:0,cst_aliases$0],0]]])}}
    function sexp_of_t$118(param)
     {var
       v_aliases=param[3],
       v_doc=param[2],
       v_name=param[1],
       arg=caml_call2(_pf_,sexp_of_t$40,v_aliases),
       bnds=[0,[1,[0,_auK_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$40,v_doc),
       bnds$0=[0,[1,[0,_auL_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$40,v_name),
       bnds$1=[0,[1,[0,_auM_,[0,arg$1,0]]],bnds$0];
      return [1,bnds$1]}
    function word_wrap(text,width)
     {var chunks=caml_call2(_C2_,text,10);
      return caml_call2
              (_ql_,
               chunks,
               function(text)
                {function _aIW_(word){return 1 - caml_call1(_Cd_,word)}
                 var
                  words=caml_call2(_pX_,caml_call2(_C2_,text,32),_aIW_),
                  match=
                   caml_call3
                    (_pi_,
                     words,
                     0,
                     function(acc,word)
                      {if(acc)
                        var
                         match=acc[1],
                         line=match[2],
                         lines=match[1],
                         line_and_word=
                          caml_call2(_Gu_,line,caml_call2(_Gu_,cst$250,word)),
                         _aIX_=
                          caml_call2(_Nq_,caml_ml_string_length(line_and_word),width)
                           ?[0,lines,line_and_word]
                           :[0,[0,line,lines],word],
                         _aIY_=_aIX_;
                       else
                        var _aIY_=[0,0,word];
                       return [0,_aIY_]});
                 if(match)
                  {var match$0=match[1],line=match$0[2],lines=match$0[1];
                   return caml_call1(parts,[0,line,lines])}
                 return 0})}
    function to_string$32(ts)
     {var
       n=
        caml_call3
         (_pi_,
          ts,
          0,
          function(acc,t)
           {return caml_call2(max$2,acc,caml_ml_string_length(t[1]))}),
       lhs_width=n + 4 | 0,
       lhs_pad=caml_call2(_Ct_,lhs_width,32);
      return caml_call2
              (_Cx_,
               0,
               caml_call2
                (_qg_,
                 ts,
                 function(t)
                  {function rows(k,v)
                    {var vs=word_wrap(v,80 - lhs_width | 0);
                     if(vs)
                      {var
                        vs$0=vs[2],
                        v$0=vs[1],
                        slack=n - caml_ml_string_length(k) | 0,
                        first_line=
                         [0,
                          cst$252,
                          [0,
                           caml_call2(_Gu_,k,caml_call2(_Ct_,slack,32)),
                           [0,cst$251,[0,v$0,_auN_]]]],
                        rest_lines=
                         caml_call2
                          (_qg_,vs$0,function(v){return [0,lhs_pad,[0,v,_auO_]]});
                       return caml_call1(_rb_,[0,first_line,rest_lines])}
                     return [0,cst$253,[0,k,_auP_]]}
                   var _aIT_=t[3];
                   if(_aIT_)
                    {if(_aIT_[2])
                      var
                       _aIU_=
                        [0,
                         rows
                          (cst$254,
                           caml_call2(_fE_,_auR_,caml_call2(_Cx_,_auQ_,_aIT_))),
                         0];
                     else
                      var
                       x=_aIT_[1],
                       _aIU_=[0,rows(cst$255,caml_call2(_fE_,_auS_,x)),0];
                     var _aIV_=_aIU_}
                   else
                    var _aIV_=0;
                   return caml_call2
                           (_Cx_,0,caml_call1(_rb_,[0,rows(t[1],t[2]),_aIV_]))}))}
    function key_create(name){return caml_call2(Id$0[3],name,_Oa_)}
    var multi_add=Multi[4],set_with_default=With_default[2];
    function run_and_exit(t,env,part)
     {caml_call2
       (_xV_,
        t,
        function(completions)
         {return caml_call2(_ph_,caml_call2(completions,env,part),_GJ_)});
      return exit(0)}
    function create$41(complete,key,of_string)
     {function parse(x)
       {return caml_call1
                (_ik_,function(param){return caml_call1(of_string,x)})}
      return [0,parse,complete,key]}
    function map$29(key,t,f)
     {function parse(str){return caml_call2(_id_,caml_call1(t[1],str),f)}
      var complete=t[2];
      return [0,parse,complete,key]}
    var
     string$2=create$41(0,0,function(_aIS_){return _aIS_}),
     int$3=create$41(0,0,of_string$2),
     char$4=create$41(0,0,_F0_),
     float$2=create$41(0,0,_IB_),
     date=create$41(0,0,of_string$17),
     percent=create$41(0,0,of_string$18),
     host_and_port=create$41(0,0,of_string$26),
     sexp=create$41(0,0,of_string);
    function sexp_conv(of_sexp)
     {return create$41
              (0,
               0,
               function(s){return caml_call1(of_sexp,caml_call1(of_string,s))})}
    function of_map(key,map)
     {function _aIQ_(arg)
       {var match=caml_call2(find$3,map,arg);
        if(match){var v=match[1];return v}
        return caml_call3
                (_Pg_,_auU_,caml_call2(_Cx_,_auT_,caml_call1(keys$2,map)),0)}
      return create$41
              ([0,
                function(param,prefix)
                 {function _aIR_(param)
                   {var name=param[1];
                    return caml_call2(_CX_,name,prefix)?[0,name]:0}
                  return caml_call2(_q1_,caml_call2(to_alist$1,0,map),_aIR_)}],
               key,
               _aIQ_)}
    function of_alist_exn$5(key,alist)
     {var match=caml_call1(Map$1[6],alist);
      if(17724 <= match[1]){var map=match[2];return of_map(key,map)}
      var key$0=match[2];
      return caml_call3(_Pg_,_auV_,key$0,0)}
    var bool$3=of_alist_exn$5(0,_auW_);
    function comma_separated(opt,key,_aII_,_aIH_,t)
     {if(opt)var sth=opt[1],allow_empty=sth;else var allow_empty=0;
      if(_aII_)
       var sth$0=_aII_[1],strip_whitespace=sth$0;
      else
       var strip_whitespace=0;
      if(_aIH_)
       var sth$1=_aIH_[1],unique_values=sth$1;
      else
       var unique_values=0;
      var
       strip=
        strip_whitespace
         ?function(str){return caml_call2(_C9_,0,str)}
         :function(_aIP_){return _aIP_};
      function _aIJ_(complete_elt,env,suffix)
       {var match=caml_call1(parts,caml_call2(_C2_,suffix,44));
        if(match)
         var
          tl=match[2],
          hd=match[1],
          prefixes=caml_call1(parts,tl),
          suffix$0=hd;
        else
         var prefixes=0,suffix$0=suffix;
        if(unique_values)
         var
          _aIM_=caml_call2(_qg_,prefixes,strip),
          seen_already=caml_call1(Set$1[57],_aIM_),
          is_allowed=
           function(choice)
            {return 1 - caml_call2(mem$8,seen_already,strip(choice))};
        else
         var is_allowed=function(param){return 1};
        function _aIN_(choice)
         {var _aIO_=1 - caml_call2(_Cc_,choice,44);
          return _aIO_?is_allowed(choice):_aIO_}
        var
         choices=
          caml_call2(_pX_,caml_call2(complete_elt,env,suffix$0),_aIN_);
        if(choices)
         if(choices[2])
          var switch$0=0;
         else
          var
           choice=choices[1],
           choices$0=[0,choice,[0,caml_call2(_Gu_,choice,cst$256),0]],
           switch$0=1;
        else
         var switch$0=0;
        if(! switch$0)var choices$0=choices;
        return caml_call2
                (_qg_,
                 choices$0,
                 function(choice)
                  {return caml_call2
                           (_Cx_,_auX_,caml_call2(_Oh_,prefixes,[0,choice,0]))})}
      var complete=caml_call2(_yd_,t[2],_aIJ_);
      function of_string(string)
       {var string$0=strip(string);
        if(caml_call1(_Cd_,string$0))
         return allow_empty
                 ?0
                 :caml_call1
                   (_Gg_,
                    cst_Command_Spec_Arg_type_comma_separated_empty_list_not_allowed);
        function _aIK_(str)
         {var _aIL_=strip(str);return caml_call1(_h9_,caml_call1(t[1],_aIL_))}
        return caml_call2(_qg_,caml_call2(_C2_,string$0,44),_aIK_)}
      return create$41(complete,key,of_string)}
    var
     include$158=
      [0,
       string$2,
       int$3,
       char$4,
       float$2,
       bool$3,
       date,
       percent,
       host_and_port,
       sexp,
       sexp_conv];
    function loop(acc,enumerate_007,enumerate_008)
     {var
       acc$0=acc,
       enumerate_007$0=enumerate_007,
       enumerate_008$0=enumerate_008;
      for(;;)
       {if(enumerate_008$0)
         {if(enumerate_007$0)
           {var
             enumerate_006=enumerate_008$0[1],
             enumerate_007$1=enumerate_007$0[2],
             enumerate_005=enumerate_007$0[1],
             acc$1=[0,[0,enumerate_005,enumerate_006],acc$0],
             acc$0=acc$1,
             enumerate_007$0=enumerate_007$1;
            continue}
          var
           enumerate_008$1=enumerate_008$0[2],
           enumerate_007$0=enumerate_003,
           enumerate_008$0=enumerate_008$1;
          continue}
        return caml_call1(Stdlib_list[9],acc$0)}}
    var all$5=loop(0,enumerate_003,enumerate_004);
    function to_help_string(t,name)
     {var
       at_most_once=t[2],
       at_least_once=t[1],
       description=at_least_once?name:caml_call2(_fE_,_au1_,name);
      return at_most_once?description:caml_call2(_fE_,_au0_,description)}
    var
     Expect_test_collector$6=
      caml_call1
       (Expect_test_collector[2],
        [0,
         Expect_test_config[2],
         Expect_test_config[3],
         Expect_test_config[4],
         Expect_test_config[5],
         Expect_test_config[6],
         Expect_test_config[7]]);
    function _au2_(param)
     {caml_call2
       (_ph_,
        all$5,
        function(t)
         {var
           _aIF_=to_help_string(t,cst_name$4),
           _aIG_=[0,caml_call1(Sexplib0_Sexp_conv[7],_aIF_),0],
           v_at_most_once=t[2],
           v_at_least_once=t[1],
           arg=caml_call1(_BP_,v_at_most_once),
           bnds=[0,[1,[0,_auY_,[0,arg,0]]],0],
           arg$0=caml_call1(_BP_,v_at_least_once),
           bnds$0=[0,[1,[0,_auZ_,[0,arg$0,0]]],bnds];
          return caml_call2(_Pj_,0,[1,[0,[1,bnds$0],_aIG_]])});
      var
       _aIE_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_ml$0),
         303,
         9141,
         9149,
         9155];
      return caml_call1(Expect_test_collector$6[1],_aIE_)}
    var
     _au3_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_ml$1),
       304,
       9156,
       9164,
       9421],
     _au6_=
      [0,
       [0,
        _au5_,
        _au4_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_ml$2),
         303,
         9141,
         9149,
         9155],
        _au3_],
       0],
     _au8_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_ml$4),
       300,
       8994,
       8998,
       9422],
     _au9_=
      caml_call1
       (Expect_test_common_File[4][3],cst_bbd2aaed4d5263b36871ab962c3db5be);
    caml_call9
     (Expect_test_collector$6[3],
      _au9_,
      _au8_,
      cst_src_command_ml$3,
      _au7_,
      0,
      _au6_,
      0,
      Inline_test_config,
      _au2_);
    function parse$1(action,doc)
     {if(0 === action[0])
       var arg_doc=0;
      else
       {var match$0=caml_call2(_C0_,doc,32);
        if(match$0)
         {var _aIB_=match$0[1],_aIC_=_aIB_[1];
          if(caml_string_notequal(_aIC_,cst$257))
           var doc$1=_aIB_[2],_aID_=[0,[0,_aIC_,doc$1]],switch$0=1;
          else
           var switch$0=0}
        else
         var switch$0=0;
        if(! switch$0)var _aID_=1 === action[0]?[0,[0,cst$258,doc]]:0;
        var arg_doc=_aID_}
      if(arg_doc)
       {var match=arg_doc[1],doc$0=match[2],arg_doc$0=match[1];
        return [0,[0,arg_doc$0],caml_call2(_C9_,0,doc$0)]}
      return [0,0,caml_call2(_C9_,0,doc)]}
    function concat$1(name,arg_doc)
     {if(arg_doc)
       {var arg_doc$0=arg_doc[1];
        return caml_call2(_Gu_,name,caml_call2(_Gu_,cst$259,arg_doc$0))}
      return name}
    function wrap_if_optional(t,x)
     {var at_least_once=t[5][1];return to_help_string([0,at_least_once,1],x)}
    function help(t)
     {var doc=t[4],action=t[3],aliases=t[2],name=t[1];
      if(caml_call2(_CX_,doc,cst$260))
       {var
         _aIy_=
          caml_call2
           (_qg_,
            aliases,
            function(x){return [0,x,caml_call2(_fE_,_au__,name)]});
        return [0,[0,name,caml_call2(_C7_,0,doc)],_aIy_]}
      var
       match=parse$1(action,doc),
       doc$0=match[2],
       arg_doc=match[1],
       _aIz_=
        caml_call2
         (_qg_,
          aliases,
          function(x)
           {var _aIA_=caml_call2(_fE_,_au$_,name);
            return [0,wrap_if_optional(t,concat$1(x,arg_doc)),_aIA_]});
      return [0,[0,wrap_if_optional(t,concat$1(name,arg_doc)),doc$0],_aIz_]}
    function align(t)
     {var
       doc=t[4],
       action=t[3],
       aliases=t[2],
       name$0=t[1],
       match=parse$1(action,doc),
       doc$0=match[2],
       arg_doc=match[1],
       x=concat$1(name$0,arg_doc),
       name=to_help_string(t[5],x);
      return [0,name,doc$0,aliases]}
    function create$42(flags)
     {var
       _aIw_=caml_call2(_qg_,flags,function(flag){return [0,flag[1],flag]}),
       match=caml_call1(Map$1[6],_aIw_);
      if(17724 <= match[1])
       {var map=match[2],_aIx_=function(x){return caml_call3(_Pg_,_ava_,x,0)};
        caml_call2
         (_xV_,
          caml_call2
           (_qR_,
            compare$28,
            caml_call2(_ql_,flags,function(flag){return [0,flag[1],flag[2]]})),
          _aIx_);
        return map}
      var flag=match[2];
      return caml_call3(_Pg_,_avb_,flag,0)}
    function arg_flag(name,arg_type,read,write,num_occurrences)
     {function update(env,arg)
       {var match=caml_call1(arg_type[1],arg);
        if(0 === match[0])
         {var
           arg$0=match[1],
           env$0=caml_call2(write,env,arg$0),
           _aIu_=arg_type[3];
          if(_aIu_)
           {var key=_aIu_[1];return caml_call3(multi_add,env$0,key,arg$0)}
          return env$0}
        var exn=match[1],_aIv_=caml_call1(to_string$31,exn);
        return caml_call4(die(_avc_),name,arg,_aIv_,0)}
      return [0,[1,update,arg_type[2]],read,num_occurrences]}
    function map_flag(t,f,input)
     {var
       match=caml_call1(t,input),
       num_occurrences=match[3],
       read=match[2],
       action=match[1];
      return [0,
              action,
              function(env){return caml_call1(f,caml_call1(read,env))},
              num_occurrences]}
    function write_option(name,key,env,arg)
     {return caml_call3
              (update$4,
               env,
               key,
               function(param){return param?caml_call2(die(_avd_),name,0):arg})}
    function required_value(default$0,arg_type,name,num_occurrences)
     {function _aIt_(param){return _ave_}
      var key=caml_call2(Id$0[3],name,_aIt_);
      function read(env)
       {var match=caml_call2(find$10,env,key);
        if(match){var v=match[1];return v}
        if(default$0){var v$0=default$0[1];return v$0}
        return caml_call2(die(_avf_),name,0)}
      function write(env,arg){return write_option(name,key,env,arg)}
      return arg_flag(name,arg_type,read,write,num_occurrences)}
    function required$0(arg_type,name)
     {return required_value(0,arg_type,name,exactly_once)}
    function optional_with_default(default$0,arg_type,name)
     {return required_value([0,default$0],arg_type,name,at_most_once)}
    function optional$0(arg_type,name)
     {function _aIs_(param){return _avg_}
      var key=caml_call2(Id$0[3],name,_aIs_);
      function read(env){return caml_call2(find$10,env,key)}
      function write(env,arg){return write_option(name,key,env,arg)}
      return arg_flag(name,arg_type,read,write,at_most_once)}
    function no_arg_general(key_value,deprecated_hook,name)
     {var key=caml_call2(Id$0[3],name,sexp_of_t$53);
      function read(env){return caml_call2(mem$10,env,key)}
      function action(env)
       {var
         env$0=
          caml_call3
           (_xW_,
            key_value,
            env,
            function(env,param)
             {var value=param[2],key=param[1];
              return caml_call3(set_with_default,env,key,value)});
        return caml_call2(mem$10,env$0,key)
                ?caml_call2(die(_avh_),name,0)
                :caml_call3(set$8,env$0,key,0)}
      if(deprecated_hook)
       var
        f=deprecated_hook[1],
        action$0=
         function(env){var env$0=action(env);caml_call1(f,0);return env$0};
      else
       var action$0=action;
      return [0,[0,action$0],read,at_most_once]}
    function no_arg(name){return no_arg_general(0,0,name)}
    function no_arg_register(key,value,name)
     {return no_arg_general([0,[0,key,value]],0,name)}
    function no_arg_some(value)
     {function _aIq_(param){return 0 === param?0:[0,value]}
      return function(_aIr_){return map_flag(no_arg,_aIq_,_aIr_)}}
    function listed(arg_type,name)
     {var
       _aIo_=caml_call1(_pf_,function(param){return _avi_}),
       key=caml_call3(With_default[1][1],0,name,_aIo_);
      function read(env)
       {return caml_call1(parts,caml_call2(With_default[3],env,key))}
      function write(env,arg)
       {function _aIp_(list){return [0,arg,list]}
        return caml_call3(With_default[4],env,key,_aIp_)}
      return arg_flag(name,arg_type,read,write,any)}
    function one_or_more(arg_type,name)
     {function _aIk_(param){return _avj_}
      function _aIl_(_aIn_){return sexp_of_t$108(_aIk_,_aIn_)}
      var key=caml_call3(With_default[1][1],acc$1,name,_aIl_);
      function read(env)
       {var match=caml_call1(to_list$14,caml_call2(With_default[3],env,key));
        if(match){var rest=match[2],first=match[1];return [0,first,rest]}
        return caml_call2(die(_avk_),name,0)}
      function write(env,arg)
       {function _aIm_(q){return enqueue$0(q,arg)}
        return caml_call3(With_default[4],env,key,_aIm_)}
      return arg_flag(name,arg_type,read,write,at_least_once)}
    function escape_general(deprecated_hook,name)
     {var
       _aIj_=caml_call1(_pf_,sexp_of_t$40),
       key=caml_call2(Id$0[3],name,_aIj_);
      function action(env,cmd_line){return caml_call3(set$8,env,key,cmd_line)}
      function read(env){return caml_call2(find$10,env,key)}
      if(deprecated_hook)
       var
        f=deprecated_hook[1],
        action$0=function(env,x){caml_call1(f,x);return action(env,x)};
      else
       var action$0=action;
      return [0,[2,action$0],read,at_most_once]}
    function no_arg_abort(exit,name)
     {function _aIi_(param){return 0}
      return [0,
              [0,function(param){return never_returns(caml_call1(exit,0))}],
              _aIi_,
              at_most_once]}
    function escape(name){return escape_general(0,name)}
    function no_arg$0(hook,name){return no_arg_general(0,[0,hook],name)}
    function escape$0(hook)
     {var _aIg_=[0,hook];
      return function(_aIh_){return escape_general(_aIg_,_aIh_)}}
    var empty$12=0;
    function create$43(path_to_exe){return [0,path_to_exe,0]}
    function append$4(t,subcommand){return [0,subcommand,t]}
    function parts_exe_basename(t)
     {var match=caml_call1(parts,t);
      if(match){var tl=match[2],hd=match[1];return [0,basename(hd),tl]}
      return 0}
    function to_string$33(t)
     {var xs=parts_exe_basename(t);return caml_call2(_Cx_,_auI_,xs)}
    function replace_first(t,from,to)
     {var parts$1=caml_call1(parts,t),parts$0=parts$1,acc=0;
      for(;;)
       {if(parts$0)
         {var tl=parts$0[2],hd=parts$0[1];
          if(caml_call2(symbol$11,hd,from))
           return caml_call2(_pI_,tl,[0,to,acc]);
          var acc$0=[0,hd,acc],parts$0=tl,acc=acc$0;
          continue}
        return acc}}
    function to_string_dots(t)
     {if(t)
       var
        init=t[2],
        last=t[1],
        _aIf_=[0,last,caml_call2(_qg_,init,caml_call1(_iD_,cst$261))];
      else
       var _aIf_=0;
      return to_string$33(_aIf_)}
    var
     _avm_=caml_call1(Bin_prot_Shape[2][1],cst_t$232),
     _avn_=
      [0,
       [0,
        cst_Concat,
        [0,
         bin_shape_list(caml_call1(caml_call1(Bin_prot_Shape[13],_avm_),0)),
         0]],
       [0,[0,cst_Ad_hoc,[0,bin_shape_string,0]],0]],
     _avo_=caml_call1(Bin_prot_Shape[2][1],cst_t$233),
     _avp_=
      [0,
       [0,cst_Maybe,[0,caml_call1(caml_call1(Bin_prot_Shape[13],_avo_),0),0]],
       _avn_],
     _avq_=caml_call1(Bin_prot_Shape[2][1],cst_t$234),
     _avs_=
      [0,
       _avr_,
       [0,
        [0,cst_One,[0,bin_shape_string,0]],
        [0,
         [0,cst_Many,[0,caml_call1(caml_call1(Bin_prot_Shape[13],_avq_),0),0]],
         _avp_]]],
     _avt_=caml_call1(Bin_prot_Shape[9],_avs_),
     _avu_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$235),0,_avt_],0],
     _avv_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_ml_677_8),
     group$134=caml_call2(Bin_prot_Shape[6],_avv_,_avu_),
     _avw_=caml_call1(Bin_prot_Shape[2][1],cst_t$236);
    caml_call1(caml_call2(Bin_prot_Shape[14],group$134,_avw_),0);
    var t_of_sexp$100=function _aIe_(_aId_){return _aIe_.fun(_aId_)};
    caml_update_dummy
     (t_of_sexp$100,
      function(sexp)
       {if(0 === sexp[0])
         {var
           _aH9_=sexp[1],
           _aH__=caml_string_compare(_aH9_,cst_ad_hoc),
           switch$0=
            0 <= _aH__
             ?0 < _aH__
               ?caml_string_notequal(_aH9_,cst_concat)
                 ?caml_string_notequal(_aH9_,cst_many)
                   ?caml_string_notequal(_aH9_,cst_maybe)
                     ?caml_string_notequal(_aH9_,cst_one)
                       ?caml_string_notequal(_aH9_,cst_zero$3)?6:0
                       :1
                     :3
                   :2
                 :4
               :5
             :caml_string_notequal(_aH9_,cst_Ad_hoc$0)
               ?caml_string_notequal(_aH9_,cst_Concat$0)
                 ?caml_string_notequal(_aH9_,cst_Many$0)
                   ?caml_string_notequal(_aH9_,cst_Maybe$0)
                     ?caml_string_notequal(_aH9_,cst_One$0)
                       ?caml_string_notequal(_aH9_,cst_Zero$5)?6:0
                       :1
                     :3
                   :2
                 :4
               :5;
          switch(switch$0)
           {case 0:return 0;
            case 1:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$37,sexp);
            case 2:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$37,sexp);
            case 3:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$37,sexp);
            case 4:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$37,sexp);
            case 5:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$37,sexp)
            }}
        else
         {var _aH$_=sexp[1];
          if(! _aH$_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$37,sexp);
          var _aIa_=_aH$_[1];
          if(0 !== _aIa_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$37,sexp);
          var
           _aIb_=_aIa_[1],
           _aIc_=caml_string_compare(_aIb_,cst_ad_hoc$0),
           switch$1=
            0 <= _aIc_
             ?0 < _aIc_
               ?caml_string_notequal(_aIb_,cst_concat$0)
                 ?caml_string_notequal(_aIb_,cst_many$0)
                   ?caml_string_notequal(_aIb_,cst_maybe$0)
                     ?caml_string_notequal(_aIb_,cst_one$0)
                       ?caml_string_notequal(_aIb_,cst_zero$4)?6:5
                       :0
                     :2
                   :1
                 :3
               :4
             :caml_string_notequal(_aIb_,cst_Ad_hoc$1)
               ?caml_string_notequal(_aIb_,cst_Concat$1)
                 ?caml_string_notequal(_aIb_,cst_Many$1)
                   ?caml_string_notequal(_aIb_,cst_Maybe$1)
                     ?caml_string_notequal(_aIb_,cst_One$1)
                       ?caml_string_notequal(_aIb_,cst_Zero$6)?6:5
                       :0
                     :2
                   :1
                 :3
               :4;
          switch(switch$1)
           {case 0:
             var sexp_args=_aH$_[2];
             if(sexp_args)
              if(! sexp_args[2])
               {var v0=sexp_args[1],v0$0=caml_call1(t_of_sexp$32,v0);
                return [0,v0$0]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$37,_aIb_,sexp);
            case 1:
             var sexp_args$1=_aH$_[2];
             if(sexp_args$1)
              if(! sexp_args$1[2])
               {var v0$3=sexp_args$1[1],v0$4=caml_call1(t_of_sexp$100,v0$3);
                return [1,v0$4]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$37,_aIb_,sexp);
            case 2:
             var sexp_args$0=_aH$_[2];
             if(sexp_args$0)
              if(! sexp_args$0[2])
               {var v0$1=sexp_args$0[1],v0$2=caml_call1(t_of_sexp$100,v0$1);
                return [2,v0$2]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$37,_aIb_,sexp);
            case 3:
             var sexp_args$2=_aH$_[2];
             if(sexp_args$2)
              if(! sexp_args$2[2])
               {var
                 v0$5=sexp_args$2[1],
                 v0$6=caml_call2(_pe_,t_of_sexp$100,v0$5);
                return [3,v0$6]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$37,_aIb_,sexp);
            case 4:
             var sexp_args$3=_aH$_[2];
             if(sexp_args$3)
              if(! sexp_args$3[2])
               {var v0$7=sexp_args$3[1],v0$8=caml_call1(t_of_sexp$32,v0$7);
                return [4,v0$8]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$37,_aIb_,sexp);
            case 5:
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$37,sexp)
            }}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$37,sexp)});
    function sexp_of_t$119(param)
     {if(typeof param === "number")
       return _avx_;
      else
       switch(param[0])
        {case 0:
          var v0=param[1],v0$0=caml_call1(sexp_of_t$40,v0);
          return [1,[0,_avy_,[0,v0$0,0]]];
         case 1:
          var v0$1=param[1],v0$2=sexp_of_t$119(v0$1);
          return [1,[0,_avz_,[0,v0$2,0]]];
         case 2:
          var v0$3=param[1],v0$4=sexp_of_t$119(v0$3);
          return [1,[0,_avA_,[0,v0$4,0]]];
         case 3:
          var v0$5=param[1],v0$6=caml_call2(_pf_,sexp_of_t$119,v0$5);
          return [1,[0,_avB_,[0,v0$6,0]]];
         default:
          var v0$7=param[1],v0$8=caml_call1(sexp_of_t$40,v0$7);
          return [1,[0,_avC_,[0,v0$8,0]]]}}
    function invariant$15(t)
     {function _aH5_(param)
       {if(typeof t === "number")
         return 0;
        else
         switch(t[0])
          {case 0:return 0;
           case 1:
            var _aH6_=t[1];
            return typeof _aH6_ === "number"
                    ?caml_call1(_Gg_,cst_Many_Zero_should_be_just_Zero)
                    :invariant$15(_aH6_);
           case 2:
            var _aH7_=t[1];
            return typeof _aH7_ === "number"
                    ?caml_call1(_Gg_,cst_Maybe_Zero_should_be_just_Zero)
                    :invariant$15(_aH7_);
           case 3:
            var _aH8_=t[1];
            if(_aH8_)if(_aH8_[2])return caml_call2(_ph_,_aH8_,invariant$15);
            return caml_call1(_Gg_,cst_Flatten_zero_and_one_element_Concat);
           default:return 0}}
      return caml_call4(Base_Invariant[1],_avD_,t,sexp_of_t$119,_aH5_)}
    function usage(param)
     {if(typeof param === "number")
       return cst$262;
      else
       switch(param[0])
        {case 0:var usage$0=param[1];return usage$0;
         case 1:
          var _aH3_=param[1];
          return typeof _aH3_ === "number"
                  ?caml_call1(_Gg_,cst_bug_in_command_ml)
                  :0 === _aH3_[0]
                    ?caml_call2(_fE_,_avE_,usage(_aH3_))
                    :caml_call2(_fE_,_avF_,usage(_aH3_));
         case 2:
          var _aH4_=param[1];
          return typeof _aH4_ === "number"
                  ?caml_call1(_Gg_,cst_bug_in_command_ml$0)
                  :caml_call2(_fE_,_avG_,usage(_aH4_));
         case 3:
          var ts=param[1];
          return caml_call2(_Cx_,_avH_,caml_call2(_qg_,ts,usage));
         default:var usage$1=param[1];return usage$1}}
    function is_fixed_arity(param)
     {var param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return 1;
       else
        switch(param$0[0])
         {case 0:return 1;
          case 1:return 0;
          case 2:return 0;
          case 3:
           var ts=param$0[1],match=caml_call1(parts,ts);
           if(match)
            {var others=match[2],last=match[1];
             if(caml_call2(_pm_,others,is_fixed_arity))
              {var param$0=last;continue}
             throw [0,Assert_failure,_avI_]}
           return caml_call1(_Gg_,cst_bug_in_command_ml$1);
          default:return 0}}
    function names$1(param)
     {var param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return 0;
       else
        switch(param$0[0])
         {case 0:var s=param$0[1];return [0,s,0];
          case 1:var param$1=param$0[1],param$0=param$1;continue;
          case 2:var param$2=param$0[1],param$0=param$2;continue;
          case 3:var ts=param$0[1];return caml_call2(_ql_,ts,names$1);
          default:var s$0=param$0[1];return [0,s$0,0]}}
    var zero$7=0;
    function concat$2(param)
     {if(param)
       {var
         cdr=param[2],
         car=param[1],
         match=
          caml_call3
           (_pi_,
            cdr,
            [0,car,0],
            function(param,t2)
             {var acc=param[2],t1=param[1];
              if(typeof t1 === "number")
               var t=t2;
              else
               {if(typeof t2 !== "number")
                 {if(is_fixed_arity(t1))return [0,t2,[0,t1,acc]];
                  var _aH1_=usage(t1),_aH2_=usage(t2);
                  return caml_call5
                          (_Pg_,
                           _avK_,
                           usage([3,caml_call1(parts,[0,t2,[0,t1,acc]])]),
                           _aH2_,
                           _aH1_,
                           0)}
                var t=t1}
              return [0,t,acc]}),
         cdr$0=match[2],
         car$0=match[1];
        return cdr$0?[3,caml_call1(parts,[0,car$0,cdr$0])]:car$0}
      return 0}
    function return$3(a){return [0,function(param){return a}]}
    function pack_for_completion(x)
     {switch(x[0])
       {case 0:return 0;
        case 3:var ps=x[1];return ps;
        default:return [0,[0,x],0]}}
    function symbol$230(tf,tx)
     {switch(tf[0])
       {case 0:
         var f=tf[1];
         switch(tx[0])
          {case 0:
            var x=tx[1];
            return [0,
                    function(env){return caml_call2(f,env,caml_call1(x,env))}];
           case 1:
            var
             match=tx[1],
             complete=match[3],
             parse=match[2],
             name=match[1],
             parse$0=
              function(arg,for_completion)
               {var
                 match=caml_call2(parse,arg,for_completion),
                 tx=match[2],
                 upd=match[1];
                return [0,upd,symbol$230(tf,tx)]};
            return [1,[0,name,parse$0,complete]];
           case 2:
            var test=tx[1];
            return [2,
                    function(more){return symbol$230(tf,caml_call1(test,more))}];
           default:var packed=tx[1];return [3,packed]}
        case 1:
         var
          match$0=tf[1],
          complete$0=match$0[3],
          parse$1=match$0[2],
          name$0=match$0[1],
          parse$2=
           function(arg,for_completion)
            {var
              match=caml_call2(parse$1,arg,for_completion),
              tf=match[2],
              upd=match[1];
             return [0,upd,symbol$230(tf,tx)]};
         return [1,[0,name$0,parse$2,complete$0]];
        case 2:
         var test$0=tf[1];
         return [2,
                 function(more){return symbol$230(caml_call1(test$0,more),tx)}];
        default:
         var packed$0=tf[1];
         return [3,caml_call2(_Oh_,packed$0,pack_for_completion(tx))]}}
    function symbol_map$1(t,f){return symbol$230(return$3(f),t)}
    function one$4(name,arg_type)
     {return [2,
              function(more)
               {if(more)
                 {var
                   key=arg_type[3],
                   complete=arg_type[2],
                   of_string=arg_type[1],
                   parse=
                    function(anon,for_completion)
                     {var match=caml_call1(of_string,anon);
                      if(0 === match[0])
                       {var
                         v=match[1],
                         update=
                          function(env)
                           {return caml_call3
                                    (_xW_,
                                     key,
                                     env,
                                     function(env,key){return caml_call3(multi_add,env,key,v)})};
                        return [0,update,return$3(v)]}
                      var exn=match[1];
                      if(for_completion)
                       return [0,function(_aH0_){return _aH0_},_avL_];
                      var _aHZ_=caml_call1(to_string$31,exn);
                      return caml_call4(die(_avM_),name,anon,_aHZ_,0)};
                  return [1,[0,name,parse,complete]]}
                return caml_call2(die(_avN_),name,0)}]}
    function sequence(t)
     {var loop=[];
      caml_update_dummy
       (loop,
        [2,
         function(more)
          {return more
                   ?symbol$230
                     (symbol$230(return$3(function(v,acc){return [0,v,acc]}),t),
                      loop)
                   :return$3(0)}]);
      return loop}
    function final_value(t,env)
     {var t$0=t;
      for(;;)
       switch(t$0[0])
        {case 0:var a=t$0[1];return caml_call1(a,env);
         case 1:
          var match=t$0[1],name=match[1];return caml_call2(die(_avO_),name,0);
         case 2:var f=t$0[1],t$1=caml_call1(f,0),t$0=t$1;continue;
         default:
          return caml_call1
                  (_Gg_,cst_BUG_asked_for_final_value_when_doing_completion)}}
    function consume(t,arg,for_completion)
     {var t$0=t;
      for(;;)
       switch(t$0[0])
        {case 0:return caml_call1(die(_avP_),0);
         case 1:
          var match=t$0[1],parse=match[2];
          return caml_call2(parse,arg,for_completion);
         case 2:var f=t$0[1],t$1=caml_call1(f,1),t$0=t$1;continue;
         default:
          var packed=t$0[1];
          if(packed)
           {var
             rest=packed[2],
             match$0=packed[1],
             t$2=match$0[1],
             match$1=consume(t$2,arg,for_completion),
             t$3=match$1[2],
             upd=match$1[1];
            return [0,upd,[3,caml_call2(_Oh_,pack_for_completion(t$3),rest)]]}
          return [0,function(_aHY_){return _aHY_},_avQ_]}}
    function complete(t,env,part)
     {var t$0=t;
      for(;;)
       switch(t$0[0])
        {case 0:return exit(0);
         case 1:
          var match=t$0[1],complete=match[3];
          return run_and_exit(complete,env,part);
         case 2:var f=t$0[1],t$1=caml_call1(f,1),t$0=t$1;continue;
         default:
          var t$2=t$0[1];
          if(t$2){var match$0=t$2[1],t$3=match$0[1],t$0=t$3;continue}
          return exit(0)}}
    function t2(t1,t2)
     {var _aHV_=concat$2([0,t1[2],[0,t2[2],0]]),_aHW_=t2[1],_aHX_=t1[1];
      return [0,
              symbol$230
               (symbol$230(return$3(function(a1,a2){return [0,a1,a2]}),_aHX_),
                _aHW_),
              _aHV_]}
    function t3(t1,t2,t3)
     {var
       _aHR_=concat$2([0,t1[2],[0,t2[2],[0,t3[2],0]]]),
       _aHS_=t3[1],
       _aHT_=t2[1],
       _aHU_=t1[1];
      return [0,
              symbol$230
               (symbol$230
                 (symbol$230
                   (return$3(function(a1,a2,a3){return [0,a1,a2,a3]}),_aHU_),
                  _aHT_),
                _aHS_),
              _aHR_]}
    function t4(t1,t2,t3,t4)
     {var
       _aHM_=concat$2([0,t1[2],[0,t2[2],[0,t3[2],[0,t4[2],0]]]]),
       _aHN_=t4[1],
       _aHO_=t3[1],
       _aHP_=t2[1],
       _aHQ_=t1[1];
      return [0,
              symbol$230
               (symbol$230
                 (symbol$230
                   (symbol$230
                     (return$3(function(a1,a2,a3,a4){return [0,a1,a2,a3,a4]}),
                      _aHQ_),
                    _aHP_),
                  _aHO_),
                _aHN_),
              _aHM_]}
    function normalize$1(str)
     {var strlen=caml_ml_string_length(str);
      if(caml_call2(_Nr_,strlen,0))
       caml_call1(_Gg_,cst_Empty_anonymous_argument_name_provided);
      if(caml_call2(symbol$14,caml_call2(_C9_,0,str),str))
       caml_call3(_Pg_,_avR_,str,0);
      var
       special_chars=caml_call1(_Fi_[57],_avS_),
       has_special_chars=caml_call2(_Ci_,str,caml_call1(mem$8,special_chars));
      return has_special_chars?str:caml_call1(_CA_,str)}
    function symbol$231(name,arg_type)
     {var name$0=normalize$1(name);
      return [0,one$4(name$0,arg_type),[0,name$0]]}
    function map_anons(t,f)
     {var _aHL_=t[2];return [0,symbol_map$1(t[1],f),_aHL_]}
    function maybe(t)
     {var _aHI_=t[2],_aHJ_=typeof _aHI_ === "number"?0:[2,_aHI_],_aHK_=t[1];
      return [0,
              [2,
               function(more)
                {return more
                         ?symbol_map$1(_aHK_,function(a){return [0,a]})
                         :return$3(0)}],
              _aHJ_]}
    function maybe_with_default(default$0,t)
     {var init=maybe(t),_aHG_=init[2];
      function _aHH_(v){return caml_call2(_yn_,v,default$0)}
      return [0,symbol_map$1(init[1],_aHH_),_aHG_]}
    function sequence$0(t)
     {var _aHE_=t[2];
      if(typeof _aHE_ === "number")
       var _aHF_=0;
      else
       {if(1 - is_fixed_arity(_aHE_))caml_call3(_Pg_,_avJ_,usage(_aHE_),0);
        var _aHF_=[1,_aHE_]}
      return [0,sequence(t[1]),_aHF_]}
    function non_empty_sequence_as_pair(t){return t2(t,sequence$0(t))}
    function non_empty_sequence_as_list(t)
     {var init=non_empty_sequence_as_pair(t),_aHC_=init[2];
      function _aHD_(param){var xs=param[2],x=param[1];return [0,x,xs]}
      return [0,symbol_map$1(init[1],_aHD_),_aHC_]}
    function ad_hoc(usage_arg)
     {return [0,
              sequence(one$4(cst_WILL_NEVER_BE_PRINTED,string$2)),
              [4,usage_arg]]}
    function compare$84(a_026,b_027)
     {var a_026$0=a_026,b_027$0=b_027;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_026$0,b_027$0))return 0;
        if(typeof a_026$0 === "number")
         return typeof b_027$0 === "number"?0:-1;
        else
         if(0 === a_026$0[0])
          {var _aHz_=a_026$0[2],_aHA_=a_026$0[1];
           if(typeof b_027$0 !== "number")
            {if(0 === b_027$0[0])
              {var
                b_031=b_027$0[2],
                b_029=b_027$0[1],
                n=caml_call2(compare$28,_aHA_,b_029);
               if(0 === n){var a_026$0=_aHz_,b_027$0=b_031;continue}
               return n}
             return -1}}
         else
          {var _aHB_=a_026$0[1];
           if(typeof b_027$0 !== "number")
            {if(0 === b_027$0[0])return 1;
             var b_033=b_027$0[1];
             return caml_call2(compare$28,_aHB_,b_033)}}
        return 1}}
    function of_list$13(args)
     {var _aHy_=0;
      return caml_call3
              (_qu_,args,function(arg,args){return [0,arg,args]},_aHy_)}
    function to_list$19(param)
     {if(typeof param === "number")
       return 0;
      else
       {if(0 === param[0])
         {var xs=param[2],x=param[1];return [0,x,to_list$19(xs)]}
        var x$0=param[1];
        return [0,x$0,0]}}
    function ends_in_complete(param)
     {var param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return 0;
       else
        {if(0 === param$0[0]){var param$1=param$0[2],param$0=param$1;continue}
         return 1}}
    function extend(t,extend,path)
     {if(ends_in_complete(t))return t;
      var
       path_list=caml_call2(_yn_,caml_call1(_p9_,caml_call1(parts,path)),0),
       _aHx_=caml_call1(extend,path_list);
      return of_list$13(caml_call2(_Oh_,to_list$19(t),_aHx_))}
    function to_string$34(param){return 0 === param?cst_subcommand:cst_flag}
    function normalize$2(key_type,key)
     {if(caml_call2(_Ci_,key,function(c){return caml_call2(_FW_,c,95)}))
       caml_call4(_Pg_,_avT_,to_string$34(key_type),key,0);
      if(0 === key_type)return caml_call1(_CB_,key);
      if(caml_call2(equal$17,key,cst$263))
       {var _aHv_=0;
        caml_call4
         (_Pg_,
          [0,
           [11,
            cst_invalid,
            [24,
             _avV_,
             function(param,custom_printf_034)
              {return to_string$34(custom_printf_034)},
             _avU_]],
           cst_invalid_Key_type_name_S],
          key_type,
          key,
          _aHv_)}
      if(caml_call2(_Ci_,key,_Fr_))
       {var _aHw_=0;
        caml_call4
         (_Pg_,
          [0,
           [11,
            cst_invalid$0,
            [24,
             _avX_,
             function(param,custom_printf_035)
              {return to_string$34(custom_printf_035)},
             _avW_]],
           cst_invalid_Key_type_name_contains_whitespace_S],
          key_type,
          key,
          _aHw_)}
      return caml_call2(_CX_,key,cst$264)?key:caml_call2(_Gu_,cst$265,key)}
    function lookup_expand(alist,prefix,key_type)
     {var
       matches=
        caml_call2
         (_pX_,
          alist,
          function(param)
           {var _aHu_=param[1];
            return -461087063 <= param[2][2]
                    ?caml_call2(symbol$11,_aHu_,prefix)
                    :caml_call2(_CX_,_aHu_,prefix)});
      if(matches)
       {if(matches[2])
         {var
           match=
            caml_call2
             (_po_,
              matches,
              function(param)
               {var key=param[1];return caml_call2(symbol$11,key,prefix)});
          if(match)
           {var _aHq_=match[1],match$0=_aHq_[2],data=match$0[1],key=_aHq_[1];
            return [0,[0,key,data]]}
          var
           matching_keys=
            caml_call2(_qg_,matches,function(_aHt_){return _aHt_[1]}),
           _aHr_=caml_call2(_Cx_,_avY_,matching_keys);
          return [1,
                  caml_call4
                   (_fE_,
                    [0,
                     [24,
                      _av0_,
                      function(param,custom_printf_037)
                       {return to_string$34(custom_printf_037)},
                      _avZ_],
                     cst_Key_type_s_is_an_ambiguous_prefix_s],
                    key_type,
                    prefix,
                    _aHr_)]}
        var
         _aHs_=matches[1],
         match$1=_aHs_[2],
         data$0=match$1[1],
         key$0=_aHs_[1];
        return [0,[0,key$0,data$0]]}
      return [1,
              caml_call3
               (_fE_,
                [0,
                 [11,
                  cst_unknown,
                  [24,
                   _av2_,
                   function(param,custom_printf_036)
                    {return to_string$34(custom_printf_036)},
                   _av1_]],
                 cst_unknown_Key_type_s],
                key_type,
                prefix)]}
    function lookup_expand_with_aliases(map,prefix,key_type)
     {function _aHo_(flag)
       {var
         name_matching=flag[7],
         aliases=flag[2],
         name=flag[1],
         data=[0,flag,name_matching];
        return [0,
                [0,name,data],
                caml_call2
                 (_qg_,aliases,function(alias){return [0,alias,data]})]}
      var
       alist=caml_call2(_ql_,caml_call1(Map$1[64],map),_aHo_),
       match=
        caml_call2
         (_qR_,
          function(param,_aHp_)
           {var s2=_aHp_[1],s1=param[1];return caml_call2(compare$28,s1,s2)},
          alist);
      if(match)
       {var match$0=match[1],flag=match$0[1];
        return caml_call3(_Pg_,_av3_,flag,0)}
      return lookup_expand(alist,prefix,key_type)}
    function subcommand_cmp_fst(param,_aHn_)
     {var c=_aHn_[1],a=param[1];return help_screen_compare(a,c)}
    function t_of_sexp$101(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$39,sexp);
      var
       field_sexps=sexp[1],
       summary_field=[0,0],
       readme_field=[0,0],
       anons_field=[0,0],
       flags_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aHe_=param[1];
          if(1 === _aHe_[0])
           {var _aHf_=_aHe_[1];
            if(_aHf_)
             {var _aHg_=_aHf_[1];
              if(0 === _aHg_[0])
               {var _aHh_=_aHf_[2],_aHi_=_aHg_[1];
                if(! _aHh_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aHi_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _aHh_[2])
                 {var tail=param[2],field_sexp=_aHh_[1];
                  if(caml_string_notequal(_aHi_,cst_anons))
                   if(caml_string_notequal(_aHi_,cst_flags))
                    if(caml_string_notequal(_aHi_,cst_readme))
                     if(caml_string_notequal(_aHi_,cst_summary))
                      {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aHi_,extra[1]]}
                     else
                      if(summary_field[1])
                       duplicates[1] = [0,_aHi_,duplicates[1]];
                      else
                       {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                        summary_field[1] = [0,fvalue]}
                    else
                     if(readme_field[1])
                      duplicates[1] = [0,_aHi_,duplicates[1]];
                     else
                      {var fvalue$0=caml_call1(t_of_sexp$32,field_sexp);
                       readme_field[1] = [0,fvalue$0]}
                   else
                    if(flags_field[1])
                     duplicates[1] = [0,_aHi_,duplicates[1]];
                    else
                     {var fvalue$1=caml_call2(_pe_,t_of_sexp$99,field_sexp);
                      flags_field[1] = [0,fvalue$1]}
                  else
                   if(anons_field[1])
                    duplicates[1] = [0,_aHi_,duplicates[1]];
                   else
                    {if(0 === field_sexp[0])
                      {var _aHa_=field_sexp[1];
                       if(caml_string_notequal(_aHa_,cst_Grammar))
                        {if(caml_string_notequal(_aHa_,cst_Usage))
                          if(caml_string_notequal(_aHa_,cst_grammar))
                           if(caml_string_notequal(_aHa_,cst_usage))
                            var switch$0=0,switch$1=0,switch$2=0;
                           else
                            var switch$2=1;
                          else
                           var switch$1=1,switch$2=0;
                         else
                          var switch$2=1;
                         if(switch$2)
                          var
                           fvalue$2=
                            caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$38,field_sexp),
                           switch$0=1,
                           switch$1=0}
                       else
                        var switch$1=1;
                       if(switch$1)
                        var
                         fvalue$2=
                          caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$38,field_sexp),
                         switch$0=1}
                     else
                      {var _aHb_=field_sexp[1];
                       if(_aHb_)
                        {var _aHc_=_aHb_[1];
                         if(0 === _aHc_[0])
                          {var _aHd_=_aHc_[1];
                           if(caml_string_notequal(_aHd_,cst_Grammar$0))
                            {if(caml_string_notequal(_aHd_,cst_Usage$0))
                              if(caml_string_notequal(_aHd_,cst_grammar$0))
                               if(caml_string_notequal(_aHd_,cst_usage$0))
                                var switch$0=0,switch$3=0,switch$4=0;
                               else
                                var switch$4=1;
                              else
                               var switch$3=1,switch$4=0;
                             else
                              var switch$4=1;
                             if(switch$4)
                              {var sexp_args=_aHb_[2];
                               if(sexp_args)
                                if(sexp_args[2])
                                 var switch$5=1;
                                else
                                 var
                                  v0$0=sexp_args[1],
                                  v0$1=caml_call1(t_of_sexp$32,v0$0),
                                  fvalue$2=[0,v0$1],
                                  switch$0=1,
                                  switch$3=0,
                                  switch$5=0;
                               else
                                var switch$5=1;
                               if(switch$5)
                                var
                                 fvalue$2=
                                  caml_call3
                                   (Sexplib0_Sexp_conv_error[4],tp_loc$38,_aHd_,field_sexp),
                                 switch$0=1,
                                 switch$3=0}}
                           else
                            var switch$3=1;
                           if(switch$3)
                            {var sexp_args$0=_aHb_[2];
                             if(sexp_args$0)
                              if(sexp_args$0[2])
                               var switch$6=1;
                              else
                               {var v0$2=sexp_args$0[1],v0=caml_call1(t_of_sexp$100,v0$2);
                                invariant$15(v0);
                                var fvalue$2=[1,v0],switch$0=1,switch$6=0}
                             else
                              var switch$6=1;
                             if(switch$6)
                              var
                               fvalue$2=
                                caml_call3
                                 (Sexplib0_Sexp_conv_error[4],tp_loc$38,_aHd_,field_sexp),
                               switch$0=1}}
                         else
                          var
                           fvalue$2=
                            caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$38,field_sexp),
                           switch$0=1}
                       else
                        var
                         fvalue$2=
                          caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$38,field_sexp),
                         switch$0=1}
                     if(! switch$0)
                      var
                       fvalue$2=
                        caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$38,field_sexp);
                     anons_field[1] = [0,fvalue$2]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$39,_aHe_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$39,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$39,extra[1],sexp);
        var
         _aHj_=summary_field[1],
         _aHl_=anons_field[1],
         _aHm_=flags_field[1],
         _aHk_=readme_field[1];
        if(_aHj_)
         if(_aHl_)
          if(_aHm_)
           {var
             flags_value=_aHm_[1],
             anons_value=_aHl_[1],
             summary_value=_aHj_[1];
            return [0,summary_value,_aHk_,anons_value,flags_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$39,
                 sexp,
                 [0,
                  [0,0 === summary_field[1]?1:0,cst_summary$0],
                  [0,
                   [0,0 === anons_field[1]?1:0,cst_anons$0],
                   [0,[0,0 === flags_field[1]?1:0,cst_flags$0],0]]])}}
    function sexp_of_t$120(param)
     {var
       v_flags=param[4],
       v_anons=param[3],
       v_readme=param[2],
       v_summary=param[1],
       arg=caml_call2(_pf_,sexp_of_t$118,v_flags),
       bnds=[0,[1,[0,_av6_,[0,arg,0]]],0];
      if(0 === v_anons[0])
       var
        v0=v_anons[1],
        v0$0=caml_call1(sexp_of_t$40,v0),
        arg$0=[1,[0,_av4_,[0,v0$0,0]]];
      else
       var
        v0$1=v_anons[1],
        v0$2=sexp_of_t$119(v0$1),
        arg$0=[1,[0,_av5_,[0,v0$2,0]]];
      var bnds$0=[0,[1,[0,_av7_,[0,arg$0,0]]],bnds];
      if(v_readme)
       var
        v=v_readme[1],
        arg$1=caml_call1(sexp_of_t$40,v),
        bnd=[1,[0,_av8_,[0,arg$1,0]]],
        bnds$1=[0,bnd,bnds$0];
      else
       var bnds$1=bnds$0;
      var
       arg$2=caml_call1(sexp_of_t$40,v_summary),
       bnds$2=[0,[1,[0,_av9_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    function to_sexpable$0(t)
     {function _aG8_(a,b){return caml_call2(compare$28,a[1],b[1])}
      var
       ts=
        caml_call2
         (_p5_,caml_call2(_qg_,caml_call1(Map$1[64],t[3]),align),_aG8_),
       _aG7_=
        caml_call2
         (_p6_,ts,function(a,b){return help_screen_compare(a[1],b[1])}),
       _aG9_=[1,t[5]];
      function _aG__(readme){return caml_call1(readme,0)}
      var _aG$_=caml_call2(_yd_,t[2],_aG__);
      return [0,t[1],_aG$_,_aG9_,_aG7_]}
    var
     path_key=key_create(cst_path),
     args_key=key_create(cst_args),
     help_key=key_create(cst_help$5);
    function app(t1,t2,f)
     {function _aG1_(param)
       {var _aG6_=caml_call1(t1[3],0);
        return caml_call2(_Oh_,caml_call1(t2[3],0),_aG6_)}
      function _aG2_(param)
       {var _aG5_=[0,caml_call1(t2[2],0),0];
        return concat$2([0,caml_call1(t1[2],0),_aG5_])}
      return [0,
              function(param)
               {var _aG3_=caml_call1(t2[1],0),_aG4_=caml_call1(t1[1],0);
                return symbol$230(symbol$230(return$3(f),_aG4_),_aG3_)},
              _aG2_,
              _aG1_]}
    function apply$1(pf,px)
     {function _aGV_(param)
       {var _aG0_=caml_call1(pf[1][3],0);
        return caml_call2(_Oh_,caml_call1(px[1][3],0),_aG0_)}
      function _aGW_(param)
       {var _aGZ_=[0,caml_call1(px[1][2],0),0];
        return concat$2([0,caml_call1(pf[1][2],0),_aGZ_])}
      return [0,
              [0,
               function(param)
                {var
                  _aGX_=caml_call1(px[1][1],0),
                  _aGY_=caml_call1(pf[1][1],0);
                 return symbol$230
                         (symbol$230
                           (return$3
                             (function(mf,mx,k)
                               {return caml_call1
                                        (mf,
                                         function(f)
                                          {return caml_call1
                                                   (mx,function(x){return caml_call1(k,caml_call1(f,x))})})}),
                            _aGY_),
                          _aGX_)},
               _aGW_,
               _aGV_]]}
    function symbol$232(t1,t2)
     {return app
              (t1,
               t2,
               function(f1,f2,x){return caml_call1(f2,caml_call1(f1,x))})}
    function symbol$233(t1,p2)
     {function _aGU_(f1,f2,x){return caml_call1(f2,caml_call1(f1,x))}
      return app(t1,p2[1],_aGU_)}
    function symbol$234(t1,p2)
     {function _aGT_(f2,f1,x){return caml_call1(f1,caml_call1(f2,x))}
      return app(p2[1],t1,_aGT_)}
    function step(f)
     {function _aGR_(param){return 0}
      function _aGS_(param){return zero$7}
      return [0,function(param){return return$3(f)},_aGS_,_aGR_]}
    function _awg_(param){return 0}
    function _awh_(param){return zero$7}
    var
     empty$13=
      [0,
       function(param){return return$3(function(_aGQ_){return _aGQ_})},
       _awh_,
       _awg_];
    function return$4(v)
     {function _aGO_(param){return 0}
      function _aGP_(param){return zero$7}
      return [0,
              [0,
               function(param)
                {return return$3(function(k){return caml_call1(k,v)})},
               _aGP_,
               _aGO_]]}
    function map$30(p,f)
     {var _aGL_=p[1][3],_aGM_=p[1][2];
      return [0,
              [0,
               function(param)
                {function _aGN_(c,k)
                  {return caml_call1
                           (c,function(v){return caml_call1(k,caml_call1(f,v))})}
                 return symbol_map$1(caml_call1(p[1][1],0),_aGN_)},
               _aGM_,
               _aGL_]]}
    function wrap(f,t)
     {var _aGI_=t[3],_aGJ_=t[2];
      return [0,
              function(param)
               {function _aGK_(run,main){return caml_call2(f,run,main)}
                return symbol_map$1(caml_call1(t[1],0),_aGK_)},
              _aGJ_,
              _aGI_]}
    function of_param(p){return p[1]}
    function to_param(t,main)
     {function _aGG_(k){return caml_call1(k,main)}
      var _aGE_=t[3],_aGF_=t[2];
      return map$30
              ([0,
                [0,
                 function(param)
                  {function _aGH_(f,k){return caml_call1(k,f)}
                   return symbol_map$1(caml_call1(t[1],0),_aGH_)},
                 _aGF_,
                 _aGE_]],
               _aGG_)}
    function lookup(key)
     {function _aGC_(param){return 0}
      function _aGD_(param){return zero$7}
      return [0,
              [0,
               function(param)
                {return [0,
                         function(env,m)
                          {return caml_call1(m,caml_call2(find_exn$9,env,key))}]},
               _aGD_,
               _aGC_]]}
    var path=lookup(path_key),args=lookup(args_key),help$0=lookup(help_key);
    function _awi_(param){return 0}
    function _awj_(param){return zero$7}
    var
     env=
      [0,
       [0,
        function(param){return [0,function(env,m){return caml_call1(m,env)}]},
        _awj_,
        _awi_]],
     string$3=include$158[1],
     int$4=include$158[2],
     char$5=include$158[3],
     float$3=include$158[4],
     bool$4=include$158[5],
     date$0=include$158[6],
     percent$0=include$158[7],
     host_and_port$0=include$158[8],
     sexp$0=include$158[9],
     sexp_conv$0=include$158[10];
    function anon(spec)
     {invariant$15(spec[2]);
      function _aGz_(param){return 0}
      function _aGA_(param){return spec[2]}
      return [0,
              [0,
               function(param)
                {function _aGB_(v,k){return caml_call1(k,v)}
                 return symbol_map$1(spec[1],_aGB_)},
               _aGA_,
               _aGz_]]}
    function flag(opt,full_flag_required,name,mode,doc)
     {if(opt)var sth=opt[1],aliases=sth;else var aliases=0;
      function normalize(flag){return normalize$2(1,flag)}
      var
       name$0=normalize(name),
       aliases$0=caml_call2(_qg_,aliases,normalize),
       match=caml_call1(mode,name$0),
       num_occurrences=match[3],
       read=match[2],
       action=match[1],
       check_available=
        0 === num_occurrences[1]
         ?function(_aGy_){return 0}
         :function(env){caml_call1(read,env);return 0},
       name_matching=caml_call1(_yj_,full_flag_required)?-461087063:-481604174;
      function _aGw_(param)
       {return [0,
                [0,
                 name$0,
                 aliases$0,
                 action,
                 doc,
                 num_occurrences,
                 check_available,
                 name_matching],
                0]}
      function _aGx_(param){return zero$7}
      return [0,
              [0,
               function(param)
                {return [0,
                         function(env,m){return caml_call1(m,caml_call1(read,env))}]},
               _aGx_,
               _aGw_]]}
    function flag_optional_with_default_doc
     (aliases,full_flag_required,name,arg_type,sexp_of_default,default$0,doc)
     {var
       _aGt_=caml_call1(sexp_of_default,default$0),
       _aGu_=
        caml_call3
         (_fE_,
          [0,
           [2,
            0,
            [11,
             cst_default,
             [24,
              _awl_,
              function(param,custom_printf_038)
               {return caml_call1(to_string$0,custom_printf_038)},
              _awk_]]],
           cst_s_default_Sexp],
          doc,
          _aGt_);
      return flag
              (aliases,
               full_flag_required,
               name,
               function(_aGv_)
                {return optional_with_default(default$0,arg_type,_aGv_)},
               _aGu_)}
    var
     map$31=[0,-198771759,map$30],
     include$159=caml_call1(Base_Applicative[5],[0,return$4,apply$1,map$31]),
     return$5=include$159[1],
     map$32=include$159[2],
     pair=include$159[3],
     symbol$235=include$159[4],
     symbol$236=include$159[5],
     symbol$237=include$159[6],
     symbol_map$2=include$159[7],
     apply$2=include$159[8],
     map2$2=include$159[9],
     map3$1=include$159[10],
     all$6=include$159[11],
     all_unit$0=include$159[12],
     Applicative_infix$0=include$159[13];
    function flags_of_args_exn(args)
     {return caml_call3
              (_pi_,
               args,
               empty$13,
               function(acc,param)
                {var doc=param[3],spec=param[2],name=param[1];
                 function gen(f,flag_type)
                  {var _aGs_=flag(0,0,name,flag_type,doc);
                   return symbol$233
                           (step(function(m,x){caml_call1(f,x);return m}),_aGs_)}
                 function call(f,arg_type)
                  {function _aGq_(_aGr_){return optional$0(arg_type,_aGr_)}
                   return gen(function(x){return caml_call2(_xV_,x,f)},_aGq_)}
                 function set(r,arg_type)
                  {return call(function(x){r[1] = x;return 0},arg_type)}
                 function set_bool(r,b)
                  {return gen
                           (function(passed)
                             {var _aGp_=passed?(r[1] = b,0):passed;return _aGp_},
                            no_arg)}
                 switch(spec[0])
                  {case 0:
                    var
                     f=spec[1],
                     _aGn_=
                      gen
                       (function(passed){return passed?caml_call1(f,0):passed},
                        no_arg);
                    break;
                   case 1:var f$0=spec[1],_aGn_=call(f$0,bool$4);break;
                   case 2:var r=spec[1],_aGn_=set_bool(r,1);break;
                   case 3:var r$0=spec[1],_aGn_=set_bool(r$0,0);break;
                   case 4:var f$1=spec[1],_aGn_=call(f$1,string$3);break;
                   case 5:var r$1=spec[1],_aGn_=set(r$1,string$3);break;
                   case 6:var f$2=spec[1],_aGn_=call(f$2,int$4);break;
                   case 7:var r$2=spec[1],_aGn_=set(r$2,int$4);break;
                   case 8:var f$3=spec[1],_aGn_=call(f$3,float$3);break;
                   case 9:var r$3=spec[1],_aGn_=set(r$3,float$3);break;
                   case 10:
                    var
                     _aGn_=
                      caml_call1
                       (_Gg_,
                        cst_Arg_Tuple_is_not_supported_by_Command_Spec_flags_of_args_exn);
                    break;
                   case 11:
                    var
                     f$4=spec[2],
                     syms=spec[1],
                     arg_type=
                      of_alist_exn$5
                       (0,caml_call2(_qg_,syms,function(sym){return [0,sym,sym]})),
                     _aGn_=call(f$4,arg_type);
                    break;
                   case 12:
                    var
                     f$5=spec[1],
                     _aGn_=
                      gen
                       (function(x)
                         {return caml_call2
                                  (_xV_,x,function(_aGo_){return caml_call2(_ph_,_aGo_,f$5)})},
                        escape);
                    break;
                   default:
                    var
                     _aGn_=
                      caml_call1
                       (_Gg_,
                        cst_Arg_Expand_is_not_supported_by_Command_Spec_flags_of_args_exn)}
                 return symbol$232(acc,_aGn_)})}
    var Deprecated=[0,no_arg$0,escape$0,ad_hoc];
    function arg_names(param)
     {var
       t=param[1],
       flag_names=caml_call1(keys$2,create$42(caml_call1(t[3],0))),
       anon_names=names$1(caml_call1(t[2],0));
      return caml_call1(_rb_,[0,flag_names,[0,anon_names,0]])}
    function to_string_for_choose_one(param)
     {var
       names=arg_names(param),
       names_with_commas=
        caml_call2(_pX_,names,function(s){return caml_call4(_Cz_,0,0,s,44)});
      if(1 - caml_call1(is_empty$0,names_with_commas))
       failwiths
        (0,
         _awm_,
         cst_For_simplicity_Command_Spec_choose_one_does_not_support_names_with_commas,
         names_with_commas,
         caml_call1(_pf_,sexp_of_t$40));
      return caml_call2(_Cx_,_awn_,names)}
    var If_nothing_chosen=[0];
    function choose_one(ts,if_nothing_chosen)
     {var
       ts$0=
        caml_call2
         (_qg_,ts,function(t){return [0,to_string_for_choose_one(t),t]});
      function _aGg_(name)
       {return failwiths
                (0,
                 _awo_,
                 cst_Command_Spec_choose_one_called_with_duplicate_name,
                 name,
                 sexp_of_t$40)}
      caml_call2
       (_xV_,
        caml_call2
         (_qR_,
          compare$28,
          caml_call2(_qg_,ts$0,function(_aGm_){return _aGm_[1]})),
        _aGg_);
      function _aGh_(param)
       {if(param)
         {var match=param[1],value=match[2];
          return typeof if_nothing_chosen === "number"
                  ?0 === if_nothing_chosen?value:[0,value]
                  :value}
        if(typeof if_nothing_chosen === "number")
         {if(0 === if_nothing_chosen)
           {var
             _aGj_=0,
             _aGk_=
              caml_call2
               (_Cx_,
                _awp_,
                caml_call2(_qg_,ts$0,function(_aGl_){return _aGl_[1]}));
            return caml_call2(die(_awq_),_aGk_,_aGj_)}
          return 0}
        var value$0=if_nothing_chosen[1];
        return value$0}
      function _aGi_(init,param)
       {var t=param[2],name=param[1];
        return caml_call3
                (map2$2,
                 init,
                 t,
                 function(init,value)
                  {if(value)
                    {var value$0=value[1];
                     if(init)
                      {var match=init[1],name$0=match[1];
                       return caml_call3(die(_awr_),name,name$0,0)}
                     return [0,[0,name,value$0]]}
                   return init})}
      return caml_call2
              (map$32,
               caml_call3(_pi_,ts$0,caml_call1(return$5,0),_aGi_),
               _aGh_)}
    function and_arg_names(t)
     {return caml_call2
              (map$32,t,function(value){return [0,value,arg_names(t)]})}
    function and_arg_name(t)
     {var names=arg_names(t);
      if(names)
       if(! names[2])
        {var name=names[1];
         return caml_call2(map$32,t,function(value){return [0,value,name]})}
      var _aGf_=[0,caml_call2(_pf_,sexp_of_t$40,names),0];
      return caml_call1
              (_on_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],
                   cst_and_arg_name_expects_exactly_one_name_got),
                 _aGf_]])}
    function map$33(init,f)
     {var _aGb_=_xN_[17];
      function _aGc_(_aGe_){return caml_call2(_aGb_,_aGe_,f)}
      var _aGd_=caml_call2(_LD_,init[3],_aGc_);
      return [0,init[1],init[2],_aGd_]}
    function t_of_sexp$102(of_a,sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$42,sexp);
      var
       field_sexps=sexp[1],
       summary_field=[0,0],
       readme_field=[0,0],
       subcommands_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aF5_=param[1];
          if(1 === _aF5_[0])
           {var _aF6_=_aF5_[1];
            if(_aF6_)
             {var _aF7_=_aF6_[1];
              if(0 === _aF7_[0])
               {var _aF8_=_aF6_[2],_aF9_=_aF7_[1];
                if(! _aF8_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aF9_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _aF8_[2])
                 {var tail=param[2],field_sexp=_aF8_[1];
                  if(caml_string_notequal(_aF9_,cst_readme$2))
                   if(caml_string_notequal(_aF9_,cst_subcommands$1))
                    if(caml_string_notequal(_aF9_,cst_summary$5))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aF9_,extra[1]]}
                    else
                     if(summary_field[1])
                      duplicates[1] = [0,_aF9_,duplicates[1]];
                     else
                      {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                       summary_field[1] = [0,fvalue]}
                   else
                    if(subcommands_field[1])
                     duplicates[1] = [0,_aF9_,duplicates[1]];
                    else
                     {var
                       fvalue$0=
                        caml_call3(_xN_[10],t_of_sexp$32,of_a,field_sexp);
                      subcommands_field[1] = [0,fvalue$0]}
                  else
                   if(readme_field[1])
                    duplicates[1] = [0,_aF9_,duplicates[1]];
                   else
                    {var fvalue$1=caml_call1(t_of_sexp$32,field_sexp);
                     readme_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$42,_aF5_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$42,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$42,extra[1],sexp);
        var
         _aF__=summary_field[1],
         _aGa_=subcommands_field[1],
         _aF$_=readme_field[1];
        if(_aF__)
         if(_aGa_)
          {var subcommands_value=_aGa_[1],summary_value=_aF__[1];
           return [0,summary_value,_aF$_,subcommands_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$42,
                 sexp,
                 [0,
                  [0,0 === summary_field[1]?1:0,cst_summary$6],
                  [0,[0,0 === subcommands_field[1]?1:0,cst_subcommands$2],0]])}}
    function sexp_of_t$121(of_a,param)
     {var
       v_subcommands=param[3],
       v_readme=param[2],
       v_summary=param[1],
       arg=caml_call3(_xN_[11],sexp_of_t$40,of_a,v_subcommands),
       bnds=[0,[1,[0,_awv_,[0,arg,0]]],0];
      if(v_readme)
       var
        v=v_readme[1],
        arg$0=caml_call1(sexp_of_t$40,v),
        bnd=[1,[0,_aww_,[0,arg$0,0]]],
        bnds$0=[0,bnd,bnds];
      else
       var bnds$0=bnds;
      var
       arg$1=caml_call1(sexp_of_t$40,v_summary),
       bnds$1=[0,[1,[0,_awx_,[0,arg$1,0]]],bnds$0];
      return [1,bnds$1]}
    function map$34(init,f)
     {var _aF4_=caml_call2(_xN_[17],init[3],f);
      return [0,init[1],init[2],_aF4_]}
    function to_latest(param)
     {var subcommands=param[3],readme=param[2],summary=param[1];
      return [0,summary,readme,caml_call1(_LM_,subcommands)]}
    function of_latest(param)
     {var
       subcommands=param[3],
       readme=param[2],
       summary=param[1],
       _aF2_=caml_obj_tag(subcommands),
       _aF3_=
        250 === _aF2_
         ?subcommands[1]
         :246 === _aF2_
           ?caml_call1(CamlinternalLazy[2],subcommands)
           :subcommands;
      return [0,summary,readme,_aF3_]}
    function to_sexpable$1(subcommand_to_sexpable,t)
     {var _aFW_=_xN_[17];
      function _aFX_(_aF1_)
       {return caml_call2(_aFW_,_aF1_,subcommand_to_sexpable)}
      var _aFY_=caml_call2(_LD_,t[3],_aFX_);
      function _aFZ_(readme){return caml_call1(readme,0)}
      var _aF0_=caml_call2(_yd_,t[2],_aFZ_);
      return [0,t[1],_aF0_,_aFY_]}
    function abs_path(dir,path)
     {return is_absolute(path)?path:concat$0(dir,path)}
    function to_latest$0(_aFV_){return _aFV_}
    function of_latest$0(_aFU_){return _aFU_}
    function to_v3(t){return [0,t[1],t[2],t[3],t[4],0]}
    function of_v3(t)
     {var _aFT_=abs_path(t[3],t[4]);return [0,t[1],t[2],t[3],_aFT_]}
    var
     to_latest$1=caml_call2(_iH_,to_latest$0,to_v3),
     of_latest$1=caml_call2(_iH_,of_v3,of_latest$0);
    function to_v2(t){return [0,t[1],t[2],cst$271,t[3]]}
    function of_v2(t)
     {var _aFS_=abs_path(t[3],t[4]);return [0,t[1],t[2],_aFS_]}
    var
     to_latest$2=caml_call2(_iH_,to_latest$1,to_v2),
     of_latest$2=caml_call2(_iH_,of_v2,of_latest$1);
    function to_sexpable$2(t)
     {var _aFN_=t[5],_aFO_=t[4],_aFP_=t[3];
      function _aFQ_(readme){return caml_call1(readme,0)}
      var _aFR_=caml_call2(_yd_,t[2],_aFQ_);
      return [0,t[1],_aFR_,_aFP_,_aFO_,_aFN_]}
    function get_summary(t)
     {var kind=t[5];
      for(;;)
       switch(kind[0])
        {case 0:var b=kind[1];return b[1];
         case 1:var g=kind[1];return g[1];
         case 2:var e=kind[1];return e[1];
         default:
          var
           l=kind[1],
           _aFM_=caml_obj_tag(l),
           kind$0=
            250 === _aFM_
             ?l[1]
             :246 === _aFM_?caml_call1(CamlinternalLazy[2],l):l,
           kind=kind$0;
          continue}}
    var supported_versions=caml_call2(create$38,0,0);
    function add_version(n){return caml_call2(enqueue$2,supported_versions,n)}
    add_version(3);
    var t_of_sexp$103=function _aFL_(_aFK_){return _aFL_.fun(_aFK_)};
    caml_update_dummy
     (t_of_sexp$103,
      function(sexp)
       {if(0 === sexp[0])
         {var _aFG_=sexp[1];
          if(caml_string_notequal(_aFG_,cst_Base$0))
           {if(caml_string_notequal(_aFG_,cst_Exec))
             {if(caml_string_notequal(_aFG_,cst_Group))
               {if(caml_string_notequal(_aFG_,cst_Lazy))
                 if(caml_string_notequal(_aFG_,cst_base))
                  if(caml_string_notequal(_aFG_,cst_exec))
                   if(caml_string_notequal(_aFG_,cst_group))
                    if(caml_string_notequal(_aFG_,cst_lazy))
                     var switch$0=1,switch$1=0,switch$2=0,switch$3=0;
                    else
                     var switch$3=1;
                   else
                    var switch$2=1,switch$3=0;
                  else
                   var switch$1=1,switch$2=0,switch$3=0;
                 else
                  var switch$0=0,switch$1=0,switch$2=0,switch$3=0;
                else
                 var switch$3=1;
                if(switch$3)
                 return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$46,sexp)}
              else
               var switch$2=1;
              if(switch$2)
               return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$46,sexp)}
            else
             var switch$1=1;
            if(switch$1)
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$46,sexp)}
          else
           var switch$0=0;
          if(! switch$0)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$46,sexp)}
        else
         {var _aFH_=sexp[1];
          if(! _aFH_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$46,sexp);
          var _aFI_=_aFH_[1];
          if(0 !== _aFI_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$46,sexp);
          var _aFJ_=_aFI_[1];
          if(caml_string_notequal(_aFJ_,cst_Base$1))
           {if(caml_string_notequal(_aFJ_,cst_Exec$0))
             {if(caml_string_notequal(_aFJ_,cst_Group$0))
               {if(caml_string_notequal(_aFJ_,cst_Lazy$0))
                 if(caml_string_notequal(_aFJ_,cst_base$0))
                  if(caml_string_notequal(_aFJ_,cst_exec$0))
                   if(caml_string_notequal(_aFJ_,cst_group$0))
                    if(caml_string_notequal(_aFJ_,cst_lazy$0))
                     var switch$4=1,switch$5=0,switch$6=0,switch$7=0;
                    else
                     var switch$7=1;
                   else
                    var switch$6=1,switch$7=0;
                  else
                   var switch$5=1,switch$6=0,switch$7=0;
                 else
                  var switch$4=0,switch$5=0,switch$6=0,switch$7=0;
                else
                 var switch$7=1;
                if(switch$7)
                 {var sexp_args=_aFH_[2];
                  if(sexp_args)
                   if(! sexp_args[2])
                    {var v0=sexp_args[1],v0$0=caml_call2(_Lw_,t_of_sexp$103,v0);
                     return [3,v0$0]}
                  return caml_call3
                          (Sexplib0_Sexp_conv_error[4],tp_loc$46,_aFJ_,sexp)}}
              else
               var switch$6=1;
              if(switch$6)
               {var sexp_args$0=_aFH_[2];
                if(sexp_args$0)
                 if(! sexp_args$0[2])
                  {var v0$1=sexp_args$0[1];
                   if(0 === v0$1[0])
                    var
                     v0$2=
                      caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$41,v0$1);
                   else
                    {var
                      field_sexps=v0$1[1],
                      summary_field=[0,0],
                      readme_field=[0,0],
                      subcommands_field=[0,0],
                      duplicates=[0,0],
                      extra=[0,0],
                      param=field_sexps;
                     for(;;)
                      {if(param)
                        {var _aFo_=param[1];
                         if(1 === _aFo_[0])
                          {var _aFp_=_aFo_[1];
                           if(_aFp_)
                            {var _aFq_=_aFp_[1];
                             if(0 === _aFq_[0])
                              {var _aFr_=_aFp_[2],_aFs_=_aFq_[1];
                               if(! _aFr_)
                                {var tail$0=param[2];
                                 if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aFs_,extra[1]];
                                 var param=tail$0;
                                 continue}
                               if(! _aFr_[2])
                                {var tail=param[2],field_sexp=_aFr_[1];
                                 if(caml_string_notequal(_aFs_,cst_readme$1))
                                  if(caml_string_notequal(_aFs_,cst_subcommands))
                                   if(caml_string_notequal(_aFs_,cst_summary$3))
                                    {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aFs_,extra[1]]}
                                   else
                                    if(summary_field[1])
                                     duplicates[1] = [0,_aFs_,duplicates[1]];
                                    else
                                     {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                                      summary_field[1] = [0,fvalue]}
                                  else
                                   if(subcommands_field[1])
                                    duplicates[1] = [0,_aFs_,duplicates[1]];
                                   else
                                    {var
                                      fvalue$0=
                                       caml_call2
                                        (_Lw_,
                                         caml_call2(_xN_[10],t_of_sexp$32,t_of_sexp$103),
                                         field_sexp);
                                     subcommands_field[1] = [0,fvalue$0]}
                                 else
                                  if(readme_field[1])
                                   duplicates[1] = [0,_aFs_,duplicates[1]];
                                  else
                                   {var fvalue$1=caml_call1(t_of_sexp$32,field_sexp);
                                    readme_field[1] = [0,fvalue$1]}
                                 var param=tail;
                                 continue}}}}
                         caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$41,_aFo_)}
                       if(duplicates[1])
                        var
                         v0$2=
                          caml_call3
                           (Sexplib0_Sexp_conv_error[11],tp_loc$41,duplicates[1],v0$1);
                       else
                        if(extra[1])
                         var
                          v0$2=
                           caml_call3
                            (Sexplib0_Sexp_conv_error[12],tp_loc$41,extra[1],v0$1);
                        else
                         {var
                           _aFt_=summary_field[1],
                           _aFv_=subcommands_field[1],
                           _aFu_=readme_field[1];
                          if(_aFt_)
                           if(_aFv_)
                            var
                             subcommands_value=_aFv_[1],
                             summary_value=_aFt_[1],
                             v0$2=[0,summary_value,_aFu_,subcommands_value],
                             switch$8=1;
                           else
                            var switch$8=0;
                          else
                           var switch$8=0;
                          if(! switch$8)
                           var
                            v0$2=
                             caml_call3
                              (Sexplib0_Sexp_conv_error[14],
                               tp_loc$41,
                               v0$1,
                               [0,
                                [0,0 === summary_field[1]?1:0,cst_summary$4],
                                [0,[0,0 === subcommands_field[1]?1:0,cst_subcommands$0],0]])}
                       break}}
                   return [1,v0$2]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],tp_loc$46,_aFJ_,sexp)}}
            else
             var switch$5=1;
            if(switch$5)
             {var sexp_args$1=_aFH_[2];
              if(sexp_args$1)
               if(! sexp_args$1[2])
                {var v0$3=sexp_args$1[1];
                 if(0 === v0$3[0])
                  var
                   v0$4=
                    caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$43,v0$3);
                 else
                  {var
                    field_sexps$0=v0$3[1],
                    summary_field$0=[0,0],
                    readme_field$0=[0,0],
                    working_dir_field=[0,0],
                    path_to_exe_field=[0,0],
                    child_subcommand_field=[0,0],
                    duplicates$0=[0,0],
                    extra$0=[0,0],
                    param$0=field_sexps$0;
                   for(;;)
                    {if(param$0)
                      {var _aFw_=param$0[1];
                       if(1 === _aFw_[0])
                        {var _aFx_=_aFw_[1];
                         if(_aFx_)
                          {var _aFy_=_aFx_[1];
                           if(0 === _aFy_[0])
                            {var _aFz_=_aFx_[2],_aFA_=_aFy_[1];
                             if(! _aFz_)
                              {var tail$2=param$0[2];
                               if(Sexplib0_Sexp_conv[26][1])
                                extra$0[1] = [0,_aFA_,extra$0[1]];
                               var param$0=tail$2;
                               continue}
                             if(! _aFz_[2])
                              {var tail$1=param$0[2],field_sexp$0=_aFz_[1];
                               if(caml_string_notequal(_aFA_,cst_child_subcommand))
                                if(caml_string_notequal(_aFA_,cst_path_to_exe))
                                 if(caml_string_notequal(_aFA_,cst_readme$3))
                                  if(caml_string_notequal(_aFA_,cst_summary$7))
                                   if(caml_string_notequal(_aFA_,cst_working_dir))
                                    {if(Sexplib0_Sexp_conv[26][1])
                                      extra$0[1] = [0,_aFA_,extra$0[1]]}
                                   else
                                    if(working_dir_field[1])
                                     duplicates$0[1] = [0,_aFA_,duplicates$0[1]];
                                    else
                                     {var fvalue$2=caml_call1(t_of_sexp$32,field_sexp$0);
                                      working_dir_field[1] = [0,fvalue$2]}
                                  else
                                   if(summary_field$0[1])
                                    duplicates$0[1] = [0,_aFA_,duplicates$0[1]];
                                   else
                                    {var fvalue$3=caml_call1(t_of_sexp$32,field_sexp$0);
                                     summary_field$0[1] = [0,fvalue$3]}
                                 else
                                  if(readme_field$0[1])
                                   duplicates$0[1] = [0,_aFA_,duplicates$0[1]];
                                  else
                                   {var fvalue$4=caml_call1(t_of_sexp$32,field_sexp$0);
                                    readme_field$0[1] = [0,fvalue$4]}
                                else
                                 if(path_to_exe_field[1])
                                  duplicates$0[1] = [0,_aFA_,duplicates$0[1]];
                                 else
                                  {var fvalue$5=caml_call1(t_of_sexp$32,field_sexp$0);
                                   path_to_exe_field[1] = [0,fvalue$5]}
                               else
                                if(child_subcommand_field[1])
                                 duplicates$0[1] = [0,_aFA_,duplicates$0[1]];
                                else
                                 {var fvalue$6=caml_call2(_pe_,t_of_sexp$32,field_sexp$0);
                                  child_subcommand_field[1] = [0,fvalue$6]}
                               var param$0=tail$1;
                               continue}}}}
                       caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$43,_aFw_)}
                     if(duplicates$0[1])
                      var
                       v0$4=
                        caml_call3
                         (Sexplib0_Sexp_conv_error[11],
                          tp_loc$43,
                          duplicates$0[1],
                          v0$3);
                     else
                      if(extra$0[1])
                       var
                        v0$4=
                         caml_call3
                          (Sexplib0_Sexp_conv_error[12],tp_loc$43,extra$0[1],v0$3);
                      else
                       {var
                         _aFB_=summary_field$0[1],
                         _aFD_=working_dir_field[1],
                         _aFE_=path_to_exe_field[1],
                         _aFF_=child_subcommand_field[1],
                         _aFC_=readme_field$0[1];
                        if(_aFB_)
                         if(_aFD_)
                          if(_aFE_)
                           if(_aFF_)
                            var
                             child_subcommand_value=_aFF_[1],
                             path_to_exe_value=_aFE_[1],
                             working_dir_value=_aFD_[1],
                             summary_value$0=_aFB_[1],
                             v0$4=
                              [0,
                               summary_value$0,
                               _aFC_,
                               working_dir_value,
                               path_to_exe_value,
                               child_subcommand_value],
                             switch$9=1;
                           else
                            var switch$9=0;
                          else
                           var switch$9=0;
                         else
                          var switch$9=0;
                        else
                         var switch$9=0;
                        if(! switch$9)
                         var
                          v0$4=
                           caml_call3
                            (Sexplib0_Sexp_conv_error[14],
                             tp_loc$43,
                             v0$3,
                             [0,
                              [0,0 === summary_field$0[1]?1:0,cst_summary$8],
                              [0,
                               [0,0 === working_dir_field[1]?1:0,cst_working_dir$0],
                               [0,
                                [0,0 === path_to_exe_field[1]?1:0,cst_path_to_exe$0],
                                [0,
                                 [0,
                                  0 === child_subcommand_field[1]?1:0,
                                  cst_child_subcommand$0],
                                 0]]]])}
                     break}}
                 return [2,v0$4]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],tp_loc$46,_aFJ_,sexp)}}
          else
           var switch$4=0;
          if(! switch$4)
           {var sexp_args$2=_aFH_[2];
            if(sexp_args$2)
             if(! sexp_args$2[2])
              {var v0$5=sexp_args$2[1],v0$6=t_of_sexp$101(v0$5);
               return [0,v0$6]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$46,_aFJ_,sexp)}}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$46,sexp)});
    function sexp_of_t$122(param)
     {switch(param[0])
       {case 0:
         var v0$1=param[1],v0$2=sexp_of_t$120(v0$1);
         return [1,[0,_awK_,[0,v0$2,0]]];
        case 1:
         var
          v0$3=param[1],
          v_subcommands=v0$3[3],
          v_readme=v0$3[2],
          v_summary=v0$3[1],
          arg=
           caml_call2
            (_Lx_,
             caml_call2(_xN_[11],sexp_of_t$40,sexp_of_t$122),
             v_subcommands),
          bnds=[0,[1,[0,_aws_,[0,arg,0]]],0];
         if(v_readme)
          var
           v=v_readme[1],
           arg$0=caml_call1(sexp_of_t$40,v),
           bnd=[1,[0,_awt_,[0,arg$0,0]]],
           bnds$0=[0,bnd,bnds];
         else
          var bnds$0=bnds;
         var
          arg$1=caml_call1(sexp_of_t$40,v_summary),
          bnds$1=[0,[1,[0,_awu_,[0,arg$1,0]]],bnds$0],
          v0=[1,bnds$1];
         return [1,[0,_awL_,[0,v0,0]]];
        case 2:
         var
          v0$4=param[1],
          v_child_subcommand=v0$4[5],
          v_path_to_exe=v0$4[4],
          v_working_dir=v0$4[3],
          v_readme$0=v0$4[2],
          v_summary$0=v0$4[1],
          arg$2=caml_call2(_pf_,sexp_of_t$40,v_child_subcommand),
          bnds$2=[0,[1,[0,_awy_,[0,arg$2,0]]],0],
          arg$3=caml_call1(sexp_of_t$40,v_path_to_exe),
          bnds$3=[0,[1,[0,_awz_,[0,arg$3,0]]],bnds$2],
          arg$4=caml_call1(sexp_of_t$40,v_working_dir),
          bnds$4=[0,[1,[0,_awA_,[0,arg$4,0]]],bnds$3];
         if(v_readme$0)
          var
           v$0=v_readme$0[1],
           arg$5=caml_call1(sexp_of_t$40,v$0),
           bnd$0=[1,[0,_awB_,[0,arg$5,0]]],
           bnds$5=[0,bnd$0,bnds$4];
         else
          var bnds$5=bnds$4;
         var
          arg$6=caml_call1(sexp_of_t$40,v_summary$0),
          bnds$6=[0,[1,[0,_awC_,[0,arg$6,0]]],bnds$5],
          v0$0=[1,bnds$6];
         return [1,[0,_awM_,[0,v0$0,0]]];
        default:
         var v0$5=param[1],v0$6=caml_call2(_Lx_,sexp_of_t$122,v0$5);
         return [1,[0,_awN_,[0,v0$6,0]]]}}
    add_version(2);
    var t_of_sexp$104=function _aFn_(_aFm_){return _aFn_.fun(_aFm_)};
    caml_update_dummy
     (t_of_sexp$104,
      function(sexp)
       {if(0 === sexp[0])
         {var _aFi_=sexp[1];
          if(caml_string_notequal(_aFi_,cst_Base$2))
           {if(caml_string_notequal(_aFi_,cst_Exec$1))
             {if(caml_string_notequal(_aFi_,cst_Group$1))
               if(caml_string_notequal(_aFi_,cst_base$1))
                if(caml_string_notequal(_aFi_,cst_exec$1))
                 if(caml_string_notequal(_aFi_,cst_group$1))
                  var switch$0=1,switch$1=0,switch$2=0;
                 else
                  var switch$2=1;
                else
                 var switch$1=1,switch$2=0;
               else
                var switch$0=0,switch$1=0,switch$2=0;
              else
               var switch$2=1;
              if(switch$2)
               return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$47,sexp)}
            else
             var switch$1=1;
            if(switch$1)
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$47,sexp)}
          else
           var switch$0=0;
          if(! switch$0)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$47,sexp)}
        else
         {var _aFj_=sexp[1];
          if(! _aFj_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$47,sexp);
          var _aFk_=_aFj_[1];
          if(0 !== _aFk_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$47,sexp);
          var _aFl_=_aFk_[1];
          if(caml_string_notequal(_aFl_,cst_Base$3))
           {if(caml_string_notequal(_aFl_,cst_Exec$2))
             {if(caml_string_notequal(_aFl_,cst_Group$2))
               if(caml_string_notequal(_aFl_,cst_base$2))
                if(caml_string_notequal(_aFl_,cst_exec$2))
                 if(caml_string_notequal(_aFl_,cst_group$2))
                  var switch$3=1,switch$4=0,switch$5=0;
                 else
                  var switch$5=1;
                else
                 var switch$4=1,switch$5=0;
               else
                var switch$3=0,switch$4=0,switch$5=0;
              else
               var switch$5=1;
              if(switch$5)
               {var sexp_args=_aFj_[2];
                if(sexp_args)
                 if(! sexp_args[2])
                  {var v0=sexp_args[1],v0$0=t_of_sexp$102(t_of_sexp$104,v0);
                   return [1,v0$0]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],tp_loc$47,_aFl_,sexp)}}
            else
             var switch$4=1;
            if(switch$4)
             {var sexp_args$0=_aFj_[2];
              if(sexp_args$0)
               if(! sexp_args$0[2])
                {var v0$1=sexp_args$0[1];
                 if(0 === v0$1[0])
                  var
                   v0$2=
                    caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$44,v0$1);
                 else
                  {var
                    field_sexps=v0$1[1],
                    summary_field=[0,0],
                    readme_field=[0,0],
                    working_dir_field=[0,0],
                    path_to_exe_field=[0,0],
                    duplicates=[0,0],
                    extra=[0,0],
                    param=field_sexps;
                   for(;;)
                    {if(param)
                      {var _aE$_=param[1];
                       if(1 === _aE$_[0])
                        {var _aFa_=_aE$_[1];
                         if(_aFa_)
                          {var _aFb_=_aFa_[1];
                           if(0 === _aFb_[0])
                            {var _aFc_=_aFa_[2],_aFd_=_aFb_[1];
                             if(! _aFc_)
                              {var tail$0=param[2];
                               if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aFd_,extra[1]];
                               var param=tail$0;
                               continue}
                             if(! _aFc_[2])
                              {var tail=param[2],field_sexp=_aFc_[1];
                               if(caml_string_notequal(_aFd_,cst_path_to_exe$1))
                                if(caml_string_notequal(_aFd_,cst_readme$4))
                                 if(caml_string_notequal(_aFd_,cst_summary$9))
                                  if(caml_string_notequal(_aFd_,cst_working_dir$1))
                                   {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aFd_,extra[1]]}
                                  else
                                   if(working_dir_field[1])
                                    duplicates[1] = [0,_aFd_,duplicates[1]];
                                   else
                                    {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                                     working_dir_field[1] = [0,fvalue]}
                                 else
                                  if(summary_field[1])
                                   duplicates[1] = [0,_aFd_,duplicates[1]];
                                  else
                                   {var fvalue$0=caml_call1(t_of_sexp$32,field_sexp);
                                    summary_field[1] = [0,fvalue$0]}
                                else
                                 if(readme_field[1])
                                  duplicates[1] = [0,_aFd_,duplicates[1]];
                                 else
                                  {var fvalue$1=caml_call1(t_of_sexp$32,field_sexp);
                                   readme_field[1] = [0,fvalue$1]}
                               else
                                if(path_to_exe_field[1])
                                 duplicates[1] = [0,_aFd_,duplicates[1]];
                                else
                                 {var fvalue$2=caml_call1(t_of_sexp$32,field_sexp);
                                  path_to_exe_field[1] = [0,fvalue$2]}
                               var param=tail;
                               continue}}}}
                       caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$44,_aE$_)}
                     if(duplicates[1])
                      var
                       v0$2=
                        caml_call3
                         (Sexplib0_Sexp_conv_error[11],tp_loc$44,duplicates[1],v0$1);
                     else
                      if(extra[1])
                       var
                        v0$2=
                         caml_call3
                          (Sexplib0_Sexp_conv_error[12],tp_loc$44,extra[1],v0$1);
                      else
                       {var
                         _aFe_=summary_field[1],
                         _aFg_=working_dir_field[1],
                         _aFh_=path_to_exe_field[1],
                         _aFf_=readme_field[1];
                        if(_aFe_)
                         if(_aFg_)
                          if(_aFh_)
                           var
                            path_to_exe_value=_aFh_[1],
                            working_dir_value=_aFg_[1],
                            summary_value=_aFe_[1],
                            v0$2=
                             [0,summary_value,_aFf_,working_dir_value,path_to_exe_value],
                            switch$6=1;
                          else
                           var switch$6=0;
                         else
                          var switch$6=0;
                        else
                         var switch$6=0;
                        if(! switch$6)
                         var
                          v0$2=
                           caml_call3
                            (Sexplib0_Sexp_conv_error[14],
                             tp_loc$44,
                             v0$1,
                             [0,
                              [0,0 === summary_field[1]?1:0,cst_summary$10],
                              [0,
                               [0,0 === working_dir_field[1]?1:0,cst_working_dir$2],
                               [0,[0,0 === path_to_exe_field[1]?1:0,cst_path_to_exe$2],0]]])}
                     break}}
                 return [2,v0$2]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],tp_loc$47,_aFl_,sexp)}}
          else
           var switch$3=0;
          if(! switch$3)
           {var sexp_args$1=_aFj_[2];
            if(sexp_args$1)
             if(! sexp_args$1[2])
              {var v0$3=sexp_args$1[1],v0$4=t_of_sexp$101(v0$3);
               return [0,v0$4]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$47,_aFl_,sexp)}}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$47,sexp)});
    function sexp_of_t$123(param)
     {switch(param[0])
       {case 0:
         var v0$0=param[1],v0$1=sexp_of_t$120(v0$0);
         return [1,[0,_awO_,[0,v0$1,0]]];
        case 1:
         var v0$2=param[1],v0$3=sexp_of_t$121(sexp_of_t$123,v0$2);
         return [1,[0,_awP_,[0,v0$3,0]]];
        default:
         var
          v0$4=param[1],
          v_path_to_exe=v0$4[4],
          v_working_dir=v0$4[3],
          v_readme=v0$4[2],
          v_summary=v0$4[1],
          arg=caml_call1(sexp_of_t$40,v_path_to_exe),
          bnds=[0,[1,[0,_awD_,[0,arg,0]]],0],
          arg$0=caml_call1(sexp_of_t$40,v_working_dir),
          bnds$0=[0,[1,[0,_awE_,[0,arg$0,0]]],bnds];
         if(v_readme)
          var
           v=v_readme[1],
           arg$1=caml_call1(sexp_of_t$40,v),
           bnd=[1,[0,_awF_,[0,arg$1,0]]],
           bnds$1=[0,bnd,bnds$0];
         else
          var bnds$1=bnds$0;
         var
          arg$2=caml_call1(sexp_of_t$40,v_summary),
          bnds$2=[0,[1,[0,_awG_,[0,arg$2,0]]],bnds$1],
          v0=[1,bnds$2];
         return [1,[0,_awQ_,[0,v0,0]]]}}
    function to_latest$3(param)
     {switch(param[0])
       {case 0:var b=param[1];return [0,b];
        case 1:var g=param[1];return [1,to_latest(map$34(g,to_latest$3))];
        default:var e=param[1];return [2,caml_call1(to_latest$1,e)]}}
    function of_latest$3(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var b=param$0[1];return [0,b];
         case 1:var g=param$0[1];return [1,map$34(of_latest(g),of_latest$3)];
         case 2:var e=param$0[1];return [2,caml_call1(of_latest$1,e)];
         default:
          var
           thunk=param$0[1],
           _aE__=caml_obj_tag(thunk),
           param$1=
            250 === _aE__
             ?thunk[1]
             :246 === _aE__?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    add_version(1);
    var t_of_sexp$105=function _aE9_(_aE8_){return _aE9_.fun(_aE8_)};
    caml_update_dummy
     (t_of_sexp$105,
      function(sexp)
       {if(0 === sexp[0])
         {var _aE4_=sexp[1];
          if(caml_string_notequal(_aE4_,cst_Base$4))
           {if(caml_string_notequal(_aE4_,cst_Exec$3))
             {if(caml_string_notequal(_aE4_,cst_Group$3))
               if(caml_string_notequal(_aE4_,cst_base$3))
                if(caml_string_notequal(_aE4_,cst_exec$3))
                 if(caml_string_notequal(_aE4_,cst_group$3))
                  var switch$0=1,switch$1=0,switch$2=0;
                 else
                  var switch$2=1;
                else
                 var switch$1=1,switch$2=0;
               else
                var switch$0=0,switch$1=0,switch$2=0;
              else
               var switch$2=1;
              if(switch$2)
               return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$48,sexp)}
            else
             var switch$1=1;
            if(switch$1)
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$48,sexp)}
          else
           var switch$0=0;
          if(! switch$0)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$48,sexp)}
        else
         {var _aE5_=sexp[1];
          if(! _aE5_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$48,sexp);
          var _aE6_=_aE5_[1];
          if(0 !== _aE6_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$48,sexp);
          var _aE7_=_aE6_[1];
          if(caml_string_notequal(_aE7_,cst_Base$5))
           {if(caml_string_notequal(_aE7_,cst_Exec$4))
             {if(caml_string_notequal(_aE7_,cst_Group$4))
               if(caml_string_notequal(_aE7_,cst_base$4))
                if(caml_string_notequal(_aE7_,cst_exec$4))
                 if(caml_string_notequal(_aE7_,cst_group$4))
                  var switch$3=1,switch$4=0,switch$5=0;
                 else
                  var switch$5=1;
                else
                 var switch$4=1,switch$5=0;
               else
                var switch$3=0,switch$4=0,switch$5=0;
              else
               var switch$5=1;
              if(switch$5)
               {var sexp_args=_aE5_[2];
                if(sexp_args)
                 if(! sexp_args[2])
                  {var v0=sexp_args[1],v0$0=t_of_sexp$102(t_of_sexp$105,v0);
                   return [1,v0$0]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],tp_loc$48,_aE7_,sexp)}}
            else
             var switch$4=1;
            if(switch$4)
             {var sexp_args$0=_aE5_[2];
              if(sexp_args$0)
               if(! sexp_args$0[2])
                {var v0$1=sexp_args$0[1];
                 if(0 === v0$1[0])
                  var
                   v0$2=
                    caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$45,v0$1);
                 else
                  {var
                    field_sexps$0=v0$1[1],
                    summary_field$0=[0,0],
                    readme_field$0=[0,0],
                    path_to_exe_field=[0,0],
                    duplicates$0=[0,0],
                    extra$0=[0,0],
                    param$0=field_sexps$0;
                   for(;;)
                    {if(param$0)
                      {var _aEW_=param$0[1];
                       if(1 === _aEW_[0])
                        {var _aEX_=_aEW_[1];
                         if(_aEX_)
                          {var _aEY_=_aEX_[1];
                           if(0 === _aEY_[0])
                            {var _aEZ_=_aEX_[2],_aE0_=_aEY_[1];
                             if(! _aEZ_)
                              {var tail$2=param$0[2];
                               if(Sexplib0_Sexp_conv[26][1])
                                extra$0[1] = [0,_aE0_,extra$0[1]];
                               var param$0=tail$2;
                               continue}
                             if(! _aEZ_[2])
                              {var tail$1=param$0[2],field_sexp$0=_aEZ_[1];
                               if(caml_string_notequal(_aE0_,cst_path_to_exe$3))
                                if(caml_string_notequal(_aE0_,cst_readme$5))
                                 if(caml_string_notequal(_aE0_,cst_summary$11))
                                  {if(Sexplib0_Sexp_conv[26][1])
                                    extra$0[1] = [0,_aE0_,extra$0[1]]}
                                 else
                                  if(summary_field$0[1])
                                   duplicates$0[1] = [0,_aE0_,duplicates$0[1]];
                                  else
                                   {var fvalue$3=caml_call1(t_of_sexp$32,field_sexp$0);
                                    summary_field$0[1] = [0,fvalue$3]}
                                else
                                 if(readme_field$0[1])
                                  duplicates$0[1] = [0,_aE0_,duplicates$0[1]];
                                 else
                                  {var fvalue$4=caml_call1(t_of_sexp$32,field_sexp$0);
                                   readme_field$0[1] = [0,fvalue$4]}
                               else
                                if(path_to_exe_field[1])
                                 duplicates$0[1] = [0,_aE0_,duplicates$0[1]];
                                else
                                 {var fvalue$5=caml_call1(t_of_sexp$32,field_sexp$0);
                                  path_to_exe_field[1] = [0,fvalue$5]}
                               var param$0=tail$1;
                               continue}}}}
                       caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$45,_aEW_)}
                     if(duplicates$0[1])
                      var
                       v0$2=
                        caml_call3
                         (Sexplib0_Sexp_conv_error[11],
                          tp_loc$45,
                          duplicates$0[1],
                          v0$1);
                     else
                      if(extra$0[1])
                       var
                        v0$2=
                         caml_call3
                          (Sexplib0_Sexp_conv_error[12],tp_loc$45,extra$0[1],v0$1);
                      else
                       {var
                         _aE1_=summary_field$0[1],
                         _aE3_=path_to_exe_field[1],
                         _aE2_=readme_field$0[1];
                        if(_aE1_)
                         if(_aE3_)
                          var
                           path_to_exe_value=_aE3_[1],
                           summary_value$0=_aE1_[1],
                           v0$2=[0,summary_value$0,_aE2_,path_to_exe_value],
                           switch$6=1;
                         else
                          var switch$6=0;
                        else
                         var switch$6=0;
                        if(! switch$6)
                         var
                          v0$2=
                           caml_call3
                            (Sexplib0_Sexp_conv_error[14],
                             tp_loc$45,
                             v0$1,
                             [0,
                              [0,0 === summary_field$0[1]?1:0,cst_summary$12],
                              [0,[0,0 === path_to_exe_field[1]?1:0,cst_path_to_exe$4],0]])}
                     break}}
                 return [2,v0$2]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],tp_loc$48,_aE7_,sexp)}}
          else
           var switch$3=0;
          if(! switch$3)
           {var sexp_args$1=_aE5_[2];
            if(sexp_args$1)
             if(! sexp_args$1[2])
              {var v0$3=sexp_args$1[1];
               if(0 === v0$3[0])
                var
                 v0$4=
                  caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$40,v0$3);
               else
                {var
                  field_sexps=v0$3[1],
                  summary_field=[0,0],
                  readme_field=[0,0],
                  usage_field=[0,0],
                  flags_field=[0,0],
                  duplicates=[0,0],
                  extra=[0,0],
                  param=field_sexps;
                 for(;;)
                  {if(param)
                    {var _aEN_=param[1];
                     if(1 === _aEN_[0])
                      {var _aEO_=_aEN_[1];
                       if(_aEO_)
                        {var _aEP_=_aEO_[1];
                         if(0 === _aEP_[0])
                          {var _aEQ_=_aEO_[2],_aER_=_aEP_[1];
                           if(! _aEQ_)
                            {var tail$0=param[2];
                             if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aER_,extra[1]];
                             var param=tail$0;
                             continue}
                           if(! _aEQ_[2])
                            {var tail=param[2],field_sexp=_aEQ_[1];
                             if(caml_string_notequal(_aER_,cst_flags$1))
                              if(caml_string_notequal(_aER_,cst_readme$0))
                               if(caml_string_notequal(_aER_,cst_summary$1))
                                if(caml_string_notequal(_aER_,cst_usage$1))
                                 {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aER_,extra[1]]}
                                else
                                 if(usage_field[1])
                                  duplicates[1] = [0,_aER_,duplicates[1]];
                                 else
                                  {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                                   usage_field[1] = [0,fvalue]}
                               else
                                if(summary_field[1])
                                 duplicates[1] = [0,_aER_,duplicates[1]];
                                else
                                 {var fvalue$0=caml_call1(t_of_sexp$32,field_sexp);
                                  summary_field[1] = [0,fvalue$0]}
                              else
                               if(readme_field[1])
                                duplicates[1] = [0,_aER_,duplicates[1]];
                               else
                                {var fvalue$1=caml_call1(t_of_sexp$32,field_sexp);
                                 readme_field[1] = [0,fvalue$1]}
                             else
                              if(flags_field[1])
                               duplicates[1] = [0,_aER_,duplicates[1]];
                              else
                               {var fvalue$2=caml_call2(_pe_,t_of_sexp$99,field_sexp);
                                flags_field[1] = [0,fvalue$2]}
                             var param=tail;
                             continue}}}}
                     caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$40,_aEN_)}
                   if(duplicates[1])
                    var
                     v0$4=
                      caml_call3
                       (Sexplib0_Sexp_conv_error[11],tp_loc$40,duplicates[1],v0$3);
                   else
                    if(extra[1])
                     var
                      v0$4=
                       caml_call3
                        (Sexplib0_Sexp_conv_error[12],tp_loc$40,extra[1],v0$3);
                    else
                     {var
                       _aES_=summary_field[1],
                       _aEU_=usage_field[1],
                       _aEV_=flags_field[1],
                       _aET_=readme_field[1];
                      if(_aES_)
                       if(_aEU_)
                        if(_aEV_)
                         var
                          flags_value=_aEV_[1],
                          usage_value=_aEU_[1],
                          summary_value=_aES_[1],
                          v0$4=[0,summary_value,_aET_,usage_value,flags_value],
                          switch$7=1;
                        else
                         var switch$7=0;
                       else
                        var switch$7=0;
                      else
                       var switch$7=0;
                      if(! switch$7)
                       var
                        v0$4=
                         caml_call3
                          (Sexplib0_Sexp_conv_error[14],
                           tp_loc$40,
                           v0$3,
                           [0,
                            [0,0 === summary_field[1]?1:0,cst_summary$2],
                            [0,
                             [0,0 === usage_field[1]?1:0,cst_usage$2],
                             [0,[0,0 === flags_field[1]?1:0,cst_flags$2],0]]])}
                   break}}
               return [0,v0$4]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$48,_aE7_,sexp)}}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$48,sexp)});
    function sexp_of_t$124(param)
     {switch(param[0])
       {case 0:
         var
          v0$1=param[1],
          v_flags=v0$1[4],
          v_usage=v0$1[3],
          v_readme=v0$1[2],
          v_summary=v0$1[1],
          arg=caml_call2(_pf_,sexp_of_t$118,v_flags),
          bnds=[0,[1,[0,_av__,[0,arg,0]]],0],
          arg$0=caml_call1(sexp_of_t$40,v_usage),
          bnds$0=[0,[1,[0,_av$_,[0,arg$0,0]]],bnds];
         if(v_readme)
          var
           v=v_readme[1],
           arg$1=caml_call1(sexp_of_t$40,v),
           bnd=[1,[0,_awa_,[0,arg$1,0]]],
           bnds$1=[0,bnd,bnds$0];
         else
          var bnds$1=bnds$0;
         var
          arg$2=caml_call1(sexp_of_t$40,v_summary),
          bnds$2=[0,[1,[0,_awb_,[0,arg$2,0]]],bnds$1],
          v0=[1,bnds$2];
         return [1,[0,_awR_,[0,v0,0]]];
        case 1:
         var v0$2=param[1],v0$3=sexp_of_t$121(sexp_of_t$124,v0$2);
         return [1,[0,_awS_,[0,v0$3,0]]];
        default:
         var
          v0$4=param[1],
          v_path_to_exe=v0$4[3],
          v_readme$0=v0$4[2],
          v_summary$0=v0$4[1],
          arg$3=caml_call1(sexp_of_t$40,v_path_to_exe),
          bnds$3=[0,[1,[0,_awH_,[0,arg$3,0]]],0];
         if(v_readme$0)
          var
           v$0=v_readme$0[1],
           arg$4=caml_call1(sexp_of_t$40,v$0),
           bnd$0=[1,[0,_awI_,[0,arg$4,0]]],
           bnds$4=[0,bnd$0,bnds$3];
         else
          var bnds$4=bnds$3;
         var
          arg$5=caml_call1(sexp_of_t$40,v_summary$0),
          bnds$5=[0,[1,[0,_awJ_,[0,arg$5,0]]],bnds$4],
          v0$0=[1,bnds$5];
         return [1,[0,_awT_,[0,v0$0,0]]]}}
    function to_latest$4(param)
     {switch(param[0])
       {case 0:
         var b=param[1],flags=b[4],usage=b[3],readme=b[2],summary=b[1];
         return [0,[0,summary,readme,[0,usage],flags]];
        case 1:var g=param[1];return [1,to_latest(map$34(g,to_latest$4))];
        default:var e=param[1];return [2,caml_call1(to_latest$2,e)]}}
    function of_latest$4(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:
          var b=param$0[1],flags=b[4],anons=b[3],readme=b[2],summary=b[1];
          if(0 === anons[0])
           var usage$0=anons[1],usage$1=usage$0;
          else
           var grammar=anons[1],usage$1=usage(grammar);
          return [0,[0,summary,readme,usage$1,flags]];
         case 1:var g=param$0[1];return [1,map$34(of_latest(g),of_latest$4)];
         case 2:var e=param$0[1];return [2,caml_call1(of_latest$2,e)];
         default:
          var
           thunk=param$0[1],
           _aEM_=caml_obj_tag(thunk),
           param$1=
            250 === _aEM_
             ?thunk[1]
             :246 === _aEM_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    function t_of_sexp$106(sexp)
     {if(0 === sexp[0])
       {var _aEI_=sexp[1];
        if(caml_string_notequal(_aEI_,cst_V1))
         {if(caml_string_notequal(_aEI_,cst_V2))
           {if(caml_string_notequal(_aEI_,cst_V3))
             if(caml_string_notequal(_aEI_,cst_v1))
              if(caml_string_notequal(_aEI_,cst_v2))
               if(caml_string_notequal(_aEI_,cst_v3))
                var switch$0=1,switch$1=0,switch$2=0;
               else
                var switch$2=1;
              else
               var switch$1=1,switch$2=0;
             else
              var switch$0=0,switch$1=0,switch$2=0;
            else
             var switch$2=1;
            if(switch$2)
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$49,sexp)}
          else
           var switch$1=1;
          if(switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$49,sexp)}
        else
         var switch$0=0;
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$49,sexp)}
      else
       {var _aEJ_=sexp[1];
        if(! _aEJ_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$49,sexp);
        var _aEK_=_aEJ_[1];
        if(0 !== _aEK_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$49,sexp);
        var _aEL_=_aEK_[1];
        if(caml_string_notequal(_aEL_,cst_V1$0))
         {if(caml_string_notequal(_aEL_,cst_V2$0))
           {if(caml_string_notequal(_aEL_,cst_V3$0))
             if(caml_string_notequal(_aEL_,cst_v1$0))
              if(caml_string_notequal(_aEL_,cst_v2$0))
               if(caml_string_notequal(_aEL_,cst_v3$0))
                var switch$3=1,switch$4=0,switch$5=0;
               else
                var switch$5=1;
              else
               var switch$4=1,switch$5=0;
             else
              var switch$3=0,switch$4=0,switch$5=0;
            else
             var switch$5=1;
            if(switch$5)
             {var sexp_args=_aEJ_[2];
              if(sexp_args)
               if(! sexp_args[2])
                {var v0=sexp_args[1],v0$0=caml_call1(t_of_sexp$103,v0);
                 return [2,v0$0]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],tp_loc$49,_aEL_,sexp)}}
          else
           var switch$4=1;
          if(switch$4)
           {var sexp_args$0=_aEJ_[2];
            if(sexp_args$0)
             if(! sexp_args$0[2])
              {var v0$1=sexp_args$0[1],v0$2=caml_call1(t_of_sexp$104,v0$1);
               return [1,v0$2]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$49,_aEL_,sexp)}}
        else
         var switch$3=0;
        if(! switch$3)
         {var sexp_args$1=_aEJ_[2];
          if(sexp_args$1)
           if(! sexp_args$1[2])
            {var v0$3=sexp_args$1[1],v0$4=caml_call1(t_of_sexp$105,v0$3);
             return [0,v0$4]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$49,_aEL_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$49,sexp)}
    function to_latest$5(param)
     {switch(param[0])
       {case 0:var t=param[1];return to_latest$4(t);
        case 1:var t$0=param[1];return to_latest$3(t$0);
        default:var t$1=param[1];return t$1}}
    var
     _awY_=caml_call1(to_list$17,supported_versions),
     supported_versions$0=caml_call1(Set$4[57],_awY_);
    function sexpable_of_proxy_kind(kind)
     {switch(kind[0])
       {case 0:var base=kind[1];return [0,base];
        case 1:
         var
          group=kind[1],
          _aEE_=
           function(param)
            {var proxy=param[2],str=param[1];
             return [0,str,sexpable_of_proxy_kind(proxy[5])]},
          _aEF_=function(_aEH_){return caml_call2(_qg_,_aEH_,_aEE_)},
          _aEG_=caml_call2(_LD_,group[3],_aEF_);
         return [1,[0,group[1],group[2],_aEG_]];
        case 2:var exec=kind[1];return [2,exec];
        default:
         var thunk=kind[1];
         return [3,caml_call2(_LD_,thunk,sexpable_of_proxy_kind)]}}
    function to_sexpable$3(param)
     {switch(param[0])
       {case 0:var base=param[1];return [0,to_sexpable$0(base)];
        case 1:
         var group=param[1];return [1,to_sexpable$1(to_sexpable$3,group)];
        case 2:var exec=param[1];return [2,to_sexpable$2(exec)];
        case 3:var proxy=param[1];return sexpable_of_proxy_kind(proxy[5]);
        default:
         var thunk=param[1];return [3,caml_call2(_LD_,thunk,to_sexpable$3)]}}
    function get_summary$0(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var base=param$0[1];return base[1];
         case 1:var group=param$0[1];return group[1];
         case 2:var exec=param$0[1];return exec[1];
         case 3:var proxy=param$0[1];return get_summary(proxy);
         default:
          var
           thunk=param$0[1],
           _aED_=caml_obj_tag(thunk),
           param$1=
            250 === _aED_
             ?thunk[1]
             :246 === _aED_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    function extend_exn(mem,add,map,key_type,key,data)
     {if(caml_call2(mem,map,key))
       caml_call4(_Pg_,_awZ_,to_string$34(key_type),key,0);
      return caml_call3(add,map,key,data)}
    function extend_alist_exn(alist,key_type,key,data)
     {function _aEC_(alist,key,data)
       {return caml_call4(_xN_[12],alist,equal$17,key,data)}
      return extend_exn
              (function(alist,key)
                {return caml_call3(_xN_[15],alist,equal$17,key)},
               _aEC_,
               alist,
               key_type,
               key,
               data)}
    function add$16(base,name,aliases,text,text_summary)
     {var flags$0=base[3],_aEy_=-481604174;
      function _aEz_(_aEB_){return 0}
      var
       _aEA_=caml_call2(_fE_,_aw0_,text_summary),
       data=
        [0,
         name,
         aliases,
         [0,
          function(env){caml_call1(_GJ_,caml_call1(text,env));return exit(0)}],
         _aEA_,
         at_most_once,
         _aEz_,
         _aEy_],
       flags=extend_exn(mem$3,set$2,flags$0,1,name,data);
      return [0,base[1],base[2],flags,base[4],base[5]]}
    function basic(summary,readme,param,main)
     {var
       flags=param[3],
       usage=param[2],
       f=param[1],
       flags$0=caml_call1(flags,0),
       usage$0=caml_call1(usage,0);
      function anons(param)
       {function _aEx_(k,param)
         {var thunk=caml_call1(k,main);
          return function(param){return caml_call1(thunk,0)}}
        return symbol_map$1(caml_call1(f,0),_aEx_)}
      var
       flags$1=create$42(flags$0),
       base=[0,summary,readme,flags$1,anons,usage$0],
       base$0=
        add$16
         (base,
          cst_help$7,
          _aw1_,
          function(env)
           {var
             _aEv_=caml_call2(find_exn$9,env,help_key),
             _aEw_=caml_obj_tag(_aEv_);
            return 250 === _aEw_
                    ?_aEv_[1]
                    :246 === _aEw_?caml_call1(CamlinternalLazy[2],_aEv_):_aEv_},
          cst_this_help_text);
      return [0,base$0]}
    var subs_key=key_create(cst_subcommands$3);
    function lazy_group(summary,readme,preserve_subcommand_order,body,alist)
     {var
       subcommands=
        caml_call2
         (_LD_,
          alist,
          function(alist)
           {var
             alist$0=
              caml_call2
               (_qg_,
                alist,
                function(param)
                 {var t=param[2],name=param[1];
                  return [0,normalize$2(0,name),t]}),
             match=caml_call1(Map$1[6],alist$0);
            if(17724 <= match[1])
             {var map=match[2];
              return preserve_subcommand_order
                      ?alist$0
                      :caml_call2(to_alist$1,0,map)}
            var name=match[2];
            return caml_call3(_Pg_,_aw2_,name,0)});
      return [1,[0,summary,readme,subcommands,body]]}
    function group$135(summary,readme,preserve_subcommand_order,body,alist)
     {return lazy_group
              (summary,
               readme,
               preserve_subcommand_order,
               body,
               caml_call1(_LM_,alist))}
    function exec(summary,readme,opt,path_to_exe,param)
     {if(opt)var sth=opt[1],child_subcommand=sth;else var child_subcommand=0;
      var
       _aEu_=
        -310138871 <= path_to_exe[1]
         ?Stdlib_sys[2]
         :caml_check_bound(Stdlib_sys[1],0)[1],
       working_dir=dirname(_aEu_);
      if(491227799 <= path_to_exe[1])
       var
        p=path_to_exe[2],
        p$0=
         is_absolute(p)
          ?p
          :caml_call1(_Gg_,cst_Path_passed_to_Absolute_must_be_absolute),
        path_to_exe$0=p$0;
      else
       var
        p$1=path_to_exe[2],
        p$2=
         caml_call1(_auv_,p$1)
          ?p$1
          :caml_call1(_Gg_,cst_Path_passed_to_Relative_to_me_must_be_relative),
        path_to_exe$0=p$2;
      return [2,[0,summary,readme,working_dir,path_to_exe$0,child_subcommand]]}
    function of_lazy(thunk){return [4,thunk]}
    var
     _aw3_=
      [0,
       [0,cst_name$5,bin_shape_string],
       [0,
        [0,cst_doc$1,bin_shape_string],
        [0,[0,cst_aliases$1,bin_shape_list(bin_shape_string)],0]]],
     _aw4_=caml_call1(Bin_prot_Shape[8],_aw3_),
     _aw5_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$237),0,_aw4_],0],
     _aw6_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_ml_2134_4),
     group$136=caml_call2(Bin_prot_Shape[6],_aw6_,_aw5_),
     _aw7_=caml_call1(Bin_prot_Shape[2][1],cst_t$238),
     bin_shape_t$120=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$136,_aw7_),0);
    function bin_size_t$83(param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aEr_=caml_call1(bin_size_t$42,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aEr_),
       _aEs_=caml_call1(bin_size_t$42,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aEs_),
       _aEt_=bin_size_list(bin_size_t$42,v3);
      return caml_call2(Bin_prot_Common[23],size$0,_aEt_)}
    function bin_write_t$84(buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$42,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$42,buf,pos$0,v2);
      return bin_write_list(bin_write_t$42,buf,pos$1,v3)}
    var bin_writer_t$105=[0,bin_size_t$83,bin_write_t$84];
    function bin_read_t$166(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_command_ml_Shape_Flag_info_t,
               pos_ref[1])}
    function bin_read_t$167(buf,pos_ref)
     {var
       v_name=caml_call2(bin_read_t$86,buf,pos_ref),
       v_doc=caml_call2(bin_read_t$86,buf,pos_ref),
       v_aliases=bin_read_list$0(bin_read_t$86,buf,pos_ref);
      return [0,v_name,v_doc,v_aliases]}
    var
     bin_reader_t$105=[0,bin_read_t$167,bin_read_t$166],
     bin_t$105=[0,bin_shape_t$120,bin_writer_t$105,bin_reader_t$105];
    function compare$85(a_039,b_040)
     {if(caml_call2(Ppx_compare_lib[1],a_039,b_040))return 0;
      var n=caml_call2(compare$28,a_039[1],b_040[1]);
      if(0 === n)
       {var n$0=caml_call2(compare$28,a_039[2],b_040[2]);
        return 0 === n$0
                ?caml_call3(compare_sexp_list,compare$28,a_039[3],b_040[3])
                :n$0}
      return n}
    function aliases(r){return r[3]}
    function doc(r){return r[2]}
    function name$68(r){return r[1]}
    function _aw8_(r,v){return [0,r[1],r[2],v]}
    var
     _aw9_=0,
     aliases$0=[0,function(param){return 0},cst_aliases$2,_aw9_,aliases,_aw8_];
    function _aw__(r,v){return [0,r[1],v,r[3]]}
    var _aw$_=0,doc$0=[0,function(param){return 0},cst_doc$2,_aw$_,doc,_aw__];
    function _axa_(r,v){return [0,v,r[2],r[3]]}
    var
     _axb_=0,
     name$69=[0,function(param){return 0},cst_name$6,_axb_,name$68,_axa_];
    function make_creator$1(name_fun,doc_fun,aliases_fun,compile_acc)
     {var
       match=caml_call2(name_fun,name$69,compile_acc),
       compile_acc$0=match[2],
       name_gen=match[1],
       match$0=caml_call2(doc_fun,doc$0,compile_acc$0),
       compile_acc$1=match$0[2],
       doc_gen=match$0[1],
       match$1=caml_call2(aliases_fun,aliases$0,compile_acc$1),
       compile_acc$2=match$1[2],
       aliases_gen=match$1[1];
      return [0,
              function(acc)
               {var
                 name=caml_call1(name_gen,acc),
                 doc=caml_call1(doc_gen,acc),
                 aliases=caml_call1(aliases_gen,acc);
                return [0,name,doc,aliases]},
              compile_acc$2]}
    function create$44(name,doc,aliases){return [0,name,doc,aliases]}
    function map$35(name_fun,doc_fun,aliases_fun)
     {var
       _aEp_=caml_call1(aliases_fun,aliases$0),
       _aEq_=caml_call1(doc_fun,doc$0);
      return [0,caml_call1(name_fun,name$69),_aEq_,_aEp_]}
    function iter$34(name_fun,doc_fun,aliases_fun)
     {caml_call1(name_fun,name$69);
      caml_call1(doc_fun,doc$0);
      return caml_call1(aliases_fun,aliases$0)}
    function fold$25(init,name_fun,doc_fun,aliases_fun)
     {return caml_call2
              (aliases_fun,
               caml_call2(doc_fun,caml_call2(name_fun,init,name$69),doc$0),
               aliases$0)}
    function map_poly$1(record)
     {var
       _aEn_=[0,caml_call1(record[1],aliases$0),0],
       _aEo_=[0,caml_call1(record[1],doc$0),_aEn_];
      return [0,caml_call1(record[1],name$69),_aEo_]}
    function for_all$20(name_fun,doc_fun,aliases_fun)
     {var
       _aEl_=caml_call1(name_fun,name$69),
       _aEm_=_aEl_?caml_call1(doc_fun,doc$0):_aEl_;
      return _aEm_?caml_call1(aliases_fun,aliases$0):_aEm_}
    function exists$21(name_fun,doc_fun,aliases_fun)
     {var
       _aEk_=caml_call1(name_fun,name$69),
       _aEj_=_aEk_ || caml_call1(doc_fun,doc$0);
      return _aEj_?_aEj_:caml_call1(aliases_fun,aliases$0)}
    function to_list$20(name_fun,doc_fun,aliases_fun)
     {var
       _aEh_=[0,caml_call1(aliases_fun,aliases$0),0],
       _aEi_=[0,caml_call1(doc_fun,doc$0),_aEh_];
      return [0,caml_call1(name_fun,name$69),_aEi_]}
    function iter$35(record,name_fun,doc_fun,aliases_fun)
     {caml_call3(name_fun,name$69,record,record[1]);
      caml_call3(doc_fun,doc$0,record,record[2]);
      return caml_call3(aliases_fun,aliases$0,record,record[3])}
    function fold$26(record,init,name_fun,doc_fun,aliases_fun)
     {var _aEf_=record[3],_aEg_=record[2];
      return caml_call4
              (aliases_fun,
               caml_call4
                (doc_fun,
                 caml_call4(name_fun,init,name$69,record,record[1]),
                 doc$0,
                 record,
                 _aEg_),
               aliases$0,
               record,
               _aEf_)}
    function for_all$21(record,name_fun,doc_fun,aliases_fun)
     {var
       _aEd_=caml_call3(name_fun,name$69,record,record[1]),
       _aEe_=_aEd_?caml_call3(doc_fun,doc$0,record,record[2]):_aEd_;
      return _aEe_?caml_call3(aliases_fun,aliases$0,record,record[3]):_aEe_}
    function exists$22(record,name_fun,doc_fun,aliases_fun)
     {var
       _aEc_=caml_call3(name_fun,name$69,record,record[1]),
       _aEb_=_aEc_ || caml_call3(doc_fun,doc$0,record,record[2]);
      return _aEb_?_aEb_:caml_call3(aliases_fun,aliases$0,record,record[3])}
    function to_list$21(record,name_fun,doc_fun,aliases_fun)
     {var
       _aD$_=[0,caml_call3(aliases_fun,aliases$0,record,record[3]),0],
       _aEa_=[0,caml_call3(doc_fun,doc$0,record,record[2]),_aD$_];
      return [0,caml_call3(name_fun,name$69,record,record[1]),_aEa_]}
    function map$36(record,name_fun,doc_fun,aliases_fun)
     {var
       _aD9_=caml_call3(aliases_fun,aliases$0,record,record[3]),
       _aD__=caml_call3(doc_fun,doc$0,record,record[2]);
      return [0,caml_call3(name_fun,name$69,record,record[1]),_aD__,_aD9_]}
    function set_all_mutable_fields$1(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$1=
      [0,
       iter$35,
       fold$26,
       for_all$21,
       exists$22,
       to_list$21,
       map$36,
       set_all_mutable_fields$1];
    function t_of_sexp$107(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$50,sexp);
      var
       field_sexps=sexp[1],
       name_field=[0,0],
       doc_field=[0,0],
       aliases_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aD1_=param[1];
          if(1 === _aD1_[0])
           {var _aD2_=_aD1_[1];
            if(_aD2_)
             {var _aD3_=_aD2_[1];
              if(0 === _aD3_[0])
               {var _aD4_=_aD2_[2],_aD5_=_aD3_[1];
                if(! _aD4_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aD5_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _aD4_[2])
                 {var tail=param[2],field_sexp=_aD4_[1];
                  if(caml_string_notequal(_aD5_,cst_aliases$3))
                   if(caml_string_notequal(_aD5_,cst_doc$3))
                    if(caml_string_notequal(_aD5_,cst_name$7))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aD5_,extra[1]]}
                    else
                     if(name_field[1])
                      duplicates[1] = [0,_aD5_,duplicates[1]];
                     else
                      {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                       name_field[1] = [0,fvalue]}
                   else
                    if(doc_field[1])
                     duplicates[1] = [0,_aD5_,duplicates[1]];
                    else
                     {var fvalue$0=caml_call1(t_of_sexp$32,field_sexp);
                      doc_field[1] = [0,fvalue$0]}
                  else
                   if(aliases_field[1])
                    duplicates[1] = [0,_aD5_,duplicates[1]];
                   else
                    {var fvalue$1=caml_call2(_pe_,t_of_sexp$32,field_sexp);
                     aliases_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$50,_aD1_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$50,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$50,extra[1],sexp);
        var _aD6_=name_field[1],_aD7_=doc_field[1],_aD8_=aliases_field[1];
        if(_aD6_)
         if(_aD7_)
          if(_aD8_)
           {var aliases_value=_aD8_[1],doc_value=_aD7_[1],name_value=_aD6_[1];
            return [0,name_value,doc_value,aliases_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$50,
                 sexp,
                 [0,
                  [0,0 === name_field[1]?1:0,cst_name$8],
                  [0,
                   [0,0 === doc_field[1]?1:0,cst_doc$4],
                   [0,[0,0 === aliases_field[1]?1:0,cst_aliases$4],0]]])}}
    function sexp_of_t$125(param)
     {var
       v_aliases=param[3],
       v_doc=param[2],
       v_name=param[1],
       arg=caml_call2(_pf_,sexp_of_t$40,v_aliases),
       bnds=[0,[1,[0,_axc_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$40,v_doc),
       bnds$0=[0,[1,[0,_axd_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$40,v_name),
       bnds$1=[0,[1,[0,_axe_,[0,arg$1,0]]],bnds$0];
      return [1,bnds$1]}
    var
     _axf_=caml_call1(Bin_prot_Shape[2][1],cst_grammar$1),
     _axg_=
      [0,
       [0,
        cst_Concat$2,
        [0,
         bin_shape_list(caml_call1(caml_call1(Bin_prot_Shape[13],_axf_),0)),
         0]],
       [0,[0,cst_Ad_hoc$2,[0,bin_shape_string,0]],0]],
     _axh_=caml_call1(Bin_prot_Shape[2][1],cst_grammar$2),
     _axi_=
      [0,
       [0,
        cst_Maybe$2,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_axh_),0),0]],
       _axg_],
     _axj_=caml_call1(Bin_prot_Shape[2][1],cst_grammar$3),
     _axl_=
      [0,
       _axk_,
       [0,
        [0,cst_One$2,[0,bin_shape_string,0]],
        [0,
         [0,
          cst_Many$2,
          [0,caml_call1(caml_call1(Bin_prot_Shape[13],_axj_),0),0]],
         _axi_]]],
     _axm_=caml_call1(Bin_prot_Shape[9],_axl_),
     _axn_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_grammar$4),0,_axm_],0],
     _axo_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_ml_2143_4),
     group$137=caml_call2(Bin_prot_Shape[6],_axo_,_axn_),
     _axp_=caml_call1(Bin_prot_Shape[2][1],cst_grammar$5),
     bin_shape_grammar=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$137,_axp_),0);
    function bin_size_grammar(param)
     {if(typeof param === "number")
       return 1;
      else
       switch(param[0])
        {case 0:
          var v1=param[1],_aDW_=caml_call1(bin_size_t$42,v1);
          return caml_call2(Bin_prot_Common[23],1,_aDW_);
         case 1:
          var v1$0=param[1],_aDX_=bin_size_grammar(v1$0);
          return caml_call2(Bin_prot_Common[23],1,_aDX_);
         case 2:
          var v1$1=param[1],_aDY_=bin_size_grammar(v1$1);
          return caml_call2(Bin_prot_Common[23],1,_aDY_);
         case 3:
          var v1$2=param[1],_aDZ_=bin_size_list(bin_size_grammar,v1$2);
          return caml_call2(Bin_prot_Common[23],1,_aDZ_);
         default:
          var v1$3=param[1],_aD0_=caml_call1(bin_size_t$42,v1$3);
          return caml_call2(Bin_prot_Common[23],1,_aD0_)}}
    function bin_write_grammar(buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return caml_call3(Bin_prot_Write[30],buf,pos$0,0);
       else
        switch(param$0[0])
         {case 0:
           var v1=param$0[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos$0,1);
           return caml_call3(bin_write_t$42,buf,pos$1,v1);
          case 1:
           var
            v1$0=param$0[1],
            pos$2=caml_call3(Bin_prot_Write[30],buf,pos$0,2),
            pos$0=pos$2,
            param$0=v1$0;
           continue;
          case 2:
           var
            v1$1=param$0[1],
            pos$3=caml_call3(Bin_prot_Write[30],buf,pos$0,3),
            pos$0=pos$3,
            param$0=v1$1;
           continue;
          case 3:
           var
            v1$2=param$0[1],
            pos$4=caml_call3(Bin_prot_Write[30],buf,pos$0,4);
           return bin_write_list(bin_write_grammar,buf,pos$4,v1$2);
          default:
           var
            v1$3=param$0[1],
            pos$5=caml_call3(Bin_prot_Write[30],buf,pos$0,5);
           return caml_call3(bin_write_t$42,buf,pos$5,v1$3)}}
    var bin_writer_grammar=[0,bin_size_grammar,bin_write_grammar];
    function bin_read_grammar(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_command_ml_Shape_Base_info_grammar,
               pos_ref[1])}
    function bin_read_grammar$0(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(5 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_axq_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:
         var arg_1=caml_call2(bin_read_t$86,buf,pos_ref);return [0,arg_1];
        case 2:var arg_1$0=bin_read_grammar$0(buf,pos_ref);return [1,arg_1$0];
        case 3:var arg_1$1=bin_read_grammar$0(buf,pos_ref);return [2,arg_1$1];
        case 4:
         var arg_1$3=bin_read_list$0(bin_read_grammar$0,buf,pos_ref);
         return [3,arg_1$3];
        default:
         var arg_1$2=caml_call2(bin_read_t$86,buf,pos_ref);return [4,arg_1$2]}}
    var
     bin_reader_grammar=[0,bin_read_grammar$0,bin_read_grammar],
     bin_grammar=[0,bin_shape_grammar,bin_writer_grammar,bin_reader_grammar];
    function compare_grammar(a_043,b_044)
     {var a_043$0=a_043,b_044$0=b_044;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_043$0,b_044$0))return 0;
        if(typeof a_043$0 === "number")
         return typeof b_044$0 === "number"?0:-1;
        else
         switch(a_043$0[0])
          {case 0:
            var _aDR_=a_043$0[1];
            if(typeof b_044$0 === "number")
             var switch$0=0;
            else
             {if(0 === b_044$0[0])
               {var b_046=b_044$0[1];
                return caml_call2(compare$28,_aDR_,b_046)}
              return -1}
            break;
           case 1:
            var _aDS_=a_043$0[1];
            if(typeof b_044$0 === "number")
             var switch$0=0;
            else
             switch(b_044$0[0])
              {case 0:var switch$0=1;break;
               case 1:
                var b_044$1=b_044$0[1],a_043$0=_aDS_,b_044$0=b_044$1;continue;
               default:return -1}
            break;
           case 2:
            var _aDT_=a_043$0[1];
            if(typeof b_044$0 === "number")
             var switch$0=0;
            else
             switch(b_044$0[0])
              {case 0:var switch$0=1;break;
               case 1:var switch$0=2;break;
               case 2:
                var b_044$2=b_044$0[1],a_043$0=_aDT_,b_044$0=b_044$2;continue;
               default:return -1}
            break;
           case 3:
            var _aDU_=a_043$0[1];
            if(typeof b_044$0 === "number")
             var switch$0=0;
            else
             switch(b_044$0[0])
              {case 0:var switch$0=1;break;
               case 1:var switch$0=2;break;
               case 2:var switch$0=3;break;
               case 3:
                var b_052=b_044$0[1];
                return caml_call3
                        (compare_sexp_list,compare_grammar,_aDU_,b_052);
               default:return -1}
            break;
           default:
            var _aDV_=a_043$0[1];
            if(typeof b_044$0 === "number")
             var switch$0=0;
            else
             switch(b_044$0[0])
              {case 0:var switch$0=1;break;
               case 1:var switch$0=2;break;
               case 2:var switch$0=3;break;
               case 3:return 1;
               default:
                var b_056=b_044$0[1];return caml_call2(compare$28,_aDV_,b_056)}}
        switch(switch$0)
         {case 0:return 1;case 1:return 1;case 2:return 1;default:return 1}}}
    var grammar_of_sexp=function _aDQ_(_aDP_){return _aDQ_.fun(_aDP_)};
    caml_update_dummy
     (grammar_of_sexp,
      function(sexp)
       {if(0 === sexp[0])
         {var
           _aDJ_=sexp[1],
           _aDK_=caml_string_compare(_aDJ_,cst_ad_hoc$1),
           switch$0=
            0 <= _aDK_
             ?0 < _aDK_
               ?caml_string_notequal(_aDJ_,cst_concat$1)
                 ?caml_string_notequal(_aDJ_,cst_many$1)
                   ?caml_string_notequal(_aDJ_,cst_maybe$1)
                     ?caml_string_notequal(_aDJ_,cst_one$1)
                       ?caml_string_notequal(_aDJ_,cst_zero$5)?6:0
                       :1
                     :3
                   :2
                 :4
               :5
             :caml_string_notequal(_aDJ_,cst_Ad_hoc$3)
               ?caml_string_notequal(_aDJ_,cst_Concat$3)
                 ?caml_string_notequal(_aDJ_,cst_Many$3)
                   ?caml_string_notequal(_aDJ_,cst_Maybe$3)
                     ?caml_string_notequal(_aDJ_,cst_One$3)
                       ?caml_string_notequal(_aDJ_,cst_Zero$7)?6:0
                       :1
                     :3
                   :2
                 :4
               :5;
          switch(switch$0)
           {case 0:return 0;
            case 1:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$51,sexp);
            case 2:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$51,sexp);
            case 3:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$51,sexp);
            case 4:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$51,sexp);
            case 5:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$51,sexp)
            }}
        else
         {var _aDL_=sexp[1];
          if(! _aDL_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$51,sexp);
          var _aDM_=_aDL_[1];
          if(0 !== _aDM_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$51,sexp);
          var
           _aDN_=_aDM_[1],
           _aDO_=caml_string_compare(_aDN_,cst_ad_hoc$2),
           switch$1=
            0 <= _aDO_
             ?0 < _aDO_
               ?caml_string_notequal(_aDN_,cst_concat$2)
                 ?caml_string_notequal(_aDN_,cst_many$2)
                   ?caml_string_notequal(_aDN_,cst_maybe$2)
                     ?caml_string_notequal(_aDN_,cst_one$2)
                       ?caml_string_notequal(_aDN_,cst_zero$6)?6:5
                       :0
                     :2
                   :1
                 :3
               :4
             :caml_string_notequal(_aDN_,cst_Ad_hoc$4)
               ?caml_string_notequal(_aDN_,cst_Concat$4)
                 ?caml_string_notequal(_aDN_,cst_Many$4)
                   ?caml_string_notequal(_aDN_,cst_Maybe$4)
                     ?caml_string_notequal(_aDN_,cst_One$4)
                       ?caml_string_notequal(_aDN_,cst_Zero$8)?6:5
                       :0
                     :2
                   :1
                 :3
               :4;
          switch(switch$1)
           {case 0:
             var sexp_args=_aDL_[2];
             if(sexp_args)
              if(! sexp_args[2])
               {var v0=sexp_args[1],v0$0=caml_call1(t_of_sexp$32,v0);
                return [0,v0$0]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$51,_aDN_,sexp);
            case 1:
             var sexp_args$1=_aDL_[2];
             if(sexp_args$1)
              if(! sexp_args$1[2])
               {var v0$3=sexp_args$1[1],v0$4=caml_call1(grammar_of_sexp,v0$3);
                return [1,v0$4]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$51,_aDN_,sexp);
            case 2:
             var sexp_args$0=_aDL_[2];
             if(sexp_args$0)
              if(! sexp_args$0[2])
               {var v0$1=sexp_args$0[1],v0$2=caml_call1(grammar_of_sexp,v0$1);
                return [2,v0$2]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$51,_aDN_,sexp);
            case 3:
             var sexp_args$2=_aDL_[2];
             if(sexp_args$2)
              if(! sexp_args$2[2])
               {var
                 v0$5=sexp_args$2[1],
                 v0$6=caml_call2(_pe_,grammar_of_sexp,v0$5);
                return [3,v0$6]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$51,_aDN_,sexp);
            case 4:
             var sexp_args$3=_aDL_[2];
             if(sexp_args$3)
              if(! sexp_args$3[2])
               {var v0$7=sexp_args$3[1],v0$8=caml_call1(t_of_sexp$32,v0$7);
                return [4,v0$8]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$51,_aDN_,sexp);
            case 5:
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$51,sexp)
            }}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$51,sexp)});
    function sexp_of_grammar(param)
     {if(typeof param === "number")
       return _axr_;
      else
       switch(param[0])
        {case 0:
          var v0=param[1],v0$0=caml_call1(sexp_of_t$40,v0);
          return [1,[0,_axs_,[0,v0$0,0]]];
         case 1:
          var v0$1=param[1],v0$2=sexp_of_grammar(v0$1);
          return [1,[0,_axt_,[0,v0$2,0]]];
         case 2:
          var v0$3=param[1],v0$4=sexp_of_grammar(v0$3);
          return [1,[0,_axu_,[0,v0$4,0]]];
         case 3:
          var v0$5=param[1],v0$6=caml_call2(_pf_,sexp_of_grammar,v0$5);
          return [1,[0,_axv_,[0,v0$6,0]]];
         default:
          var v0$7=param[1],v0$8=caml_call1(sexp_of_t$40,v0$7);
          return [1,[0,_axw_,[0,v0$8,0]]]}}
    var
     _axx_=
      caml_call1
       (Bin_prot_Shape[9],
        [0,
         [0,cst_Usage$1,[0,bin_shape_string,0]],
         [0,[0,cst_Grammar$1,[0,bin_shape_grammar,0]],0]]),
     _axy_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_anons$1),0,_axx_],0],
     _axz_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_ml_2152_4),
     group$138=caml_call2(Bin_prot_Shape[6],_axz_,_axy_),
     _axA_=caml_call1(Bin_prot_Shape[2][1],cst_anons$2),
     bin_shape_anons=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$138,_axA_),0);
    function bin_size_anons(param)
     {if(0 === param[0])
       {var v1=param[1],_aDH_=caml_call1(bin_size_t$42,v1);
        return caml_call2(Bin_prot_Common[23],1,_aDH_)}
      var v1$0=param[1],_aDI_=bin_size_grammar(v1$0);
      return caml_call2(Bin_prot_Common[23],1,_aDI_)}
    function bin_write_anons(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(bin_write_t$42,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return bin_write_grammar(buf,pos$1,v1$0)}
    var bin_writer_anons=[0,bin_size_anons,bin_write_anons];
    function bin_read_anons(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_command_ml_Shape_Base_info_anons,
               pos_ref[1])}
    function bin_read_anons$0(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match)
       {var arg_1=caml_call2(bin_read_t$86,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=bin_read_grammar$0(buf,pos_ref);return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_axB_,pos_ref[1])}
    var
     bin_reader_anons=[0,bin_read_anons$0,bin_read_anons],
     bin_anons=[0,bin_shape_anons,bin_writer_anons,bin_reader_anons];
    function compare_anons(a_057,match)
     {if(caml_call2(Ppx_compare_lib[1],a_057,match))return 0;
      if(0 === a_057[0])
       {var _aDF_=a_057[1];
        if(0 === match[0])
         {var b_060=match[1];return caml_call2(compare$28,_aDF_,b_060)}
        return -1}
      var _aDG_=a_057[1];
      if(0 === match[0])return 1;
      var b_062=match[1];
      return compare_grammar(_aDG_,b_062)}
    function anons_of_sexp(sexp)
     {if(0 === sexp[0])
       {var _aDB_=sexp[1];
        if(caml_string_notequal(_aDB_,cst_Grammar$2))
         {if(caml_string_notequal(_aDB_,cst_Usage$2))
           if(caml_string_notequal(_aDB_,cst_grammar$6))
            if(caml_string_notequal(_aDB_,cst_usage$3))
             var switch$0=1,switch$1=0;
            else
             var switch$1=1;
           else
            var switch$0=0,switch$1=0;
          else
           var switch$1=1;
          if(switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$52,sexp)}
        else
         var switch$0=0;
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$52,sexp)}
      else
       {var _aDC_=sexp[1];
        if(! _aDC_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$52,sexp);
        var _aDD_=_aDC_[1];
        if(0 !== _aDD_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$52,sexp);
        var _aDE_=_aDD_[1];
        if(caml_string_notequal(_aDE_,cst_Grammar$3))
         {if(caml_string_notequal(_aDE_,cst_Usage$3))
           if(caml_string_notequal(_aDE_,cst_grammar$7))
            if(caml_string_notequal(_aDE_,cst_usage$4))
             var switch$2=1,switch$3=0;
            else
             var switch$3=1;
           else
            var switch$2=0,switch$3=0;
          else
           var switch$3=1;
          if(switch$3)
           {var sexp_args=_aDC_[2];
            if(sexp_args)
             if(! sexp_args[2])
              {var v0=sexp_args[1],v0$0=caml_call1(t_of_sexp$32,v0);
               return [0,v0$0]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$52,_aDE_,sexp)}}
        else
         var switch$2=0;
        if(! switch$2)
         {var sexp_args$0=_aDC_[2];
          if(sexp_args$0)
           if(! sexp_args$0[2])
            {var v0$1=sexp_args$0[1],v0$2=caml_call1(grammar_of_sexp,v0$1);
             return [1,v0$2]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$52,_aDE_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$52,sexp)}
    function sexp_of_anons(param)
     {if(0 === param[0])
       {var v0=param[1],v0$0=caml_call1(sexp_of_t$40,v0);
        return [1,[0,_axC_,[0,v0$0,0]]]}
      var v0$1=param[1],v0$2=sexp_of_grammar(v0$1);
      return [1,[0,_axD_,[0,v0$2,0]]]}
    var
     _axE_=
      [0,
       [0,cst_anons$3,bin_shape_anons],
       [0,[0,cst_flags$3,bin_shape_list(bin_shape_t$120)],0]],
     _axF_=
      [0,
       [0,cst_summary$13,bin_shape_string],
       [0,[0,cst_readme$6,bin_shape_option(bin_shape_string)],_axE_]],
     _axG_=caml_call1(Bin_prot_Shape[8],_axF_),
     _axH_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$239),0,_axG_],0],
     _axI_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_ml_2157_4),
     group$139=caml_call2(Bin_prot_Shape[6],_axI_,_axH_),
     _axJ_=caml_call1(Bin_prot_Shape[2][1],cst_t$240),
     bin_shape_t$121=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$139,_axJ_),0);
    function bin_size_t$84(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aDx_=caml_call1(bin_size_t$42,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aDx_),
       _aDy_=bin_size_option(bin_size_t$42,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aDy_),
       _aDz_=bin_size_anons(v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_aDz_),
       _aDA_=bin_size_list(bin_size_t$83,v4);
      return caml_call2(Bin_prot_Common[23],size$1,_aDA_)}
    function bin_write_t$85(buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$42,buf,pos,v1),
       pos$2=bin_write_option(bin_write_t$42,buf,pos$0,v2),
       pos$1=bin_write_anons(buf,pos$2,v3);
      return bin_write_list(bin_write_t$84,buf,pos$1,v4)}
    var bin_writer_t$106=[0,bin_size_t$84,bin_write_t$85];
    function bin_read_t$168(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_command_ml_Shape_Base_info_t,
               pos_ref[1])}
    function bin_read_t$169(buf,pos_ref)
     {var
       v_summary=caml_call2(bin_read_t$86,buf,pos_ref),
       v_readme=bin_read_option$0(bin_read_t$86,buf,pos_ref),
       v_anons=bin_read_anons$0(buf,pos_ref),
       v_flags=bin_read_list$0(bin_read_t$167,buf,pos_ref);
      return [0,v_summary,v_readme,v_anons,v_flags]}
    var
     bin_reader_t$106=[0,bin_read_t$169,bin_read_t$168],
     bin_t$106=[0,bin_shape_t$121,bin_writer_t$106,bin_reader_t$106];
    function compare$86(a_063,b_064)
     {if(caml_call2(Ppx_compare_lib[1],a_063,b_064))return 0;
      var n=caml_call2(compare$28,a_063[1],b_064[1]);
      if(0 === n)
       {var n$0=caml_call3(_xO_,compare$28,a_063[2],b_064[2]);
        if(0 === n$0)
         {var n$1=compare_anons(a_063[3],b_064[3]);
          return 0 === n$1
                  ?caml_call3(compare_sexp_list,compare$85,a_063[4],b_064[4])
                  :n$1}
        return n$0}
      return n}
    function flags(r){return r[4]}
    function anons(r){return r[3]}
    function readme(r){return r[2]}
    function summary(r){return r[1]}
    function _axK_(r,v){return [0,r[1],r[2],r[3],v]}
    var
     _axL_=0,
     flags$0=[0,function(param){return 0},cst_flags$4,_axL_,flags,_axK_];
    function _axM_(r,v){return [0,r[1],r[2],v,r[4]]}
    var
     _axN_=0,
     anons$0=[0,function(param){return 0},cst_anons$4,_axN_,anons,_axM_];
    function _axO_(r,v){return [0,r[1],v,r[3],r[4]]}
    var
     _axP_=0,
     readme$0=[0,function(param){return 0},cst_readme$7,_axP_,readme,_axO_];
    function _axQ_(r,v){return [0,v,r[2],r[3],r[4]]}
    var
     _axR_=0,
     summary$0=
      [0,function(param){return 0},cst_summary$14,_axR_,summary,_axQ_];
    function make_creator$2
     (summary_fun,readme_fun,anons_fun,flags_fun,compile_acc)
     {var
       match=caml_call2(summary_fun,summary$0,compile_acc),
       compile_acc$0=match[2],
       summary_gen=match[1],
       match$0=caml_call2(readme_fun,readme$0,compile_acc$0),
       compile_acc$1=match$0[2],
       readme_gen=match$0[1],
       match$1=caml_call2(anons_fun,anons$0,compile_acc$1),
       compile_acc$2=match$1[2],
       anons_gen=match$1[1],
       match$2=caml_call2(flags_fun,flags$0,compile_acc$2),
       compile_acc$3=match$2[2],
       flags_gen=match$2[1];
      return [0,
              function(acc)
               {var
                 summary=caml_call1(summary_gen,acc),
                 readme=caml_call1(readme_gen,acc),
                 anons=caml_call1(anons_gen,acc),
                 flags=caml_call1(flags_gen,acc);
                return [0,summary,readme,anons,flags]},
              compile_acc$3]}
    function create$45(summary,readme,anons,flags)
     {return [0,summary,readme,anons,flags]}
    function map$37(summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aDu_=caml_call1(flags_fun,flags$0),
       _aDv_=caml_call1(anons_fun,anons$0),
       _aDw_=caml_call1(readme_fun,readme$0);
      return [0,caml_call1(summary_fun,summary$0),_aDw_,_aDv_,_aDu_]}
    function iter$36(summary_fun,readme_fun,anons_fun,flags_fun)
     {caml_call1(summary_fun,summary$0);
      caml_call1(readme_fun,readme$0);
      caml_call1(anons_fun,anons$0);
      return caml_call1(flags_fun,flags$0)}
    function fold$27(init,summary_fun,readme_fun,anons_fun,flags_fun)
     {return caml_call2
              (flags_fun,
               caml_call2
                (anons_fun,
                 caml_call2
                  (readme_fun,caml_call2(summary_fun,init,summary$0),readme$0),
                 anons$0),
               flags$0)}
    function map_poly$2(record)
     {var
       _aDr_=[0,caml_call1(record[1],flags$0),0],
       _aDs_=[0,caml_call1(record[1],anons$0),_aDr_],
       _aDt_=[0,caml_call1(record[1],readme$0),_aDs_];
      return [0,caml_call1(record[1],summary$0),_aDt_]}
    function for_all$22(summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aDo_=caml_call1(summary_fun,summary$0),
       _aDp_=_aDo_?caml_call1(readme_fun,readme$0):_aDo_,
       _aDq_=_aDp_?caml_call1(anons_fun,anons$0):_aDp_;
      return _aDq_?caml_call1(flags_fun,flags$0):_aDq_}
    function exists$23(summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aDn_=caml_call1(summary_fun,summary$0),
       _aDl_=_aDn_ || caml_call1(readme_fun,readme$0),
       _aDm_=_aDl_ || caml_call1(anons_fun,anons$0);
      return _aDm_?_aDm_:caml_call1(flags_fun,flags$0)}
    function to_list$22(summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aDi_=[0,caml_call1(flags_fun,flags$0),0],
       _aDj_=[0,caml_call1(anons_fun,anons$0),_aDi_],
       _aDk_=[0,caml_call1(readme_fun,readme$0),_aDj_];
      return [0,caml_call1(summary_fun,summary$0),_aDk_]}
    function iter$37(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {caml_call3(summary_fun,summary$0,record,record[1]);
      caml_call3(readme_fun,readme$0,record,record[2]);
      caml_call3(anons_fun,anons$0,record,record[3]);
      return caml_call3(flags_fun,flags$0,record,record[4])}
    function fold$28(record,init,summary_fun,readme_fun,anons_fun,flags_fun)
     {var _aDf_=record[4],_aDg_=record[3],_aDh_=record[2];
      return caml_call4
              (flags_fun,
               caml_call4
                (anons_fun,
                 caml_call4
                  (readme_fun,
                   caml_call4(summary_fun,init,summary$0,record,record[1]),
                   readme$0,
                   record,
                   _aDh_),
                 anons$0,
                 record,
                 _aDg_),
               flags$0,
               record,
               _aDf_)}
    function for_all$23(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aDc_=caml_call3(summary_fun,summary$0,record,record[1]),
       _aDd_=_aDc_?caml_call3(readme_fun,readme$0,record,record[2]):_aDc_,
       _aDe_=_aDd_?caml_call3(anons_fun,anons$0,record,record[3]):_aDd_;
      return _aDe_?caml_call3(flags_fun,flags$0,record,record[4]):_aDe_}
    function exists$24(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aDb_=caml_call3(summary_fun,summary$0,record,record[1]),
       _aC$_=_aDb_ || caml_call3(readme_fun,readme$0,record,record[2]),
       _aDa_=_aC$_ || caml_call3(anons_fun,anons$0,record,record[3]);
      return _aDa_?_aDa_:caml_call3(flags_fun,flags$0,record,record[4])}
    function to_list$23(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aC8_=[0,caml_call3(flags_fun,flags$0,record,record[4]),0],
       _aC9_=[0,caml_call3(anons_fun,anons$0,record,record[3]),_aC8_],
       _aC__=[0,caml_call3(readme_fun,readme$0,record,record[2]),_aC9_];
      return [0,caml_call3(summary_fun,summary$0,record,record[1]),_aC__]}
    function map$38(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aC5_=caml_call3(flags_fun,flags$0,record,record[4]),
       _aC6_=caml_call3(anons_fun,anons$0,record,record[3]),
       _aC7_=caml_call3(readme_fun,readme$0,record,record[2]);
      return [0,
              caml_call3(summary_fun,summary$0,record,record[1]),
              _aC7_,
              _aC6_,
              _aC5_]}
    function set_all_mutable_fields$2(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$2=
      [0,
       iter$37,
       fold$28,
       for_all$23,
       exists$24,
       to_list$23,
       map$38,
       set_all_mutable_fields$2];
    function t_of_sexp$108(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$53,sexp);
      var
       field_sexps=sexp[1],
       summary_field=[0,0],
       readme_field=[0,0],
       anons_field=[0,0],
       flags_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aCW_=param[1];
          if(1 === _aCW_[0])
           {var _aCX_=_aCW_[1];
            if(_aCX_)
             {var _aCY_=_aCX_[1];
              if(0 === _aCY_[0])
               {var _aCZ_=_aCX_[2],_aC0_=_aCY_[1];
                if(! _aCZ_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aC0_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _aCZ_[2])
                 {var tail=param[2],field_sexp=_aCZ_[1];
                  if(caml_string_notequal(_aC0_,cst_anons$5))
                   if(caml_string_notequal(_aC0_,cst_flags$5))
                    if(caml_string_notequal(_aC0_,cst_readme$8))
                     if(caml_string_notequal(_aC0_,cst_summary$15))
                      {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aC0_,extra[1]]}
                     else
                      if(summary_field[1])
                       duplicates[1] = [0,_aC0_,duplicates[1]];
                      else
                       {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                        summary_field[1] = [0,fvalue]}
                    else
                     if(readme_field[1])
                      duplicates[1] = [0,_aC0_,duplicates[1]];
                     else
                      {var fvalue$0=caml_call1(t_of_sexp$32,field_sexp);
                       readme_field[1] = [0,fvalue$0]}
                   else
                    if(flags_field[1])
                     duplicates[1] = [0,_aC0_,duplicates[1]];
                    else
                     {var fvalue$1=caml_call2(_pe_,t_of_sexp$107,field_sexp);
                      flags_field[1] = [0,fvalue$1]}
                  else
                   if(anons_field[1])
                    duplicates[1] = [0,_aC0_,duplicates[1]];
                   else
                    {var fvalue$2=anons_of_sexp(field_sexp);
                     anons_field[1] = [0,fvalue$2]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$53,_aCW_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$53,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$53,extra[1],sexp);
        var
         _aC1_=summary_field[1],
         _aC3_=anons_field[1],
         _aC4_=flags_field[1],
         _aC2_=readme_field[1];
        if(_aC1_)
         if(_aC3_)
          if(_aC4_)
           {var
             flags_value=_aC4_[1],
             anons_value=_aC3_[1],
             summary_value=_aC1_[1];
            return [0,summary_value,_aC2_,anons_value,flags_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$53,
                 sexp,
                 [0,
                  [0,0 === summary_field[1]?1:0,cst_summary$16],
                  [0,
                   [0,0 === anons_field[1]?1:0,cst_anons$6],
                   [0,[0,0 === flags_field[1]?1:0,cst_flags$6],0]]])}}
    function sexp_of_t$126(param)
     {var
       v_flags=param[4],
       v_anons=param[3],
       v_readme=param[2],
       v_summary=param[1],
       arg=caml_call2(_pf_,sexp_of_t$125,v_flags),
       bnds=[0,[1,[0,_axS_,[0,arg,0]]],0],
       arg$0=sexp_of_anons(v_anons),
       bnds$0=[0,[1,[0,_axT_,[0,arg$0,0]]],bnds];
      if(v_readme)
       var
        v=v_readme[1],
        arg$1=caml_call1(sexp_of_t$40,v),
        bnd=[1,[0,_axU_,[0,arg$1,0]]],
        bnds$1=[0,bnd,bnds$0];
      else
       var bnds$1=bnds$0;
      var
       arg$2=caml_call1(sexp_of_t$40,v_summary),
       bnds$2=[0,[1,[0,_axV_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    var
     _axW_=caml_call1(Bin_prot_Shape[3][1],cst_a$105),
     _axX_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_ml_2176_32),
     _axY_=
      [0,bin_shape_string,[0,caml_call2(Bin_prot_Shape[15],_axX_,_axW_),0]],
     _axZ_=
      [0,
       [0,
        cst_subcommands$4,
        bin_shape_t$69(bin_shape_t$24(caml_call1(Bin_prot_Shape[7],_axY_)))],
       0],
     _ax0_=
      [0,
       [0,cst_summary$17,bin_shape_string],
       [0,[0,cst_readme$9,bin_shape_option(bin_shape_string)],_axZ_]],
     _ax1_=caml_call1(Bin_prot_Shape[8],_ax0_),
     _ax2_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$106),0],
     _ax3_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$241),_ax2_,_ax1_],0],
     _ax4_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_ml_2173_4),
     group$140=caml_call2(Bin_prot_Shape[6],_ax4_,_ax3_);
    function bin_shape_t$122(a)
     {var _aCV_=caml_call1(Bin_prot_Shape[2][1],cst_t$242);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$140,_aCV_),[0,a,0])}
    function bin_size_t$85(size_of_a,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aCO_=caml_call1(bin_size_t$42,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aCO_),
       _aCP_=bin_size_option(bin_size_t$42,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aCP_);
      function _aCQ_(param)
       {var
         v2=param[2],
         v1=param[1],
         _aCT_=caml_call1(bin_size_t$42,v1),
         size=caml_call2(Bin_prot_Common[23],0,_aCT_),
         _aCU_=caml_call1(size_of_a,v2);
        return caml_call2(Bin_prot_Common[23],size,_aCU_)}
      var
       _aCR_=
        bin_size_t$52(function(_aCS_){return bin_size_t$26(_aCQ_,_aCS_)},v3);
      return caml_call2(Bin_prot_Common[23],size$0,_aCR_)}
    function bin_write_t$86(write_a,buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$42,buf,pos,v1),
       pos$1=bin_write_option(bin_write_t$42,buf,pos$0,v2);
      function _aCK_(buf,pos,param)
       {var
         v2=param[2],
         v1=param[1],
         pos$0=caml_call3(bin_write_t$42,buf,pos,v1);
        return caml_call3(write_a,buf,pos$0,v2)}
      return bin_write_t$52
              (function(_aCL_,_aCM_,_aCN_)
                {return bin_write_t$26(_aCK_,_aCL_,_aCM_,_aCN_)},
               buf,
               pos$1,
               v3)}
    function bin_writer_t$107(bin_writer_a)
     {function _aCG_(v)
       {var _aCH_=bin_writer_a[2];
        return function(_aCI_,_aCJ_)
         {return bin_write_t$86(_aCH_,v,_aCI_,_aCJ_)}}
      return [0,function(v){return bin_size_t$85(bin_writer_a[1],v)},_aCG_]}
    function bin_read_t$170(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_command_ml_Shape_Group_info_t,
               pos_ref[1])}
    function bin_read_t$171(of_a,buf,pos_ref)
     {var
       v_summary=caml_call2(bin_read_t$86,buf,pos_ref),
       v_readme=bin_read_option$0(bin_read_t$86,buf,pos_ref);
      function _aCD_(buf,pos_ref)
       {var
         v1=caml_call2(bin_read_t$86,buf,pos_ref),
         v2=caml_call2(of_a,buf,pos_ref);
        return [0,v1,v2]}
      var
       v_subcommands=
        bin_read_t$107
         (function(_aCE_,_aCF_){return bin_read_t$55(_aCD_,_aCE_,_aCF_)},
          buf,
          pos_ref);
      return [0,v_summary,v_readme,v_subcommands]}
    function bin_reader_t$107(bin_reader_a)
     {function _aCC_(buf,pos_ref,vtag)
       {return bin_read_t$170(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$171(bin_reader_a[1],buf,pos_ref)},
              _aCC_]}
    function bin_t$107(bin_a)
     {var _aCA_=bin_reader_t$107(bin_a[3]),_aCB_=bin_writer_t$107(bin_a[2]);
      return [0,bin_shape_t$122(bin_a[1]),_aCB_,_aCA_]}
    function compare$87(cmp_a,a_069,b_070)
     {if(caml_call2(Ppx_compare_lib[1],a_069,b_070))return 0;
      var n=caml_call2(compare$28,a_069[1],b_070[1]);
      if(0 === n)
       {var n$0=caml_call3(_xO_,compare$28,a_069[2],b_070[2]);
        if(0 === n$0)
         {var _aCy_=b_070[3],_aCz_=a_069[3];
          return caml_call3
                  (_Lu_,
                   function(a_073,b_074)
                    {return caml_call3
                             (compare_sexp_list,
                              function(a_075,b_076)
                               {var
                                 t_078=a_075[2],
                                 t_077=a_075[1],
                                 t_080=b_076[2],
                                 t_079=b_076[1],
                                 n=caml_call2(compare$28,t_077,t_079);
                                return 0 === n?caml_call2(cmp_a,t_078,t_080):n},
                              a_073,
                              b_074)},
                   _aCz_,
                   _aCy_)}
        return n$0}
      return n}
    function subcommands(r){return r[3]}
    function readme$1(r){return r[2]}
    function summary$1(r){return r[1]}
    function _ax5_(r,v){return [0,r[1],r[2],v]}
    var
     _ax6_=0,
     subcommands$0=
      [0,function(param){return 0},cst_subcommands$5,_ax6_,subcommands,_ax5_];
    function _ax7_(r,v){return [0,r[1],v,r[3]]}
    var
     _ax8_=0,
     readme$2=[0,function(param){return 0},cst_readme$10,_ax8_,readme$1,_ax7_];
    function _ax9_(r,v){return [0,v,r[2],r[3]]}
    var
     _ax__=0,
     summary$2=
      [0,function(param){return 0},cst_summary$18,_ax__,summary$1,_ax9_];
    function make_creator$3
     (summary_fun,readme_fun,subcommands_fun,compile_acc)
     {var
       match=caml_call2(summary_fun,summary$2,compile_acc),
       compile_acc$0=match[2],
       summary_gen=match[1],
       match$0=caml_call2(readme_fun,readme$2,compile_acc$0),
       compile_acc$1=match$0[2],
       readme_gen=match$0[1],
       match$1=caml_call2(subcommands_fun,subcommands$0,compile_acc$1),
       compile_acc$2=match$1[2],
       subcommands_gen=match$1[1];
      return [0,
              function(acc)
               {var
                 summary=caml_call1(summary_gen,acc),
                 readme=caml_call1(readme_gen,acc),
                 subcommands=caml_call1(subcommands_gen,acc);
                return [0,summary,readme,subcommands]},
              compile_acc$2]}
    function create$46(summary,readme,subcommands)
     {return [0,summary,readme,subcommands]}
    function map$39(summary_fun,readme_fun,subcommands_fun)
     {var
       _aCw_=caml_call1(subcommands_fun,subcommands$0),
       _aCx_=caml_call1(readme_fun,readme$2);
      return [0,caml_call1(summary_fun,summary$2),_aCx_,_aCw_]}
    function iter$38(summary_fun,readme_fun,subcommands_fun)
     {caml_call1(summary_fun,summary$2);
      caml_call1(readme_fun,readme$2);
      return caml_call1(subcommands_fun,subcommands$0)}
    function fold$29(init,summary_fun,readme_fun,subcommands_fun)
     {return caml_call2
              (subcommands_fun,
               caml_call2
                (readme_fun,caml_call2(summary_fun,init,summary$2),readme$2),
               subcommands$0)}
    function map_poly$3(record)
     {var
       _aCu_=[0,caml_call1(record[1],subcommands$0),0],
       _aCv_=[0,caml_call1(record[1],readme$2),_aCu_];
      return [0,caml_call1(record[1],summary$2),_aCv_]}
    function for_all$24(summary_fun,readme_fun,subcommands_fun)
     {var
       _aCs_=caml_call1(summary_fun,summary$2),
       _aCt_=_aCs_?caml_call1(readme_fun,readme$2):_aCs_;
      return _aCt_?caml_call1(subcommands_fun,subcommands$0):_aCt_}
    function exists$25(summary_fun,readme_fun,subcommands_fun)
     {var
       _aCr_=caml_call1(summary_fun,summary$2),
       _aCq_=_aCr_ || caml_call1(readme_fun,readme$2);
      return _aCq_?_aCq_:caml_call1(subcommands_fun,subcommands$0)}
    function to_list$24(summary_fun,readme_fun,subcommands_fun)
     {var
       _aCo_=[0,caml_call1(subcommands_fun,subcommands$0),0],
       _aCp_=[0,caml_call1(readme_fun,readme$2),_aCo_];
      return [0,caml_call1(summary_fun,summary$2),_aCp_]}
    function iter$39(record,summary_fun,readme_fun,subcommands_fun)
     {caml_call3(summary_fun,summary$2,record,record[1]);
      caml_call3(readme_fun,readme$2,record,record[2]);
      return caml_call3(subcommands_fun,subcommands$0,record,record[3])}
    function fold$30(record,init,summary_fun,readme_fun,subcommands_fun)
     {var _aCm_=record[3],_aCn_=record[2];
      return caml_call4
              (subcommands_fun,
               caml_call4
                (readme_fun,
                 caml_call4(summary_fun,init,summary$2,record,record[1]),
                 readme$2,
                 record,
                 _aCn_),
               subcommands$0,
               record,
               _aCm_)}
    function for_all$25(record,summary_fun,readme_fun,subcommands_fun)
     {var
       _aCk_=caml_call3(summary_fun,summary$2,record,record[1]),
       _aCl_=_aCk_?caml_call3(readme_fun,readme$2,record,record[2]):_aCk_;
      return _aCl_
              ?caml_call3(subcommands_fun,subcommands$0,record,record[3])
              :_aCl_}
    function exists$26(record,summary_fun,readme_fun,subcommands_fun)
     {var
       _aCj_=caml_call3(summary_fun,summary$2,record,record[1]),
       _aCi_=_aCj_ || caml_call3(readme_fun,readme$2,record,record[2]);
      return _aCi_
              ?_aCi_
              :caml_call3(subcommands_fun,subcommands$0,record,record[3])}
    function to_list$25(record,summary_fun,readme_fun,subcommands_fun)
     {var
       _aCg_=[0,caml_call3(subcommands_fun,subcommands$0,record,record[3]),0],
       _aCh_=[0,caml_call3(readme_fun,readme$2,record,record[2]),_aCg_];
      return [0,caml_call3(summary_fun,summary$2,record,record[1]),_aCh_]}
    function map$40(record,summary_fun,readme_fun,subcommands_fun)
     {var
       _aCe_=caml_call3(subcommands_fun,subcommands$0,record,record[3]),
       _aCf_=caml_call3(readme_fun,readme$2,record,record[2]);
      return [0,
              caml_call3(summary_fun,summary$2,record,record[1]),
              _aCf_,
              _aCe_]}
    function set_all_mutable_fields$3(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$3=
      [0,
       iter$39,
       fold$30,
       for_all$25,
       exists$26,
       to_list$25,
       map$40,
       set_all_mutable_fields$3];
    function t_of_sexp$109(of_a,sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$54,sexp);
      var
       field_sexps=sexp[1],
       summary_field=[0,0],
       readme_field=[0,0],
       subcommands_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aB6_=param[1];
          if(1 === _aB6_[0])
           {var _aB7_=_aB6_[1];
            if(_aB7_)
             {var _aB8_=_aB7_[1];
              if(0 === _aB8_[0])
               {var _aB9_=_aB7_[2],_aB__=_aB8_[1];
                if(! _aB9_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aB__,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _aB9_[2])
                 {var tail=param[2],field_sexp=_aB9_[1];
                  if(caml_string_notequal(_aB__,cst_readme$11))
                   if(caml_string_notequal(_aB__,cst_subcommands$6))
                    if(caml_string_notequal(_aB__,cst_summary$19))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aB__,extra[1]]}
                    else
                     if(summary_field[1])
                      duplicates[1] = [0,_aB__,duplicates[1]];
                     else
                      {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                       summary_field[1] = [0,fvalue]}
                   else
                    if(subcommands_field[1])
                     duplicates[1] = [0,_aB__,duplicates[1]];
                    else
                     {var
                       fvalue$0=
                        caml_call2
                         (_Lw_,
                          caml_call1
                           (_pe_,
                            function(sexp)
                             {if(1 === sexp[0])
                               {var _aCc_=sexp[1];
                                if(_aCc_)
                                 {var _aCd_=_aCc_[2];
                                  if(_aCd_)
                                   if(! _aCd_[2])
                                    {var
                                      v1=_aCd_[1],
                                      v0=_aCc_[1],
                                      v0$0=caml_call1(t_of_sexp$32,v0),
                                      v1$0=caml_call1(of_a,v1);
                                     return [0,v0$0,v1$0]}}}
                              return caml_call3
                                      (Sexplib0_Sexp_conv_error[2],tp_loc$54,2,sexp)}),
                          field_sexp);
                      subcommands_field[1] = [0,fvalue$0]}
                  else
                   if(readme_field[1])
                    duplicates[1] = [0,_aB__,duplicates[1]];
                   else
                    {var fvalue$1=caml_call1(t_of_sexp$32,field_sexp);
                     readme_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$54,_aB6_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$54,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$54,extra[1],sexp);
        var
         _aB$_=summary_field[1],
         _aCb_=subcommands_field[1],
         _aCa_=readme_field[1];
        if(_aB$_)
         if(_aCb_)
          {var subcommands_value=_aCb_[1],summary_value=_aB$_[1];
           return [0,summary_value,_aCa_,subcommands_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$54,
                 sexp,
                 [0,
                  [0,0 === summary_field[1]?1:0,cst_summary$20],
                  [0,[0,0 === subcommands_field[1]?1:0,cst_subcommands$7],0]])}}
    function sexp_of_t$127(of_a,param)
     {var
       v_subcommands=param[3],
       v_readme=param[2],
       v_summary=param[1],
       bnds=0,
       arg=
        caml_call2
         (_Lx_,
          caml_call1
           (_pf_,
            function(param)
             {var
               v1=param[2],
               v0=param[1],
               v0$0=caml_call1(sexp_of_t$40,v0),
               v1$0=caml_call1(of_a,v1);
              return [1,[0,v0$0,[0,v1$0,0]]]}),
          v_subcommands),
       bnds$0=[0,[1,[0,_ax$_,[0,arg,0]]],bnds];
      if(v_readme)
       var
        v=v_readme[1],
        arg$0=caml_call1(sexp_of_t$40,v),
        bnd=[1,[0,_aya_,[0,arg$0,0]]],
        bnds$1=[0,bnd,bnds$0];
      else
       var bnds$1=bnds$0;
      var
       arg$1=caml_call1(sexp_of_t$40,v_summary),
       bnds$2=[0,[1,[0,_ayb_,[0,arg$1,0]]],bnds$1];
      return [1,bnds$2]}
    var
     _ayc_=
      [0,
       [0,cst_working_dir$3,bin_shape_string],
       [0,
        [0,cst_path_to_exe$5,bin_shape_string],
        [0,[0,cst_child_subcommand$1,bin_shape_list(bin_shape_string)],0]]],
     _ayd_=
      [0,
       [0,cst_summary$21,bin_shape_string],
       [0,[0,cst_readme$12,bin_shape_option(bin_shape_string)],_ayc_]],
     _aye_=caml_call1(Bin_prot_Shape[8],_ayd_),
     _ayf_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$243),0,_aye_],0],
     _ayg_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_ml_2184_4),
     group$141=caml_call2(Bin_prot_Shape[6],_ayg_,_ayf_),
     _ayh_=caml_call1(Bin_prot_Shape[2][1],cst_t$244),
     bin_shape_t$123=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$141,_ayh_),0);
    function bin_size_t$86(param)
     {var
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aB1_=caml_call1(bin_size_t$42,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aB1_),
       _aB2_=bin_size_option(bin_size_t$42,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aB2_),
       _aB3_=caml_call1(bin_size_t$42,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_aB3_),
       _aB4_=caml_call1(bin_size_t$42,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_aB4_),
       _aB5_=bin_size_list(bin_size_t$42,v5);
      return caml_call2(Bin_prot_Common[23],size$2,_aB5_)}
    function bin_write_t$87(buf,pos,param)
     {var
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$42,buf,pos,v1),
       pos$3=bin_write_option(bin_write_t$42,buf,pos$0,v2),
       pos$1=caml_call3(bin_write_t$42,buf,pos$3,v3),
       pos$2=caml_call3(bin_write_t$42,buf,pos$1,v4);
      return bin_write_list(bin_write_t$42,buf,pos$2,v5)}
    var bin_writer_t$108=[0,bin_size_t$86,bin_write_t$87];
    function bin_read_t$172(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_command_ml_Shape_Exec_info_t,
               pos_ref[1])}
    function bin_read_t$173(buf,pos_ref)
     {var
       v_summary=caml_call2(bin_read_t$86,buf,pos_ref),
       v_readme=bin_read_option$0(bin_read_t$86,buf,pos_ref),
       v_working_dir=caml_call2(bin_read_t$86,buf,pos_ref),
       v_path_to_exe=caml_call2(bin_read_t$86,buf,pos_ref),
       v_child_subcommand=bin_read_list$0(bin_read_t$86,buf,pos_ref);
      return [0,
              v_summary,
              v_readme,
              v_working_dir,
              v_path_to_exe,
              v_child_subcommand]}
    var
     bin_reader_t$108=[0,bin_read_t$173,bin_read_t$172],
     bin_t$108=[0,bin_shape_t$123,bin_writer_t$108,bin_reader_t$108];
    function compare$88(a_081,b_082)
     {if(caml_call2(Ppx_compare_lib[1],a_081,b_082))return 0;
      var n=caml_call2(compare$28,a_081[1],b_082[1]);
      if(0 === n)
       {var n$0=caml_call3(_xO_,compare$28,a_081[2],b_082[2]);
        if(0 === n$0)
         {var n$1=caml_call2(compare$28,a_081[3],b_082[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare$28,a_081[4],b_082[4]);
            return 0 === n$2
                    ?caml_call3(compare_sexp_list,compare$28,a_081[5],b_082[5])
                    :n$2}
          return n$1}
        return n$0}
      return n}
    function child_subcommand(r){return r[5]}
    function path_to_exe(r){return r[4]}
    function working_dir(r){return r[3]}
    function readme$3(r){return r[2]}
    function summary$3(r){return r[1]}
    function _ayi_(r,v){return [0,r[1],r[2],r[3],r[4],v]}
    var
     _ayj_=0,
     child_subcommand$0=
      [0,
       function(param){return 0},
       cst_child_subcommand$2,
       _ayj_,
       child_subcommand,
       _ayi_];
    function _ayk_(r,v){return [0,r[1],r[2],r[3],v,r[5]]}
    var
     _ayl_=0,
     path_to_exe$0=
      [0,function(param){return 0},cst_path_to_exe$6,_ayl_,path_to_exe,_ayk_];
    function _aym_(r,v){return [0,r[1],r[2],v,r[4],r[5]]}
    var
     _ayn_=0,
     working_dir$0=
      [0,function(param){return 0},cst_working_dir$4,_ayn_,working_dir,_aym_];
    function _ayo_(r,v){return [0,r[1],v,r[3],r[4],r[5]]}
    var
     _ayp_=0,
     readme$4=[0,function(param){return 0},cst_readme$13,_ayp_,readme$3,_ayo_];
    function _ayq_(r,v){return [0,v,r[2],r[3],r[4],r[5]]}
    var
     _ayr_=0,
     summary$4=
      [0,function(param){return 0},cst_summary$22,_ayr_,summary$3,_ayq_];
    function make_creator$4
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun,
      compile_acc)
     {var
       match=caml_call2(summary_fun,summary$4,compile_acc),
       compile_acc$0=match[2],
       summary_gen=match[1],
       match$0=caml_call2(readme_fun,readme$4,compile_acc$0),
       compile_acc$1=match$0[2],
       readme_gen=match$0[1],
       match$1=caml_call2(working_dir_fun,working_dir$0,compile_acc$1),
       compile_acc$2=match$1[2],
       working_dir_gen=match$1[1],
       match$2=caml_call2(path_to_exe_fun,path_to_exe$0,compile_acc$2),
       compile_acc$3=match$2[2],
       path_to_exe_gen=match$2[1],
       match$3=
        caml_call2(child_subcommand_fun,child_subcommand$0,compile_acc$3),
       compile_acc$4=match$3[2],
       child_subcommand_gen=match$3[1];
      return [0,
              function(acc)
               {var
                 summary=caml_call1(summary_gen,acc),
                 readme=caml_call1(readme_gen,acc),
                 working_dir=caml_call1(working_dir_gen,acc),
                 path_to_exe=caml_call1(path_to_exe_gen,acc),
                 child_subcommand=caml_call1(child_subcommand_gen,acc);
                return [0,
                        summary,
                        readme,
                        working_dir,
                        path_to_exe,
                        child_subcommand]},
              compile_acc$4]}
    function create$47
     (summary,readme,working_dir,path_to_exe,child_subcommand)
     {return [0,summary,readme,working_dir,path_to_exe,child_subcommand]}
    function map$41
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aBX_=caml_call1(child_subcommand_fun,child_subcommand$0),
       _aBY_=caml_call1(path_to_exe_fun,path_to_exe$0),
       _aBZ_=caml_call1(working_dir_fun,working_dir$0),
       _aB0_=caml_call1(readme_fun,readme$4);
      return [0,caml_call1(summary_fun,summary$4),_aB0_,_aBZ_,_aBY_,_aBX_]}
    function iter$40
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {caml_call1(summary_fun,summary$4);
      caml_call1(readme_fun,readme$4);
      caml_call1(working_dir_fun,working_dir$0);
      caml_call1(path_to_exe_fun,path_to_exe$0);
      return caml_call1(child_subcommand_fun,child_subcommand$0)}
    function fold$31
     (init,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {return caml_call2
              (child_subcommand_fun,
               caml_call2
                (path_to_exe_fun,
                 caml_call2
                  (working_dir_fun,
                   caml_call2
                    (readme_fun,caml_call2(summary_fun,init,summary$4),readme$4),
                   working_dir$0),
                 path_to_exe$0),
               child_subcommand$0)}
    function map_poly$4(record)
     {var
       _aBT_=[0,caml_call1(record[1],child_subcommand$0),0],
       _aBU_=[0,caml_call1(record[1],path_to_exe$0),_aBT_],
       _aBV_=[0,caml_call1(record[1],working_dir$0),_aBU_],
       _aBW_=[0,caml_call1(record[1],readme$4),_aBV_];
      return [0,caml_call1(record[1],summary$4),_aBW_]}
    function for_all$26
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aBP_=caml_call1(summary_fun,summary$4),
       _aBQ_=_aBP_?caml_call1(readme_fun,readme$4):_aBP_,
       _aBR_=_aBQ_?caml_call1(working_dir_fun,working_dir$0):_aBQ_,
       _aBS_=_aBR_?caml_call1(path_to_exe_fun,path_to_exe$0):_aBR_;
      return _aBS_?caml_call1(child_subcommand_fun,child_subcommand$0):_aBS_}
    function exists$27
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aBO_=caml_call1(summary_fun,summary$4),
       _aBL_=_aBO_ || caml_call1(readme_fun,readme$4),
       _aBM_=_aBL_ || caml_call1(working_dir_fun,working_dir$0),
       _aBN_=_aBM_ || caml_call1(path_to_exe_fun,path_to_exe$0);
      return _aBN_?_aBN_:caml_call1(child_subcommand_fun,child_subcommand$0)}
    function to_list$26
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aBH_=[0,caml_call1(child_subcommand_fun,child_subcommand$0),0],
       _aBI_=[0,caml_call1(path_to_exe_fun,path_to_exe$0),_aBH_],
       _aBJ_=[0,caml_call1(working_dir_fun,working_dir$0),_aBI_],
       _aBK_=[0,caml_call1(readme_fun,readme$4),_aBJ_];
      return [0,caml_call1(summary_fun,summary$4),_aBK_]}
    function iter$41
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {caml_call3(summary_fun,summary$4,record,record[1]);
      caml_call3(readme_fun,readme$4,record,record[2]);
      caml_call3(working_dir_fun,working_dir$0,record,record[3]);
      caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]);
      return caml_call3
              (child_subcommand_fun,child_subcommand$0,record,record[5])}
    function fold$32
     (record,
      init,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var _aBD_=record[5],_aBE_=record[4],_aBF_=record[3],_aBG_=record[2];
      return caml_call4
              (child_subcommand_fun,
               caml_call4
                (path_to_exe_fun,
                 caml_call4
                  (working_dir_fun,
                   caml_call4
                    (readme_fun,
                     caml_call4(summary_fun,init,summary$4,record,record[1]),
                     readme$4,
                     record,
                     _aBG_),
                   working_dir$0,
                   record,
                   _aBF_),
                 path_to_exe$0,
                 record,
                 _aBE_),
               child_subcommand$0,
               record,
               _aBD_)}
    function for_all$27
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aBz_=caml_call3(summary_fun,summary$4,record,record[1]),
       _aBA_=_aBz_?caml_call3(readme_fun,readme$4,record,record[2]):_aBz_,
       _aBB_=
        _aBA_?caml_call3(working_dir_fun,working_dir$0,record,record[3]):_aBA_,
       _aBC_=
        _aBB_?caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]):_aBB_;
      return _aBC_
              ?caml_call3
                (child_subcommand_fun,child_subcommand$0,record,record[5])
              :_aBC_}
    function exists$28
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aBy_=caml_call3(summary_fun,summary$4,record,record[1]),
       _aBv_=_aBy_ || caml_call3(readme_fun,readme$4,record,record[2]),
       _aBw_=
        _aBv_
        ||
        caml_call3(working_dir_fun,working_dir$0,record,record[3]),
       _aBx_=
        _aBw_
        ||
        caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]);
      return _aBx_
              ?_aBx_
              :caml_call3
                (child_subcommand_fun,child_subcommand$0,record,record[5])}
    function to_list$27
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aBr_=
        [0,
         caml_call3(child_subcommand_fun,child_subcommand$0,record,record[5]),
         0],
       _aBs_=
        [0,caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]),_aBr_],
       _aBt_=
        [0,caml_call3(working_dir_fun,working_dir$0,record,record[3]),_aBs_],
       _aBu_=[0,caml_call3(readme_fun,readme$4,record,record[2]),_aBt_];
      return [0,caml_call3(summary_fun,summary$4,record,record[1]),_aBu_]}
    function map$42
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aBn_=
        caml_call3(child_subcommand_fun,child_subcommand$0,record,record[5]),
       _aBo_=caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]),
       _aBp_=caml_call3(working_dir_fun,working_dir$0,record,record[3]),
       _aBq_=caml_call3(readme_fun,readme$4,record,record[2]);
      return [0,
              caml_call3(summary_fun,summary$4,record,record[1]),
              _aBq_,
              _aBp_,
              _aBo_,
              _aBn_]}
    function set_all_mutable_fields$4(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$4=
      [0,
       iter$41,
       fold$32,
       for_all$27,
       exists$28,
       to_list$27,
       map$42,
       set_all_mutable_fields$4];
    function t_of_sexp$110(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$55,sexp);
      var
       field_sexps=sexp[1],
       summary_field=[0,0],
       readme_field=[0,0],
       working_dir_field=[0,0],
       path_to_exe_field=[0,0],
       child_subcommand_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aBd_=param[1];
          if(1 === _aBd_[0])
           {var _aBe_=_aBd_[1];
            if(_aBe_)
             {var _aBf_=_aBe_[1];
              if(0 === _aBf_[0])
               {var _aBg_=_aBe_[2],_aBh_=_aBf_[1];
                if(! _aBg_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aBh_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _aBg_[2])
                 {var tail=param[2],field_sexp=_aBg_[1];
                  if(caml_string_notequal(_aBh_,cst_child_subcommand$3))
                   if(caml_string_notequal(_aBh_,cst_path_to_exe$7))
                    if(caml_string_notequal(_aBh_,cst_readme$14))
                     if(caml_string_notequal(_aBh_,cst_summary$23))
                      if(caml_string_notequal(_aBh_,cst_working_dir$5))
                       {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aBh_,extra[1]]}
                      else
                       if(working_dir_field[1])
                        duplicates[1] = [0,_aBh_,duplicates[1]];
                       else
                        {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                         working_dir_field[1] = [0,fvalue]}
                     else
                      if(summary_field[1])
                       duplicates[1] = [0,_aBh_,duplicates[1]];
                      else
                       {var fvalue$0=caml_call1(t_of_sexp$32,field_sexp);
                        summary_field[1] = [0,fvalue$0]}
                    else
                     if(readme_field[1])
                      duplicates[1] = [0,_aBh_,duplicates[1]];
                     else
                      {var fvalue$1=caml_call1(t_of_sexp$32,field_sexp);
                       readme_field[1] = [0,fvalue$1]}
                   else
                    if(path_to_exe_field[1])
                     duplicates[1] = [0,_aBh_,duplicates[1]];
                    else
                     {var fvalue$2=caml_call1(t_of_sexp$32,field_sexp);
                      path_to_exe_field[1] = [0,fvalue$2]}
                  else
                   if(child_subcommand_field[1])
                    duplicates[1] = [0,_aBh_,duplicates[1]];
                   else
                    {var fvalue$3=caml_call2(_pe_,t_of_sexp$32,field_sexp);
                     child_subcommand_field[1] = [0,fvalue$3]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$55,_aBd_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$55,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$55,extra[1],sexp);
        var
         _aBi_=summary_field[1],
         _aBk_=working_dir_field[1],
         _aBl_=path_to_exe_field[1],
         _aBm_=child_subcommand_field[1],
         _aBj_=readme_field[1];
        if(_aBi_)
         if(_aBk_)
          if(_aBl_)
           if(_aBm_)
            {var
              child_subcommand_value=_aBm_[1],
              path_to_exe_value=_aBl_[1],
              working_dir_value=_aBk_[1],
              summary_value=_aBi_[1];
             return [0,
                     summary_value,
                     _aBj_,
                     working_dir_value,
                     path_to_exe_value,
                     child_subcommand_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$55,
                 sexp,
                 [0,
                  [0,0 === summary_field[1]?1:0,cst_summary$24],
                  [0,
                   [0,0 === working_dir_field[1]?1:0,cst_working_dir$6],
                   [0,
                    [0,0 === path_to_exe_field[1]?1:0,cst_path_to_exe$8],
                    [0,
                     [0,
                      0 === child_subcommand_field[1]?1:0,
                      cst_child_subcommand$4],
                     0]]]])}}
    function sexp_of_t$128(param)
     {var
       v_child_subcommand=param[5],
       v_path_to_exe=param[4],
       v_working_dir=param[3],
       v_readme=param[2],
       v_summary=param[1],
       arg=caml_call2(_pf_,sexp_of_t$40,v_child_subcommand),
       bnds=[0,[1,[0,_ays_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$40,v_path_to_exe),
       bnds$0=[0,[1,[0,_ayt_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$40,v_working_dir),
       bnds$1=[0,[1,[0,_ayu_,[0,arg$1,0]]],bnds$0];
      if(v_readme)
       var
        v=v_readme[1],
        arg$2=caml_call1(sexp_of_t$40,v),
        bnd=[1,[0,_ayv_,[0,arg$2,0]]],
        bnds$2=[0,bnd,bnds$1];
      else
       var bnds$2=bnds$1;
      var
       arg$3=caml_call1(sexp_of_t$40,v_summary),
       bnds$3=[0,[1,[0,_ayw_,[0,arg$3,0]]],bnds$2];
      return [1,bnds$3]}
    var
     _ayx_=caml_call1(Bin_prot_Shape[2][1],cst_t$245),
     _ayy_=
      [0,
       [0,
        cst_Exec$5,
        [0,
         bin_shape_t$123,
         [0,caml_call1(caml_call1(Bin_prot_Shape[13],_ayx_),0),0]]],
       0],
     _ayz_=caml_call1(Bin_prot_Shape[2][1],cst_t$246),
     _ayA_=
      [0,
       [0,cst_Basic,[0,bin_shape_t$121,0]],
       [0,
        [0,
         cst_Group$5,
         [0,
          bin_shape_t$122(caml_call1(caml_call1(Bin_prot_Shape[13],_ayz_),0)),
          0]],
        _ayy_]],
     _ayB_=caml_call1(Bin_prot_Shape[9],_ayA_),
     _ayC_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$247),0,_ayB_],0],
     _ayD_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_ml_2203_4),
     group$142=caml_call2(Bin_prot_Shape[6],_ayD_,_ayC_),
     _ayE_=caml_call1(Bin_prot_Shape[2][1],cst_t$248),
     bin_shape_t$124=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$142,_ayE_),0);
    function bin_size_t$87(param)
     {switch(param[0])
       {case 0:
         var v1=param[1],_aA$_=bin_size_t$84(v1);
         return caml_call2(Bin_prot_Common[23],1,_aA$_);
        case 1:
         var v1$0=param[1],_aBa_=bin_size_t$85(bin_size_t$87,v1$0);
         return caml_call2(Bin_prot_Common[23],1,_aBa_);
        default:
         var
          v2=param[2],
          v1$1=param[1],
          _aBb_=bin_size_t$86(v1$1),
          size=caml_call2(Bin_prot_Common[23],1,_aBb_),
          _aBc_=bin_size_t$87(v2);
         return caml_call2(Bin_prot_Common[23],size,_aBc_)}}
    function bin_write_t$88(buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:
          var v1=param$0[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos$0,0);
          return bin_write_t$85(buf,pos$1,v1);
         case 1:
          var
           v1$0=param$0[1],
           pos$2=caml_call3(Bin_prot_Write[30],buf,pos$0,1);
          return bin_write_t$86(bin_write_t$88,buf,pos$2,v1$0);
         default:
          var
           v2=param$0[2],
           v1$1=param$0[1],
           pos$3=caml_call3(Bin_prot_Write[30],buf,pos$0,2),
           pos$4=bin_write_t$87(buf,pos$3,v1$1),
           pos$0=pos$4,
           param$0=v2;
          continue}}
    var bin_writer_t$109=[0,bin_size_t$87,bin_write_t$88];
    function bin_read_t$174(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_command_ml_Shape_Fully_forced_t,
               pos_ref[1])}
    function bin_read_t$175(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_ayF_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=bin_read_t$169(buf,pos_ref);return [0,arg_1];
        case 1:
         var arg_1$1=bin_read_t$171(bin_read_t$175,buf,pos_ref);
         return [1,arg_1$1];
        default:
         var
          arg_1$0=bin_read_t$173(buf,pos_ref),
          arg_2=bin_read_t$175(buf,pos_ref);
         return [2,arg_1$0,arg_2]}}
    var
     bin_reader_t$109=[0,bin_read_t$175,bin_read_t$174],
     bin_t$109=[0,bin_shape_t$124,bin_writer_t$109,bin_reader_t$109];
    function compare$89(a_087,b_088)
     {var a_087$0=a_087,b_088$0=b_088;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_087$0,b_088$0))return 0;
        switch(a_087$0[0])
         {case 0:
           var _aA7_=a_087$0[1];
           if(0 === b_088$0[0])
            {var b_090=b_088$0[1];return compare$86(_aA7_,b_090)}
           return -1;
          case 1:
           var _aA8_=a_087$0[1];
           switch(b_088$0[0])
            {case 0:break;
             case 1:
              var b_092=b_088$0[1];return compare$87(compare$89,_aA8_,b_092);
             default:return -1}
           break;
          default:
           var _aA9_=a_087$0[2],_aA__=a_087$0[1];
           switch(b_088$0[0])
            {case 0:break;
             case 1:return 1;
             default:
              var b_098=b_088$0[2],b_096=b_088$0[1],n=compare$88(_aA__,b_096);
              if(0 === n){var a_087$0=_aA9_,b_088$0=b_098;continue}
              return n}}
        return 1}}
    var t_of_sexp$111=function _aA6_(_aA5_){return _aA6_.fun(_aA5_)};
    caml_update_dummy
     (t_of_sexp$111,
      function(sexp)
       {if(0 === sexp[0])
         {var _aA0_=sexp[1];
          if(caml_string_notequal(_aA0_,cst_Basic$0))
           {if(caml_string_notequal(_aA0_,cst_Exec$6))
             {if(caml_string_notequal(_aA0_,cst_Group$6))
               if(caml_string_notequal(_aA0_,cst_basic))
                if(caml_string_notequal(_aA0_,cst_exec$5))
                 if(caml_string_notequal(_aA0_,cst_group$5))
                  var switch$0=1,switch$1=0,switch$2=0;
                 else
                  var switch$2=1;
                else
                 var switch$1=1,switch$2=0;
               else
                var switch$0=0,switch$1=0,switch$2=0;
              else
               var switch$2=1;
              if(switch$2)
               return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$56,sexp)}
            else
             var switch$1=1;
            if(switch$1)
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$56,sexp)}
          else
           var switch$0=0;
          if(! switch$0)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$56,sexp)}
        else
         {var _aA1_=sexp[1];
          if(! _aA1_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$56,sexp);
          var _aA2_=_aA1_[1];
          if(0 !== _aA2_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$56,sexp);
          var _aA3_=_aA2_[1];
          if(caml_string_notequal(_aA3_,cst_Basic$1))
           {if(caml_string_notequal(_aA3_,cst_Exec$7))
             {if(caml_string_notequal(_aA3_,cst_Group$7))
               if(caml_string_notequal(_aA3_,cst_basic$0))
                if(caml_string_notequal(_aA3_,cst_exec$6))
                 if(caml_string_notequal(_aA3_,cst_group$6))
                  var switch$3=1,switch$4=0,switch$5=0;
                 else
                  var switch$5=1;
                else
                 var switch$4=1,switch$5=0;
               else
                var switch$3=0,switch$4=0,switch$5=0;
              else
               var switch$5=1;
              if(switch$5)
               {var sexp_args=_aA1_[2];
                if(sexp_args)
                 if(! sexp_args[2])
                  {var v0=sexp_args[1],v0$0=t_of_sexp$109(t_of_sexp$111,v0);
                   return [1,v0$0]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],tp_loc$56,_aA3_,sexp)}}
            else
             var switch$4=1;
            if(switch$4)
             {var sexp_args$0=_aA1_[2];
              if(sexp_args$0)
               {var _aA4_=sexp_args$0[2];
                if(_aA4_)
                 if(! _aA4_[2])
                  {var
                    v1=_aA4_[1],
                    v0$1=sexp_args$0[1],
                    v0$2=t_of_sexp$110(v0$1),
                    v1$0=caml_call1(t_of_sexp$111,v1);
                   return [2,v0$2,v1$0]}}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],tp_loc$56,_aA3_,sexp)}}
          else
           var switch$3=0;
          if(! switch$3)
           {var sexp_args$1=_aA1_[2];
            if(sexp_args$1)
             if(! sexp_args$1[2])
              {var v0$3=sexp_args$1[1],v0$4=t_of_sexp$108(v0$3);
               return [0,v0$4]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$56,_aA3_,sexp)}}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$56,sexp)});
    function sexp_of_t$129(param)
     {switch(param[0])
       {case 0:
         var v0=param[1],v0$0=sexp_of_t$126(v0);
         return [1,[0,_ayG_,[0,v0$0,0]]];
        case 1:
         var v0$1=param[1],v0$2=sexp_of_t$127(sexp_of_t$129,v0$1);
         return [1,[0,_ayH_,[0,v0$2,0]]];
        default:
         var
          v1=param[2],
          v0$3=param[1],
          v0$4=sexp_of_t$128(v0$3),
          v1$0=sexp_of_t$129(v1);
         return [1,[0,_ayI_,[0,v0$4,[0,v1$0,0]]]]}}
    function create$48(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var b=param$0[1];return [0,b];
         case 1:var g=param$0[1];return [1,map$33(g,create$48)];
         case 2:
          var f=param$0[2],e=param$0[1];
          return [2,e,create$48(caml_call1(f,0))];
         default:
          var
           thunk=param$0[1],
           _aAZ_=caml_obj_tag(thunk),
           param$1=
            250 === _aAZ_
             ?thunk[1]
             :246 === _aAZ_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    function proxy_of_sexpable
     (sexpable,working_dir,path_to_exe,child_subcommand,path_to_subcommand)
     {var
       kind=
        kind_of_sexpable
         (sexpable,
          working_dir,
          path_to_exe,
          child_subcommand,
          path_to_subcommand);
      return [0,
              working_dir,
              path_to_exe,
              path_to_subcommand,
              child_subcommand,
              kind]}
    function kind_of_sexpable
     (sexpable,working_dir,path_to_exe,child_subcommand,path_to_subcommand)
     {switch(sexpable[0])
       {case 0:var b=sexpable[1];return [0,b];
        case 1:
         var
          g=sexpable[1],
          _aAV_=
           function(param)
            {var
              sexpable=param[2],
              str=param[1],
              path_to_subcommand$0=
               caml_call2(_Oh_,path_to_subcommand,[0,str,0]),
              proxy=
               proxy_of_sexpable
                (sexpable,
                 working_dir,
                 path_to_exe,
                 child_subcommand,
                 path_to_subcommand$0);
             return [0,str,proxy]},
          _aAW_=function(_aAY_){return caml_call2(_qg_,_aAY_,_aAV_)},
          _aAX_=caml_call2(_LD_,g[3],_aAW_);
         return [1,[0,g[1],g[2],_aAX_]];
        case 2:var e=sexpable[1];return [2,e];
        default:
         var l=sexpable[1];
         return [3,
                 caml_call2
                  (_LD_,
                   l,
                   function(sexpable)
                    {return kind_of_sexpable
                             (sexpable,
                              working_dir,
                              path_to_exe,
                              child_subcommand,
                              path_to_subcommand)})]}}
    function sanitize_version(version)
     {function _aAT_(_aAU_){return caml_call2(_C2_,_aAU_,10)}
      return caml_call2
              (_p5_,
               caml_call2(_ql_,caml_call2(_C2_,version,32),_aAT_),
               compare$28)}
    function print_version(version)
     {return caml_call2(_ph_,sanitize_version(version),_GJ_)}
    function print_build_info(build_info)
     {return caml_call1(_GJ_,force(build_info))}
    function add$17(version,build_info,unversioned)
     {switch(unversioned[0])
       {case 0:
         var
          base=unversioned[1],
          base$0=
           add$16
            (base,
             cst_version$4,
             0,
             function(param)
              {return caml_call2(_Cx_,_ayJ_,sanitize_version(version))},
             cst_the_version_of_this_build),
          base$1=
           add$16
            (base$0,
             cst_build_info$2,
             0,
             function(param){return force(build_info)},
             cst_info_about_this_build);
         return [0,base$1];
        case 1:
         var
          group=unversioned[1],
          _aAN_=
           function(subcommands)
            {function _aAO_(version_flag,build_info_flag)
              {if(build_info_flag)
                print_build_info(build_info);
               else
                if(version_flag)
                 print_version(version);
                else
                 {print_build_info(build_info);print_version(version)}
               return exit(0)}
             var
              _aAP_=
               flag
                (0,
                 0,
                 cst_build_info$1,
                 no_arg,
                 cst_print_build_info_for_this_build);
             return extend_alist_exn
                     (subcommands,
                      0,
                      cst_version$5,
                      basic
                       (cst_print_version_information,
                        0,
                        symbol$233
                         (symbol$233
                           (empty$13,
                            flag
                             (0,
                              0,
                              cst_version$3,
                              no_arg,
                              cst_print_the_version_of_this_build)),
                          _aAP_),
                        _aAO_))},
          subcommands=caml_call2(_LD_,group[3],_aAN_);
         return [1,[0,group[1],group[2],subcommands,group[4]]];
        case 2:var exec=unversioned[1];return [2,exec];
        case 3:var proxy=unversioned[1];return [3,proxy];
        default:
         var thunk=unversioned[1];
         return [4,
                 [246,
                  function(_aAQ_)
                   {var
                     _aAR_=caml_obj_tag(thunk),
                     _aAS_=
                      250 === _aAR_
                       ?thunk[1]
                       :246 === _aAR_?caml_call1(CamlinternalLazy[2],thunk):thunk;
                    return add$17(version,build_info,_aAS_)}]]}}
    function summary$5(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var x=param$0[1];return x[1];
         case 1:var x$0=param$0[1];return x$0[1];
         case 2:var x$1=param$0[1];return x$1[1];
         case 3:var x$2=param$0[1];return get_summary(x$2);
         default:
          var
           thunk=param$0[1],
           _aAM_=caml_obj_tag(thunk),
           param$1=
            250 === _aAM_
             ?thunk[1]
             :246 === _aAM_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    var path$0=caml_call2(map$32,path,parts_exe_basename);
    function get_flag_names(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var base=param$0[1];return caml_call1(Map$1[63],base[3]);
         case 4:
          var
           thunk=param$0[1],
           _aAL_=caml_obj_tag(thunk),
           param$1=
            250 === _aAL_
             ?thunk[1]
             :246 === _aAL_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue;
         default:throw [0,Assert_failure,_ayK_]}}
    function help_recursive(cmd,with_flags,expand_dots,t,s)
     {function help_recursive_rec(cmd,t,s)
       {var t$0=t;
        for(;;)
         {var
           cmd$0=expand_dots?cmd:cst$273,
           new_s=caml_call2(_Gu_,s,caml_call2(_Gu_,cmd$0,cst$272));
          switch(t$0[0])
           {case 0:
             var
              base=t$0[1],
              _aAE_=get_summary$0([0,base]),
              base_help=[0,caml_call2(_Gu_,s,cmd),_aAE_];
             if(with_flags)
              {var
                _aAF_=
                 function(param)
                  {var h=param[2],flag=param[1];
                   return [0,caml_call2(_Gu_,new_s,flag),h]};
               if(opt)
                var sth=opt[1],display_help_flags=sth;
               else
                var display_help_flags=1;
               var
                flags=caml_call1(Map$1[64],base[3]),
                flags$0=
                 display_help_flags
                  ?flags
                  :caml_call2
                    (_pX_,
                     flags,
                     function(f){return caml_call2(symbol$14,f[1],cst_help$4)});
               return [0,
                       base_help,
                       caml_call2
                        (_qg_,
                         caml_call2
                          (_p5_,caml_call2(_ql_,flags$0,help),subcommand_cmp_fst),
                         _aAF_)]}
             return [0,base_help,0];
            case 1:
             var
              match=t$0[1],
              subcommands=match[3],
              summary=match[1],
              _aAG_=
               function(param)
                {var t=param[2],cmd=param[1];
                 return help_recursive_rec(cmd,t,new_s)},
              _aAH_=caml_obj_tag(subcommands),
              _aAI_=
               250 === _aAH_
                ?subcommands[1]
                :246 === _aAH_
                  ?caml_call1(CamlinternalLazy[2],subcommands)
                  :subcommands,
              _aAJ_=
               caml_call2
                (_ql_,caml_call2(_p5_,_aAI_,subcommand_cmp_fst),_aAG_);
             return [0,[0,caml_call2(_Gu_,s,cmd),summary],_aAJ_];
            case 4:
             var
              thunk=t$0[1],
              _aAK_=caml_obj_tag(thunk),
              t$1=
               250 === _aAK_
                ?thunk[1]
                :246 === _aAK_?caml_call1(CamlinternalLazy[2],thunk):thunk,
              t$0=t$1;
             continue;
            default:return 0}}}
      return help_recursive_rec(cmd,t,s)}
    var
     map$43=[0,-198771759,map$32],
     include$160=caml_call1(Base_Applicative[5],[0,return$4,apply$2,map$43]),
     return$6=include$160[1],
     map$44=include$160[2],
     both$0=include$160[3],
     symbol$238=include$160[4],
     symbol$239=include$160[5],
     symbol$240=include$160[6],
     symbol_map$3=include$160[7],
     apply$3=include$160[8],
     map2$3=include$160[9],
     map3$2=include$160[10],
     all$7=include$160[11],
     all_unit$1=include$160[12],
     Applicative_infix$1=include$160[13],
     string$4=include$158[1],
     int$5=include$158[2],
     char$6=include$158[3],
     float$4=include$158[4],
     bool$5=include$158[5],
     date$1=include$158[6],
     percent$1=include$158[7],
     host_and_port$1=include$158[8],
     sexp$1=include$158[9],
     sexp_conv$1=include$158[10];
    function basic$0(summary,readme,param)
     {var
       params=
        caml_call2
         (map$44,param,function(run,param,_aAD_){return caml_call1(run,0)}),
       t=params[1],
       _aAz_=t[3],
       _aAA_=t[2],
       spec=
        [0,
         function(param)
          {function _aAB_(run,main)
            {return caml_call2(run,function(_aAC_){return _aAC_},main)}
           return symbol_map$1(caml_call1(t[1],0),_aAB_)},
         _aAA_,
         _aAz_],
       readme$0=
        caml_call2
         (_yd_,
          readme,
          function(f,param){return caml_call2(_C9_,0,caml_call1(f,0))});
      return basic(summary,readme$0,spec,0)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$523);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Command=
      [0,
       [0,create$41,map$29,of_map,of_alist_exn$5,comma_separated,include$158],
       [0,
        required$0,
        optional$0,
        optional_with_default,
        listed,
        one_or_more,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_abort,
        escape,
        map_flag],
       [0,
        symbol$231,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons],
       [0,
        return$6,
        map$44,
        both$0,
        symbol$238,
        symbol$239,
        symbol$240,
        symbol_map$3,
        apply$3,
        map2$3,
        map3$2,
        all$7,
        all_unit$1,
        Applicative_infix$1,
        help$0,
        path$0,
        args,
        flag,
        flag_optional_with_default_doc,
        anon,
        If_nothing_chosen,
        choose_one,
        and_arg_names,
        and_arg_name,
        [0,create$41,map$29,of_map,of_alist_exn$5,comma_separated,include$158],
        string$4,
        int$5,
        char$6,
        float$4,
        bool$5,
        date$1,
        percent$1,
        host_and_port$1,
        sexp$1,
        sexp_conv$1,
        required$0,
        optional$0,
        optional_with_default,
        listed,
        one_or_more,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_abort,
        escape,
        map_flag,
        symbol$231,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons],
       [0,
        return$6,
        symbol$238,
        symbol$239,
        symbol$240,
        symbol_map$3,
        [0,return$6,map$44,both$0]],
       [0,
        return$5,
        map$32,
        pair,
        symbol$235,
        symbol$236,
        symbol$237,
        symbol_map$2,
        apply$2,
        map2$2,
        map3$1,
        all$6,
        all_unit$0,
        Applicative_infix$0,
        help$0,
        path$0,
        args,
        flag,
        flag_optional_with_default_doc,
        anon,
        If_nothing_chosen,
        choose_one,
        and_arg_names,
        and_arg_name,
        return$4,
        pair,
        empty$13,
        symbol$232,
        symbol$233,
        symbol$234,
        step,
        wrap,
        [0,create$41,map$29,of_map,of_alist_exn$5,comma_separated,include$158],
        string$3,
        int$4,
        char$5,
        float$3,
        bool$4,
        date$0,
        percent$0,
        host_and_port$0,
        sexp$0,
        sexp_conv$0,
        required$0,
        optional$0,
        optional_with_default,
        listed,
        one_or_more,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_abort,
        escape,
        map_flag,
        flags_of_args_exn,
        symbol$231,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons,
        to_param,
        of_param],
       basic,
       basic$0,
       group$135,
       lazy_group,
       exec,
       of_lazy,
       summary$5,
       [0,
        [0,
         bin_size_t$83,
         bin_write_t$84,
         bin_read_t$167,
         bin_read_t$166,
         bin_shape_t$120,
         bin_writer_t$105,
         bin_reader_t$105,
         bin_t$105,
         compare$85,
         aliases,
         doc,
         name$68,
         [0,
          names$2,
          aliases$0,
          doc$0,
          name$69,
          fold$25,
          make_creator$1,
          create$44,
          map$35,
          iter$34,
          for_all$20,
          exists$21,
          to_list$20,
          map_poly$1,
          Direct$1],
         t_of_sexp$107,
         sexp_of_t$125],
        [0,
         bin_shape_grammar,
         bin_size_grammar,
         bin_write_grammar,
         bin_writer_grammar,
         bin_read_grammar$0,
         bin_read_grammar,
         bin_reader_grammar,
         bin_grammar,
         compare_grammar,
         sexp_of_grammar,
         grammar_of_sexp,
         bin_shape_anons,
         bin_size_anons,
         bin_write_anons,
         bin_writer_anons,
         bin_read_anons$0,
         bin_read_anons,
         bin_reader_anons,
         bin_anons,
         compare_anons,
         sexp_of_anons,
         anons_of_sexp,
         bin_size_t$84,
         bin_write_t$85,
         bin_read_t$169,
         bin_read_t$168,
         bin_shape_t$121,
         bin_writer_t$106,
         bin_reader_t$106,
         bin_t$106,
         compare$86,
         flags,
         anons,
         readme,
         summary,
         [0,
          names$3,
          flags$0,
          anons$0,
          readme$0,
          summary$0,
          fold$27,
          make_creator$2,
          create$45,
          map$37,
          iter$36,
          for_all$22,
          exists$23,
          to_list$22,
          map_poly$2,
          Direct$2],
         t_of_sexp$108,
         sexp_of_t$126],
        [0,
         bin_shape_t$122,
         bin_size_t$85,
         bin_write_t$86,
         bin_read_t$171,
         bin_read_t$170,
         bin_writer_t$107,
         bin_reader_t$107,
         bin_t$107,
         compare$87,
         subcommands,
         readme$1,
         summary$1,
         [0,
          names$4,
          subcommands$0,
          readme$2,
          summary$2,
          fold$29,
          make_creator$3,
          create$46,
          map$39,
          iter$38,
          for_all$24,
          exists$25,
          to_list$24,
          map_poly$3,
          Direct$3],
         t_of_sexp$109,
         sexp_of_t$127,
         map$33],
        [0,
         bin_size_t$86,
         bin_write_t$87,
         bin_read_t$173,
         bin_read_t$172,
         bin_shape_t$123,
         bin_writer_t$108,
         bin_reader_t$108,
         bin_t$108,
         compare$88,
         child_subcommand,
         path_to_exe,
         working_dir,
         readme$3,
         summary$3,
         [0,
          names$5,
          child_subcommand$0,
          path_to_exe$0,
          working_dir$0,
          readme$4,
          summary$4,
          fold$31,
          make_creator$4,
          create$47,
          map$41,
          iter$40,
          for_all$26,
          exists$27,
          to_list$26,
          map_poly$4,
          Direct$4],
         t_of_sexp$110,
         sexp_of_t$128],
        [0,
         bin_size_t$87,
         bin_write_t$88,
         bin_read_t$175,
         bin_read_t$174,
         bin_shape_t$124,
         bin_writer_t$109,
         bin_reader_t$109,
         bin_t$109,
         compare$89,
         t_of_sexp$111,
         sexp_of_t$129,
         create$48]],
       exit,
       [0,Deprecated,get_summary$0,help_recursive,get_flag_names],
       [0,
        abs_path,
        [0,normalize$1],
        [0,[0,word_wrap]],
        [0,
         empty$12,
         create$43,
         append$4,
         parts,
         replace_first,
         to_string$33,
         to_string_dots],
        [0,compare$84,of_list$13,extend],
        [0,flags_of_args_exn,to_string_for_choose_one],
        function(M)
         {function getenv_and_clear(var$0)
           {var value=caml_call1(M[3][3],var$0);
            if(caml_call1(_yj_,value))caml_call1(M[6][10],var$0);
            return value}
          function exec_with_args(t,args,maybe_new_comp_cword)
           {var prog=abs_path(t[3],t[4]),args$0=caml_call2(_Oh_,t[5],args);
            caml_call2
             (_xV_,
              maybe_new_comp_cword,
              function(n)
               {var
                 new_value$0=n + caml_call1(length$1,t[5]) | 0,
                 new_value=caml_call1(to_string$3,new_value$0);
                return caml_call2(M[6][9],comp_cword,new_value)});
            return never_returns
                    (caml_call5(M[6][11],prog,[0,prog,args$0],0,0,0))}
          function read_stdout_and_stderr(process_info)
           {function start_reading(descr,info)
             {var output=create$39(0),_aAu_=0;
              function _aAv_(param)
               {return set_exn$0
                        (output,
                         _ayL_,
                         caml_call1
                          (_ik_,
                           function(param)
                            {var _aAy_=caml_call1(M[6][8],descr);
                             return caml_call1(Stdio_In_channel[14],_aAy_)}))}
              var thread=caml_call2(M[4][1],_aAv_,_aAu_);
              return caml_call1
                      (_Po_,
                       function(param)
                        {caml_call1(M[4][2],thread);
                         caml_call2(M[6][5],0,descr);
                         var match=output[1];
                         if(match)
                          {var _aAw_=match[1];
                           if(0 === _aAw_[0]){var output$0=_aAw_[1];return output$0}
                           var exn=_aAw_[1];
                           throw exn}
                         var _aAx_=[0,[1,[0,_ayM_,[0,caml_call1(_nu_,info),0]]],0];
                         return caml_call1
                                 (_on_,
                                  [1,
                                   [0,
                                    caml_call1(Sexplib0_Sexp_conv[7],cst_BUG_failed_to_read),
                                    _aAx_]])})}
            var
             _aAr_=caml_call1(_nz_,cst_stdout),
             finish_stdout=start_reading(process_info[3],_aAr_),
             _aAs_=caml_call1(_nz_,cst_stderr),
             finish_stderr=start_reading(process_info[4],_aAs_),
             _aAt_=caml_call2(_Pp_,finish_stderr,0);
            return [0,caml_call2(_Pp_,finish_stdout,0),_aAt_]}
          function of_external(working_dir,path_to_exe,child_subcommand)
           {var
             _aAm_=
              [0,
               -72399366,
               [0,
                [0,
                 extraction_var,
                 caml_call1
                  (to_string$0,caml_call1(Set$4[74],supported_versions$0))],
                0]],
             _aAn_=abs_path(working_dir,path_to_exe),
             process_info=
              caml_call7(M[6][13],0,0,0,_aAn_,child_subcommand,_aAm_,0);
            caml_call2(M[6][5],0,process_info[2]);
            var
             match=read_stdout_and_stderr(process_info),
             stderr=match[2],
             stdout=match[1];
            caml_call2(M[6][14],0,[0,4001835,process_info[1]]);
            try
             {var t=to_latest$5(t_of_sexp$106(caml_call1(of_string,stdout)));
              return t}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              var
               _aAo_=[0,[1,[0,_ayN_,[0,caml_call1(sexp_of_t$40,stderr),0]]],0],
               _aAp_=
                [0,[1,[0,_ayO_,[0,caml_call1(sexp_of_t$40,stdout),0]]],_aAo_],
               _aAq_=[0,caml_call1(_QN_,exn),_aAp_];
              return caml_call1
                      (_on_,
                       [1,
                        [0,
                         caml_call1
                          (Sexplib0_Sexp_conv[7],cst_cannot_parse_command_shape),
                         _aAq_]])}}
          function shape_of_proxy_kind(kind)
           {switch(kind[0])
             {case 0:var b=kind[1];return [0,b];
              case 1:
               var
                g=kind[1],
                _aAh_=_xN_[17],
                _aAi_=
                 function(_aAl_)
                  {return caml_call2(_aAh_,_aAl_,shape_of_proxy)},
                _aAj_=caml_call2(_LD_,g[3],_aAi_);
               return [1,[0,g[1],g[2],_aAj_]];
              case 2:
               var
                e=kind[1],
                child_subcommand=e[5],
                path_to_exe=e[4],
                working_dir=e[3];
               return [2,
                       e,
                       function(_aAk_)
                        {return shape_of_exe
                                 (_aAk_,child_subcommand,path_to_exe,working_dir)}];
              default:
               var l=kind[1];return [3,caml_call2(_LD_,l,shape_of_proxy_kind)]}}
          function shape_of_proxy(proxy){return shape_of_proxy_kind(proxy[5])}
          function shape_of_exe
           (param,child_subcommand,path_to_exe,working_dir)
           {return shape_of_proxy
                    (proxy_of_sexpable
                      (of_external(working_dir,path_to_exe,child_subcommand),
                       working_dir,
                       path_to_exe,
                       child_subcommand,
                       0))}
          function shape(t)
           {var t$0=t;
            for(;;)
             switch(t$0[0])
              {case 0:var b=t$0[1];return [0,to_sexpable$0(b)];
               case 1:var g=t$0[1];return [1,to_sexpable$1(shape,g)];
               case 2:
                var
                 e=t$0[1],
                 child_subcommand=e[5],
                 path_to_exe=e[4],
                 working_dir=e[3],
                 _aAe_=
                  function(_aAg_)
                   {return shape_of_exe
                            (_aAg_,child_subcommand,path_to_exe,working_dir)};
                return [2,to_sexpable$2(e),_aAe_];
               case 3:var p=t$0[1];return shape_of_proxy(p);
               default:
                var
                 thunk=t$0[1],
                 _aAf_=caml_obj_tag(thunk),
                 t$1=
                  250 === _aAf_
                   ?thunk[1]
                   :246 === _aAf_?caml_call1(CamlinternalLazy[2],thunk):thunk,
                 t$0=t$1;
                continue}}
          function group_or_exec_help_text
           (flags,path,summary,readme,format_list)
           {var
             _aAc_=[0,[0,to_string$32(format_list)],0],
             _aAd_=flags?cst_subcommands_and_flags:cst_subcommands$8;
            return unparagraphs
                    (caml_call1
                      (_q3_,
                       [0,
                        [0,summary],
                        [0,
                         [0,
                          caml_call2(_Cx_,0,[0,cst$274,[0,to_string$33(path),_ayR_]])],
                         [0,readme,[0,[0,_aAd_],_aAc_]]]]))}
          function help_for_shape(shape,path,expand_dots,flags,recursive)
           {var shape$0=shape;
            for(;;)
             {var
               loop=
                function(path,acc,shape)
                 {var shape$0=shape;
                  for(;;)
                   {var
                     string_of_path=expand_dots?to_string$33:to_string_dots,
                     gather_group$0=
                      function(string_of_path)
                       {function gather_group(path,acc,subcommands)
                         {var
                           filtered_subcommands=
                            caml_call1(is_empty$0,path)
                             ?subcommands
                             :caml_call3(_xN_[16],subcommands,symbol$11,cst_help$8);
                          function _aAa_(acc,param$1)
                           {var
                             shape=param$1[2],
                             subcommand=param$1[1],
                             path$0=[0,subcommand,path],
                             name=string_of_path(path$0),
                             param=shape;
                            for(;;)
                             {switch(param[0])
                               {case 0:var b=param[1],doc=b[1];break;
                                case 1:var g=param[1],doc=g[1];break;
                                case 2:var e=param[1],doc=e[1];break;
                                default:
                                 var
                                  thunk=param[1],
                                  _aAb_=caml_obj_tag(thunk),
                                  param$0=
                                   250 === _aAb_
                                    ?thunk[1]
                                    :246 === _aAb_?caml_call1(CamlinternalLazy[2],thunk):thunk,
                                  param=param$0;
                                 continue}
                              var acc$0=enqueue$0(acc,[0,name,doc,0]);
                              return recursive?loop(path$0,acc$0,shape):acc$0}}
                          return caml_call3
                                  (_pi_,
                                   caml_call2
                                    (_p6_,
                                     filtered_subcommands,
                                     function(a,b){return help_screen_compare(a[1],b[1])}),
                                   acc,
                                   _aAa_)}
                        return gather_group},
                     gather_group=gather_group$0(string_of_path);
                    switch(shape$0[0])
                     {case 0:
                       var b=shape$0[1];
                       if(flags)
                        {var
                          _az2_=
                           function(acc,fmt)
                            {var
                              path$0=[0,fmt[1],path],
                              _az__=fmt[3],
                              _az$_=fmt[2],
                              fmt$0=[0,string_of_path(path$0),_az$_,_az__];
                             return enqueue$0(acc,fmt$0)},
                          _az3_=
                           function(fmt)
                            {return caml_call2(symbol$14,fmt[1],cst_help$9)};
                         return caml_call3
                                 (_pi_,caml_call2(_pX_,b[4],_az3_),acc,_az2_)}
                       return acc;
                      case 1:
                       var
                        g=shape$0[1],
                        _az4_=g[3],
                        _az5_=caml_obj_tag(_az4_),
                        _az6_=
                         250 === _az5_
                          ?_az4_[1]
                          :246 === _az5_?caml_call1(CamlinternalLazy[2],_az4_):_az4_;
                       return gather_group(path,acc,_az6_);
                      case 2:
                       var shape$1=shape$0[2];
                       try
                        {var _az7_=loop(path,acc,caml_call1(shape$1,0));
                         return _az7_}
                       catch(_az9_){return acc}
                      default:
                       var
                        thunk=shape$0[1],
                        _az8_=caml_obj_tag(thunk),
                        shape$2=
                         250 === _az8_
                          ?thunk[1]
                          :246 === _az8_?caml_call1(CamlinternalLazy[2],thunk):thunk,
                        shape$0=shape$2;
                       continue}}},
               format_list=caml_call1(to_list$14,loop(empty$12,acc$1,shape$0));
              switch(shape$0[0])
               {case 0:
                 var b=shape$0[1],_azW_=b[3];
                 if(0 === _azW_[0])
                  var usage$0=_azW_[1],usage$1=usage$0;
                 else
                  var grammar=_azW_[1],usage$1=usage(grammar);
                 var
                  _azX_=[0,_ayS_,[0,[0,to_string$32(b[4])],0]],
                  _azY_=[0,b[2],_azX_],
                  _azZ_=caml_call2(_Gu_,cst$275,usage$1),
                  _az0_=
                   [0,
                    [0,
                     caml_call2
                      (_Gu_,cst$276,caml_call2(_Gu_,to_string$33(path),_azZ_))],
                    _azY_];
                 return unparagraphs(caml_call1(_q3_,[0,[0,b[1]],_az0_]));
                case 1:
                 var g=shape$0[1];
                 return group_or_exec_help_text
                         (flags,path,g[1],g[2],format_list);
                case 2:
                 var e=shape$0[1];
                 return group_or_exec_help_text
                         (flags,path,e[1],e[2],format_list);
                default:
                 var
                  thunk=shape$0[1],
                  _az1_=caml_obj_tag(thunk),
                  shape$1=
                   250 === _az1_
                    ?thunk[1]
                    :246 === _az1_?caml_call1(CamlinternalLazy[2],thunk):thunk,
                  shape$0=shape$1;
                 continue}}}
          function handle_environment(t,argv)
           {if(argv)
             {var
               args=argv[2],
               cmd=argv[1],
               _azL_=
                function(version)
                 {var
                   _azV_=caml_call1(of_string,version),
                   supported_versions=caml_call1(Set$4[73],_azV_),
                   _azR_=
                    caml_call2
                     (Set$4[22],supported_versions$0,supported_versions),
                   param=caml_call1(Set$4[37],_azR_);
                  if(param)
                   {var
                     version_to_use=param[1],
                     t$4=to_sexpable$3(t),
                     t$0=t$4,
                     path_to_subcommand=args;
                    for(;;)
                     {if(path_to_subcommand)
                       {var subs=path_to_subcommand[2],sub=path_to_subcommand[1];
                        switch(t$0[0])
                         {case 0:var _azS_=caml_call3(_Pg_,_ayP_,sub,0);break;
                          case 1:
                           var
                            g=t$0[1],
                            _azN_=g[3],
                            _azO_=caml_obj_tag(_azN_),
                            _azP_=
                             250 === _azO_
                              ?_azN_[1]
                              :246 === _azO_?caml_call1(CamlinternalLazy[2],_azN_):_azN_,
                            match=caml_call3(_xN_[13],_azP_,equal$17,sub);
                           if(match)
                            {var t$1=match[1],t$0=t$1,path_to_subcommand=subs;continue}
                           var _azS_=caml_call3(_Pg_,_ayQ_,sub,0);
                           break;
                          case 2:
                           var
                            match$0=t$0[1],
                            child_subcommand=match$0[5],
                            path_to_exe=match$0[4],
                            working_dir=match$0[3],
                            path_to_subcommand$0=
                             [0,sub,caml_call2(_Oh_,subs,child_subcommand)],
                            t$2=of_external(working_dir,path_to_exe,child_subcommand),
                            t$0=t$2,
                            path_to_subcommand=path_to_subcommand$0;
                           continue;
                          default:
                           var
                            thunk=t$0[1],
                            _azQ_=caml_obj_tag(thunk),
                            t$3=
                             250 === _azQ_
                              ?thunk[1]
                              :246 === _azQ_?caml_call1(CamlinternalLazy[2],thunk):thunk,
                            t$0=t$3;
                           continue}}
                      else
                       var _azS_=t$0;
                      var switcher=version_to_use - 1 | 0;
                      if(2 < switcher >>> 0)
                       var
                        _azT_=
                         failwiths
                          (0,
                           _awX_,
                           cst_unsupported_version_to_use,
                           version_to_use,
                           sexp_of_t$44);
                      else
                       switch(switcher)
                        {case 0:var _azT_=[0,of_latest$4(_azS_)];break;
                         case 1:var _azT_=[1,of_latest$3(_azS_)];break;
                         default:var _azT_=[2,_azS_]}
                      switch(_azT_[0])
                       {case 0:
                         var
                          v0=_azT_[1],
                          v0$0=sexp_of_t$124(v0),
                          _azU_=[1,[0,_awU_,[0,v0$0,0]]];
                         break;
                        case 1:
                         var
                          v0$1=_azT_[1],
                          v0$2=sexp_of_t$123(v0$1),
                          _azU_=[1,[0,_awV_,[0,v0$2,0]]];
                         break;
                        default:
                         var
                          v0$3=_azT_[1],
                          v0$4=sexp_of_t$122(v0$3),
                          _azU_=[1,[0,_awW_,[0,v0$4,0]]]}
                      caml_call1(_GF_,caml_call1(to_string$0,_azU_));
                      break}}
                  else
                   failwiths
                    (0,
                     _ayX_,
                     cst_Couldn_t_choose_a_supported_help_output_version_for_Command_exec_from_the_given_supported_versions,
                     supported_versions$0,
                     Set$4[74]);
                  return exit(0)};
              caml_call2(_xV_,getenv_and_clear(extraction_var),_azL_);
              var
               _azM_=
                function(param)
                 {var
                   fname=
                    caml_call2
                     (_fE_,_ayV_,caml_call1(_aqy_,caml_call1(M[6][4],0))),
                   argv_0=caml_check_bound(caml_call1(M[3][1],0),0)[1];
                  caml_call5(_fM_,_ayW_,fname,argv_0,fname,argv_0);
                  return exit(0)};
              caml_call2
               (_xV_,
                getenv_and_clear(cst_COMMAND_OUTPUT_INSTALLATION_BASH),
                _azM_);
              return [0,cmd,args]}
            return caml_call1(_Gg_,cst_missing_executable_name)}
          function process_args(cmd,args)
           {var
             maybe_comp_cword=
              caml_call2(_yd_,getenv_and_clear(comp_cword),of_string$2);
            if(maybe_comp_cword)
             var
              comp_cword$0=maybe_comp_cword[1],
              args$0=caml_call2(_q6_,caml_call2(_Oh_,args,_ayY_),comp_cword$0),
              _azK_=0,
              args$1=
               caml_call3
                (_qu_,
                 args$0,
                 function(arg,args)
                  {return typeof args === "number"?[1,arg]:[0,arg,args]},
                 _azK_);
            else
             var args$1=of_list$13(args);
            return [0,create$43(cmd),args$1,maybe_comp_cword]}
          function add_help_subcommands(t)
           {switch(t[0])
             {case 0:return t;
              case 1:
               var
                match=t[1],
                body=match[4],
                subcommands=match[3],
                readme=match[2],
                summary=match[1],
                subcommands$0=
                 caml_call2
                  (_LD_,
                   subcommands,
                   function(subcommands)
                    {function _azy_
                      (recursive,flags,expand_dots,path,env,cmd_opt,param)
                      {var match=caml_call2(find$10,env,subs_key);
                       if(match)
                        {var subs=match[1];
                         if(path)
                          if(! caml_string_notequal(path[1],cst_help$3))
                           {var
                             t=path[2],
                             path$0=
                              caml_call3
                               (_xW_,
                                cmd_opt,
                                t,
                                function(path,subcommand){return [0,subcommand,path]});
                            if(cmd_opt)
                             {var
                               cmd=cmd_opt[1],
                               _azD_=0,
                               _azE_=function(x){return [0,x,-481604174]},
                               match$0=
                                lookup_expand(caml_call2(_xN_[17],subs,_azE_),cmd,_azD_);
                              if(0 === match$0[0])
                               var
                                match$1=match$0[1],
                                t$0=match$1[2],
                                possibly_expanded_name=match$1[1],
                                path$1=replace_first(path$0,cmd,possibly_expanded_name),
                                _azF_=[0,path$1,shape(t$0)];
                              else
                               var
                                e=match$0[1],
                                _azG_=to_string$33(path$0),
                                _azF_=caml_call4(die(_ayT_),cmd,_azG_,e,0);
                              var path$2=_azF_[1],shape$0=_azF_[2]}
                            else
                             var
                              subcommands=caml_call1(_LM_,caml_call2(_xN_[17],subs,shape)),
                              readme$0=
                               caml_call2
                                (_yd_,readme,function(readme){return caml_call1(readme,0)}),
                              shape$1=[1,[0,summary,readme$0,subcommands]],
                              path$2=path$0,
                              shape$0=shape$1;
                            return caml_call1
                                    (_GJ_,
                                     help_for_shape(shape$0,path$2,expand_dots,flags,recursive))}
                         throw [0,Assert_failure,_avl_]}
                       throw [0,Assert_failure,_ayU_]}
                     var
                      _azz_=anon(maybe(symbol$231(cst_SUBCOMMAND,string$3))),
                      _azA_=
                       flag
                        (0,
                         0,
                         cst_expand_dots,
                         no_arg,
                         cst_expand_subcommands_in_recursive_help),
                      _azB_=
                       flag
                        (0,
                         0,
                         cst_flags$7,
                         no_arg,
                         cst_show_flags_as_well_in_recursive_help),
                      _azC_=
                       basic
                        (cst_explain_a_given_subcommand_perhaps_recursively,
                         0,
                         symbol$233
                          (symbol$233
                            (symbol$233
                              (symbol$233
                                (symbol$233
                                  (symbol$233
                                    (empty$13,
                                     flag
                                      (0,
                                       0,
                                       cst_recursive,
                                       no_arg,
                                       cst_show_subcommands_of_subcommands_etc)),
                                   _azB_),
                                 _azA_),
                               path),
                             env),
                           _azz_),
                         _azy_);
                     return extend_alist_exn
                             (caml_call2(_xN_[17],subcommands,add_help_subcommands),
                              0,
                              cst_help$10,
                              _azC_)});
               return [1,[0,summary,readme,subcommands$0,body]];
              case 2:return t;
              case 3:return t;
              default:
               var thunk=t[1];
               return [4,
                       [246,
                        function(_azH_)
                         {var
                           _azI_=caml_obj_tag(thunk),
                           _azJ_=
                            250 === _azI_
                             ?thunk[1]
                             :246 === _azI_?caml_call1(CamlinternalLazy[2],thunk):thunk;
                          return add_help_subcommands(_azJ_)}]]}}
          function maybe_apply_extend(args,extend$0,path)
           {return caml_call3
                    (_yk_,extend$0,args,function(f){return extend(args,f,path)})}
          function dispatch
           (t,
            env$2,
            extend,
            path,
            args,
            maybe_new_comp_cword,
            version,
            build_info,
            verbose_on_parse_error)
           {var
             t$0=t,
             env$3=env$2,
             path$0=path,
             args$0=args,
             maybe_new_comp_cword$0=maybe_new_comp_cword;
            for(;;)
             switch(t$0[0])
              {case 0:
                var
                 base=t$0[1],
                 args$1=maybe_apply_extend(args$0,extend,path$0),
                 help_text=
                  [246,
                   function(_azx_)
                    {return help_for_shape(shape(t$0),path$0,0,1,0)}],
                 env=caml_call3(set$8,env$3,path_key,path$0),
                 env$0=caml_call3(set$8,env,args_key,to_list$19(args$1)),
                 env$1=caml_call3(set$8,env$0,help_key,help_text),
                 loop$0=
                  function(counter,env,anons,param)
                   {var env$0=env,param$0=param;
                    for(;;)
                     if(typeof param$0 === "number")
                      {var _azr_=function(flag){return caml_call1(flag[6],env$0)};
                       caml_call2(_ph_,caml_call1(Map$1[64],base[3]),_azr_);
                       return final_value(anons,env$0)}
                     else
                      {if(0 === param$0[0])
                        {var _azs_=param$0[1];
                         if(! caml_string_notequal(_azs_,cst_anon))
                          {var _azu_=param$0[2];
                           if(typeof _azu_ !== "number" && 1 !== _azu_[0])
                            {var args$0=_azu_[2],arg$0=_azu_[1];
                             if(counter < 50)
                              {var counter$0=counter + 1 | 0;
                               return anon(counter$0,env$0,anons,arg$0,args$0)}
                             return caml_trampoline_return
                                     (anon,[0,env$0,anons,arg$0,args$0])}}
                         var args=param$0[2];
                         if(caml_call2(_CX_,_azs_,cst$267))
                          if(! caml_call2(equal$17,_azs_,cst$268))
                           {var match=lookup_expand_with_aliases(base[3],_azs_,1);
                            if(0 === match[0])
                             var x=match[1],x$0=x;
                            else
                             var msg=match[1],x$0=caml_call2(die(_awe_),msg,0);
                            var match$0=x$0[2],action=match$0[3],flag=x$0[1];
                            switch(action[0])
                             {case 0:
                               var
                                f=action[1],
                                env$1=caml_call1(f,env$0),
                                env$0=env$1,
                                param$0=args;
                               continue;
                              case 1:
                               var comp=action[2],f$0=action[1];
                               if(typeof args === "number")
                                return caml_call2(die(_awd_),flag,0);
                               else
                                {if(0 === args[0])
                                  {var rest=args[2],arg=args[1];
                                   try
                                    {var _azt_=caml_call2(f$0,env$0,arg),env$2=_azt_}
                                   catch(e$0)
                                    {e$0 = caml_wrap_exception(e$0);
                                     if(e$0[1] !== Failed_to_parse_command_line)throw e$0;
                                     if(! ends_in_complete(rest))throw e$0;
                                     var env$2=env$0,e=e$0}
                                   var env$0=env$2,param$0=rest;
                                   continue}
                                 var part=args[1];
                                 return never_returns(run_and_exit(comp,env$0,part))}
                              default:
                               var f$1=action[1];
                               if(ends_in_complete(args))exit(0);
                               var
                                env$3=caml_call2(f$1,env$0,to_list$19(args)),
                                env$0=env$3,
                                param$0=0;
                               continue}}
                         if(counter < 50)
                          {var counter$1=counter + 1 | 0;
                           return anon(counter$1,env$0,anons,_azs_,args)}
                         return caml_trampoline_return
                                 (anon,[0,env$0,anons,_azs_,args])}
                       var part$0=param$0[1];
                       if(caml_call2(_CX_,part$0,cst$269))
                        {var
                          _azv_=
                           function(name)
                            {var _azw_=caml_call2(_CX_,name,part$0);
                             return _azw_?caml_call1(_GJ_,name):_azw_};
                         caml_call2(_ph_,caml_call1(Map$1[63],base[3]),_azv_);
                         return exit(0)}
                       return never_returns(complete(anons,env$0,part$0))}},
                 anon=
                  function(counter,env,anons,arg,args)
                   {var
                     match=consume(anons,arg,ends_in_complete(args)),
                     anons$0=match[2],
                     env_upd=match[1],
                     env$0=caml_call1(env_upd,env);
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return loop$0(counter$0,env$0,anons$0,args)}
                    return caml_trampoline_return(loop$0,[0,env$0,anons$0,args])},
                 loop=
                  function(env,anons,param)
                   {return caml_trampoline(loop$0(0,env,anons,param))},
                 match=
                  caml_call1
                   (_ik_,
                    function(param)
                     {return caml_call1
                              (loop(env$1,caml_call1(base[4],0),args$1),15369289)});
                if(0 === match[0])
                 {var thunk=match[1];return caml_call1(thunk,-903816947)}
                var exn=match[1];
                if(exn[1] === Failed_to_parse_command_line)
                 if(ends_in_complete(args$1))return exit(0);
                if(exn[1] === Exit_called)
                 {var status=exn[2];return exit(status)}
                if(exn[1] === Failed_to_parse_command_line)
                 var msg=exn[2],exn_str=msg;
                else
                 var exn_str=caml_call2(to_string_hum,0,caml_call1(_QN_,exn));
                var verbose=caml_call2(_yn_,verbose_on_parse_error,1);
                if(verbose)
                 var
                  _ay7_=
                   [0,
                    cst_For_usage_information_run,
                    [0,
                     caml_call2
                      (_Gu_,
                       cst$270,
                       caml_call2(_Gu_,to_string$33(path$0),cst_help$6)),
                     0]],
                  _ay6_=function(line){return caml_call2(_Gu_,cst$266,line)},
                  error_msg=
                   caml_call2
                    (_Cx_,
                     _awf_,
                     [0,
                      cst_Error_parsing_command_line,
                      [0,
                       caml_call2
                        (_Cx_,
                         _awc_,
                         caml_call2(_qg_,caml_call2(_C2_,exn_str,10),_ay6_)),
                       _ay7_]]);
                else
                 var error_msg=exn_str;
                caml_call1(_GQ_,error_msg);
                return exit(1);
               case 1:
                var
                 group=t$0[1],
                 body=group[4],
                 subs=group[3],
                 readme=group[2],
                 summary=group[1],
                 _ay__=caml_obj_tag(subs),
                 _ay$_=
                  250 === _ay__
                   ?subs[1]
                   :246 === _ay__?caml_call1(CamlinternalLazy[2],subs):subs,
                 env$4=caml_call3(set$8,env$3,subs_key,_ay$_),
                 die_showing_help$0=
                  function(args,path,body,subs,readme,summary)
                   {function die_showing_help(msg)
                     {var _azq_=1 - ends_in_complete(args);
                      return _azq_
                              ?(caml_call2
                                 (_fJ_,
                                  _ayZ_,
                                  help_for_shape
                                   (shape([1,[0,summary,readme,subs,body]]),path,0,0,0)),
                                caml_call2(die(_ay0_),msg,0))
                              :_azq_}
                    return die_showing_help},
                 die_showing_help=
                  die_showing_help$0(args$0,path$0,body,subs,readme,summary);
                if(typeof args$0 === "number")
                 {if(body)
                   {var body$0=body[1];
                    return caml_call1(body$0,parts_exe_basename(path$0))}
                  return die_showing_help
                          (caml_call2(_fE_,_ay1_,to_string$33(path$0)))}
                else
                 {if(0 === args$0[0])
                   {var rest=args$0[2],sub=args$0[1];
                    if(caml_string_notequal(sub,cst_build_info$3))
                     if(caml_string_notequal(sub,cst_help$11))
                      if(caml_string_notequal(sub,cst_version$6))
                       var switch$0=1;
                      else
                       if(caml_call2(_Nr_,caml_call1(length$1,path$0),1))
                        {print_version(version);var _aze_=exit(0),switch$0=0}
                       else
                        var switch$0=1;
                     else
                      if(typeof rest === "number")
                       {caml_call1
                         (_GJ_,
                          help_for_shape
                           (shape([1,[0,group[1],group[2],subs,group[4]]]),
                            path$0,
                            0,
                            0,
                            0));
                        var _aze_=exit(0),switch$0=0}
                      else
                       if(0 === rest[0])
                        var
                         rest$1=rest[2],
                         sub$2=rest[1],
                         _aze_=[0,sub$2,[0,cst_help$12,rest$1]],
                         switch$0=0;
                       else
                        var switch$0=1;
                    else
                     if(caml_call2(_Nr_,caml_call1(length$1,path$0),1))
                      {print_build_info(build_info);var _aze_=exit(0),switch$0=0}
                     else
                      var switch$0=1;
                    if(switch$0)
                     var sub$0=sub,rest$0=rest;
                    else
                     var sub$0=_aze_[1],rest$0=_aze_[2];
                    var
                     _aza_=0,
                     _azb_=function(x){return [0,x,-481604174]},
                     _azc_=caml_obj_tag(subs),
                     _azd_=
                      250 === _azc_
                       ?subs[1]
                       :246 === _azc_?caml_call1(CamlinternalLazy[2],subs):subs,
                     match$0=
                      lookup_expand(caml_call2(_xN_[17],_azd_,_azb_),sub$0,_aza_);
                    if(0 === match$0[0])
                     {var
                       match$1=match$0[1],
                       t$1=match$1[2],
                       sub$1=match$1[1],
                       maybe_new_comp_cword$1=
                        caml_call2(_yd_,maybe_new_comp_cword$0,prev$1),
                       path$1=[0,sub$1,path$0],
                       t$0=t$1,
                       env$3=env$4,
                       path$0=path$1,
                       args$0=rest$0,
                       maybe_new_comp_cword$0=maybe_new_comp_cword$1;
                      continue}
                    var msg$0=match$0[1];
                    return die_showing_help(msg$0)}
                  var
                   part=args$0[1],
                   _azf_=function(name){return caml_call2(_CX_,name,part)},
                   _azg_=function(_azp_){return _azp_[1]},
                   _azh_=caml_obj_tag(subs),
                   _azi_=
                    250 === _azh_
                     ?subs[1]
                     :246 === _azh_?caml_call1(CamlinternalLazy[2],subs):subs,
                   subs$0=
                    caml_call2
                     (_p5_,
                      caml_call2(_pX_,caml_call2(_qg_,_azi_,_azg_),_azf_),
                      compare$28);
                  caml_call2(_ph_,subs$0,_GJ_);
                  return exit(0)}
               case 2:
                var
                 exec=t$0[1],
                 args$2=to_list$19(maybe_apply_extend(args$0,extend,path$0));
                return exec_with_args(exec,args$2,maybe_new_comp_cword$0);
               case 3:
                var
                 proxy=t$0[1],
                 _azj_=to_list$19(maybe_apply_extend(args$0,extend,path$0)),
                 args$3=caml_call2(_Oh_,proxy[3],_azj_),
                 kind=proxy[5],
                 _azk_=proxy[4],
                 _azl_=proxy[2],
                 _azm_=proxy[1];
                for(;;)
                 {switch(kind[0])
                   {case 0:var b=kind[1],_ay9_=b[2];break;
                    case 1:var g=kind[1],_ay9_=g[2];break;
                    case 2:var e=kind[1],_ay9_=e[2];break;
                    default:
                     var
                      l=kind[1],
                      _ay8_=caml_obj_tag(l),
                      kind$0=
                       250 === _ay8_
                        ?l[1]
                        :246 === _ay8_?caml_call1(CamlinternalLazy[2],l):l,
                      kind=kind$0;
                     continue}
                  var
                   _azn_=caml_call2(_yd_,_ay9_,_iD_),
                   exec$0=[0,get_summary(proxy),_azn_,_azm_,_azl_,_azk_];
                  return exec_with_args(exec$0,args$3,maybe_new_comp_cword$0)}
               default:
                var
                 thunk$0=t$0[1],
                 _azo_=caml_obj_tag(thunk$0),
                 t$2=
                  250 === _azo_
                   ?thunk$0[1]
                   :246 === _azo_
                     ?caml_call1(CamlinternalLazy[2],thunk$0)
                     :thunk$0,
                 t$0=t$2;
                continue}}
          var
           default_build_info=
            [246,function(_ay5_){return caml_call1(M[1][2],M[5][1])}],
           default_version=M[1][1];
          function run(verbose_on_parse_error,opt,build_info,_ay3_,extend,t)
           {if(opt)
             var sth=opt[1],version=sth;
            else
             var version=default_version;
            if(_ay3_)
             var sth$0=_ay3_[1],argv=sth$0;
            else
             var argv=caml_call1(to_list,caml_call1(M[3][1],0));
            if(build_info)
             var v=build_info[1],build_info$0=v;
            else
             var build_info$0=default_build_info;
            return handle_uncaught_and_exit
                    (function(param)
                      {var
                        t$0=add$17(version,build_info$0,t),
                        t$1=add_help_subcommands(t$0),
                        match=handle_environment(t$1,argv),
                        args=match[2],
                        cmd=match[1],
                        match$0=process_args(cmd,args),
                        maybe_new_comp_cword=match$0[3],
                        args$0=match$0[2],
                        path=match$0[1];
                       try
                        {var
                          _ay4_=
                           dispatch
                            (t$1,
                             empty$9,
                             extend,
                             path,
                             args$0,
                             maybe_new_comp_cword,
                             version,
                             build_info$0,
                             verbose_on_parse_error);
                         return _ay4_}
                       catch(exn)
                        {exn = caml_wrap_exception(exn);
                         if(exn[1] === Failed_to_parse_command_line)
                          {var msg=exn[2];
                           return ends_in_complete(args$0)
                                   ?exit(0)
                                   :(caml_call1(_GQ_,msg),exit(1))}
                         throw exn}})}
          function deprecated_run
           (t,cmd,args,is_help,is_help_rec,is_help_rec_flags,is_expand_dots)
           {var
             parts$0=caml_call2(_C2_,cmd,32),
             path=caml_call1(parts,parts$0),
             args$0=is_expand_dots?[0,cst_expand_dots$0,args]:args,
             args$1=is_help_rec_flags?[0,cst_flags$8,args$0]:args$0,
             args$2=is_help_rec?[0,cst_r,args$1]:args$1,
             args$3=is_help?[0,cst_help$13,args$2]:args$2,
             args$4=of_list$13(args$3),
             t$0=add_help_subcommands(t);
            return dispatch
                    (t$0,
                     empty$9,
                     0,
                     path,
                     args$4,
                     0,
                     default_version,
                     default_build_info,
                     0)}
          return [0,shape,help_for_shape,run,deprecated_run]}]];
    caml_register_global(4532,Core_kernel_Command,"Core_kernel__Command");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$524);
    caml_call1(Expect_test_collector[4][1],cst_src_core_kernel_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$525,cst$277);
    var Core_kernel_private=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$526);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel$0=
      [0,
       _as0_,
       _fu_,
       am_running_test,
       _as1_,
       _Gf_,
       _Gg_,
       _Gh_,
       _Gk_,
       _Gl_,
       _Gm_,
       _Gn_,
       _Go_,
       _Gp_,
       _Gq_,
       _Gr_,
       _Gs_,
       _Gt_,
       _Gu_,
       _Gv_,
       _Gw_,
       _Gx_,
       _Gy_,
       _Gz_,
       _GB_,
       _GC_,
       _GD_,
       _GE_,
       _GF_,
       _GG_,
       _GH_,
       _GI_,
       _GJ_,
       _GK_,
       _GL_,
       _GM_,
       _GN_,
       _GO_,
       _GP_,
       _GQ_,
       _GR_,
       _GS_,
       _GT_,
       _GU_,
       _GV_,
       _GW_,
       _GX_,
       _GY_,
       _GZ_,
       _G0_,
       _G1_,
       _G2_,
       _G3_,
       _G4_,
       _G5_,
       _G6_,
       _G7_,
       _G8_,
       _G9_,
       _G__,
       _G$_,
       _Ha_,
       _Hb_,
       _Hc_,
       _Hd_,
       _He_,
       _Hf_,
       _Hg_,
       _Hh_,
       _Hi_,
       _Hj_,
       _Hk_,
       _Hl_,
       _Hm_,
       _Hn_,
       _Ho_,
       _Hp_,
       _Hq_,
       _Hr_,
       _Hs_,
       _Ht_,
       _Hu_,
       _Hv_,
       _Hw_,
       _Hx_,
       _Hy_,
       _Hz_,
       _HA_,
       _Np_,
       _Nq_,
       _Nr_,
       _Ns_,
       _Nt_,
       _Nu_,
       _Nv_,
       _Nw_,
       _Nx_,
       _Ny_,
       _Nz_,
       _NA_,
       _NB_,
       _NC_,
       _ND_,
       _NE_,
       _NF_,
       _NG_,
       _NH_,
       _NI_,
       _NJ_,
       _NK_,
       _NL_,
       _NM_,
       _NN_,
       _NO_,
       _NP_,
       _NQ_,
       _NR_,
       _NS_,
       _NT_,
       _NU_,
       _NV_,
       _NW_,
       _NX_,
       _NY_,
       _NZ_,
       _N0_,
       _N1_,
       _N2_,
       _N3_,
       _N4_,
       _N5_,
       symbol,
       _N6_,
       _N7_,
       _N8_,
       _N9_,
       _N__,
       _N$_,
       _Oa_,
       _Ob_,
       _Oc_,
       _Od_,
       _Oe_,
       _Of_,
       _Og_,
       _Oh_,
       _Mj_,
       never_returns,
       _Oi_,
       _Oj_,
       _Ok_,
       _Ol_,
       _Om_,
       _On_,
       _Oo_,
       _Op_,
       _Oq_,
       _Or_,
       _Os_,
       _Ot_,
       _Ou_,
       _Ov_,
       _Ow_,
       _Ox_,
       _Oy_,
       _Oz_,
       _OA_,
       _OB_,
       _OC_,
       _OD_,
       _OE_,
       _OF_,
       _OG_,
       _OH_,
       _OI_,
       _OJ_,
       _OK_,
       _OL_,
       _OM_,
       _ON_,
       _OO_,
       _OP_,
       _OQ_,
       _OR_,
       _OS_,
       _OT_,
       _OU_,
       _OV_,
       _OW_,
       _OX_,
       _OY_,
       _OZ_,
       _O0_,
       _O1_,
       _O2_,
       _O3_,
       _O4_,
       _O5_,
       _O6_,
       _O7_,
       _O8_,
       _O9_,
       _O__,
       _O$_,
       _Pa_,
       _Pb_,
       Bug,
       C_malloc_exn,
       _Pf_,
       fst3,
       snd3,
       trd3,
       uw,
       symbol$60,
       symbol$59,
       symbol$62,
       symbol$129,
       _fF_,
       _iD_,
       _fJ_,
       _ua_,
       _ub_,
       _Pg_,
       failwithp,
       failwiths,
       force,
       _fK_,
       ident,
       _Ph_,
       _fD_,
       _yi_,
       _yj_,
       _fG_,
       _t9_,
       _Pi_,
       phys_same,
       _Pj_,
       _Pk_,
       _fM_,
       _Pl_,
       _Pm_,
       _on_,
       _I3_,
       _Pn_,
       _fE_,
       _Po_,
       _Pp_,
       _Pq_,
       _Pr_,
       _Ps_,
       _Pt_,
       _Pu_,
       _Pv_,
       _Pw_,
       _Px_,
       _Py_,
       _Pz_,
       _PA_,
       _PB_,
       _PC_,
       _PD_,
       _PE_,
       _PF_,
       _PG_,
       _PH_,
       bin_shape_array,
       bin_size_array,
       bin_write_array,
       bin_writer_array,
       bin_read_array$0,
       bin_read_array,
       bin_reader_array,
       bin_array,
       _lf_,
       equal$0,
       _lg_,
       _lh_,
       typerep_of_array,
       _PO_,
       bin_shape_bool,
       _Be_,
       _Bf_,
       bin_writer_bool,
       _Bg_,
       _Bh_,
       bin_reader_bool,
       bin_bool,
       _BF_,
       _BG_,
       _BS_,
       hash_bool,
       _BP_,
       _BQ_,
       typerep_of_bool,
       typename_of_bool,
       bin_shape_char,
       _E$_,
       _Fa_,
       bin_writer_char,
       _Fb_,
       _Fc_,
       bin_reader_char,
       bin_char,
       _FR_,
       _FS_,
       _F4_,
       hash_char,
       _F1_,
       _F2_,
       typerep_of_char,
       typename_of_char,
       bin_shape_float,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_float,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_float,
       bin_float,
       compare$30,
       equal$18,
       hash_fold_t$15,
       hash_float,
       sexp_of_t$42,
       _IA_,
       typerep_of_float,
       typename_of_float,
       bin_shape_int,
       bin_size_t$44,
       bin_write_t$44,
       bin_writer_int,
       bin_read_t$90,
       bin_read_t$91,
       bin_reader_int,
       bin_int,
       compare$32,
       equal$19,
       hash_fold_t$16,
       hash_int,
       sexp_of_t$44,
       t_of_sexp$35,
       typerep_of_int,
       typename_of_int,
       bin_shape_int32,
       bin_size_t$45,
       bin_write_t$45,
       bin_writer_int32,
       bin_read_t$92,
       bin_read_t$93,
       bin_reader_int32,
       bin_int32,
       compare$34,
       equal$20,
       hash_fold_t$18,
       hash_int32,
       sexp_of_t$46,
       t_of_sexp$37,
       typerep_of_int32,
       typename_of_int32,
       bin_shape_int64,
       bin_size_t$46,
       bin_write_t$46,
       bin_writer_int64,
       bin_read_t$94,
       bin_read_t$95,
       bin_reader_int64,
       bin_int64,
       compare$36,
       equal$21,
       hash_fold_t$20,
       hash_int64,
       sexp_of_t$48,
       t_of_sexp$39,
       typerep_of_int64,
       typename_of_int64,
       bin_shape_lazy_t,
       bin_size_lazy_t,
       bin_write_lazy_t,
       bin_writer_lazy_t,
       bin_read_lazy_t$0,
       bin_read_lazy_t,
       bin_reader_lazy_t,
       bin_lazy_t,
       _Lu_,
       _Lv_,
       _Lx_,
       _Lw_,
       typerep_of_lazy_t,
       _Qb_,
       bin_shape_list,
       bin_size_list,
       bin_write_list,
       bin_writer_list,
       bin_read_list$0,
       bin_read_list,
       bin_reader_list,
       bin_list,
       compare_sexp_list,
       _rk_,
       hash_fold_sexp_list,
       _pf_,
       _pe_,
       typerep_of_list,
       _Qi_,
       bin_shape_nativeint,
       bin_size_t$53,
       bin_write_t$53,
       bin_writer_nativeint,
       bin_read_t$108,
       bin_read_t$109,
       bin_reader_nativeint,
       bin_nativeint,
       compare$44,
       equal$24,
       hash_fold_t$25,
       hash_nativeint,
       sexp_of_t$55,
       t_of_sexp$46,
       typerep_of_nativeint,
       typename_of_nativeint,
       bin_shape_option,
       bin_size_option,
       bin_write_option,
       bin_writer_option,
       bin_read_option$0,
       bin_read_option,
       bin_reader_option,
       bin_option,
       _xO_,
       _x9_,
       _xP_,
       _xR_,
       _xQ_,
       typerep_of_option,
       _Qs_,
       bin_shape_string,
       bin_size_t$42,
       bin_write_t$42,
       bin_writer_string,
       bin_read_t$86,
       bin_read_t$87,
       bin_reader_string,
       bin_string,
       compare$28,
       equal$17,
       hash_fold_t$13,
       hash_string,
       sexp_of_t$40,
       t_of_sexp$32,
       typerep_of_string,
       typename_of_string,
       bin_shape_bytes,
       bin_size_t$0,
       bin_write_t$0,
       bin_writer_bytes,
       bin_read_t$1,
       bin_read_t$2,
       bin_reader_bytes,
       bin_bytes,
       _Er_,
       _Eq_,
       _Ee_,
       _Ed_,
       typerep_of_bytes,
       typename_of_bytes,
       bin_shape_ref,
       bin_size_ref,
       bin_write_ref,
       bin_writer_ref,
       bin_read_ref$0,
       bin_read_ref,
       bin_reader_ref,
       bin_ref,
       _M5_,
       _M6_,
       _M8_,
       _M7_,
       typerep_of_ref,
       _QF_,
       bin_shape_unit,
       bin_size_t$51,
       bin_write_t$51,
       bin_writer_unit,
       bin_read_t$104,
       bin_read_t$105,
       bin_reader_unit,
       bin_unit,
       compare$42,
       equal$23,
       hash_fold_t$24,
       hash_unit,
       sexp_of_t$53,
       t_of_sexp$44,
       typerep_of_unit,
       typename_of_unit,
       bin_shape_float_array,
       bin_size_float_array,
       bin_write_float_array,
       bin_writer_float_array,
       bin_read_float_array$0,
       bin_read_float_array,
       bin_reader_float_array,
       bin_float_array,
       compare_float_array,
       sexp_of_float_array,
       float_array_of_sexp,
       typerep_of_float_array,
       typename_of_float_array,
       _QN_,
       bin_shape_sexp_array,
       bin_size_sexp_array,
       bin_write_sexp_array,
       bin_writer_sexp_array,
       bin_read_sexp_array,
       bin_read_sexp_array$0,
       bin_reader_sexp_array,
       bin_sexp_array,
       _lf_,
       Typename_of_sexp_array,
       _QU_,
       typerep_of_sexp_array,
       bin_shape_sexp_bool,
       _Be_,
       _Bf_,
       bin_writer_sexp_bool,
       _Bh_,
       _Bg_,
       bin_reader_sexp_bool,
       bin_sexp_bool,
       _BF_,
       _BS_,
       hash_sexp_bool,
       Typename_of_sexp_bool,
       typename_of_sexp_bool,
       typerep_of_sexp_bool,
       bin_shape_sexp_list,
       bin_size_sexp_list,
       bin_write_sexp_list,
       bin_writer_sexp_list,
       bin_read_sexp_list,
       bin_read_sexp_list$0,
       bin_reader_sexp_list,
       bin_sexp_list,
       compare_sexp_list,
       hash_fold_sexp_list,
       Typename_of_sexp_list,
       _Q4_,
       typerep_of_sexp_list,
       bin_shape_sexp_option,
       bin_size_sexp_option,
       bin_write_sexp_option,
       bin_writer_sexp_option,
       bin_read_sexp_option,
       bin_read_sexp_option$0,
       bin_reader_sexp_option,
       bin_sexp_option,
       _xO_,
       _xP_,
       Typename_of_sexp_option,
       _Q$_,
       typerep_of_sexp_option,
       bin_shape_sexp_opaque$0,
       bin_size_sexp_opaque$0,
       bin_write_sexp_opaque$0,
       bin_writer_sexp_opaque$0,
       bin_read_sexp_opaque$1,
       bin_read_sexp_opaque$2,
       bin_reader_sexp_opaque$0,
       bin_sexp_opaque$0,
       compare_sexp_opaque$0,
       hash_fold_sexp_opaque$0,
       Typename_of_sexp_opaque$0,
       typename_of_sexp_opaque$0,
       typerep_of_sexp_opaque$0,
       _as2_,
       _as3_,
       Core_kernel_private];
    caml_register_global(4533,Core_kernel$0,"Core_kernel");
    return}
  (function(){return this}()));

//# sourceMappingURL=data:application/json;base64,
